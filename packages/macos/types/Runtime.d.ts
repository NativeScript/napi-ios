/// <reference types="@nativescript/objc-node-api" />

declare const PE_arm_debug_panic_hook: (p1: string) => void;

declare const kPEOptionKey: number;

declare const kPEScaleFactor2x: number;

declare const kPEScaleFactorUnknown: number;

declare const kDebugTypeNone: number;

declare const kPERawInput: number;

declare const kPEReadTOD: number;

declare const debug_cpu_performance_degradation_factor: number;

declare const PE_kputc: (p1: number) => void;

declare const gPESerialBaud: number;

declare const disable_serial_output: boolean;

declare const kPEShiftKey: number;

declare const kPECommandKey: number;

declare const gPlatformECID: unknown /* const array */;

declare const UNW_LOONGARCH_R0: number;

declare const UNW_AARCH64_V31: number;

declare const XPC_ACTIVITY_INTERVAL_1_DAY: number;

declare const UNW_MIPS_R26: number;

declare const UNW_PPC64_VS54: number;

declare const kAUSysctlErr: number;

declare const _xpc_error_connection_interrupted: _xpc_dictionary_s;

declare const kDNSServiceErr_Incompatible: number;

declare const UNW_LOONGARCH_F23: number;

declare const UNW_PPC_R9: number;

declare const UNW_MIPS_F19: number;

declare const kHFSUnusedNodeFixMask: number;

declare const UNW_ARM64_D1: number;

declare const kDNSServiceFlagsBrowseDomains: number;

declare const TYPE_REGEXP: interop.Pointer;

declare const MTF_SOOPTS: number;

declare const __fpcr_trap_divbyzero: number;

declare const UNW_X86_64_R13: number;

declare const UNW_RISCV_F19: number;

declare const UNW_ARM64_D29: number;

declare const rl_completer_word_break_characters: string;

declare const UNW_PPC64_VS53: number;

declare const gss_nt_user_name: interop.Pointer;

declare const UNW_VE_VM13: number;

declare const UNWIND_X86_MODE_STACK_IND: number;

declare const UNW_VE_VM4: number;

declare const UNW_PPC64_R27: number;

declare const UNW_LOONGARCH_F12: number;

declare const UNW_MIPS_HI: number;

declare const UNW_ARM_D23: number;

declare const vm_page_shift: number;

declare const kHFSPlusAttrExtents: number;

declare const UNW_ARM_S18: number;

declare const main_device_port: number;

declare const kDNSServiceType_SVCB: number;

declare const UNW_RISCV_X13: number;

declare const UNW_VE_V62: number;

declare const kDNSServiceType_A6: number;

declare const UNW_RISCV_F12: number;

declare const UNW_ARM_D10: number;

declare const DYLD_CHAINED_PTR_ARM64E: number;

declare const kDNSServiceFlagsIncludeP2P: number;

declare const sys_nerr: number;

declare const UNWIND_ARM_MODE_FRAME_D: number;

declare const UNW_PPC64_LR: number;

declare const _xpc_error_peer_code_signing_requirement: _xpc_dictionary_s;

declare const kHFSVolumeHardwareLockMask: number;

declare const matrix_identity_double4x4: simd_double4x4;

declare const matrix_identity_double2x2: simd_double2x2;

declare const matrix_identity_half2x2: simd_half2x2;

declare const COLOR_PAIRS: number;

declare const UNW_ARM64_D7: number;

declare const UNW_VE_V31: number;

declare const UNW_SPARC_L7: number;

declare const kHFSAttributesFileID: number;

declare const UTEXT_MAGIC: number;

declare const matrix_identity_half3x3: simd_half3x3;

declare const UNW_PPC_F24: number;

declare const UNW_HEXAGON_R1: number;

declare const UNW_EINVALIDIP: number;

declare const UNW_AARCH64_V0: number;

declare const kDNSServiceErr_Transient: number;

declare const UNW_PPC_V24: number;

declare const __fpcr_trap_underflow: number;

declare const dot3ChipSetWesternDigital83C690: number;

declare const UNW_AARCH64_X24: number;

declare const UNW_RISCV_F11: number;

declare const UNWIND_X86_64_REG_R15: number;

declare const kDNSServiceType_CERT: number;

declare const kDNSServiceType_SINK: number;

declare const UNW_X86_EAX: number;

declare const kDNSServiceType_NSEC3PARAM: number;

declare const UNW_PPC_AP: number;

declare const emacs_ctlx_keymap: unknown /* const array */;

declare const kDNSServiceFlagsValidate: number;

declare const UNW_PPC64_VS16: number;

declare const UNW_PPC_F16: number;

declare const kDNSServiceType_OPT: number;

declare const OBJC_WAIT_UNTIL_DONE: number;

declare const UNW_VE_S53: number;

declare const UNW_X86_64_RSI: number;

declare const UNW_PPC_V21: number;

declare const UNW_PPC64_F31: number;

declare const tclTomMathStubsPtr: interop.Pointer;

declare const UNW_HEXAGON_R9: number;

declare const UNW_RISCV_F2: number;

declare const UNW_ARM_S24: number;

declare const _xpc_error_connection_invalid: _xpc_dictionary_s;

declare const UNW_X86_64_RSP: number;

declare const kHFSPlusCatalogKeyMinimumLength: number;

declare const UNW_VE_VM11: number;

declare const UNW_ARM_S3: number;

declare const UNW_PPC64_R26: number;

declare const UNW_SPARC_I3: number;

declare const matrix_identity_float4x4: simd_float4x4;

declare const in6addr_linklocal_allv2routers: in6_addr;

declare const gss_nt_exported_name: interop.Pointer;

declare const UNW_PPC_R25: number;

declare const UNW_VE_V46: number;

declare const UNW_MIPS_R11: number;

declare const UNW_RISCV_X16: number;

declare const kDNSServiceErr_DoubleNAT: number;

declare const gPlatformMemoryID: number;

declare const UNW_RISCV_X4: number;

declare const history_base: number;

declare const timezone: number;

declare const UNW_VE_S14: number;

declare const UNW_VE_S56: number;

declare const UNW_PPC64_V28: number;

declare const _US_FORCE_UNWIND: number;

declare const UNWIND_ARM64_MODE_FRAMELESS: number;

declare const UNW_RISCV_F7: number;

declare const UNW_VE_S44: number;

declare const UNW_AARCH64_X11: number;

declare const UNW_ENOINFO: number;

declare const UNW_PPC64_VS30: number;

declare const UNW_X86_64_XMM15: number;

declare const kDNSServiceFlagsPrivateTwo: number;

declare const TYPE_ALNUM: interop.Pointer;

declare const kDNSServiceFlagsQueueRequest: number;

declare const kHFSFastDevPinnedBit: number;

declare const UNW_AARCH64_V24: number;

declare const UNW_PPC_F1: number;

declare const UNW_PPC64_XER: number;

declare const UNW_ARM_WR11: number;

declare const DYLD_CHAINED_PTR_64_OFFSET: number;

declare const UNW_VE_VM9: number;

declare const XPC_ACTIVITY_GRACE_PERIOD: string;

declare const UNW_VE_S36: number;

declare const UNW_MIPS_R0: number;

declare const UNW_PPC_R31: number;

declare const UNW_PPC_V18: number;

declare const dot3ChipSetAMD79900: number;

declare const kDNSServiceErr_NATTraversal: number;

declare const UNW_RISCV_X7: number;

declare const UNW_RISCV_F10: number;

declare const UNW_PPC64_TFIAR: number;

declare const UNW_LOONGARCH_R6: number;

declare const _xpc_type_data: _xpc_type_s;

declare const UNW_ARM64_X26: number;

declare const COLS: number;

declare const rl_terminal_name: string;

declare const UNW_PPC64_V23: number;

declare const UNW_VE_V54: number;

declare const UNW_S390X_R7: number;

declare const UNW_LOONGARCH_F27: number;

declare const sqlite3_temp_directory: string;

declare const UNW_VE_V61: number;

declare const OBJC_GENERATIONAL_COLLECTION: number;

declare const UNW_ARM_R11: number;

declare const UNW_PPC64_VS3: number;

declare const UNW_VE_VM8: number;

declare const kHFSThreadExistsMask: number;

declare const UNW_LOONGARCH_R16: number;

declare const dot3ChipSetNational8390: number;

declare const UNW_OR1K_R31: number;

declare const UNW_AARCH64_X17: number;

declare const UNW_VE_V35: number;

declare const UNW_LOONGARCH_R8: number;

declare const UNW_AARCH64_V27: number;

declare const UNW_VE_V30: number;

declare const UNW_MIPS_F2: number;

declare const UNW_ARM_D29: number;

declare const UNW_ARM_R5: number;

declare const kDNSServiceErr_BadParam: number;

declare const UNW_HEXAGON_R28: number;

declare const UNW_LOONGARCH_F15: number;

declare const OBJC_SYNC_SUCCESS: number;

declare const opterr: number;

declare const UNW_PPC64_CR4: number;

declare const DYLD_CHAINED_PTR_32_FIRMWARE: number;

declare const UNW_PPC64_F10: number;

declare const UNW_PPC64_VS2: number;

declare const gPEClockFrequencyInfo: clock_frequency_info_t;

declare const UNW_HEXAGON_R21: number;

declare const UNW_PPC_V9: number;

declare const UNW_PPC_V7: number;

declare const sys_errlist: interop.Pointer;

declare const kDNSServiceType_TKEY: number;

declare const UNW_RISCV_X18: number;

declare const kBTHeaderNode: number;

declare const kBTMapNode: number;

declare const GSS_C_NT_HOSTBASED_SERVICE: interop.Pointer;

declare const UNW_PPC64_VS4: number;

declare const dot3ChipSetIntel82586: number;

declare const UNW_PPC64_F24: number;

declare const UNW_RISCV_F25: number;

declare const kDNSServiceType_NXT: number;

declare const UNW_PPC64_R5: number;

declare const kHFSHasLinkChainBit: number;

declare const UNW_ARM_S10: number;

declare const UNW_VE_S40: number;

declare const __fpsr_saturation: number;

declare const UNW_RISCV_F15: number;

declare const UNW_VE_V16: number;

declare const UNW_HEXAGON_R14: number;

declare const OBJC_FULL_COLLECTION: number;

declare const betaStage: number;

declare const UNWIND_ARM_FRAME_STACK_ADJUST_MASK: number;

declare const UNW_PPC64_VS41: number;

declare const kDNSServiceType_MG: number;

declare const kDNSServiceType_UID: number;

declare const UIDNA_ERROR_CONTEXTJ: number;

declare const kHFSVolumeSoftwareLockBit: number;

declare const _xpc_type_session: _xpc_type_s;

declare const UNW_ARM_S8: number;

declare const kDNSServiceType_TXT: number;

declare const __stderrp: interop.Pointer;

declare const UNW_PPC64_VS43: number;

declare const _xpc_type_uint64: _xpc_type_s;

declare const sqlite3_version: interop.Pointer;

declare const UNW_RISCV_X24: number;

declare const dot3ChipSetDigitalDC21140: number;

declare const UTEXT_PROVIDER_HAS_META_DATA: number;

declare const UNWIND_X86_64_MODE_DWARF: number;

declare const kHFSExtentDensity: number;

declare const UNW_SPARC_L1: number;

declare const XPC_ACTIVITY_STATE_RUN: number;

declare const UNW_ARM64_D9: number;

declare const UNW_LOONGARCH_F8: number;

declare const UNW_ARM64_D13: number;

declare const UNW_ARM_S1: number;

declare const kDNSServiceType_IPSECKEY: number;

declare const UNW_VE_V32: number;

declare const __fpcr_trap_overflow: number;

declare const UNW_PPC_SPEFSCR: number;

declare const UNW_PPC64_VS62: number;

declare const UNW_MIPS_F7: number;

declare const kDNSServiceFlagsValidateOptional: number;

declare const acs_map: interop.Pointer;

declare const UNW_ARM64_D16: number;

declare const UNW_PPC64_R16: number;

declare const UNW_RISCV_X21: number;

declare const UNW_ARM_D14: number;

declare const UNW_PPC_F3: number;

declare const UNW_ARM_S28: number;

declare const UNW_PPC64_F29: number;

declare const UNW_AARCH64_X29: number;

declare const UNW_AARCH64_V2: number;

declare const _xpc_type_uuid: _xpc_type_s;

declare const UNW_X86_ECX: number;

declare const UIDNA_ERROR_DISALLOWED: number;

declare const UNW_VE_V60: number;

declare const UNW_LOONGARCH_F26: number;

declare const UNW_VE_VL: number;

declare const UNW_LOONGARCH_R5: number;

declare const kDNSServiceFlagsMoreComing: number;

declare const _dispatch_data_empty: dispatch_data_s;

declare const italic: number;

declare const kDNSServiceFlagsAllowRemoteQuery: number;

declare const UNW_ARM_S15: number;

declare const UNW_ARM_R15: number;

declare const kPEWaitForInput: number;

declare const kDNSServiceType_MINFO: number;

declare const UNW_MIPS_R1: number;

declare const UNW_PPC_V1: number;

declare const kHFSBootVolumeInconsistentBit: number;

declare const UNW_PPC64_F18: number;

declare const kDNSServiceClass_IN: number;

declare const UNW_VE_S2: number;

declare const UNW_VE_S45: number;

declare const DYLD_CHAINED_PTR_ARM64E_KERNEL: number;

declare const _dispatch_source_type_data_add: dispatch_source_type_s;

declare const UNW_AARCH64_X27: number;

declare const kDNSServiceProtocol_IPv6: number;

declare const UNW_PPC64_F12: number;

declare const ESCDELAY: number;

declare const UNWIND_X86_REG_EBP: number;

declare const UNW_PPC64_V27: number;

declare const UIDNA_ERROR_CONTEXTO_DIGITS: number;

declare const kDNSServiceType_EID: number;

declare const UNW_REG_IP: number;

declare const kHFSUnusedNodesFixDate: number;

declare const UNW_PPC_R8: number;

declare const UNW_LOONGARCH_F28: number;

declare const averunnable: loadavg;

declare const UNW_PPC_V16: number;

declare const UNW_LOONGARCH_R28: number;

declare const UNW_S390X_F11: number;

declare const XPC_ACTIVITY_PREVENT_DEVICE_SLEEP: string;

declare const UNW_PPC64_F13: number;

declare const UNW_AARCH64_V18: number;

declare const in6addr_linklocal_allrouters: in6_addr;

declare const kAUWriteCallerTokErr: number;

declare const kDNSServiceErr_PolicyDenied: number;

declare const UNW_S390X_R11: number;

declare const UNW_ARM_S27: number;

declare const UNW_SPARC_G7: number;

declare const UNW_ARM_D6: number;

declare const UNW_RISCV_X14: number;

declare const UTEXT_PROVIDER_WRITABLE: number;

declare const UNW_VE_S4: number;

declare const UNW_VE_S33: number;

declare const GSS_C_NT_MACHINE_UID_NAME: interop.Pointer;

declare const UNW_PPC_V3: number;

declare const kDNSServiceType_A: number;

declare const kHFSHasSecurityBit: number;

declare const _os_activity_current: os_activity_s;

declare const SOCKINFO_NDRV: number;

declare const UNWIND_ARM64_MODE_MASK: number;

declare const UNW_PPC64_F5: number;

declare const XPC_ACTIVITY_STATE_DONE: number;

declare const UNWIND_IS_NOT_FUNCTION_START: number;

declare const KRB5_C_RANDSOURCE_OSRAND: number;

declare const UNW_MIPS_R30: number;

declare const __stdoutp: interop.Pointer;

declare const kDNSServiceType_MAILB: number;

declare const UNW_HEXAGON_R29: number;

declare const kHFSPlusFileThreadRecord: number;

declare const UNW_ARM64_X6: number;

declare const kSymLinkFileType: number;

declare const UNW_PPC64_VS35: number;

declare const developStage: number;

declare const XPC_ACTIVITY_INTERVAL_1_HOUR: number;

declare const _xpc_type_activity: _xpc_type_s;

declare const rl_deprep_term_function: () => void;

declare const UNW_PPC_V22: number;

declare const UNW_MIPS_F28: number;

declare const UNW_VE_V48: number;

declare const kHFSJMountVersion: number;

declare const rl_prompt: string;

declare const kDNSServiceFlagsAdd: number;

declare const UNW_PPC_V2: number;

declare const kDNSServiceType_MX: number;

declare const UNW_VE_VM1: number;

declare const UNW_HEXAGON_R25: number;

declare const UNW_PPC64_CTR: number;

declare const UNW_ARM_D28: number;

declare const UNW_ARM_WR0: number;

declare const UNW_PPC64_VS21: number;

declare const kDNSServiceType_SOA: number;

declare const UNW_PPC_V20: number;

declare const UNW_X86_64_XMM9: number;

declare const kDNSServiceType_DNSKEY: number;

declare const UNW_VE_S26: number;

declare const UNW_AARCH64_X10: number;

declare const kHFSPlusAttrInlineData: number;

declare const kDNSServiceType_ISDN: number;

declare const UNW_SPARC_G1: number;

declare const kDNSServiceProtocol_IPv4: number;

declare const UIDNA_DEFAULT: number;

declare const UNW_ARM_D11: number;

declare const UNW_VE_V29: number;

declare const UNW_PPC64_V3: number;

declare const UNW_VE_VM2: number;

declare const HV_MEMORY_READ: number;

declare const UIDNA_ERROR_LEADING_COMBINING_MARK: number;

declare const kDNSServiceFlagsExpiredAnswer: number;

declare const _US_ACTION_MASK: number;

declare const _mh_bundle_header: mach_header_64;

declare const UNW_PPC64_CR6: number;

declare const rl_readline_name: string;

declare const UNW_X86_64_RAX: number;

declare const _dispatch_source_type_timer: dispatch_source_type_s;

declare const UNW_ARM_D16: number;

declare const UTEXT_PROVIDER_OWNS_TEXT: number;

declare const UNW_ARM64_D5: number;

declare const UNW_VE_V0: number;

declare const OBJC_RATIO_COLLECTION: number;

declare const DYLD_CHAINED_IMPORT_ADDEND: number;

declare const kHFSUnusedNodeFixBit: number;

declare const UNW_AARCH64_V25: number;

declare const UNW_PPC_V14: number;

declare const UNW_LOONGARCH_R7: number;

declare const UNW_AARCH64_X15: number;

declare const kHFSFileThreadRecord: number;

declare const UIDNA_CHECK_BIDI: number;

declare const UNW_VE_V58: number;

declare const UNW_MIPS_F18: number;

declare const UNW_ARM64_X19: number;

declare const UNW_S390X_F4: number;

declare const kBTVariableIndexKeysMask: number;

declare const UNW_ARM_RA_AUTH_CODE: number;

declare const UNW_OR1K_R9: number;

declare const kHFSVolumeJournaledMask: number;

declare const UNW_RISCV_X5: number;

declare const UNW_X86_EBX: number;

declare const dot3ChipSetIntel82596: number;

declare const UNW_AARCH64_V6: number;

declare const UNW_VE_V42: number;

declare const UNW_ARM64_X30: number;

declare const kDNSServiceType_AFSDB: number;

declare const HV_BAD_ARGUMENT: number;

declare const kcdata_invalid_iter: kcdata_iter;

declare const UNW_HEXAGON_R18: number;

declare const UNW_HEXAGON_R15: number;

declare const UNW_ARM64_D20: number;

declare const kAUWriteSubjectTokErr: number;

declare const matrix_identity_half4x4: simd_half4x4;

declare const UNW_ARM64_X8: number;

declare const UNW_PPC64_F30: number;

declare const dot3ChipSetWesternDigital83C790: number;

declare const kHFSAllocationFileID: number;

declare const UNW_X86_64_XMM12: number;

declare const UNW_AARCH64_V12: number;

declare const UNW_MIPS_F25: number;

declare const UNW_ARM64_X4: number;

declare const UNWIND_X86_REG_NONE: number;

declare const kDNSServiceType_DS: number;

declare const UNW_ARM_R12: number;

declare const UNWIND_ARM_FRAME_SECOND_PUSH_R10: number;

declare const UNW_LOONGARCH_F21: number;

declare const UNW_S390X_F1: number;

declare const UNW_S390X_R9: number;

declare const UNW_ARM64_D10: number;

declare const TYPE_NUMERIC: interop.Pointer;

declare const UNW_MIPS_R28: number;

declare const UNW_LOONGARCH_R18: number;

declare const kHFSPlusMaxFileNameChars: number;

declare const UNW_S390X_F13: number;

declare const UNW_RISCV_F13: number;

declare const _os_log_default: os_log_s;

declare const UNW_ARM_R4: number;

declare const UNW_ARM64_D21: number;

declare const UNW_HEXAGON_P3_0: number;

declare const kHFSThreadExistsBit: number;

declare const _xpc_type_dictionary: _xpc_type_s;

declare const DYLD_CHAINED_PTR_ARM64E_SEGMENTED: number;

declare const UNW_AARCH64_X16: number;

declare const kHFSRootFolderID: number;

declare const UNW_PPC_F28: number;

declare const UNW_RISCV_F3: number;

declare const kHFSHasChildLinkMask: number;

declare const kHFSBadBlockFileID: number;

declare const UNWIND_X86_64_RBP_FRAME_OFFSET: number;

declare const gss_mech_set_krb5_both: interop.Pointer;

declare const UNW_ARM_D7: number;

declare const UNW_PPC64_VS12: number;

declare const UNW_HEXAGON_R5: number;

declare const LINES: number;

declare const UNW_HEXAGON_R27: number;

declare const ber_sockbuf_io_tcp: sockbuf_io;

declare const UNW_MIPS_F27: number;

declare const kHFSVolumeNoCacheRequiredMask: number;

declare const XPC_ACTIVITY_REQUIRE_BATTERY_LEVEL: string;

declare const dot3ChipSetDigitalDC21040: number;

declare const kHFSContentProtectionMask: number;

declare const DYLD_CHAINED_PTR_START_MULTI: number;

declare const extend: number;

declare const UNW_PPC64_R19: number;

declare const UNW_HEXAGON_R17: number;

declare const UNW_PPC_R30: number;

declare const gss_mech_krb5: interop.Pointer;

declare const MTF_IFADDR: number;

declare const dot3ChipSetDigitalDC21041: number;

declare const kDNSServiceErr_BadKey: number;

declare const UNW_PPC64_R8: number;

declare const kDNSServiceType_LOC: number;

declare const kDNSServiceErr_BadInterfaceIndex: number;

declare const UNWIND_ARM_MODE_MASK: number;

declare const OSUnknownByteOrder: number;

declare const rl_completion_type: number;

declare const __mb_cur_max: number;

declare const UNW_MIPS_F6: number;

declare const UNW_OR1K_R18: number;

declare const UNW_PPC64_V5: number;

declare const UNW_LOONGARCH_F22: number;

declare const kHFSCatalogKeyMinimumLength: number;

declare const UNW_PPC64_VS29: number;

declare const UNW_PPC64_VS47: number;

declare const UNW_ARM_WR5: number;

declare const UNW_S390X_F5: number;

declare const UNW_OR1K_R23: number;

declare const kDNSServiceFlagsReturnIntermediates: number;

declare const KRB5_C_RANDSOURCE_EXTERNAL_PROTOCOL: number;

declare const UNW_PPC64_V30: number;

declare const UNW_MIPS_R16: number;

declare const MTF_HTABLE: number;

declare const UNW_ARM64_X17: number;

declare const kDNSServiceErr_NotPermitted: number;

declare const UNW_VE_S61: number;

declare const kPEScaleFactor1x: number;

declare const kDNSServiceType_ANY: number;

declare const UNW_LOONGARCH_R20: number;

declare const _xpc_type_double: _xpc_type_s;

declare const UNW_HEXAGON_PC: number;

declare const kDNSServiceType_KX: number;

declare const DYLD_CHAINED_PTR_32: number;

declare const kDNSServiceAttributeAAAAFallback: DNSServiceAttribute_s;

declare const optopt: number;

declare const kJIJournalInFSMask: number;

declare const UNW_PPC64_V18: number;

declare const UNW_ARM_WC2: number;

declare const UNW_LOONGARCH_F24: number;

declare const UNW_S390X_F6: number;

declare const UNW_PPC64_VS51: number;

declare const kAUMakeTextTokErr: number;

declare const UNW_ARM64_X29: number;

declare const UNW_VE_V24: number;

declare const UNW_PPC64_V8: number;

declare const gss_nt_string_uid_name: interop.Pointer;

declare const kDNSServiceFlagsSuppressUnusable: number;

declare const UNW_PPC64_VS39: number;

declare const gss_nt_machine_uid_name: interop.Pointer;

declare const UNW_ARM64_D12: number;

declare const UNW_PPC64_VS10: number;

declare const UNW_PPC64_F6: number;

declare const UNW_ECROSSRASIGNING: number;

declare const UNW_PPC_V11: number;

declare const rl_startup_hook: (p1: string, p2: number) => number;

declare const UNW_RISCV_X2: number;

declare const UNW_AARCH64_V5: number;

declare const UNWIND_X86_64_REG_R12: number;

declare const UNW_VE_S55: number;

declare const UNWIND_ARM_FRAME_SECOND_PUSH_R12: number;

declare const UNW_MIPS_R18: number;

declare const UNW_PPC64_V10: number;

declare const UNW_ARM_D20: number;

declare const UNW_VE_S20: number;

declare const UNW_PPC64_VS38: number;

declare const underline: number;

declare const UNW_HEXAGON_R10: number;

declare const UNW_PPC_R1: number;

declare const bold: number;

declare const UNW_LOONGARCH_R30: number;

declare const XPC_ACTIVITY_INTERVAL: string;

declare const SOCKINFO_UN: number;

declare const UNW_VE_S38: number;

declare const UNW_VE_V9: number;

declare const stdscr: interop.Pointer;

declare const kHFSFileLockedBit: number;

declare const UNW_SPARC_G3: number;

declare const UNW_PPC64_V6: number;

declare const UNW_PPC_F22: number;

declare const UNW_RISCV_X12: number;

declare const UNW_LOONGARCH_F7: number;

declare const UNW_OR1K_R17: number;

declare const XPC_ACTIVITY_PRIORITY_MAINTENANCE: string;

declare const UNW_ARM_D19: number;

declare const UNW_MIPS_R19: number;

declare const UNW_S390X_PSWA: number;

declare const UNW_ARM_WC1: number;

declare const UNW_PPC64_F28: number;

declare const _c_locale: interop.Pointer;

declare const kHFSVolumeUnmountedBit: number;

declare const OBJC_COLLECT_IF_NEEDED: number;

declare const UNW_ARM_SP: number;

declare const UNW_MIPS_F30: number;

declare const kDNSServiceFlagsRegistrationDomains: number;

declare const _xpc_type_shmem: _xpc_type_s;

declare const SOCKINFO_IN: number;

declare const KRB5_C_RANDSOURCE_OLDAPI: number;

declare const UNW_VE_S28: number;

declare const UNW_ARM64_X12: number;

declare const UNW_PPC64_R18: number;

declare const UNW_VE_S10: number;

declare const UNW_ARM_D12: number;

declare const UNW_SPARC_I0: number;

declare const UNW_ARM_D30: number;

declare const NXStrStructKeyPrototype: NXHashTablePrototype;

declare const UNW_PPC64_VS52: number;

declare const UNW_AARCH64_V19: number;

declare const UNWIND_ARM64_FRAME_D12_D13_PAIR: number;

declare const UNW_AARCH64_X30: number;

declare const UNW_PPC_R18: number;

declare const UNW_VE_S52: number;

declare const UNW_PPC_R26: number;

declare const UNW_PPC64_VS17: number;

declare const UNW_MIPS_R15: number;

declare const UNW_MIPS_F31: number;

declare const UNW_PPC_V15: number;

declare const UNW_HEXAGON_R30: number;

declare const _xpc_type_rich_error: _xpc_type_s;

declare const UNW_OR1K_R29: number;

declare const kDNSServiceType_SPF: number;

declare const _US_VIRTUAL_UNWIND_FRAME: number;

declare const UNW_RISCV_X23: number;

declare const UNW_VE_S39: number;

declare const in6addr_nodelocal_allnodes: in6_addr;

declare const UNW_VE_S9: number;

declare const UNW_PPC_R15: number;

declare const PE_state: PE_state;

declare const UNW_LOONGARCH_F19: number;

declare const kDNSServiceType_MAILA: number;

declare const UNW_AARCH64_X2: number;

declare const kDNSServiceErr_BadTime: number;

declare const UNW_PPC64_VS36: number;

declare const DYLD_CHAINED_PTR_ARM64E_USERLAND24: number;

declare const UNW_VE_V6: number;

declare const UNW_MIPS_F4: number;

declare const UNW_VE_V28: number;

declare const UNWIND_ARM_FRAME_SECOND_PUSH_R11: number;

declare const UNW_RISCV_X25: number;

declare const UNW_PPC64_R25: number;

declare const kDNSServiceType_NS: number;

declare const UNW_LOONGARCH_F25: number;

declare const UNW_PPC_R27: number;

declare const UNW_VE_V7: number;

declare const UNW_PPC64_VS23: number;

declare const UNW_RISCV_F26: number;

declare const UNW_RISCV_X8: number;

declare const UNW_EBADREG: number;

declare const UNW_LOONGARCH_F5: number;

declare const UNWIND_X86_64_FRAMELESS_STACK_REG_COUNT: number;

declare const UNW_AARCH64_V4: number;

declare const UNW_S390X_F2: number;

declare const UNW_AARCH64_V26: number;

declare const XPC_ACTIVITY_STATE_DEFER: number;

declare const kBTIndexNode: number;

declare const kHFSBinaryCompare: number;

declare const UNW_LOONGARCH_R4: number;

declare const UNWIND_X86_EBP_FRAME_OFFSET: number;

declare const kHFSAutoCandidateBit: number;

declare const UNW_ARM64_D17: number;

declare const UNW_HEXAGON_R26: number;

declare const kDNSServiceFlagsAllowExpiredAnswers: number;

declare const UNW_PPC_F30: number;

declare const UNW_AARCH64_PC: number;

declare const UNWIND_X86_MODE_STACK_IMMD: number;

declare const UNW_PPC64_VS57: number;

declare const XPC_ACTIVITY_INTERVAL_30_MIN: number;

declare const kDNSServiceErr_NoAuth: number;

declare const sys_signame: unknown /* const array */;

declare const UNW_S390X_R10: number;

declare const UNW_PPC64_F4: number;

declare const UNW_MIPS_F9: number;

declare const kDNSServiceFlagsThresholdFinder: number;

declare const UNW_S390X_R0: number;

declare const UNW_AARCH64_V21: number;

declare const UNW_OR1K_R16: number;

declare const kHFSUnusedNodesFixExpandedDate: number;

declare const UNW_PPC_F11: number;

declare const UNW_VE_V44: number;

declare const UNW_OR1K_R7: number;

declare const UNW_PPC64_R12: number;

declare const kHFSFileLockedMask: number;

declare const kDNSServiceFlagsWakeOnResolve: number;

declare const UNW_PPC64_V13: number;

declare const UNW_ARM64_D11: number;

declare const kHFSHasSecurityMask: number;

declare const UNW_PPC64_VS48: number;

declare const UNW_ARM64_X27: number;

declare const UNW_MIPS_F13: number;

declare const UNWIND_ARM64_MODE_DWARF: number;

declare const UNW_AARCH64_V7: number;

declare const dot3ChipSetAMD79C940: number;

declare const UNW_X86_EDI: number;

declare const UNW_OR1K_R1: number;

declare const UNW_VE_S43: number;

declare const UNW_PPC64_VS8: number;

declare const UNW_VE_S16: number;

declare const kDNSServiceType_DHCID: number;

declare const h_errno: number;

declare const kDNSServiceType_UINFO: number;

declare const UNW_MIPS_R22: number;

declare const UNW_VE_S21: number;

declare const SOCKINFO_VSOCK: number;

declare const rl_instream: interop.Pointer;

declare const UNW_ARM64_X2: number;

declare const kHFSXVersion: number;

declare const UNW_X86_64_R11: number;

declare const UNW_VE_V47: number;

declare const UNW_SPARC_O7: number;

declare const UNW_AARCH64_X8: number;

declare const UNW_OR1K_R4: number;

declare const UNW_PPC64_V31: number;

declare const UNW_SPARC_I4: number;

declare const kDNSServiceFlagsPrivateFive: number;

declare const UNW_RISCV_VLENB: number;

declare const rl_getc_function: (p1: interop.PointerConvertible) => number;

declare const sys_siglist: unknown /* const array */;

declare const UNW_PPC64_F22: number;

declare const XPC_ACTIVITY_INTERVAL_5_MIN: number;

declare const UNW_PPC_V5: number;

declare const UNW_PPC64_F26: number;

declare const UNW_AARCH64_X3: number;

declare const kHFSCatExpandedTimesMask: number;

declare const KRB5_C_RANDSOURCE_TIMING: number;

declare const UNW_ARM_R0: number;

declare const UNW_LOONGARCH_F0: number;

declare const OSBigEndian: number;

declare const UNW_RISCV_F16: number;

declare const UNWIND_X86_REG_EDI: number;

declare const kDebugTypeDisplay: number;

declare const UNW_ARM64_D6: number;

declare const UNW_X86_64_XMM11: number;

declare const UNW_PPC_F23: number;

declare const kHFSHasFolderCountBit: number;

declare const UNW_LOONGARCH_F4: number;

declare const UNW_AARCH64_X5: number;

declare const UNW_PPC64_F14: number;

declare const UNW_VE_V18: number;

declare const UNW_ARM64_X21: number;

declare const MTF_TAG: number;

declare const UNW_X86_64_R14: number;

declare const UNW_S390X_F14: number;

declare const UNW_VE_V33: number;

declare const HV_NO_RESOURCES: number;

declare const UIDNA_ERROR_LABEL_TOO_LONG: number;

declare const UNW_PPC64_F21: number;

declare const daylight: number;

declare const UNW_AARCH64_X28: number;

declare const rl_completer_quote_characters: string;

declare const UNW_PPC64_R20: number;

declare const UNW_VE_V8: number;

declare const UNW_AARCH64_X14: number;

declare const UNW_ARM_D31: number;

declare const XPC_ACTIVITY_CHECK_IN: NSObject;

declare const UNW_MIPS_R9: number;

declare const UNW_LOONGARCH_R26: number;

declare const UNWIND_X86_FRAMELESS_STACK_SIZE: number;

declare const UNW_AARCH64_X20: number;

declare const UNW_VE_S13: number;

declare const kHFSAttributeDataFileID: number;

declare const UIDNA_ERROR_HYPHEN_3_4: number;

declare const kAUNoErr: number;

declare const ber_sockbuf_io_readahead: sockbuf_io;

declare const port_obj_table_size: number;

declare const kDNSServiceType_HIP: number;

declare const kDNSServiceType_NSAP: number;

declare const dyld_error_kind_dylib_wrong_arch: number;

declare const UNW_PPC_F0: number;

declare const UNW_PPC64_VS9: number;

declare const UNW_ARM_D17: number;

declare const UNW_ARM64_D2: number;

declare const UNW_VE_V4: number;

declare const kDNSServiceFlagsPrivateThree: number;

declare const UNW_PPC64_TEXASR: number;

declare const _xpc_type_date: _xpc_type_s;

declare const UNW_VE_S31: number;

declare const UNW_LOONGARCH_F3: number;

declare const readline_echoing_p: number;

declare const XPC_ACTIVITY_INTERVAL_7_DAYS: number;

declare const kHFSPlusFileRecord: number;

declare const UNW_SPARC_O5: number;

declare const ber_pvt_opt_on: number;

declare const _xpc_error_termination_imminent: _xpc_dictionary_s;

declare const kJIJournalOnOtherDeviceMask: number;

declare const MTF_DATA: number;

declare const rl_special_prefixes: string;

declare const UNW_S390X_R2: number;

declare const UNW_RISCV_X30: number;

declare const UNW_LOONGARCH_F29: number;

declare const UNW_OR1K_R12: number;

declare const UNW_HEXAGON_R7: number;

declare const UNW_PPC64_R24: number;

declare const kAUMakeSubjectTokErr: number;

declare const kHFSPlusExtentKeyMaximumLength: number;

declare const UNW_VE_V40: number;

declare const kHFSPlusCatalogKeyMaximumLength: number;

declare const _NSConcreteGlobalBlock: unknown /* const array */;

declare const kHFSPlusMountVersion: number;

declare const rl_completion_append_character: number;

declare const kDNSServiceType_SSHFP: number;

declare const kNilOptions: number;

declare const UNW_AARCH64_V28: number;

declare const UNW_AARCH64_V20: number;

declare const UNW_ARM_D15: number;

declare const UNW_PPC64_R23: number;

declare const kHFSAutoCandidateMask: number;

declare const UNW_RISCV_F20: number;

declare const UNW_ARM64_X5: number;

declare const UNW_PPC64_R31: number;

declare const vm_page_mask: number;

declare const UNW_MIPS_F26: number;

declare const UNW_PPC64_R11: number;

declare const UNW_PPC_V12: number;

declare const UNW_MIPS_R10: number;

declare const UNW_AARCH64_X13: number;

declare const UNW_MIPS_F20: number;

declare const _dispatch_source_type_mach_send: dispatch_source_type_s;

declare const rl_completion_entry_function: (p1: string, p2: number) => number;

declare const XPC_ACTIVITY_INTERVAL_8_HOURS: number;

declare const matrix_identity_double3x3: simd_double3x3;

declare const UNW_ESUCCESS: number;

declare const UNWIND_X86_64_REG_RBX: number;

declare const UNW_PPC64_CR2: number;

declare const kDNSServiceType_RRSIG: number;

declare const UNW_PPC64_VS61: number;

declare const UNW_S390X_R14: number;

declare const kBTLeafNode: number;

declare const kHFSVolumeJournaledBit: number;

declare const UNW_PPC64_V7: number;

declare const UNW_PPC64_VS6: number;

declare const UNW_VE_V59: number;

declare const HV_ILLEGAL_GUEST_STATE: number;

declare const UNW_MIPS_R12: number;

declare const kDNSServiceType_HINFO: number;

declare const UNW_PPC_R29: number;

declare const UNW_AARCH64_X31: number;

declare const UNW_LOONGARCH_R11: number;

declare const NDR_record: NDR_record_t;

declare const rl_line_buffer: string;

declare const UNW_VE_V10: number;

declare const UNW_EREADONLYREG: number;

declare const UNW_S390X_R13: number;

declare const kDNSServiceErr_BadState: number;

declare const matrix_identity_float3x3: simd_float3x3;

declare const UNW_ARM64_X3: number;

declare const MTF_CONTROL: number;

declare const GSS_KRB5_NT_PRINCIPAL_NAME: interop.Pointer;

declare const XPC_ACTIVITY_STATE_CHECK_IN: number;

declare const UNW_PPC_F25: number;

declare const vm_page_size: number;

declare const UNW_MIPS_R7: number;

declare const UNW_PPC64_R28: number;

declare const UNW_S390X_R15: number;

declare const _NSConcreteStackBlock: unknown /* const array */;

declare const _dispatch_source_type_data_or: dispatch_source_type_s;

declare const UNW_LOONGARCH_F20: number;

declare const kDNSServiceFlagsWakeOnlyService: number;

declare const UNW_PPC64_F0: number;

declare const kDNSServiceFlagsPrivateFour: number;

declare const kOSThermalNotificationPressureLevelName: string;

declare const UNW_RISCV_X0: number;

declare const dot3ChipSetFujitsu86950: number;

declare const UNW_PPC_SPE_ACC: number;

declare const kDNSServiceFlagsKnownUnique: number;

declare const UNW_MIPS_R6: number;

declare const kDNSServiceErr_NATPortMappingDisabled: number;

declare const max_input_history: number;

declare const UNW_HEXAGON_R19: number;

declare const MTF_FTABLE: number;

declare const _FE_DFL_DISABLE_DENORMS_ENV: fenv_t;

declare const UNW_AARCH64_X9: number;

declare const UNW_ARM_S7: number;

declare const kDNSServiceErr_ServiceNotRunning: number;

declare const UNW_LOONGARCH_R15: number;

declare const _dispatch_source_type_read: dispatch_source_type_s;

declare const dyld_shared_cache_ranges: dyld_shared_cache_ranges;

declare const rl_filename_completion_desired: number;

declare const UNW_OR1K_R20: number;

declare const UNW_PPC64_VS31: number;

declare const UNW_ARM_D5: number;

declare const kHFSVolumeSparedBlocksBit: number;

declare const UNW_ARM64_D28: number;

declare const UNW_ARM_S9: number;

declare const UNWIND_ARM64_FRAME_X21_X22_PAIR: number;

declare const gss_mech_krb5_old: interop.Pointer;

declare const UNW_LOONGARCH_R23: number;

declare const UNW_AARCH64_V14: number;

declare const UNW_ARM64_X15: number;

declare const MTF_OOBDATA: number;

declare const UNW_ARM_D24: number;

declare const UIDNA_CHECK_CONTEXTJ: number;

declare const UNW_X86_64_RBX: number;

declare const UNW_PPC64_V9: number;

declare const UIDNA_ERROR_EMPTY_LABEL: number;

declare const UNW_AARCH64_V1: number;

declare const UNW_VE_V13: number;

declare const kDNSServiceType_NSEC: number;

declare const UNW_PPC64_VS15: number;

declare const kBTBigKeysMask: number;

declare const kHFSVolumeUnmountedMask: number;

declare const UNW_ARM_D2: number;

declare const MTF_HEADER: number;

declare const DYLD_CHAINED_PTR_X86_64_KERNEL_CACHE: number;

declare const UNW_VE_V5: number;

declare const kDNSServiceFlagsBackgroundTrafficClass: number;

declare const UNW_ARM_WR2: number;

declare const suboptarg: string;

declare const UNW_LOONGARCH_F13: number;

declare const UNW_RISCV_X31: number;

declare const UNW_OR1K_R15: number;

declare const UNW_PPC64_VS40: number;

declare const UNW_MIPS_F15: number;

declare const DYLD_CHAINED_PTR_START_NONE: number;

declare const MTF_RIGHTS: number;

declare const OBJC_EXHAUSTIVE_COLLECTION: number;

declare const UNW_RISCV_X26: number;

declare const kAUCloseErr: number;

declare const UNW_MIPS_F14: number;

declare const UNW_REG_SP: number;

declare const _xpc_type_endpoint: _xpc_type_s;

declare const UNW_PPC64_VS42: number;

declare const DYLD_CHAINED_PTR_ARM64E_USERLAND: number;

declare const UNW_PPC64_R17: number;

declare const UNWIND_X86_EBP_FRAME_REGISTERS: number;

declare const vm_kernel_page_mask: number;

declare const UNWIND_X86_64_MODE_MASK: number;

declare const _US_UNWIND_FRAME_STARTING: number;

declare const UNW_S390X_R1: number;

declare const UNW_EBADVERSION: number;

declare const UNW_VE_S50: number;

declare const UNW_MIPS_R17: number;

declare const UNW_SPARC_O3: number;

declare const history_length: number;

declare const UNWIND_X86_64_MODE_STACK_IMMD: number;

declare const kDNSServiceType_MB: number;

declare const PE_putc: (p1: number) => void;

declare const UNW_AARCH64_X1: number;

declare const kDNSServiceType_ATMA: number;

declare const kDNSServiceFlagAnsweredFromCache: number;

declare const UNW_AARCH64_RA_SIGN_STATE: number;

declare const UNW_PPC64_R1: number;

declare const UNW_LOONGARCH_R1: number;

declare const UNW_ARM_S29: number;

declare const UNW_ARM_S22: number;

declare const UNW_PPC64_F9: number;

declare const UNW_S390X_F9: number;

declare const UNWIND_ARM64_FRAME_X19_X20_PAIR: number;

declare const HV_EXISTS: number;

declare const UNW_PPC64_VS13: number;

declare const kAUOpenErr: number;

declare const XPC_ACTIVITY_INTERVAL_15_MIN: number;

declare const UNW_PPC64_VS44: number;

declare const UNW_ARM64_X18: number;

declare const kHFSVolumeInconsistentBit: number;

declare const UNW_ENOMEM: number;

declare const kHFSVolumeSoftwareLockMask: number;

declare const UNW_RISCV_F6: number;

declare const DYLD_CHAINED_PTR_ARM64E_OFFSET: number;

declare const disable_kprintf_output: boolean;

declare const kHFSHasAttributesMask: number;

declare const ber_sockbuf_io_udp: sockbuf_io;

declare const UNW_ARM64_D4: number;

declare const kDNSServiceErr_NotInitialized: number;

declare const kHFSFastDevPinnedMask: number;

declare const UNW_VE_V23: number;

declare const UNW_PPC64_V0: number;

declare const UNW_OR1K_R26: number;

declare const UNW_PPC64_F23: number;

declare const DYLD_CHAINED_PTR_START_LAST: number;

declare const getdate_err: number;

declare const kDNSServiceType_GID: number;

declare const UNWIND_X86_REG_ECX: number;

declare const UNW_PPC_F18: number;

declare const UNW_RISCV_X1: number;

declare const rl_readline_version: number;

declare const UNW_ARM_WR3: number;

declare const UNW_OR1K_EPCR: number;

declare const UNW_PPC64_CR7: number;

declare const UNWIND_ARM_FRAME_D_REG_COUNT_MASK: number;

declare const UNWIND_X86_64_RBP_FRAME_REGISTERS: number;

declare const kHFSSigWord: number;

declare const __fpcr_trap_invalid: number;

declare const UNW_PPC_R2: number;

declare const UNW_PPC64_V11: number;

declare const UNW_ARM_S2: number;

declare const kHFSBogusExtentFileID: number;

declare const UNWIND_ARM64_FRAME_X25_X26_PAIR: number;

declare const UNW_X86_64_RDX: number;

declare const UNW_PPC64_F16: number;

declare const UNW_X86_64_R8: number;

declare const UNW_PPC_F2: number;

declare const UNW_AARCH64_V9: number;

declare const UNW_X86_64_XMM8: number;

declare const UNW_AARCH64_V10: number;

declare const UNW_PPC64_R30: number;

declare const UNW_ARM_WR13: number;

declare const XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP: string;

declare const UNW_PPC64_VS7: number;

declare const UNW_ARM_S19: number;

declare const kDNSServiceErr_PollingMode: number;

declare const UNW_VE_V17: number;

declare const UNW_RISCV_F23: number;

declare const UNW_LOONGARCH_F6: number;

declare const UNW_PPC64_F20: number;

declare const UNW_AARCH64_X4: number;

declare const UNW_PPC_F6: number;

declare const SOCKINFO_KERN_EVENT: number;

declare const krb5_gss_oid_array: interop.Pointer;

declare const UNW_PPC64_VS18: number;

declare const kDNSServiceFlagsSecure: number;

declare const UNW_PPC_F26: number;

declare const tkIntXlibStubsPtr: interop.Pointer;

declare const UNW_PPC64_V1: number;

declare const UNW_VE_V3: number;

declare const eNoteReapDeprecated: number;

declare const UNW_PPC64_R2: number;

declare const DYLD_CHAINED_IMPORT: number;

declare const _CurrentRuneLocale: interop.Pointer;

declare const UNW_VE_V2: number;

declare const UNW_MIPS_F5: number;

declare const kDNSServiceErr_Unsupported: number;

declare const UNW_VE_V11: number;

declare const kDNSServiceErr_NATPortMappingUnsupported: number;

declare const UNW_RISCV_F31: number;

declare const UNW_ARM_WR14: number;

declare const kDNSServiceType_SRV: number;

declare const UNW_ARM64_SP: number;

declare const _xpc_type_string: _xpc_type_s;

declare const UNW_SPARC_I6: number;

declare const UNW_S390X_R6: number;

declare const UNW_RISCV_F21: number;

declare const UNW_MIPS_F24: number;

declare const UNW_PPC64_VSCR: number;

declare const UNW_VE_S8: number;

declare const utf8_countTrailBytes: interop.Pointer;

declare const kDNSServiceType_NAPTR: number;

declare const kDNSServiceType_PX: number;

declare const sqlite3_data_directory: string;

declare const UNW_SPARC_G6: number;

declare const UNWIND_ARM_FRAME_SECOND_PUSH_R9: number;

declare const kHFSPlusCatalogMinNodeSize: number;

declare const shadow: number;

declare const rl_point: number;

declare const matrix_identity_float2x2: simd_float2x2;

declare const rl_attempted_completion_over: number;

declare const kDNSServiceType_NULL: number;

declare const kAUWriteReturnTokErr: number;

declare const rl_ignore_completion_duplicates: number;

declare const UNW_PPC64_VS60: number;

declare const kDNSServiceFlagsUnicastResponse: number;

declare const gss_nt_krb5_name: interop.Pointer;

declare const UNW_ARM64_PC: number;

declare const UNW_ARM_R13: number;

declare const kSymLinkCreator: number;

declare const signgam: number;

declare const UNW_VE_V34: number;

declare const _dispatch_source_type_mach_recv: dispatch_source_type_s;

declare const UNW_RISCV_X17: number;

declare const UNW_ARM_WR6: number;

declare const rl_completion_display_matches_hook: () => void;

declare const UNW_HEXAGON_R11: number;

declare const kDNSServiceErr_Invalid: number;

declare const UNW_PPC_CTR: number;

declare const kHFSVolumeSparedBlocksMask: number;

declare const UNW_ARM_D22: number;

declare const UNW_PPC_R5: number;

declare const UNW_MIPS_R27: number;

declare const UNW_PPC_V4: number;

declare const KERNEL_AUDIT_TOKEN: audit_token_t;

declare const U_PARSE_CONTEXT_LEN: number;

declare const UNW_VE_VM7: number;

declare const UNWIND_ARM64_DWARF_SECTION_OFFSET: number;

declare const UNW_PPC64_R3: number;

declare const UNW_VE_S3: number;

declare const UNW_ARM_D8: number;

declare const HV_DENIED: number;

declare const HV_ERROR: number;

declare const UNW_X86_64_R9: number;

declare const UNW_OR1K_R13: number;

declare const UNW_EINVAL: number;

declare const UNW_X86_64_XMM0: number;

declare const kPEWriteTOD: number;

declare const kHFSPlusFolderThreadRecord: number;

declare const UNW_PPC64_F11: number;

declare const kDNSServiceFlagsInsecure: number;

declare const UNW_VE_S58: number;

declare const kDNSServiceType_MR: number;

declare const UNW_VE_S1: number;

declare const UNW_X86_ESP: number;

declare const UNW_MIPS_R8: number;

declare const kHFSMaxFileNameChars: number;

declare const UNW_PPC64_R4: number;

declare const UNW_PPC64_VS56: number;

declare const UNW_VE_V22: number;

declare const UNW_VE_V38: number;

declare const UNW_MIPS_F3: number;

declare const UNW_RISCV_X22: number;

declare const kHFSFolderThreadRecord: number;

declare const UNW_AARCH64_X26: number;

declare const UNW_MIPS_F29: number;

declare const UNW_ARM64_X7: number;

declare const UNW_S390X_R5: number;

declare const UIDNA_USE_STD3_RULES: number;

declare const condense: number;

declare const kHFSRootParentID: number;

declare const UNW_MIPS_F0: number;

declare const kHFSHasChildLinkBit: number;

declare const kDNSServiceType_DNAME: number;

declare const emacs_standard_keymap: unknown /* const array */;

declare const in6addr_linklocal_allnodes: in6_addr;

declare const UNW_VE_V20: number;

declare const UNW_PPC_R22: number;

declare const UNW_MIPS_F16: number;

declare const kHFSMDBAttributesMask: number;

declare const UNW_ARM_D1: number;

declare const UNW_X86_64_RBP: number;

declare const UNWIND_X86_FRAMELESS_STACK_REG_COUNT: number;

declare const unw_local_addr_space: interop.Pointer;

declare const UNW_PPC64_VS28: number;

declare const __fpcr_trap_denormal: number;

declare const __fpcr_flush_to_zero: number;

declare const kDNSServiceFlagsEnableDNSSEC: number;

declare const UNW_PPC_V17: number;

declare const UNW_ARM_D25: number;

declare const UNW_ARM_S4: number;

declare const UNW_PPC64_VS11: number;

declare const UNW_S390X_F15: number;

declare const UNW_ARM64_D14: number;

declare const UNW_ARM_WC3: number;

declare const UNW_VE_S7: number;

declare const UNW_PPC64_V2: number;

declare const UNW_PPC64_R29: number;

declare const UNW_MIPS_R20: number;

declare const UNW_VE_V50: number;

declare const UNW_HEXAGON_R6: number;

declare const UNW_ARM_R8: number;

declare const _os_log_disabled: os_log_s;

declare const UNW_PPC_R12: number;

declare const UNW_SPARC_G0: number;

declare const UNW_VE_S60: number;

declare const UNW_AARCH64_V8: number;

declare const UNW_PPC64_VS37: number;

declare const UNW_LOONGARCH_R27: number;

declare const kDNSServiceErr_BadFlags: number;

declare const kHFSMaxAttrNameLen: number;

declare const UNWIND_HAS_LSDA: number;

declare const UNW_PPC64_VS26: number;

declare const kDNSServiceFlagsShared: number;

declare const kDNSServiceType_KEY: number;

declare const UNW_VE_S57: number;

declare const UNW_OR1K_R10: number;

declare const UNW_PPC64_V29: number;

declare const UNW_PPC64_V24: number;

declare const UNW_OR1K_R21: number;

declare const UNW_HEXAGON_R8: number;

declare const DYLD_CHAINED_PTR_64_KERNEL_CACHE: number;

declare const UIDNA_ERROR_PUNYCODE: number;

declare const UNW_VE_S17: number;

declare const XPC_ACTIVITY_ALLOW_BATTERY: string;

declare const UNW_PPC64_VS46: number;

declare const UNW_LOONGARCH_F1: number;

declare const UNW_PPC64_R7: number;

declare const UNW_ARM64_RA_SIGN_STATE: number;

declare const UNW_PPC64_R6: number;

declare const kHFSCaseFolding: number;

declare const UNW_PPC_CR2: number;

declare const dot3ChipSetIntel82557: number;

declare const UNW_PPC64_VS59: number;

declare const kDNSServiceType_RP: number;

declare const UNW_PPC64_V16: number;

declare const UNW_PPC64_R15: number;

declare const UNWIND_X86_64_REG_R13: number;

declare const kHFSHasDateAddedBit: number;

declare const UNW_VE_V12: number;

declare const UNW_ARM64_D0: number;

declare const UNW_S390X_F0: number;

declare const UNW_PPC_R11: number;

declare const kHFSFolderRecord: number;

declare const UNWIND_ARM64_FRAMELESS_STACK_SIZE_MASK: number;

declare const UNW_VE_VM3: number;

declare const GSS_C_NT_ANONYMOUS: interop.Pointer;

declare const UNW_ARM64_X1: number;

declare const UNW_LOONGARCH_R9: number;

declare const UNW_ARM64_D15: number;

declare const UNW_VE_S63: number;

declare const UNW_X86_64_XMM6: number;

declare const NXStrPrototype: NXHashTablePrototype;

declare const kDNSServiceErr_BadReference: number;

declare const UNW_AARCH64_X23: number;

declare const UNW_PPC64_VRSAVE: number;

declare const UNW_HEXAGON_R20: number;

declare const UNWIND_X86_MODE_EBP_FRAME: number;

declare const UNW_PPC64_CR0: number;

declare const UNW_X86_64_RIP: number;

declare const SOCKINFO_TCP: number;

declare const gss_nt_service_name_v2: interop.Pointer;

declare const UNW_SPARC_L5: number;

declare const UNW_HEXAGON_R23: number;

declare const UNW_AARCH64_SP: number;

declare const kDNSServiceType_MF: number;

declare const kHFSPlusFolderRecord: number;

declare const _gmonparam: gmonparam;

declare const kHFSPlusExtentDensity: number;

declare const UNW_PPC_V8: number;

declare const UNW_PPC_F15: number;

declare const UNW_ARM64_X0: number;

declare const UNW_MIPS_F10: number;

declare const UNW_PPC_R7: number;

declare const _dispatch_source_type_proc: dispatch_source_type_s;

declare const kHFSPlusAttrForkData: number;

declare const UNW_OR1K_R11: number;

declare const UNW_ARM64_X22: number;

declare const UNW_AARCH64_V13: number;

declare const UNW_VE_V53: number;

declare const UNW_VE_VM15: number;

declare const UNW_VE_S5: number;

declare const UNW_S390X_F8: number;

declare const UNW_VE_S35: number;

declare const UNW_VE_S46: number;

declare const kHFSFastDevCandidateMask: number;

declare const UNW_MIPS_F23: number;

declare const UNW_AARCH64_X19: number;

declare const UNW_MIPS_F22: number;

declare const UNW_ARM_LR: number;

declare const UNW_VE_S25: number;

declare const UNW_LOONGARCH_R29: number;

declare const UNW_VE_V39: number;

declare const UNW_LOONGARCH_R13: number;

declare const UNW_ARM_S12: number;

declare const UNW_PPC_F14: number;

declare const UNW_PPC_V28: number;

declare const kDNSServiceType_X25: number;

declare const UNW_ARM64_FP: number;

declare const UIDNA_ERROR_BIDI: number;

declare const UNW_ARM64_X13: number;

declare const UNW_MIPS_R31: number;

declare const kAUStatErr: number;

declare const UNW_PPC64_V4: number;

declare const _xpc_type_int64: _xpc_type_s;

declare const UNW_PPC64_R0: number;

declare const UIDNA_ERROR_LEADING_HYPHEN: number;

declare const UNW_VE_S37: number;

declare const HV_BUSY: number;

declare const UNW_PPC64_V15: number;

declare const UNW_ARM64_D19: number;

declare const UNW_OR1K_R6: number;

declare const UNW_PPC_CR7: number;

declare const UIDNA_ERROR_TRAILING_HYPHEN: number;

declare const UNW_SPARC_I7: number;

declare const UNW_ARM_S30: number;

declare const UNWIND_ARM_MODE_DWARF: number;

declare const _xpc_type_error: _xpc_type_s;

declare const UNW_OR1K_R27: number;

declare const UNW_PPC64_VS5: number;

declare const UNW_PPC64_VS19: number;

declare const UNW_LOONGARCH_F9: number;

declare const UNW_VE_S18: number;

declare const MTF_SONAME: number;

declare const UNW_VE_S27: number;

declare const UNW_VE_V21: number;

declare const UNW_ARM64_X14: number;

declare const UNW_RISCV_X9: number;

declare const UNW_RISCV_X29: number;

declare const kDNSServiceType_IXFR: number;

declare const rl_completion_query_items: number;

declare const UNW_RISCV_F5: number;

declare const UNW_PPC64_V20: number;

declare const UNW_PPC64_R9: number;

declare const UNW_ARM64_X25: number;

declare const UNW_ARM64_X10: number;

declare const UNW_VE_S0: number;

declare const kHFSPlusVersion: number;

declare const UNW_AARCH64_V29: number;

declare const UNW_ARM_WR1: number;

declare const MTF_SOCKET: number;

declare const UNW_VE_V41: number;

declare const UNW_LOONGARCH_R22: number;

declare const UNW_MIPS_R13: number;

declare const TYPE_INTEGER: interop.Pointer;

declare const UNW_X86_64_XMM4: number;

declare const UNW_VE_V57: number;

declare const UNW_PPC64_F17: number;

declare const UNW_VE_VM12: number;

declare const UNW_HEXAGON_R4: number;

declare const kDNSServiceErr_Timeout: number;

declare const kAULastErr: number;

declare const UNW_PPC64_F27: number;

declare const UNW_VE_VM10: number;

declare const UNW_PPC_R19: number;

declare const UNW_PPC64_VS22: number;

declare const kDNSServiceErr_DefunctConnection: number;

declare const UNW_LOONGARCH_F30: number;

declare const MTF_ATABLE: number;

declare const UNW_OR1K_R5: number;

declare const UNW_LOONGARCH_F16: number;

declare const UNW_OR1K_R3: number;

declare const UNW_SPARC_L4: number;

declare const kHardLinkFileType: number;

declare const UNW_ARM64_D24: number;

declare const UNW_LOONGARCH_R25: number;

declare const UNW_PPC64_F2: number;

declare const kHFSExpandedTimesBit: number;

declare const UNWIND_X86_MODE_MASK: number;

declare const kHFSHasLinkChainMask: number;

declare const UNW_ARM64_D22: number;

declare const XPC_ACTIVITY_PRIORITY_UTILITY: string;

declare const UNW_LOONGARCH_R19: number;

declare const UNW_AARCH64_X7: number;

declare const HV_MEMORY_EXEC: number;

declare const _mh_execute_header: mach_header_64;

declare const kHFSPlusExtentMinNodeSize: number;

declare const OSLittleEndian: number;

declare const kHFSHasFolderCountMask: number;

declare const KERNEL_SECURITY_TOKEN: security_token_t;

declare const dyld_error_kind_dylib_version: number;

declare const UNWIND_PERSONALITY_MASK: number;

declare const UNW_MIPS_R14: number;

declare const UNW_PPC_V26: number;

declare const UNW_HEXAGON_R12: number;

declare const kDNSServiceFlagsForceMulticast: number;

declare const UNW_LOONGARCH_F11: number;

declare const UNW_ARM_WR9: number;

declare const UNW_PPC64_VS32: number;

declare const UNW_ARM_R7: number;

declare const kDNSServiceType_TSIG: number;

declare const UNW_ESTOPUNWIND: number;

declare const UNW_MIPS_LO: number;

declare const UNW_RISCV_X27: number;

declare const UNW_ARM_WR8: number;

declare const UNW_PPC_F9: number;

declare const UNW_VE_S62: number;

declare const UNW_SPARC_O6: number;

declare const OBJC_SYNC_NOT_OWNING_THREAD_ERROR: number;

declare const _xpc_type_fd: _xpc_type_s;

declare const UNWIND_X86_64_REG_R14: number;

declare const ldif_debug: number;

declare const UNW_VE_V25: number;

declare const kDNSServiceFlagsPrivateOne: number;

declare const UNW_PPC64_V26: number;

declare const UNW_AARCH64_V23: number;

declare const UNW_SPARC_O1: number;

declare const _US_UNWIND_FRAME_RESUME: number;

declare const HV_NO_DEVICE: number;

declare const UNW_ARM64_X20: number;

declare const UNW_PPC_R13: number;

declare const UNWIND_X86_64_REG_NONE: number;

declare const UNW_SPARC_O4: number;

declare const TYPE_ALPHA: interop.Pointer;

declare const UNW_HEXAGON_R0: number;

declare const kDNSServiceErr_NoError: number;

declare const __fpcr_trap_inexact: number;

declare const UNW_LOONGARCH_F31: number;

declare const UNW_MIPS_R5: number;

declare const UNW_AARCH64_X6: number;

declare const UNW_MIPS_F12: number;

declare const UNW_PPC_CR5: number;

declare const UNW_LOONGARCH_F18: number;

declare const UNW_LOONGARCH_F17: number;

declare const UNW_PPC_VRSAVE: number;

declare const UNW_LOONGARCH_F14: number;

declare const UNW_LOONGARCH_F10: number;

declare const UNWIND_X86_FRAMELESS_STACK_ADJUST: number;

declare const UNW_LOONGARCH_F2: number;

declare const UNW_AARCH64_V15: number;

declare const UNW_LOONGARCH_R24: number;

declare const UNW_LOONGARCH_R21: number;

declare const vm_kernel_page_shift: number;

declare const UNW_LOONGARCH_R17: number;

declare const kHFSHasDateAddedMask: number;

declare const UNW_X86_ESI: number;

declare const UNW_LOONGARCH_R14: number;

declare const kDNSServiceFlagsTimeout: number;

declare const kHFSCatalogNodeIDsReusedBit: number;

declare const UNW_LOONGARCH_R3: number;

declare const UNW_ARM64_D8: number;

declare const kVariableLengthArray: number;

declare const UNW_ARM_S11: number;

declare const _xpc_type_connection: _xpc_type_s;

declare const UNW_VE_S19: number;

declare const UNW_S390X_F7: number;

declare const kJIJournalNeedInitMask: number;

declare const UNW_S390X_R8: number;

declare const TYPE_IPV4: interop.Pointer;

declare const UNW_VE_S54: number;

declare const UNW_VE_VIXR: number;

declare const UUID_NULL: unknown /* const array */;

declare const UIDNA_CHECK_CONTEXTO: number;

declare const DYLD_CHAINED_PTR_32_CACHE: number;

declare const UNW_VE_VM14: number;

declare const UNW_VE_VM6: number;

declare const __stdinp: interop.Pointer;

declare const XPC_ACTIVITY_DELAY: string;

declare const UNW_VE_VM0: number;

declare const UNW_VE_V63: number;

declare const kDNSServiceFlagsShareConnection: number;

declare const UNW_ARM_S17: number;

declare const kHFSExtentKeyMaximumLength: number;

declare const UNW_VE_V51: number;

declare const UNW_VE_V36: number;

declare const UNWIND_X86_DWARF_SECTION_OFFSET: number;

declare const _DefaultRuneLocale: _RuneLocale;

declare const UNW_ARM_WR12: number;

declare const UNW_VE_S51: number;

declare const UNW_PPC_F7: number;

declare const UNW_ARM_S20: number;

declare const UNW_VE_S48: number;

declare const UNW_VE_S47: number;

declare const UNW_RISCV_F29: number;

declare const dot3ChipSetNationalSonic: number;

declare const UNW_ARM_D0: number;

declare const UNW_VE_S32: number;

declare const UNWIND_ARM_FRAME_FIRST_PUSH_R5: number;

declare const UNW_VE_S24: number;

declare const _dispatch_source_type_memorypressure: dispatch_source_type_s;

declare const kAUMakeReturnTokErr: number;

declare const UNW_SPARC_L6: number;

declare const UNWIND_X86_FRAMELESS_STACK_REG_PERMUTATION: number;

declare const UNW_VE_S11: number;

declare const UNW_RISCV_F30: number;

declare const gss_nt_service_name: interop.Pointer;

declare const UNW_RISCV_F27: number;

declare const UNW_RISCV_F24: number;

declare const UNW_RISCV_F18: number;

declare const _dispatch_data_destructor_munmap: () => void;

declare const UNW_S390X_R3: number;

declare const UNW_RISCV_F4: number;

declare const UNW_PPC64_VS55: number;

declare const UNW_RISCV_X28: number;

declare const UNW_RISCV_F0: number;

declare const UNW_LOONGARCH_R10: number;

declare const UNW_PPC_R16: number;

declare const UNW_PPC_F4: number;

declare const UNW_RISCV_X19: number;

declare const UNW_RISCV_X15: number;

declare const UNW_VE_S49: number;

declare const UNW_RISCV_X11: number;

declare const UNW_RISCV_X10: number;

declare const UNWIND_X86_64_DWARF_SECTION_OFFSET: number;

declare const UNW_RISCV_X6: number;

declare const UNW_ARM64_D31: number;

declare const UNW_PPC64_V19: number;

declare const UNW_VE_V52: number;

declare const MTF_PCB: number;

declare const UNW_HEXAGON_R31: number;

declare const UNW_ARM_D21: number;

declare const UNW_PPC64_TFHAR: number;

declare const UNW_PPC64_VS63: number;

declare const UNW_X86_64_R15: number;

declare const UNW_PPC_F12: number;

declare const UNW_VE_S22: number;

declare const DYLD_CHAINED_PTR_64: number;

declare const UNW_SPARC_L3: number;

declare const UNW_ARM64_X24: number;

declare const UNW_PPC_F21: number;

declare const UNW_SPARC_L2: number;

declare const UNW_VE_S6: number;

declare const UNW_SPARC_G5: number;

declare const ber_sockbuf_io_fd: sockbuf_io;

declare const UNWIND_ARM64_FRAME_D8_D9_PAIR: number;

declare const kDNSServiceType_UNSPEC: number;

declare const UNW_MIPS_F21: number;

declare const UNW_MIPS_F17: number;

declare const UNW_MIPS_F11: number;

declare const UNW_ARM_D27: number;

declare const UNW_RISCV_F28: number;

declare const UNW_VE_V37: number;

declare const kDNSServiceErr_NameConflict: number;

declare const UNW_MIPS_F8: number;

declare const UNW_PPC_V19: number;

declare const UNW_PPC64_V22: number;

declare const HV_SUCCESS: number;

declare const UNW_SPARC_G2: number;

declare const UNW_ARM_S31: number;

declare const UNW_MIPS_F1: number;

declare const UNWIND_X86_64_MODE_STACK_IND: number;

declare const UNW_MIPS_R29: number;

declare const UNW_MIPS_R24: number;

declare const UNW_MIPS_R23: number;

declare const UNW_MIPS_R21: number;

declare const rl_prep_term_function: () => void;

declare const UNW_ARM_R3: number;

declare const UNW_PPC64_V12: number;

declare const UNW_MIPS_R3: number;

declare const UNW_MIPS_R2: number;

declare const _dispatch_source_type_data_replace: dispatch_source_type_s;

declare const UNW_OR1K_R24: number;

declare const UNW_ARM_WR7: number;

declare const UNW_VE_S30: number;

declare const rl_attempted_completion_function: (p1: string, p2: number, p3: number) => interop.Pointer;

declare const UNW_OR1K_R14: number;

declare const kDNSServiceErr_NoRouter: number;

declare const kHFSXSigWord: number;

declare const UNW_MIPS_R25: number;

declare const kDNSServiceType_NIMLOC: number;

declare const UNW_ARM64_D27: number;

declare const UNW_OR1K_R8: number;

declare const UNW_ARM_R6: number;

declare const GSS_C_NT_EXPORT_NAME: interop.Pointer;

declare const UNW_PPC_F27: number;

declare const kHFSDoNotFastDevPinBit: number;

declare const kBTBadCloseMask: number;

declare const UNW_PPC_V25: number;

declare const UNW_ARM_D26: number;

declare const UNW_VE_S42: number;

declare const UNW_VE_V56: number;

declare const UNWIND_ARM_DWARF_SECTION_OFFSET: number;

declare const UNW_X86_64_XMM2: number;

declare const UNW_ARM_D13: number;

declare const dyld_error_kind_symbol_missing: number;

declare const UNW_ARM_D9: number;

declare const UNW_RISCV_X3: number;

declare const UNW_ARM_D3: number;

declare const UNW_ARM64_X11: number;

declare const UNW_ARM_WR10: number;

declare const rl_completion_word_break_hook: () => string;

declare const XPC_ACTIVITY_STATE_WAIT: number;

declare const UNW_ARM_S26: number;

declare const UNW_OR1K_R0: number;

declare const UNW_OR1K_R28: number;

declare const UNW_ARM_S16: number;

declare const UNW_ARM_S14: number;

declare const ber_sockbuf_io_debug: sockbuf_io;

declare const kPEControlKey: number;

declare const UNW_PPC_F20: number;

declare const UNW_HEXAGON_R3: number;

declare const UNW_PPC_CR0: number;

declare const UNW_ARM_S13: number;

declare const UNW_HEXAGON_R22: number;

declare const UNW_RISCV_F22: number;

declare const UNW_VE_S59: number;

declare const mach_task_self_: number;

declare const _xpc_type_null: _xpc_type_s;

declare const UNW_PPC_F5: number;

declare const UNW_RISCV_F9: number;

declare const UNW_ARM_S0: number;

declare const UNW_S390X_F3: number;

declare const UIDNA_ERROR_INVALID_ACE_LABEL: number;

declare const UNW_ARM_R14: number;

declare const UNW_ARM_R10: number;

declare const UNW_PPC_F29: number;

declare const UNW_PPC_CR1: number;

declare const UNW_PPC_R6: number;

declare const UNW_OR1K_R19: number;

declare const UNW_ARM_R2: number;

declare const UNW_ARM_R1: number;

declare const kDNSServiceErr_NoSuchRecord: number;

declare const UNW_VE_S15: number;

declare const _mh_dylinker_header: mach_header_64;

declare const UNW_ARM64_D25: number;

declare const UNW_PPC_F13: number;

declare const kHFSVolumeInconsistentMask: number;

declare const newscr: interop.Pointer;

declare const _libiconv_version: number;

declare const UNW_ARM64_D3: number;

declare const dot3ChipSetAMD7990: number;

declare const UNWIND_ARM64_FRAME_D10_D11_PAIR: number;

declare const UNW_PPC64_R10: number;

declare const UNW_X86_64_RDI: number;

declare const kDNSServiceType_NSAP_PTR: number;

declare const UNW_ARM64_X31: number;

declare const UNWIND_ARM64_FRAME_D14_D15_PAIR: number;

declare const UNW_ARM64_LR: number;

declare const UNW_ARM64_X28: number;

declare const kDNSServiceFlagsAutoTrigger: number;

declare const UNW_ARM64_X9: number;

declare const MTF_RTABLE: number;

declare const UNW_AARCH64_V16: number;

declare const UNW_RISCV_F1: number;

declare const UNW_AARCH64_V30: number;

declare const UNW_PPC64_CR1: number;

declare const kDNSServiceErr_Firewall: number;

declare const kDNSServiceType_AXFR: number;

declare const UNW_S390X_PSWM: number;

declare const UNW_AARCH64_V22: number;

declare const kHFSBootVolumeInconsistentMask: number;

declare const UNW_X86_64_XMM14: number;

declare const UNW_AARCH64_V17: number;

declare const UNW_S390X_R4: number;

declare const UNW_OR1K_R25: number;

declare const UNW_PPC64_CR5: number;

declare const UNW_X86_64_XMM13: number;

declare const rl_pre_input_hook: (p1: string, p2: number) => number;

declare const _dispatch_source_type_write: dispatch_source_type_s;

declare const kDNSServiceFlagsThresholdReached: number;

declare const UNW_PPC64_V17: number;

declare const UNW_AARCH64_LR: number;

declare const UNW_AARCH64_FP: number;

declare const UNW_S390X_R12: number;

declare const UNW_PPC64_F7: number;

declare const UNW_PPC64_VS27: number;

declare const UNW_AARCH64_X25: number;

declare const UNW_PPC64_VS45: number;

declare const UNW_AARCH64_X22: number;

declare const UNW_AARCH64_X18: number;

declare const __dso_handle: mach_header;

declare const UNW_AARCH64_X0: number;

declare const kHFSDoNotFastDevPinMask: number;

declare const UNW_PPC_V10: number;

declare const UNW_PPC64_VS50: number;

declare const UNW_PPC64_VS33: number;

declare const kDNSServiceErr_AlreadyRegistered: number;

declare const UNW_PPC64_CR3: number;

declare const UNWIND_ARM64_FRAME_X23_X24_PAIR: number;

declare const UNW_PPC64_VS24: number;

declare const kDNSServiceFlagsForce: number;

declare const rl_basic_word_break_characters: string;

declare const UNW_PPC64_VS20: number;

declare const UNW_ARM_WR4: number;

declare const UNW_VE_S29: number;

declare const UNW_LOONGARCH_R31: number;

declare const UNW_PPC_R21: number;

declare const UNW_MIPS_R4: number;

declare const UIDNA_ERROR_CONTEXTO_PUNCTUATION: number;

declare const UNW_PPC64_VS14: number;

declare const UNW_ARM_D18: number;

declare const UNW_PPC64_VS1: number;

declare const UNW_PPC64_VS0: number;

declare const UNW_VE_V49: number;

declare const kHFSCatalogNodeIDsReusedMask: number;

declare const _xpc_event_key_name: string;

declare const kDNSServiceErr_BadSig: number;

declare const UNW_EUNSPEC: number;

declare const kHFSVolumeNoCacheRequiredBit: number;

declare const UNW_VE_VM5: number;

declare const UNW_PPC_CR6: number;

declare const UNW_ARM64_D30: number;

declare const UNW_ARM_WR15: number;

declare const rl_outstream: interop.Pointer;

declare const UNW_PPC64_F25: number;

declare const in6addr_loopback: in6_addr;

declare const UNW_OR1K_R30: number;

declare const UNW_VE_S12: number;

declare const _xpc_type_bool: _xpc_type_s;

declare const rl_library_version: string;

declare const UNW_X86_EDX: number;

declare const UNW_PPC64_R14: number;

declare const UNW_PPC_VSCR: number;

declare const UNW_PPC_V29: number;

declare const UNW_PPC_V27: number;

declare const UNW_RISCV_F17: number;

declare const KRB5_C_RANDSOURCE_MAX: number;

declare const rl_inhibit_completion: number;

declare const UTEXT_PROVIDER_STABLE_CHUNKS: number;

declare const UNW_PPC_V6: number;

declare const UNW_PPC64_R21: number;

declare const UNW_RISCV_F14: number;

declare const UNW_OR1K_R2: number;

declare const kDebugTypeSerial: number;

declare const UNW_ARM_S5: number;

declare const DYLD_CHAINED_PTR_ARM64E_FIRMWARE: number;

declare const UNWIND_ARM_FRAME_FIRST_PUSH_R4: number;

declare const UNW_ARM_S25: number;

declare const UNW_PPC_V0: number;

declare const UNW_PPC64_VS49: number;

declare const UNWIND_ARM64_FRAME_X27_X28_PAIR: number;

declare const UNW_SPARC_G4: number;

declare const UNW_PPC_XER: number;

declare const UNWIND_X86_REG_ESI: number;

declare const UNW_PPC_CR4: number;

declare const DISPATCH_WALLTIME_NOW: number;

declare const UNW_PPC_CR3: number;

declare const UNW_PPC_LR: number;

declare const UNW_PPC64_VS34: number;

declare const UNW_PPC64_F8: number;

declare const emacs_meta_keymap: unknown /* const array */;

declare const UNW_PPC_F19: number;

declare const eNoteExitReparentedDeprecated: number;

declare const XPC_ACTIVITY_REQUIRE_HDD_SPINNING: string;

declare const UNW_PPC_F17: number;

declare const UNW_VE_V45: number;

declare const UNW_PPC_F10: number;

declare const UNW_PPC_F8: number;

declare const NXPtrStructKeyPrototype: NXHashTablePrototype;

declare const UNWIND_ARM64_MODE_FRAME: number;

declare const kDNSServiceType_CNAME: number;

declare const dyld_error_kind_none: number;

declare const UNW_PPC_R24: number;

declare const UNW_PPC_R23: number;

declare const optind: number;

declare const kDNSServiceType_WKS: number;

declare const DYLD_CHAINED_IMPORT_ADDEND64: number;

declare const UNW_PPC_R17: number;

declare const UNW_PPC_R14: number;

declare const UNW_ARM_D4: number;

declare const UNW_PPC_R10: number;

declare const UNW_PPC_R3: number;

declare const kDNSServiceType_GPOS: number;

declare const gss_mech_set_krb5_old: interop.Pointer;

declare const UNW_X86_64_XMM10: number;

declare const UNW_X86_64_XMM5: number;

declare const kDNSServiceProtocol_UDP: number;

declare const UNW_HEXAGON_R13: number;

declare const UNW_X86_64_XMM1: number;

declare const kHFSCatalogKeyMaximumLength: number;

declare const kHFSVolumeHardwareLockBit: number;

declare const UNW_X86_64_RCX: number;

declare const UNW_OR1K_R22: number;

declare const kDNSServiceProtocol_TCP: number;

declare const UNW_PPC64_R13: number;

declare const DYLD_CHAINED_PTR_ARM64E_SHARED_CACHE: number;

declare const UNW_ARM_S21: number;

declare const UNW_EBADFRAME: number;

declare const UNW_VE_V55: number;

declare const _rl_print_completions_horizontally: number;

declare const UNW_PPC_R28: number;

declare const UNW_PPC_V31: number;

declare const UITER_UNKNOWN_INDEX: number;

declare const _dispatch_source_type_vnode: dispatch_source_type_s;

declare const optreset: number;

declare const TABSIZE: number;

declare const MTF_FREE: number;

declare const COLORS: number;

declare const kDNSServiceFlagsNoAutoRename: number;

declare const XPC_ACTIVITY_INTERVAL_1_MIN: number;

declare const XPC_ACTIVITY_INTERVAL_4_HOURS: number;

declare const kHFSContentProtectionBit: number;

declare const HV_MEMORY_WRITE: number;

declare const UNW_SPARC_O0: number;

declare const noErr: number;

declare const UNW_VE_S23: number;

declare const kHFSPlusAttrMinNodeSize: number;

declare const HV_UNSUPPORTED: number;

declare const kHFSFastDevCandidateBit: number;

declare const UNW_PPC64_VS25: number;

declare const UNW_SPARC_L0: number;

declare const UNW_AARCH64_V3: number;

declare const UNW_LOONGARCH_R2: number;

declare const kHFSHasAttributesBit: number;

declare const UNW_VE_V15: number;

declare const kAUBadParamErr: number;

declare const kHFSFirstUserCatalogNodeID: number;

declare const UNW_RISCV_X20: number;

declare const kHFSStartupFileID: number;

declare const kHFSCatalogFileID: number;

declare const kHFSExtentsFileID: number;

declare const NXPtrPrototype: NXHashTablePrototype;

declare const UNW_HEXAGON_R24: number;

declare const kFSKMountVersion: number;

declare const kHFSExpandedTimesMask: number;

declare const ttytype: interop.Pointer;

declare const optarg: string;

declare const GSS_C_NT_HOSTBASED_SERVICE_X: interop.Pointer;

declare const UNW_PPC64_F1: number;

declare const SOCKINFO_KERN_CTL: number;

declare const UNW_ARM_WC0: number;

declare const UIDNA_ALLOW_UNASSIGNED: number;

declare const UNW_S390X_F10: number;

declare const kDNSServiceType_AAAA: number;

declare const port_obj_table: interop.Pointer;

declare const kDNSServiceType_RT: number;

declare const _dispatch_main_q: dispatch_queue_s;

declare const kDNSServiceType_MD: number;

declare const UNW_X86_EBP: number;

declare const UNW_PPC_V30: number;

declare const UNW_VE_V14: number;

declare const UNW_ARM_S23: number;

declare const _dispatch_data_destructor_free: () => void;

declare const dot3ChipSetDigitalDC21142: number;

declare const kDNSServiceErr_Unknown: number;

declare const UNW_VE_V26: number;

declare const UNW_PPC64_V25: number;

declare const XPC_ACTIVITY_PRIORITY: string;

declare const UNW_S390X_F12: number;

declare const UNW_PPC_R20: number;

declare const _os_activity_none: os_activity_s;

declare const UNWIND_X86_64_MODE_RBP_FRAME: number;

declare const TYPE_ENUM: interop.Pointer;

declare const _mh_dylib_header: mach_header_64;

declare const KRB5_C_RANDSOURCE_TRUSTEDPARTY: number;

declare const _xpc_bool_true: _xpc_bool_s;

declare const UNW_PPC64_R22: number;

declare const UNWIND_X86_64_FRAMELESS_STACK_REG_PERMUTATION: number;

declare const UNW_PPC64_F19: number;

declare const UNWIND_ARM_FRAME_FIRST_PUSH_R6: number;

declare const UNW_ARM_S6: number;

declare const UNW_PPC64_F15: number;

declare const UNWIND_ARM_MODE_FRAME: number;

declare const UNWIND_X86_64_REG_RBP: number;

declare const rl_redisplay_function: () => void;

declare const UNW_PPC64_V14: number;

declare const UNWIND_X86_64_FRAMELESS_STACK_ADJUST: number;

declare const UNW_LOONGARCH_R12: number;

declare const UNWIND_X86_64_FRAMELESS_STACK_SIZE: number;

declare const kDNSServiceType_SIG: number;

declare const UNWIND_X86_REG_EDX: number;

declare const UNW_AARCH64_X21: number;

declare const UNW_VE_V43: number;

declare const kHFSRepairCatalogFileID: number;

declare const UNW_PPC_V13: number;

declare const UNW_ARM64_D18: number;

declare const UNWIND_X86_MODE_DWARF: number;

declare const _FE_DFL_ENV: fenv_t;

declare const UTEXT_PROVIDER_LENGTH_IS_EXPENSIVE: number;

declare const UNW_PPC_V23: number;

declare const dot3ChipSetDigitalDC21140A: number;

declare const kDNSServiceErr_NoSuchName: number;

declare const curscr: interop.Pointer;

declare const kHFSFileRecord: number;

declare const XPC_ACTIVITY_REPEATING: string;

declare const UNW_SPARC_I1: number;

declare const _xpc_bool_false: _xpc_bool_s;

declare const _xpc_error_key_description: string;

declare const kDNSServiceFlagsIncludeAWDL: number;

declare const vm_kernel_page_size: number;

declare const UNW_X86_64_R10: number;

declare const kDNSServiceType_NSEC3: number;

declare const kHFSCatExpandedTimesBit: number;

declare const UNW_ARM64_D26: number;

declare const UNW_ARM64_X23: number;

declare const vprintf_stderr_func: (p1: string, p2: string) => number;

declare const dyld_error_kind_dylib_missing: number;

declare const UNW_PPC_MQ: number;

declare const UNW_ARM_R9: number;

declare const rl_already_prompted: number;

declare const SOCKINFO_GENERIC: number;

declare const UNW_AARCH64_X12: number;

declare const alphaStage: number;

declare const UNWIND_ARM_FRAME_SECOND_PUSH_R8: number;

declare const kHFSPlusCreator: number;

declare const outline: number;

declare const UIDNA_ERROR_DOMAIN_NAME_TOO_LONG: number;

declare const bootstrap_port: number;

declare const UNW_X86_64_R12: number;

declare const GSS_C_NT_STRING_UID_NAME: interop.Pointer;

declare const UNW_VE_V27: number;

declare const UNW_RISCV_F8: number;

declare const in6addr_any: in6_addr;

declare const normal: number;

declare const kDNSServiceType_APL: number;

declare const UNW_VE_S41: number;

declare const UIDNA_NONTRANSITIONAL_TO_UNICODE: number;

declare const UNW_ARM64_X16: number;

declare const UIDNA_NONTRANSITIONAL_TO_ASCII: number;

declare const OBJC_CLEAR_RESIDENT_STACK: number;

declare const gss_nt_krb5_principal: interop.Pointer;

declare const kHFSPlusSigWord: number;

declare const kDNSServiceErr_Refused: number;

declare const UNW_PPC_F31: number;

declare const UNW_ARM_IP: number;

declare const UIDNA_ERROR_LABEL_HAS_DOT: number;

declare const XPC_ACTIVITY_STATE_CONTINUE: number;

declare const UNW_PPC_R0: number;

declare const gss_mech_set_krb5: interop.Pointer;

declare const UNW_ARM64_D23: number;

declare const _xpc_type_array: _xpc_type_s;

declare const UNW_HEXAGON_R16: number;

declare const UNW_X86_64_XMM3: number;

declare const rl_end: number;

declare const kDNSServiceErr_StaleData: number;

declare const UNW_PPC64_F3: number;

declare const UNW_PPC64_V21: number;

declare const kDNSServiceErr_NoSuchKey: number;

declare const _dispatch_queue_attr_concurrent: dispatch_queue_attr_s;

declare const kDNSServiceFlagsBogus: number;

declare const UNW_X86_64_XMM7: number;

declare const UNW_SPARC_I2: number;

declare const kDNSServiceFlagsLongLivedQuery: number;

declare const kDNSServiceErr_NoMemory: number;

declare const kDNSServiceType_HTTPS: number;

declare const kDNSServiceFlagsThresholdOne: number;

declare const kDNSServiceFlagsIndeterminate: number;

declare const UNW_PPC64_VS58: number;

declare const UNW_AARCH64_V11: number;

declare const kHFSMaxVolumeNameChars: number;

declare const UNW_VE_V1: number;

declare const UNW_PPC_R4: number;

declare const kDNSServiceFlagsUnique: number;

declare const UNW_HEXAGON_R2: number;

declare const UNW_SPARC_O2: number;

declare const UNW_VE_V19: number;

declare const kUnknownType: number;

declare const GSS_C_NT_USER_NAME: interop.Pointer;

declare const kDNSServiceFlagsDefault: number;

declare const UNW_SPARC_I5: number;

declare const UNW_VE_S34: number;

declare const tzname: interop.Pointer;

declare const UNWIND_X86_REG_EBX: number;

declare const kDNSServiceType_PTR: number;

declare const finalStage: number;

declare const _dispatch_source_type_signal: dispatch_source_type_s;

declare const mach_vm_range_flavor_t: {
  INVALID: 0,
  V1: 1,
};

declare const graftdmg_type_t: {
  BOOT: 1,
  PREBOOT: 2,
  DOWNLEVEL: 3,
  AUTH_ENV_GENERIC: 4,
  PDI_NONCE: 6,
  EFFECTIVE_AP: 7,
  MOBILE_ASSET: 8,
  MAX: 8,
};

declare const http_encoding_e: {
  LENGTH: 0,
  CHUNKED: 1,
  FIELDS: 2,
};

declare const USentenceBreak: {
  OTHER: 0,
  ATERM: 1,
  CLOSE: 2,
  FORMAT: 3,
  LOWER: 4,
  NUMERIC: 5,
  OLETTER: 6,
  SEP: 7,
  SP: 8,
  STERM: 9,
  UPPER: 10,
  CR: 11,
  EXTEND: 12,
  LF: 13,
  SCONTINUE: 14,
  COUNT: 15,
};

declare const ipp_tag_e: {
  CUPS_INVALID: -1,
  ZERO: 0,
  OPERATION: 1,
  JOB: 2,
  END: 3,
  PRINTER: 4,
  UNSUPPORTED_GROUP: 5,
  SUBSCRIPTION: 6,
  EVENT_NOTIFICATION: 7,
  RESOURCE: 8,
  DOCUMENT: 9,
  SYSTEM: 10,
  UNSUPPORTED_VALUE: 16,
  DEFAULT: 17,
  UNKNOWN: 18,
  NOVALUE: 19,
  NOTSETTABLE: 21,
  DELETEATTR: 22,
  ADMINDEFINE: 23,
  INTEGER: 33,
  BOOLEAN: 34,
  ENUM: 35,
  STRING: 48,
  DATE: 49,
  RESOLUTION: 50,
  RANGE: 51,
  BEGIN_COLLECTION: 52,
  TEXTLANG: 53,
  NAMELANG: 54,
  END_COLLECTION: 55,
  TEXT: 65,
  NAME: 66,
  RESERVED_STRING: 67,
  KEYWORD: 68,
  URI: 69,
  URISCHEME: 70,
  CHARSET: 71,
  LANGUAGE: 72,
  MIMETYPE: 73,
  MEMBERNAME: 74,
  EXTENSION: 127,
  CUPS_MASK: 2147483647,
  CUPS_CONST: -2147483648,
};

declare const clockid_t: {
  REALTIME: 0,
  MONOTONIC: 6,
  MONOTONIC_RAW: 4,
  MONOTONIC_RAW_APPROX: 5,
  UPTIME_RAW: 8,
  UPTIME_RAW_APPROX: 9,
  PROCESS_CPUTIME_ID: 12,
  THREAD_CPUTIME_ID: 16,
};

declare const os_signpost_type_t: {
  EVENT: 0,
  INTERVAL_BEGIN: 1,
  INTERVAL_END: 2,
};

declare const UIdentifierStatus: {
  RESTRICT: 0,
  ALLOW: 1,
};

declare const krb5plugin_preauth_entry_request_type: {
  krb5plugin_preauth_entry_request_certificate: 1,
  krb5plugin_preauth_entry_max_time_skew: 2,
  krb5plugin_preauth_keys: 3,
  krb5plugin_preauth_request_body: 4,
};

declare const at_error_t: {
  at_error_success: 0,
  at_error_invalid_parameter: -1,
  at_error_operation_unsupported: -2,
  at_error_invalid_source_data: -3,
  at_error_invalid_flag: -4,
  at_error_hdr_block_format_required: -5,
};

declare const ppd_status_e: {
  OK: 0,
  FILE_OPEN_ERROR: 1,
  NULL_FILE: 2,
  ALLOC_ERROR: 3,
  MISSING_PPDADOBE4: 4,
  MISSING_VALUE: 5,
  INTERNAL_ERROR: 6,
  BAD_OPEN_GROUP: 7,
  NESTED_OPEN_GROUP: 8,
  BAD_OPEN_UI: 9,
  NESTED_OPEN_UI: 10,
  BAD_ORDER_DEPENDENCY: 11,
  BAD_UI_CONSTRAINTS: 12,
  MISSING_ASTERISK: 13,
  LINE_TOO_LONG: 14,
  ILLEGAL_CHARACTER: 15,
  ILLEGAL_MAIN_KEYWORD: 16,
  ILLEGAL_OPTION_KEYWORD: 17,
  ILLEGAL_TRANSLATION: 18,
  ILLEGAL_WHITESPACE: 19,
  BAD_CUSTOM_PARAM: 20,
  MISSING_OPTION_KEYWORD: 21,
  BAD_VALUE: 22,
  MISSING_CLOSE_GROUP: 23,
  BAD_CLOSE_UI: 24,
  MISSING_CLOSE_UI: 25,
  MAX_STATUS: 26,
};

declare const ppd_conform_e: {
  RELAXED: 0,
  STRICT: 1,
};

declare const UIndicConjunctBreak: {
  NONE: 0,
  CONSONANT: 1,
  EXTEND: 2,
  LINKER: 3,
};

declare const acl_type_t: {
  EXTENDED: 256,
  ACCESS: 0,
  DEFAULT: 1,
  AFS: 2,
  CODA: 3,
  NTFS: 4,
  NWFS: 5,
};

declare const mach_vm_range_flags_t: {
  MACH_VM_RANGE_NONE: 0,
};

declare const at_block_format_t: {
  at_block_format_invalid: 0,
  at_block_format_astc_4x4_ldr: 1,
  at_block_format_astc_5x4_ldr: 2,
  at_block_format_astc_5x5_ldr: 3,
  at_block_format_astc_6x5_ldr: 4,
  at_block_format_astc_6x6_ldr: 5,
  at_block_format_astc_8x5_ldr: 6,
  at_block_format_astc_8x6_ldr: 7,
  at_block_format_astc_8x8_ldr: 8,
  at_block_format_astc_10x5_ldr: 9,
  at_block_format_astc_10x6_ldr: 10,
  at_block_format_astc_10x8_ldr: 11,
  at_block_format_astc_10x10_ldr: 12,
  at_block_format_astc_12x10_ldr: 13,
  at_block_format_astc_12x12_ldr: 14,
  at_block_format_astc_4x4_hdr: 17,
  at_block_format_astc_5x4_hdr: 18,
  at_block_format_astc_5x5_hdr: 19,
  at_block_format_astc_6x5_hdr: 20,
  at_block_format_astc_6x6_hdr: 21,
  at_block_format_astc_8x5_hdr: 22,
  at_block_format_astc_8x6_hdr: 23,
  at_block_format_astc_8x8_hdr: 24,
  at_block_format_astc_10x5_hdr: 25,
  at_block_format_astc_10x6_hdr: 26,
  at_block_format_astc_10x8_hdr: 27,
  at_block_format_astc_10x10_hdr: 28,
  at_block_format_astc_12x10_hdr: 29,
  at_block_format_astc_12x12_hdr: 30,
  at_block_format_bc1: 33,
  at_block_format_bc2: 34,
  at_block_format_bc3: 35,
  at_block_format_bc4: 36,
  at_block_format_bc4s: 37,
  at_block_format_bc5: 38,
  at_block_format_bc5s: 39,
  at_block_format_bc6: 40,
  at_block_format_bc6u: 41,
  at_block_format_bc7: 42,
  at_block_format_count: 43,
};

declare const NXByteOrder: {
  UnknownByteOrder: 0,
  LittleEndian: 1,
  BigEndian: 2,
};

declare const UIndicSyllabicCategory: {
  OTHER: 0,
  AVAGRAHA: 1,
  BINDU: 2,
  BRAHMI_JOINING_NUMBER: 3,
  CANTILLATION_MARK: 4,
  CONSONANT: 5,
  CONSONANT_DEAD: 6,
  CONSONANT_FINAL: 7,
  CONSONANT_HEAD_LETTER: 8,
  CONSONANT_INITIAL_POSTFIXED: 9,
  CONSONANT_KILLER: 10,
  CONSONANT_MEDIAL: 11,
  CONSONANT_PLACEHOLDER: 12,
  CONSONANT_PRECEDING_REPHA: 13,
  CONSONANT_PREFIXED: 14,
  CONSONANT_SUBJOINED: 15,
  CONSONANT_SUCCEEDING_REPHA: 16,
  CONSONANT_WITH_STACKER: 17,
  GEMINATION_MARK: 18,
  INVISIBLE_STACKER: 19,
  JOINER: 20,
  MODIFYING_LETTER: 21,
  NON_JOINER: 22,
  NUKTA: 23,
  NUMBER: 24,
  NUMBER_JOINER: 25,
  PURE_KILLER: 26,
  REGISTER_SHIFTER: 27,
  SYLLABLE_MODIFIER: 28,
  TONE_LETTER: 29,
  TONE_MARK: 30,
  VIRAMA: 31,
  VISARGA: 32,
  VOWEL: 33,
  VOWEL_DEPENDENT: 34,
  VOWEL_INDEPENDENT: 35,
  REORDERING_KILLER: 36,
};

declare const cups_edge_e: {
  TOP: 0,
  RIGHT: 1,
  BOTTOM: 2,
  LEFT: 3,
};

declare const cups_bool_e: {
  FALS: 0,
  TRU: 1,
};

declare const cups_backend_e: {
  OK: 0,
  FAILED: 1,
  AUTH_REQUIRED: 2,
  HOLD: 3,
  STOP: 4,
  CANCEL: 5,
  RETRY: 6,
  RETRY_CURRENT: 7,
};

declare const UHangulSyllableType: {
  NOT_APPLICABLE: 0,
  LEADING_JAMO: 1,
  VOWEL_JAMO: 2,
  TRAILING_JAMO: 3,
  LV_SYLLABLE: 4,
  LVT_SYLLABLE: 5,
  COUNT: 6,
};

declare const compression_status: {
  OK: 0,
  ERROR: -1,
  END: 1,
};

declare const compression_stream_flags: {
  COMPRESSION_STREAM_FINALIZE: 1,
};

declare const ACTION: {
  FIND: 0,
  ENTER: 1,
};

declare const sysdir_search_path_directory_t: {
  APPLICATION: 1,
  DEMO_APPLICATION: 2,
  DEVELOPER_APPLICATION: 3,
  ADMIN_APPLICATION: 4,
  LIBRARY: 5,
  DEVELOPER: 6,
  USER: 7,
  DOCUMENTATION: 8,
  DOCUMENT: 9,
  CORESERVICE: 10,
  AUTOSAVED_INFORMATION: 11,
  DESKTOP: 12,
  CACHES: 13,
  APPLICATION_SUPPORT: 14,
  DOWNLOADS: 15,
  INPUT_METHODS: 16,
  MOVIES: 17,
  MUSIC: 18,
  PICTURES: 19,
  PRINTER_DESCRIPTION: 20,
  SHARED_PUBLIC: 21,
  PREFERENCE_PANES: 22,
  ALL_APPLICATIONS: 100,
  ALL_LIBRARIES: 101,
};

declare const reloc_type_x86_64: {
  UNSIGNED: 0,
  SIGNED: 1,
  BRANCH: 2,
  GOT_LOAD: 3,
  GOT: 4,
  SUBTRACTOR: 5,
  SIGNED_1: 6,
  SIGNED_2: 7,
  SIGNED_4: 8,
  TLV: 9,
};

declare const kc_kind: {
  KindNone: -1,
  KindUnknown: 0,
  KindPrimary: 1,
  KindPageable: 2,
  KindAuxiliary: 3,
  NumKinds: 4,
};

declare const cups_sc_status_e: {
  NONE: 0,
  OK: 1,
  IO_ERROR: 2,
  TIMEOUT: 3,
  NO_RESPONSE: 4,
  BAD_MESSAGE: 5,
  TOO_BIG: 6,
  NOT_IMPLEMENTED: 7,
};

declare const at_alpha_t: {
  at_alpha_not_premultiplied: 0,
  at_alpha_opaque: 1,
  at_alpha_premultiplied: 2,
  at_alpha_count: 3,
};

declare const _Unwind_VRS_DataRepresentation: {
  UINT32: 0,
  VFPX: 1,
  UINT64: 3,
  FLOAT: 4,
  DOUBLE: 5,
};

declare const _Unwind_VRS_RegClass: {
  CORE: 0,
  VFP: 1,
  WMMXD: 3,
  WMMXC: 4,
  PSEUDO: 5,
};

declare const acl_perm_t: {
  READ_DATA: 2,
  LIST_DIRECTORY: 2,
  WRITE_DATA: 4,
  ADD_FILE: 4,
  EXECUTE: 8,
  SEARCH: 8,
  DELETE: 16,
  APPEND_DATA: 32,
  ADD_SUBDIRECTORY: 32,
  DELETE_CHILD: 64,
  READ_ATTRIBUTES: 128,
  WRITE_ATTRIBUTES: 256,
  READ_EXTATTRIBUTES: 512,
  WRITE_EXTATTRIBUTES: 1024,
  READ_SECURITY: 2048,
  WRITE_SECURITY: 4096,
  CHANGE_OWNER: 8192,
  SYNCHRONIZE: 1048576,
};

declare const thread_snapshot_flags: {
  HasDispatchSerial: 4,
  StacksPCOnly: 8,
  ThreadDarwinBG: 16,
  ThreadIOPassive: 32,
  ThreadSuspended: 64,
  ThreadTruncatedBT: 128,
  GlobalForcedIdle: 256,
  ThreadFaultedBT: 512,
  ThreadTriedFaultBT: 1024,
  ThreadOnCore: 2048,
  ThreadIdleWorker: 4096,
  ThreadMain: 8192,
  ThreadTruncKernBT: 16384,
  ThreadTruncUserBT: 32768,
  ThreadTruncUserAsyncBT: 65536,
};

declare const UJoiningGroup: {
  NO_JOINING_GROUP: 0,
  AIN: 1,
  ALAPH: 2,
  ALEF: 3,
  BEH: 4,
  BETH: 5,
  DAL: 6,
  DALATH_RISH: 7,
  E: 8,
  FEH: 9,
  FINAL_SEMKATH: 10,
  GAF: 11,
  GAMAL: 12,
  HAH: 13,
  TEH_MARBUTA_GOAL: 14,
  HAMZA_ON_HEH_GOAL: 14,
  HE: 15,
  HEH: 16,
  HEH_GOAL: 17,
  HETH: 18,
  KAF: 19,
  KAPH: 20,
  KNOTTED_HEH: 21,
  LAM: 22,
  LAMADH: 23,
  MEEM: 24,
  MIM: 25,
  NOON: 26,
  NUN: 27,
  PE: 28,
  QAF: 29,
  QAPH: 30,
  REH: 31,
  REVERSED_PE: 32,
  SAD: 33,
  SADHE: 34,
  SEEN: 35,
  SEMKATH: 36,
  SHIN: 37,
  SWASH_KAF: 38,
  SYRIAC_WAW: 39,
  TAH: 40,
  TAW: 41,
  TEH_MARBUTA: 42,
  TETH: 43,
  WAW: 44,
  YEH: 45,
  YEH_BARREE: 46,
  YEH_WITH_TAIL: 47,
  YUDH: 48,
  YUDH_HE: 49,
  ZAIN: 50,
  FE: 51,
  KHAPH: 52,
  ZHAIN: 53,
  BURUSHASKI_YEH_BARREE: 54,
  FARSI_YEH: 55,
  NYA: 56,
  ROHINGYA_YEH: 57,
  MANICHAEAN_ALEPH: 58,
  MANICHAEAN_AYIN: 59,
  MANICHAEAN_BETH: 60,
  MANICHAEAN_DALETH: 61,
  MANICHAEAN_DHAMEDH: 62,
  MANICHAEAN_FIVE: 63,
  MANICHAEAN_GIMEL: 64,
  MANICHAEAN_HETH: 65,
  MANICHAEAN_HUNDRED: 66,
  MANICHAEAN_KAPH: 67,
  MANICHAEAN_LAMEDH: 68,
  MANICHAEAN_MEM: 69,
  MANICHAEAN_NUN: 70,
  MANICHAEAN_ONE: 71,
  MANICHAEAN_PE: 72,
  MANICHAEAN_QOPH: 73,
  MANICHAEAN_RESH: 74,
  MANICHAEAN_SADHE: 75,
  MANICHAEAN_SAMEKH: 76,
  MANICHAEAN_TAW: 77,
  MANICHAEAN_TEN: 78,
  MANICHAEAN_TETH: 79,
  MANICHAEAN_THAMEDH: 80,
  MANICHAEAN_TWENTY: 81,
  MANICHAEAN_WAW: 82,
  MANICHAEAN_YODH: 83,
  MANICHAEAN_ZAYIN: 84,
  STRAIGHT_WAW: 85,
  AFRICAN_FEH: 86,
  AFRICAN_NOON: 87,
  AFRICAN_QAF: 88,
  MALAYALAM_BHA: 89,
  MALAYALAM_JA: 90,
  MALAYALAM_LLA: 91,
  MALAYALAM_LLLA: 92,
  MALAYALAM_NGA: 93,
  MALAYALAM_NNA: 94,
  MALAYALAM_NNNA: 95,
  MALAYALAM_NYA: 96,
  MALAYALAM_RA: 97,
  MALAYALAM_SSA: 98,
  MALAYALAM_TTA: 99,
  HANIFI_ROHINGYA_KINNA_YA: 100,
  HANIFI_ROHINGYA_PA: 101,
  THIN_YEH: 102,
  VERTICAL_TAIL: 103,
  KASHMIRI_YEH: 104,
  COUNT: 105,
};

declare const xpc_session_create_flags_t: {
  NONE: 0,
  INACTIVE: 1,
  MACH_PRIVILEGED: 2,
};

declare const reloc_type_arm64: {
  UNSIGNED: 0,
  SUBTRACTOR: 1,
  BRANCH26: 2,
  PAGE21: 3,
  PAGEOFF12: 4,
  GOT_LOAD_PAGE21: 5,
  GOT_LOAD_PAGEOFF12: 6,
  POINTER_TO_GOT: 7,
  TLVP_LOAD_PAGE21: 8,
  TLVP_LOAD_PAGEOFF12: 9,
  ADDEND: 10,
  AUTHENTICATED_POINTER: 11,
};

declare const UProperty: {
  ALPHABETIC: 0,
  BINARY_START: 0,
  ASCII_HEX_DIGIT: 1,
  BIDI_CONTROL: 2,
  BIDI_MIRRORED: 3,
  DASH: 4,
  DEFAULT_IGNORABLE_CODE_POINT: 5,
  DEPRECATED: 6,
  DIACRITIC: 7,
  EXTENDER: 8,
  FULL_COMPOSITION_EXCLUSION: 9,
  GRAPHEME_BASE: 10,
  GRAPHEME_EXTEND: 11,
  GRAPHEME_LINK: 12,
  HEX_DIGIT: 13,
  HYPHEN: 14,
  ID_CONTINUE: 15,
  ID_START: 16,
  IDEOGRAPHIC: 17,
  IDS_BINARY_OPERATOR: 18,
  IDS_TRINARY_OPERATOR: 19,
  JOIN_CONTROL: 20,
  LOGICAL_ORDER_EXCEPTION: 21,
  LOWERCASE: 22,
  MATH: 23,
  NONCHARACTER_CODE_POINT: 24,
  QUOTATION_MARK: 25,
  RADICAL: 26,
  SOFT_DOTTED: 27,
  TERMINAL_PUNCTUATION: 28,
  UNIFIED_IDEOGRAPH: 29,
  UPPERCASE: 30,
  WHITE_SPACE: 31,
  XID_CONTINUE: 32,
  XID_START: 33,
  CASE_SENSITIVE: 34,
  S_TERM: 35,
  VARIATION_SELECTOR: 36,
  NFD_INERT: 37,
  NFKD_INERT: 38,
  NFC_INERT: 39,
  NFKC_INERT: 40,
  SEGMENT_STARTER: 41,
  PATTERN_SYNTAX: 42,
  PATTERN_WHITE_SPACE: 43,
  POSIX_ALNUM: 44,
  POSIX_BLANK: 45,
  POSIX_GRAPH: 46,
  POSIX_PRINT: 47,
  POSIX_XDIGIT: 48,
  CASED: 49,
  CASE_IGNORABLE: 50,
  CHANGES_WHEN_LOWERCASED: 51,
  CHANGES_WHEN_UPPERCASED: 52,
  CHANGES_WHEN_TITLECASED: 53,
  CHANGES_WHEN_CASEFOLDED: 54,
  CHANGES_WHEN_CASEMAPPED: 55,
  CHANGES_WHEN_NFKC_CASEFOLDED: 56,
  EMOJI: 57,
  EMOJI_PRESENTATION: 58,
  EMOJI_MODIFIER: 59,
  EMOJI_MODIFIER_BASE: 60,
  EMOJI_COMPONENT: 61,
  REGIONAL_INDICATOR: 62,
  PREPENDED_CONCATENATION_MARK: 63,
  EXTENDED_PICTOGRAPHIC: 64,
  BASIC_EMOJI: 65,
  EMOJI_KEYCAP_SEQUENCE: 66,
  RGI_EMOJI_MODIFIER_SEQUENCE: 67,
  RGI_EMOJI_FLAG_SEQUENCE: 68,
  RGI_EMOJI_TAG_SEQUENCE: 69,
  RGI_EMOJI_ZWJ_SEQUENCE: 70,
  RGI_EMOJI: 71,
  IDS_UNARY_OPERATOR: 72,
  ID_COMPAT_MATH_START: 73,
  ID_COMPAT_MATH_CONTINUE: 74,
  MODIFIER_COMBINING_MARK: 75,
  BINARY_LIMIT: 76,
  BIDI_CLASS: 4096,
  INT_START: 4096,
  BLOCK: 4097,
  CANONICAL_COMBINING_CLASS: 4098,
  DECOMPOSITION_TYPE: 4099,
  EAST_ASIAN_WIDTH: 4100,
  GENERAL_CATEGORY: 4101,
  JOINING_GROUP: 4102,
  JOINING_TYPE: 4103,
  LINE_BREAK: 4104,
  NUMERIC_TYPE: 4105,
  SCRIPT: 4106,
  HANGUL_SYLLABLE_TYPE: 4107,
  NFD_QUICK_CHECK: 4108,
  NFKD_QUICK_CHECK: 4109,
  NFC_QUICK_CHECK: 4110,
  NFKC_QUICK_CHECK: 4111,
  LEAD_CANONICAL_COMBINING_CLASS: 4112,
  TRAIL_CANONICAL_COMBINING_CLASS: 4113,
  GRAPHEME_CLUSTER_BREAK: 4114,
  SENTENCE_BREAK: 4115,
  WORD_BREAK: 4116,
  BIDI_PAIRED_BRACKET_TYPE: 4117,
  INDIC_POSITIONAL_CATEGORY: 4118,
  INDIC_SYLLABIC_CATEGORY: 4119,
  VERTICAL_ORIENTATION: 4120,
  IDENTIFIER_STATUS: 4121,
  INDIC_CONJUNCT_BREAK: 4122,
  INT_LIMIT: 4123,
  GENERAL_CATEGORY_MASK: 8192,
  MASK_START: 8192,
  MASK_LIMIT: 8193,
  NUMERIC_VALUE: 12288,
  DOUBLE_START: 12288,
  DOUBLE_LIMIT: 12289,
  AGE: 16384,
  STRING_START: 16384,
  BIDI_MIRRORING_GLYPH: 16385,
  CASE_FOLDING: 16386,
  ISO_COMMENT: 16387,
  LOWERCASE_MAPPING: 16388,
  NAME: 16389,
  SIMPLE_CASE_FOLDING: 16390,
  SIMPLE_LOWERCASE_MAPPING: 16391,
  SIMPLE_TITLECASE_MAPPING: 16392,
  SIMPLE_UPPERCASE_MAPPING: 16393,
  TITLECASE_MAPPING: 16394,
  UNICODE_1_NAME: 16395,
  UPPERCASE_MAPPING: 16396,
  BIDI_PAIRED_BRACKET: 16397,
  STRING_LIMIT: 16398,
  SCRIPT_EXTENSIONS: 28672,
  OTHER_PROPERTY_START: 28672,
  IDENTIFIER_TYPE: 28673,
  OTHER_PROPERTY_LIMIT: 28674,
  INVALID_CODE: -1,
};

declare const dyld_image_mode: {
  dyld_image_adding: 0,
  dyld_image_removing: 1,
  dyld_image_info_change: 2,
  dyld_image_dyld_moved: 3,
};

declare const ifnet_interface_advisory_interface_type: {
  WIFI: 1,
  CELL: 2,
};

declare const cryptex_auth_type_t: {
  X1_AUTH_ENV_GENERIC: 4,
  X1_AUTH_ENV_GENERIC_SUPPLEMENTAL: 5,
  X_AUTH_PDI_NONCE: 6,
  X_AUTH_MOBILE_ASSET: 8,
  X_AUTH_MAX: 8,
};

declare const http_auth_e: {
  NONE: 0,
  BASIC: 1,
  MD5: 2,
  MD5_SESS: 3,
  MD5_INT: 4,
  MD5_SESS_INT: 5,
  NEGOTIATE: 6,
};

declare const au_sdev_open_flags: {
  NONBLOCK: 1,
  ALLSESSIONS: 65536,
};

declare const virtual_memory_guard_exception_code_t: {
  DEALLOC_GAP: 1,
  RECLAIM_COPYIO_FAILURE: 2,
  RECLAIM_INDEX_FAILURE: 4,
  RECLAIM_DEALLOCATE_FAILURE: 8,
  RECLAIM_ACCOUNTING_FAILURE: 9,
  SEC_IOPL_ON_EXEC_PAGE: 10,
  SEC_EXEC_ON_IOPL_PAGE: 11,
  SEC_UPL_WRITE_ON_EXEC_REGION: 12,
  SEC_ACCESS_FAULT: 98,
  SEC_ASYNC_ACCESS_FAULT: 99,
  SEC_COPY_DENIED: 100,
  SEC_SHARING_DENIED: 101,
};

declare const dot3Vendors: {
  AMD: 1,
  Intel: 2,
  National: 4,
  Fujitsu: 5,
  Digital: 6,
  WesternDigital: 7,
};

declare const DYLD_BOOL: {
  FALS: 0,
  TRU: 1,
};

declare const ifnet_interface_advisory_wifi_freq_band: {
  NOT_AVAIL: 0,
  WIFI_24GHZ: 1,
  WIFI_5GHZ: 2,
  WIFI_6GHZ: 3,
};

declare const launch_data_type_t: {
  DICTIONARY: 1,
  ARRAY: 2,
  FD: 3,
  INTEGER: 4,
  REAL: 5,
  BOOL: 6,
  STRING: 7,
  OPAQUE: 8,
  ERRNO: 9,
  MACHPORT: 10,
};

declare const os_log_type_t: {
  DEFAULT: 0,
  INFO: 1,
  DEBUG: 2,
  ERROR: 16,
  FAULT: 17,
};

declare const BTreeKeyLimits: {
  kMaxKeyLength: 520,
};

declare const OSThermalPressureLevel: {
  Nominal: 0,
  Moderate: 1,
  Heavy: 2,
  Trapping: 3,
  Sleeping: 4,
};

declare const uio_rw: {
  READ: 0,
  WRITE: 1,
};

declare const compression_stream_operation: {
  EN: 0,
  DE: 1,
};

declare const kc_format: {
  Unknown: 0,
  Static: 1,
  Dynamic: 2,
  Fileset: 3,
  KCGEN: 4,
};

declare const DNSServiceAAAAPolicy: {
  None: 0,
  Fallback: 1,
};

declare const ifnet_interface_advisory_version: {
  N_1: 1,
  N_2: 2,
  N_CURRENT: 2,
};

declare const http_state_e: {
  ERROR: -1,
  WAITING: 0,
  OPTIONS: 1,
  GET: 2,
  GET_SEND: 3,
  HEAD: 4,
  POST: 5,
  POST_RECV: 6,
  POST_SEND: 7,
  PUT: 8,
  PUT_RECV: 9,
  DELETE: 10,
  TRACE: 11,
  CONNECT: 12,
  STATUS: 13,
  UNKNOWN_METHOD: 14,
  UNKNOWN_VERSION: 15,
};

declare const malloc_zone_malloc_options_t: {
  NONE: 0,
  CLEAR: 1,
  CANONICAL_TAG: 2,
};

declare const at_texel_format_t: {
  at_texel_format_invalid: 0,
  at_texel_format_l8_unorm: 1,
  at_texel_format_l16_unorm: 2,
  at_texel_format_la8_unorm: 3,
  at_texel_format_la16_unorm: 4,
  at_texel_format_rgba8_unorm: 5,
  at_texel_format_bgra8_unorm: 6,
  at_texel_format_rgba16_unorm: 7,
  at_texel_format_l16_float: 8,
  at_texel_format_la16_float: 9,
  at_texel_format_rgba16_float: 10,
  at_texel_format_count: 11,
};

declare const ldap_sync_refresh_t: {
  NONE: -1,
  PHASE_FLAG: 16,
  IDSET_FLAG: 32,
  DONE_FLAG: 64,
  PRESENT: 0,
  ADD: 1,
  MODIFY: 2,
  DELETE: 3,
  PRESENTS: 16,
  DELETES: 19,
  PRESENTS_IDSET: 48,
  DELETES_IDSET: 51,
  DONE: 80,
};

declare const xcselect_host_sdk_policy_t: {
  MATCHING_PREFERRED: 1,
  MATCHING_ONLY: 2,
  LATEST: 3,
};

declare const http_keepalive_e: {
  FF: 0,
  N: 1,
};

declare const cups_mode_e: {
  READ: 0,
  WRITE: 1,
  WRITE_COMPRESSED: 2,
  WRITE_PWG: 3,
  WRITE_APPLE: 4,
};

declare const UVerticalOrientation: {
  ROTATED: 0,
  TRANSFORMED_ROTATED: 1,
  TRANSFORMED_UPRIGHT: 2,
  UPRIGHT: 3,
};

declare const http_uri_coding_e: {
  NONE: 0,
  USERNAME: 1,
  HOSTNAME: 2,
  RESOURCE: 4,
  MOST: 7,
  QUERY: 8,
  ALL: 15,
  RFC6874: 16,
};

declare const http_status_e: {
  ERROR: -1,
  NONE: 0,
  CONTINUE: 100,
  SWITCHING_PROTOCOLS: 101,
  OK: 200,
  CREATED: 201,
  ACCEPTED: 202,
  NOT_AUTHORITATIVE: 203,
  NO_CONTENT: 204,
  RESET_CONTENT: 205,
  PARTIAL_CONTENT: 206,
  MULTIPLE_CHOICES: 300,
  MOVED_PERMANENTLY: 301,
  FOUND: 302,
  SEE_OTHER: 303,
  NOT_MODIFIED: 304,
  USE_PROXY: 305,
  TEMPORARY_REDIRECT: 307,
  BAD_REQUEST: 400,
  UNAUTHORIZED: 401,
  PAYMENT_REQUIRED: 402,
  FORBIDDEN: 403,
  NOT_FOUND: 404,
  METHOD_NOT_ALLOWED: 405,
  NOT_ACCEPTABLE: 406,
  PROXY_AUTHENTICATION: 407,
  REQUEST_TIMEOUT: 408,
  CONFLICT: 409,
  GONE: 410,
  LENGTH_REQUIRED: 411,
  PRECONDITION: 412,
  REQUEST_TOO_LARGE: 413,
  URI_TOO_LONG: 414,
  UNSUPPORTED_MEDIATYPE: 415,
  REQUESTED_RANGE: 416,
  EXPECTATION_FAILED: 417,
  UPGRADE_REQUIRED: 426,
  SERVER_ERROR: 500,
  NOT_IMPLEMENTED: 501,
  BAD_GATEWAY: 502,
  SERVICE_UNAVAILABLE: 503,
  GATEWAY_TIMEOUT: 504,
  NOT_SUPPORTED: 505,
  CUPS_AUTHORIZATION_CANCELED: 1000,
  CUPS_PKI_ERROR: 1001,
  CUPS_WEBIF_DISABLED: 1002,
};

declare const task_exec_flags: {
  Translated: 1,
  HardenedHeap: 2,
  Reserved00: 4,
  Reserved01: 8,
  Reserved02: 16,
  Reserved03: 32,
};

declare const ipp_quality_e: {
  DRAFT: 3,
  NORMAL: 4,
  HIGH: 5,
};

declare const ipp_finishings_e: {
  NONE: 3,
  STAPLE: 4,
  PUNCH: 5,
  COVER: 6,
  BIND: 7,
  SADDLE_STITCH: 8,
  EDGE_STITCH: 9,
  FOLD: 10,
  TRIM: 11,
  BALE: 12,
  BOOKLET_MAKER: 13,
  JOG_OFFSET: 14,
  COAT: 15,
  LAMINATE: 16,
  STAPLE_TOP_LEFT: 20,
  STAPLE_BOTTOM_LEFT: 21,
  STAPLE_TOP_RIGHT: 22,
  STAPLE_BOTTOM_RIGHT: 23,
  EDGE_STITCH_LEFT: 24,
  EDGE_STITCH_TOP: 25,
  EDGE_STITCH_RIGHT: 26,
  EDGE_STITCH_BOTTOM: 27,
  STAPLE_DUAL_LEFT: 28,
  STAPLE_DUAL_TOP: 29,
  STAPLE_DUAL_RIGHT: 30,
  STAPLE_DUAL_BOTTOM: 31,
  STAPLE_TRIPLE_LEFT: 32,
  STAPLE_TRIPLE_TOP: 33,
  STAPLE_TRIPLE_RIGHT: 34,
  STAPLE_TRIPLE_BOTTOM: 35,
  BIND_LEFT: 50,
  BIND_TOP: 51,
  BIND_RIGHT: 52,
  BIND_BOTTOM: 53,
  TRIM_AFTER_PAGES: 60,
  TRIM_AFTER_DOCUMENTS: 61,
  TRIM_AFTER_COPIES: 62,
  TRIM_AFTER_JOB: 63,
  PUNCH_TOP_LEFT: 70,
  PUNCH_BOTTOM_LEFT: 71,
  PUNCH_TOP_RIGHT: 72,
  PUNCH_BOTTOM_RIGHT: 73,
  PUNCH_DUAL_LEFT: 74,
  PUNCH_DUAL_TOP: 75,
  PUNCH_DUAL_RIGHT: 76,
  PUNCH_DUAL_BOTTOM: 77,
  PUNCH_TRIPLE_LEFT: 78,
  PUNCH_TRIPLE_TOP: 79,
  PUNCH_TRIPLE_RIGHT: 80,
  PUNCH_TRIPLE_BOTTOM: 81,
  PUNCH_QUAD_LEFT: 82,
  PUNCH_QUAD_TOP: 83,
  PUNCH_QUAD_RIGHT: 84,
  PUNCH_QUAD_BOTTOM: 85,
  PUNCH_MULTIPLE_LEFT: 86,
  PUNCH_MULTIPLE_TOP: 87,
  PUNCH_MULTIPLE_RIGHT: 88,
  PUNCH_MULTIPLE_BOTTOM: 89,
  FOLD_ACCORDION: 90,
  FOLD_DOUBLE_GATE: 91,
  FOLD_GATE: 92,
  FOLD_HALF: 93,
  FOLD_HALF_Z: 94,
  FOLD_LEFT_GATE: 95,
  FOLD_LETTER: 96,
  FOLD_PARALLEL: 97,
  FOLD_POSTER: 98,
  FOLD_RIGHT_GATE: 99,
  FOLD_Z: 100,
  FOLD_ENGINEERING_Z: 101,
  CUPS_PUNCH_TOP_LEFT: 1073741894,
  CUPS_PUNCH_BOTTOM_LEFT: 1073741895,
  CUPS_PUNCH_TOP_RIGHT: 1073741896,
  CUPS_PUNCH_BOTTOM_RIGHT: 1073741897,
  CUPS_PUNCH_DUAL_LEFT: 1073741898,
  CUPS_PUNCH_DUAL_TOP: 1073741899,
  CUPS_PUNCH_DUAL_RIGHT: 1073741900,
  CUPS_PUNCH_DUAL_BOTTOM: 1073741901,
  CUPS_PUNCH_TRIPLE_LEFT: 1073741902,
  CUPS_PUNCH_TRIPLE_TOP: 1073741903,
  CUPS_PUNCH_TRIPLE_RIGHT: 1073741904,
  CUPS_PUNCH_TRIPLE_BOTTOM: 1073741905,
  CUPS_PUNCH_QUAD_LEFT: 1073741906,
  CUPS_PUNCH_QUAD_TOP: 1073741907,
  CUPS_PUNCH_QUAD_RIGHT: 1073741908,
  CUPS_PUNCH_QUAD_BOTTOM: 1073741909,
  CUPS_FOLD_ACCORDION: 1073741914,
  CUPS_FOLD_DOUBLE_GATE: 1073741915,
  CUPS_FOLD_GATE: 1073741916,
  CUPS_FOLD_HALF: 1073741917,
  CUPS_FOLD_HALF_Z: 1073741918,
  CUPS_FOLD_LEFT_GATE: 1073741919,
  CUPS_FOLD_LETTER: 1073741920,
  CUPS_FOLD_PARALLEL: 1073741921,
  CUPS_FOLD_POSTER: 1073741922,
  CUPS_FOLD_RIGHT_GATE: 1073741923,
  CUPS_FOLD_Z: 1073741924,
};

declare const task_transition_type: {
  kTaskIsTerminated: 1,
};

declare const exclave_scresult_flags: {
  kExclaveScresultHaveIPCStack: 1,
};

declare const malloc_type_kind_v0_t: {
  OTHER: 0,
  OBJC: 1,
  SWIFT: 2,
  CXX: 3,
};

declare const os_unfair_lock_flags_t: {
  NONE: 0,
  ADAPTIVE_SPIN: 262144,
};

declare const thread_exclaves_flags: {
  RPCActive: 1,
  UpcallActive: 2,
  SchedulerRequest: 4,
};

declare const cups_sc_bidi_e: {
  NOT_: 0,
  CUPS_SC_BIDI_SUPPORTED: 1,
};

declare const cups_cspace_e: {
  W: 0,
  RGB: 1,
  RGBA: 2,
  K: 3,
  CMY: 4,
  YMC: 5,
  CMYK: 6,
  YMCK: 7,
  KCMY: 8,
  KCMYcm: 9,
  GMCK: 10,
  GMCS: 11,
  WHITE: 12,
  GOLD: 13,
  SILVER: 14,
  CIEXYZ: 15,
  CIELab: 16,
  RGBW: 17,
  SW: 18,
  SRGB: 19,
  ADOBERGB: 20,
  P3E: 21,
  GRAYE: 22,
  ICC1: 32,
  ICC2: 33,
  ICC3: 34,
  ICC4: 35,
  ICC5: 36,
  ICC6: 37,
  ICC7: 38,
  ICC8: 39,
  ICC9: 40,
  ICCA: 41,
  ICCB: 42,
  ICCC: 43,
  ICCD: 44,
  ICCE: 45,
  ICCF: 46,
  DEVICE1: 48,
  DEVICE2: 49,
  DEVICE3: 50,
  DEVICE4: 51,
  DEVICE5: 52,
  DEVICE6: 53,
  DEVICE7: 54,
  DEVICE8: 55,
  DEVICE9: 56,
  DEVICEA: 57,
  DEVICEB: 58,
  DEVICEC: 59,
  DEVICED: 60,
  DEVICEE: 61,
  DEVICEF: 62,
};

declare const so_tracker_attribute: {
  INVALID: 0,
  ADDRESS_FAMILY: 1,
  ADDRESS: 2,
  APP_UUID: 3,
  DOMAIN: 4,
  DOMAIN_OWNER: 5,
  FLAGS: 6,
  DUMP_ENTRY: 7,
  MEMORY_USED: 8,
  MAX: 9,
};

declare const UBidiPairedBracketType: {
  NONE: 0,
  OPEN: 1,
  CLOSE: 2,
  COUNT: 3,
};

declare const KCDATA_SUBTYPE_TYPES: {
  CHAR: 1,
  INT8: 2,
  UINT8: 3,
  INT16: 4,
  UINT16: 5,
  INT32: 6,
  UINT32: 7,
  INT64: 8,
  UINT64: 9,
};

declare const ppd_cs_e: {
  CMYK: -4,
  CMY: -3,
  GRAY: 1,
  RGB: 3,
  RGBK: 4,
  N: 5,
};

declare const http_encryption_e: {
  IF_REQUESTED: 0,
  NEVER: 1,
  REQUIRED: 2,
  ALWAYS: 3,
};

declare const UCPMapRangeOption: {
  NORMAL: 0,
  FIXED_LEAD_SURROGATES: 1,
  FIXED_ALL_SURROGATES: 2,
};

declare const vtagtype: {
  NON: 0,
  UFS: 1,
  NFS: 2,
  MFS: 3,
  MSDOSFS: 4,
  LFS: 5,
  LOFS: 6,
  FDESC: 7,
  PORTAL: 8,
  NULL: 9,
  UMAP: 10,
  KERNFS: 11,
  PROCFS: 12,
  AFS: 13,
  ISOFS: 14,
  MOCKFS: 15,
  HFS: 16,
  ZFS: 17,
  DEVFS: 18,
  WEBDAV: 19,
  UDF: 20,
  AFP: 21,
  CDDA: 22,
  CIFS: 23,
  OTHER: 24,
  APFS: 25,
  LOCKERFS: 26,
  BINDFS: 27,
};

declare const os_clockid_t: {
  OS_CLOCK_MACH_ABSOLUTE_TIME: 32,
};

declare const exclave_ipcstackentry_flags: {
  InvocationID: 1,
  Stack: 2,
};

declare const UCharIteratorOrigin: {
  START: 0,
  CURRENT: 1,
  LIMIT: 2,
  ZERO: 3,
  LENGTH: 4,
};

declare const UDecompositionType: {
  NONE: 0,
  CANONICAL: 1,
  COMPAT: 2,
  CIRCLE: 3,
  FINAL: 4,
  FONT: 5,
  FRACTION: 6,
  INITIAL: 7,
  ISOLATED: 8,
  MEDIAL: 9,
  NARROW: 10,
  NOBREAK: 11,
  SMALL: 12,
  SQUARE: 13,
  SUB: 14,
  SUPER: 15,
  VERTICAL: 16,
  WIDE: 17,
  COUNT: 18,
};

declare const idtype_t: {
  ALL: 0,
  PID: 1,
  PGID: 2,
};

declare const exclave_addressspace_flags: {
  kExclaveAddressSpaceHaveSlide: 1,
};

declare const locate_service_type: {
  locate_service_kdc: 1,
  locate_service_master_kdc: 2,
  locate_service_kadmin: 3,
  locate_service_krb524: 4,
  locate_service_kpasswd: 5,
};

declare const UJoiningType: {
  NON_JOINING: 0,
  JOIN_CAUSING: 1,
  DUAL_JOINING: 2,
  LEFT_JOINING: 3,
  RIGHT_JOINING: 4,
  TRANSPARENT: 5,
  COUNT: 6,
};

declare const xpc_listener_create_flags_t: {
  NONE: 0,
  INACTIVE: 1,
  FORCE_MACH: 2,
  FORCE_XPCSERVICE: 4,
};

declare const ifnet_interface_advisory_direction: {
  T: 1,
  R: 2,
};

declare const ipp_orient_e: {
  PORTRAIT: 3,
  LANDSCAPE: 4,
  REVERSE_LANDSCAPE: 5,
  REVERSE_PORTRAIT: 6,
  NONE: 7,
};

declare const ipp_state_e: {
  ERROR: -1,
  IDLE: 0,
  HEADER: 1,
  ATTRIBUTE: 2,
  DATA: 3,
};

declare const ULineBreak: {
  UNKNOWN: 0,
  AMBIGUOUS: 1,
  ALPHABETIC: 2,
  BREAK_BOTH: 3,
  BREAK_AFTER: 4,
  BREAK_BEFORE: 5,
  MANDATORY_BREAK: 6,
  CONTINGENT_BREAK: 7,
  CLOSE_PUNCTUATION: 8,
  COMBINING_MARK: 9,
  CARRIAGE_RETURN: 10,
  EXCLAMATION: 11,
  GLUE: 12,
  HYPHEN: 13,
  IDEOGRAPHIC: 14,
  INSEPARABLE: 15,
  INSEPERABLE: 15,
  INFIX_NUMERIC: 16,
  LINE_FEED: 17,
  NONSTARTER: 18,
  NUMERIC: 19,
  OPEN_PUNCTUATION: 20,
  POSTFIX_NUMERIC: 21,
  PREFIX_NUMERIC: 22,
  QUOTATION: 23,
  COMPLEX_CONTEXT: 24,
  SURROGATE: 25,
  SPACE: 26,
  BREAK_SYMBOLS: 27,
  ZWSPACE: 28,
  NEXT_LINE: 29,
  WORD_JOINER: 30,
  H2: 31,
  H3: 32,
  JL: 33,
  JT: 34,
  JV: 35,
  CLOSE_PARENTHESIS: 36,
  CONDITIONAL_JAPANESE_STARTER: 37,
  HEBREW_LETTER: 38,
  REGIONAL_INDICATOR: 39,
  E_BASE: 40,
  E_MODIFIER: 41,
  ZWJ: 42,
  AKSARA: 43,
  AKSARA_PREBASE: 44,
  AKSARA_START: 45,
  VIRAMA_FINAL: 46,
  VIRAMA: 47,
  COUNT: 48,
};

declare const http_version_e: {
  N_0_9: 9,
  N_1_0: 100,
  N_1_1: 101,
};

declare const acl_flag_t: {
  FLAG_DEFER_INHERIT: 1,
  FLAG_NO_INHERIT: 131072,
  ENTRY_INHERITED: 16,
  ENTRY_FILE_INHERIT: 32,
  ENTRY_DIRECTORY_INHERIT: 64,
  ENTRY_LIMIT_INHERIT: 128,
  ENTRY_ONLY_INHERIT: 256,
};

declare const ipp_op_e: {
  CUPS_INVALID: -1,
  CUPS_NONE: 0,
  PRINT_JOB: 2,
  PRINT_URI: 3,
  VALIDATE_JOB: 4,
  CREATE_JOB: 5,
  SEND_DOCUMENT: 6,
  SEND_URI: 7,
  CANCEL_JOB: 8,
  GET_JOB_ATTRIBUTES: 9,
  GET_JOBS: 10,
  GET_PRINTER_ATTRIBUTES: 11,
  HOLD_JOB: 12,
  RELEASE_JOB: 13,
  RESTART_JOB: 14,
  PAUSE_PRINTER: 16,
  RESUME_PRINTER: 17,
  PURGE_JOBS: 18,
  SET_PRINTER_ATTRIBUTES: 19,
  SET_JOB_ATTRIBUTES: 20,
  GET_PRINTER_SUPPORTED_VALUES: 21,
  CREATE_PRINTER_SUBSCRIPTIONS: 22,
  CREATE_JOB_SUBSCRIPTIONS: 23,
  GET_SUBSCRIPTION_ATTRIBUTES: 24,
  GET_SUBSCRIPTIONS: 25,
  RENEW_SUBSCRIPTION: 26,
  CANCEL_SUBSCRIPTION: 27,
  GET_NOTIFICATIONS: 28,
  SEND_NOTIFICATIONS: 29,
  GET_RESOURCE_ATTRIBUTES: 30,
  GET_RESOURCE_DATA: 31,
  GET_RESOURCES: 32,
  GET_PRINT_SUPPORT_FILES: 33,
  ENABLE_PRINTER: 34,
  DISABLE_PRINTER: 35,
  PAUSE_PRINTER_AFTER_CURRENT_JOB: 36,
  HOLD_NEW_JOBS: 37,
  RELEASE_HELD_NEW_JOBS: 38,
  DEACTIVATE_PRINTER: 39,
  ACTIVATE_PRINTER: 40,
  RESTART_PRINTER: 41,
  SHUTDOWN_PRINTER: 42,
  STARTUP_PRINTER: 43,
  REPROCESS_JOB: 44,
  CANCEL_CURRENT_JOB: 45,
  SUSPEND_CURRENT_JOB: 46,
  RESUME_JOB: 47,
  PROMOTE_JOB: 48,
  SCHEDULE_JOB_AFTER: 49,
  CANCEL_DOCUMENT: 51,
  GET_DOCUMENT_ATTRIBUTES: 52,
  GET_DOCUMENTS: 53,
  DELETE_DOCUMENT: 54,
  SET_DOCUMENT_ATTRIBUTES: 55,
  CANCEL_JOBS: 56,
  CANCEL_MY_JOBS: 57,
  RESUBMIT_JOB: 58,
  CLOSE_JOB: 59,
  IDENTIFY_PRINTER: 60,
  VALIDATE_DOCUMENT: 61,
  ADD_DOCUMENT_IMAGES: 62,
  ACKNOWLEDGE_DOCUMENT: 63,
  ACKNOWLEDGE_IDENTIFY_PRINTER: 64,
  ACKNOWLEDGE_JOB: 65,
  FETCH_DOCUMENT: 66,
  FETCH_JOB: 67,
  GET_OUTPUT_DEVICE_ATTRIBUTES: 68,
  UPDATE_ACTIVE_JOBS: 69,
  DEREGISTER_OUTPUT_DEVICE: 70,
  UPDATE_DOCUMENT_STATUS: 71,
  UPDATE_JOB_STATUS: 72,
  UPDATE_OUTPUT_DEVICE_ATTRIBUTES: 73,
  GET_NEXT_DOCUMENT_DATA: 74,
  ALLOCATE_PRINTER_RESOURCES: 75,
  CREATE_PRINTER: 76,
  DEALLOCATE_PRINTER_RESOURCES: 77,
  DELETE_PRINTER: 78,
  GET_PRINTERS: 79,
  SHUTDOWN_ONE_PRINTER: 80,
  STARTUP_ONE_PRINTER: 81,
  CANCEL_RESOURCE: 82,
  CREATE_RESOURCE: 83,
  INSTALL_RESOURCE: 84,
  SEND_RESOURCE_DATA: 85,
  SET_RESOURCE_ATTRIBUTES: 86,
  CREATE_RESOURCE_SUBSCRIPTIONS: 87,
  CREATE_SYSTEM_SUBSCRIPTIONS: 88,
  DISABLE_ALL_PRINTERS: 89,
  ENABLE_ALL_PRINTERS: 90,
  GET_SYSTEM_ATTRIBUTES: 91,
  GET_SYSTEM_SUPPORTED_VALUES: 92,
  PAUSE_ALL_PRINTERS: 93,
  PAUSE_ALL_PRINTERS_AFTER_CURRENT_JOB: 94,
  REGISTER_OUTPUT_DEVICE: 95,
  RESTART_SYSTEM: 96,
  RESUME_ALL_PRINTERS: 97,
  SET_SYSTEM_ATTRIBUTES: 98,
  SHUTDOWN_ALL_PRINTERS: 99,
  STARTUP_ALL_PRINTERS: 100,
  PRIVATE: 16384,
  CUPS_GET_DEFAULT: 16385,
  CUPS_GET_PRINTERS: 16386,
  CUPS_ADD_MODIFY_PRINTER: 16387,
  CUPS_DELETE_PRINTER: 16388,
  CUPS_GET_CLASSES: 16389,
  CUPS_ADD_MODIFY_CLASS: 16390,
  CUPS_DELETE_CLASS: 16391,
  CUPS_ACCEPT_JOBS: 16392,
  CUPS_REJECT_JOBS: 16393,
  CUPS_SET_DEFAULT: 16394,
  CUPS_GET_DEVICES: 16395,
  CUPS_GET_PPDS: 16396,
  CUPS_MOVE_JOB: 16397,
  CUPS_AUTHENTICATE_JOB: 16398,
  CUPS_GET_PPD: 16399,
  CUPS_GET_DOCUMENT: 16423,
  CUPS_CREATE_LOCAL_PRINTER: 16424,
};

declare const sysdir_search_path_domain_mask_t: {
  USER: 1,
  LOCAL: 2,
  NETWORK: 4,
  SYSTEM: 8,
  ALL: 65535,
};

declare const NSObjectFileImageReturnCode: {
  Failure: 0,
  Success: 1,
  InappropriateFile: 2,
  Arch: 3,
  Format: 4,
  Access: 5,
};

declare const at_flags_t: {
  at_flags_default: 0,
  at_flags_skip_parameter_checking: 1,
  at_flags_print_debug_info: 2,
  at_flags_disable_multithreading: 4,
  at_flags_skip_error_calculation: 8,
  at_flags_flip_texel_region_vertically: 16,
  at_flags_srgb_linear_texels: 32,
  at_flags_weight_channels_equally: 64,
};

declare const ipc_info_object_type_t: {
  NONE: 0,
  THREAD_CONTROL: 1,
  TASK_CONTROL: 2,
  HOST: 3,
  HOST_PRIV: 4,
  PROCESSOR: 5,
  PROCESSOR_SET: 6,
  PROCESSOR_SET_NAME: 7,
  TIMER: 8,
  PORT_SUBST_ONCE: 9,
  MIG: 10,
  MEMORY_OBJECT: 11,
  XMM_PAGER: 12,
  XMM_KERNEL: 13,
  XMM_REPLY: 14,
  UND_REPLY: 15,
  HOST_NOTIFY: 16,
  HOST_SECURITY: 17,
  LEDGER: 18,
  MAIN_DEVICE: 19,
  TASK_NAME: 20,
  SUBSYSTEM: 21,
  IO_DONE_QUEUE: 22,
  SEMAPHORE: 23,
  LOCK_SET: 24,
  CLOCK: 25,
  CLOCK_CTRL: 26,
  IOKIT_IDENT: 27,
  NAMED_ENTRY: 28,
  IOKIT_CONNECT: 29,
  IOKIT_OBJECT: 30,
  UPL: 31,
  MEM_OBJ_CONTROL: 32,
  AU_SESSIONPORT: 33,
  FILEPORT: 34,
  LABELH: 35,
  TASK_RESUME: 36,
  VOUCHER: 37,
  VOUCHER_ATTR_CONTROL: 38,
  WORK_INTERVAL: 39,
  UX_HANDLER: 40,
  UEXT_OBJECT: 41,
  ARCADE_REG: 42,
  EVENTLINK: 43,
  TASK_INSPECT: 44,
  TASK_READ: 45,
  THREAD_INSPECT: 46,
  THREAD_READ: 47,
  SUID_CRED: 48,
  HYPERVISOR: 49,
  TASK_ID_TOKEN: 50,
  TASK_FATAL: 51,
  KCDATA: 52,
  EXCLAVES_RESOURCE: 53,
  UNKNOWN: -1,
};

declare const dispatch_block_flags_t: {
  BARRIER: 1,
  DETACHED: 2,
  ASSIGN_CURRENT: 4,
  NO_QOS_CLASS: 8,
  INHERIT_QOS_CLASS: 16,
  ENFORCE_QOS_CLASS: 32,
};

declare const panic_with_data_flags: {
  NONE: 0,
  EXCLAVE_STACKSHOT: 1,
  MAX: 2,
};

declare const UBlockCode: {
  NO_BLOCK: 0,
  BASIC_LATIN: 1,
  LATIN_1_SUPPLEMENT: 2,
  LATIN_EXTENDED_A: 3,
  LATIN_EXTENDED_B: 4,
  IPA_EXTENSIONS: 5,
  SPACING_MODIFIER_LETTERS: 6,
  COMBINING_DIACRITICAL_MARKS: 7,
  GREEK: 8,
  CYRILLIC: 9,
  ARMENIAN: 10,
  HEBREW: 11,
  ARABIC: 12,
  SYRIAC: 13,
  THAANA: 14,
  DEVANAGARI: 15,
  BENGALI: 16,
  GURMUKHI: 17,
  GUJARATI: 18,
  ORIYA: 19,
  TAMIL: 20,
  TELUGU: 21,
  KANNADA: 22,
  MALAYALAM: 23,
  SINHALA: 24,
  THAI: 25,
  LAO: 26,
  TIBETAN: 27,
  MYANMAR: 28,
  GEORGIAN: 29,
  HANGUL_JAMO: 30,
  ETHIOPIC: 31,
  CHEROKEE: 32,
  UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS: 33,
  OGHAM: 34,
  RUNIC: 35,
  KHMER: 36,
  MONGOLIAN: 37,
  LATIN_EXTENDED_ADDITIONAL: 38,
  GREEK_EXTENDED: 39,
  GENERAL_PUNCTUATION: 40,
  SUPERSCRIPTS_AND_SUBSCRIPTS: 41,
  CURRENCY_SYMBOLS: 42,
  COMBINING_MARKS_FOR_SYMBOLS: 43,
  LETTERLIKE_SYMBOLS: 44,
  NUMBER_FORMS: 45,
  ARROWS: 46,
  MATHEMATICAL_OPERATORS: 47,
  MISCELLANEOUS_TECHNICAL: 48,
  CONTROL_PICTURES: 49,
  OPTICAL_CHARACTER_RECOGNITION: 50,
  ENCLOSED_ALPHANUMERICS: 51,
  BOX_DRAWING: 52,
  BLOCK_ELEMENTS: 53,
  GEOMETRIC_SHAPES: 54,
  MISCELLANEOUS_SYMBOLS: 55,
  DINGBATS: 56,
  BRAILLE_PATTERNS: 57,
  CJK_RADICALS_SUPPLEMENT: 58,
  KANGXI_RADICALS: 59,
  IDEOGRAPHIC_DESCRIPTION_CHARACTERS: 60,
  CJK_SYMBOLS_AND_PUNCTUATION: 61,
  HIRAGANA: 62,
  KATAKANA: 63,
  BOPOMOFO: 64,
  HANGUL_COMPATIBILITY_JAMO: 65,
  KANBUN: 66,
  BOPOMOFO_EXTENDED: 67,
  ENCLOSED_CJK_LETTERS_AND_MONTHS: 68,
  CJK_COMPATIBILITY: 69,
  CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A: 70,
  CJK_UNIFIED_IDEOGRAPHS: 71,
  YI_SYLLABLES: 72,
  YI_RADICALS: 73,
  HANGUL_SYLLABLES: 74,
  HIGH_SURROGATES: 75,
  HIGH_PRIVATE_USE_SURROGATES: 76,
  LOW_SURROGATES: 77,
  PRIVATE_USE_AREA: 78,
  PRIVATE_USE: 78,
  CJK_COMPATIBILITY_IDEOGRAPHS: 79,
  ALPHABETIC_PRESENTATION_FORMS: 80,
  ARABIC_PRESENTATION_FORMS_A: 81,
  COMBINING_HALF_MARKS: 82,
  CJK_COMPATIBILITY_FORMS: 83,
  SMALL_FORM_VARIANTS: 84,
  ARABIC_PRESENTATION_FORMS_B: 85,
  SPECIALS: 86,
  HALFWIDTH_AND_FULLWIDTH_FORMS: 87,
  OLD_ITALIC: 88,
  GOTHIC: 89,
  DESERET: 90,
  BYZANTINE_MUSICAL_SYMBOLS: 91,
  MUSICAL_SYMBOLS: 92,
  MATHEMATICAL_ALPHANUMERIC_SYMBOLS: 93,
  CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B: 94,
  CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT: 95,
  TAGS: 96,
  CYRILLIC_SUPPLEMENT: 97,
  CYRILLIC_SUPPLEMENTARY: 97,
  TAGALOG: 98,
  HANUNOO: 99,
  BUHID: 100,
  TAGBANWA: 101,
  MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A: 102,
  SUPPLEMENTAL_ARROWS_A: 103,
  SUPPLEMENTAL_ARROWS_B: 104,
  MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B: 105,
  SUPPLEMENTAL_MATHEMATICAL_OPERATORS: 106,
  KATAKANA_PHONETIC_EXTENSIONS: 107,
  VARIATION_SELECTORS: 108,
  SUPPLEMENTARY_PRIVATE_USE_AREA_A: 109,
  SUPPLEMENTARY_PRIVATE_USE_AREA_B: 110,
  LIMBU: 111,
  TAI_LE: 112,
  KHMER_SYMBOLS: 113,
  PHONETIC_EXTENSIONS: 114,
  MISCELLANEOUS_SYMBOLS_AND_ARROWS: 115,
  YIJING_HEXAGRAM_SYMBOLS: 116,
  LINEAR_B_SYLLABARY: 117,
  LINEAR_B_IDEOGRAMS: 118,
  AEGEAN_NUMBERS: 119,
  UGARITIC: 120,
  SHAVIAN: 121,
  OSMANYA: 122,
  CYPRIOT_SYLLABARY: 123,
  TAI_XUAN_JING_SYMBOLS: 124,
  VARIATION_SELECTORS_SUPPLEMENT: 125,
  ANCIENT_GREEK_MUSICAL_NOTATION: 126,
  ANCIENT_GREEK_NUMBERS: 127,
  ARABIC_SUPPLEMENT: 128,
  BUGINESE: 129,
  CJK_STROKES: 130,
  COMBINING_DIACRITICAL_MARKS_SUPPLEMENT: 131,
  COPTIC: 132,
  ETHIOPIC_EXTENDED: 133,
  ETHIOPIC_SUPPLEMENT: 134,
  GEORGIAN_SUPPLEMENT: 135,
  GLAGOLITIC: 136,
  KHAROSHTHI: 137,
  MODIFIER_TONE_LETTERS: 138,
  NEW_TAI_LUE: 139,
  OLD_PERSIAN: 140,
  PHONETIC_EXTENSIONS_SUPPLEMENT: 141,
  SUPPLEMENTAL_PUNCTUATION: 142,
  SYLOTI_NAGRI: 143,
  TIFINAGH: 144,
  VERTICAL_FORMS: 145,
  NKO: 146,
  BALINESE: 147,
  LATIN_EXTENDED_C: 148,
  LATIN_EXTENDED_D: 149,
  PHAGS_PA: 150,
  PHOENICIAN: 151,
  CUNEIFORM: 152,
  CUNEIFORM_NUMBERS_AND_PUNCTUATION: 153,
  COUNTING_ROD_NUMERALS: 154,
  SUNDANESE: 155,
  LEPCHA: 156,
  OL_CHIKI: 157,
  CYRILLIC_EXTENDED_A: 158,
  VAI: 159,
  CYRILLIC_EXTENDED_B: 160,
  SAURASHTRA: 161,
  KAYAH_LI: 162,
  REJANG: 163,
  CHAM: 164,
  ANCIENT_SYMBOLS: 165,
  PHAISTOS_DISC: 166,
  LYCIAN: 167,
  CARIAN: 168,
  LYDIAN: 169,
  MAHJONG_TILES: 170,
  DOMINO_TILES: 171,
  SAMARITAN: 172,
  UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED: 173,
  TAI_THAM: 174,
  VEDIC_EXTENSIONS: 175,
  LISU: 176,
  BAMUM: 177,
  COMMON_INDIC_NUMBER_FORMS: 178,
  DEVANAGARI_EXTENDED: 179,
  HANGUL_JAMO_EXTENDED_A: 180,
  JAVANESE: 181,
  MYANMAR_EXTENDED_A: 182,
  TAI_VIET: 183,
  MEETEI_MAYEK: 184,
  HANGUL_JAMO_EXTENDED_B: 185,
  IMPERIAL_ARAMAIC: 186,
  OLD_SOUTH_ARABIAN: 187,
  AVESTAN: 188,
  INSCRIPTIONAL_PARTHIAN: 189,
  INSCRIPTIONAL_PAHLAVI: 190,
  OLD_TURKIC: 191,
  RUMI_NUMERAL_SYMBOLS: 192,
  KAITHI: 193,
  EGYPTIAN_HIEROGLYPHS: 194,
  ENCLOSED_ALPHANUMERIC_SUPPLEMENT: 195,
  ENCLOSED_IDEOGRAPHIC_SUPPLEMENT: 196,
  CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C: 197,
  MANDAIC: 198,
  BATAK: 199,
  ETHIOPIC_EXTENDED_A: 200,
  BRAHMI: 201,
  BAMUM_SUPPLEMENT: 202,
  KANA_SUPPLEMENT: 203,
  PLAYING_CARDS: 204,
  MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS: 205,
  EMOTICONS: 206,
  TRANSPORT_AND_MAP_SYMBOLS: 207,
  ALCHEMICAL_SYMBOLS: 208,
  CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D: 209,
  ARABIC_EXTENDED_A: 210,
  ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS: 211,
  CHAKMA: 212,
  MEETEI_MAYEK_EXTENSIONS: 213,
  MEROITIC_CURSIVE: 214,
  MEROITIC_HIEROGLYPHS: 215,
  MIAO: 216,
  SHARADA: 217,
  SORA_SOMPENG: 218,
  SUNDANESE_SUPPLEMENT: 219,
  TAKRI: 220,
  BASSA_VAH: 221,
  CAUCASIAN_ALBANIAN: 222,
  COPTIC_EPACT_NUMBERS: 223,
  COMBINING_DIACRITICAL_MARKS_EXTENDED: 224,
  DUPLOYAN: 225,
  ELBASAN: 226,
  GEOMETRIC_SHAPES_EXTENDED: 227,
  GRANTHA: 228,
  KHOJKI: 229,
  KHUDAWADI: 230,
  LATIN_EXTENDED_E: 231,
  LINEAR_A: 232,
  MAHAJANI: 233,
  MANICHAEAN: 234,
  MENDE_KIKAKUI: 235,
  MODI: 236,
  MRO: 237,
  MYANMAR_EXTENDED_B: 238,
  NABATAEAN: 239,
  OLD_NORTH_ARABIAN: 240,
  OLD_PERMIC: 241,
  ORNAMENTAL_DINGBATS: 242,
  PAHAWH_HMONG: 243,
  PALMYRENE: 244,
  PAU_CIN_HAU: 245,
  PSALTER_PAHLAVI: 246,
  SHORTHAND_FORMAT_CONTROLS: 247,
  SIDDHAM: 248,
  SINHALA_ARCHAIC_NUMBERS: 249,
  SUPPLEMENTAL_ARROWS_C: 250,
  TIRHUTA: 251,
  WARANG_CITI: 252,
  AHOM: 253,
  ANATOLIAN_HIEROGLYPHS: 254,
  CHEROKEE_SUPPLEMENT: 255,
  CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E: 256,
  EARLY_DYNASTIC_CUNEIFORM: 257,
  HATRAN: 258,
  MULTANI: 259,
  OLD_HUNGARIAN: 260,
  SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS: 261,
  SUTTON_SIGNWRITING: 262,
  ADLAM: 263,
  BHAIKSUKI: 264,
  CYRILLIC_EXTENDED_C: 265,
  GLAGOLITIC_SUPPLEMENT: 266,
  IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION: 267,
  MARCHEN: 268,
  MONGOLIAN_SUPPLEMENT: 269,
  NEWA: 270,
  OSAGE: 271,
  TANGUT: 272,
  TANGUT_COMPONENTS: 273,
  CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F: 274,
  KANA_EXTENDED_A: 275,
  MASARAM_GONDI: 276,
  NUSHU: 277,
  SOYOMBO: 278,
  SYRIAC_SUPPLEMENT: 279,
  ZANABAZAR_SQUARE: 280,
  CHESS_SYMBOLS: 281,
  DOGRA: 282,
  GEORGIAN_EXTENDED: 283,
  GUNJALA_GONDI: 284,
  HANIFI_ROHINGYA: 285,
  INDIC_SIYAQ_NUMBERS: 286,
  MAKASAR: 287,
  MAYAN_NUMERALS: 288,
  MEDEFAIDRIN: 289,
  OLD_SOGDIAN: 290,
  SOGDIAN: 291,
  EGYPTIAN_HIEROGLYPH_FORMAT_CONTROLS: 292,
  ELYMAIC: 293,
  NANDINAGARI: 294,
  NYIAKENG_PUACHUE_HMONG: 295,
  OTTOMAN_SIYAQ_NUMBERS: 296,
  SMALL_KANA_EXTENSION: 297,
  SYMBOLS_AND_PICTOGRAPHS_EXTENDED_A: 298,
  TAMIL_SUPPLEMENT: 299,
  WANCHO: 300,
  CHORASMIAN: 301,
  CJK_UNIFIED_IDEOGRAPHS_EXTENSION_G: 302,
  DIVES_AKURU: 303,
  KHITAN_SMALL_SCRIPT: 304,
  LISU_SUPPLEMENT: 305,
  SYMBOLS_FOR_LEGACY_COMPUTING: 306,
  TANGUT_SUPPLEMENT: 307,
  YEZIDI: 308,
  ARABIC_EXTENDED_B: 309,
  CYPRO_MINOAN: 310,
  ETHIOPIC_EXTENDED_B: 311,
  KANA_EXTENDED_B: 312,
  LATIN_EXTENDED_F: 313,
  LATIN_EXTENDED_G: 314,
  OLD_UYGHUR: 315,
  TANGSA: 316,
  TOTO: 317,
  UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED_A: 318,
  VITHKUQI: 319,
  ZNAMENNY_MUSICAL_NOTATION: 320,
  ARABIC_EXTENDED_C: 321,
  CJK_UNIFIED_IDEOGRAPHS_EXTENSION_H: 322,
  CYRILLIC_EXTENDED_D: 323,
  DEVANAGARI_EXTENDED_A: 324,
  KAKTOVIK_NUMERALS: 325,
  KAWI: 326,
  NAG_MUNDARI: 327,
  CJK_UNIFIED_IDEOGRAPHS_EXTENSION_I: 328,
  EGYPTIAN_HIEROGLYPHS_EXTENDED_A: 329,
  GARAY: 330,
  GURUNG_KHEMA: 331,
  KIRAT_RAI: 332,
  MYANMAR_EXTENDED_C: 333,
  OL_ONAL: 334,
  SUNUWAR: 335,
  SYMBOLS_FOR_LEGACY_COMPUTING_SUPPLEMENT: 336,
  TODHRI: 337,
  TULU_TIGALARI: 338,
  COUNT: 339,
  INVALID_CODE: -1,
};

declare const UEastAsianWidth: {
  NEUTRAL: 0,
  AMBIGUOUS: 1,
  HALFWIDTH: 2,
  FULLWIDTH: 3,
  NARROW: 4,
  WIDE: 5,
  COUNT: 6,
};

declare const mpo_flags_t: {
  PORT: 0,
  SERVICE_PORT: 1024,
  CONNECTION_PORT: 2048,
  REPLY_PORT: 4096,
  PROVISIONAL_REPLY_PORT: 16384,
  EXCEPTION_PORT: 32768,
  CONNECTION_PORT_WITH_PORT_ARRAY: 65536,
};

declare const ifnet_interface_advisory_notification_type_cell: {
  DEFAULT: 0,
  UPLINK_CRA: 1,
  MEASUREMENT_UPDATE: 2,
  BANDWIDTH_LIMITATION_EVENT: 3,
  DISCONTINUOUS_RECEPTION_EVENT: 4,
  OUTAGE_EVENT: 5,
  THERMAL_CRA_EVENT: 6,
};

declare const ppd_cptype_e: {
  UNKNOWN: -1,
  CURVE: 0,
  INT: 1,
  INVCURVE: 2,
  PASSCODE: 3,
  PASSWORD: 4,
  POINTS: 5,
  REAL: 6,
  STRING: 7,
};

declare const UIdentifierType: {
  NOT_CHARACTER: 0,
  DEPRECATED: 1,
  DEFAULT_IGNORABLE: 2,
  NOT_NFKC: 3,
  NOT_XID: 4,
  EXCLUSION: 5,
  OBSOLETE: 6,
  TECHNICAL: 7,
  UNCOMMON_USE: 8,
  LIMITED_USE: 9,
  INCLUSION: 10,
  RECOMMENDED: 11,
};

declare const task_snapshot_flags: {
  TaskRsrcFlagged: 4,
  TerminatedSnapshot: 8,
  PidSuspended: 16,
  Frozen: 32,
  TaskDarwinBG: 64,
  TaskExtDarwinBG: 128,
  TaskVisVisible: 256,
  TaskVisNonvisible: 512,
  TaskIsForeground: 1024,
  TaskIsBoosted: 2048,
  TaskIsSuppressed: 4096,
  TaskIsTimerThrottled: 8192,
  TaskIsImpDonor: 16384,
  TaskIsLiveImpDonor: 32768,
  TaskIsDirty: 65536,
  TaskWqExceededConstrainedThreadLimit: 131072,
  TaskWqExceededTotalThreadLimit: 262144,
  TaskWqFlagsAvailable: 524288,
  TaskUUIDInfoFaultedIn: 1048576,
  TaskUUIDInfoMissing: 2097152,
  TaskUUIDInfoTriedFault: 4194304,
  TaskSharedRegionInfoUnavailable: 8388608,
  TaskTALEngaged: 16777216,
  TaskIsDirtyTracked: 67108864,
  TaskAllowIdleExit: 134217728,
  TaskIsTranslated: 268435456,
  TaskSharedRegionNone: 536870912,
  TaskSharedRegionSystem: 1073741824,
  TaskSharedRegionOther: 2147483648,
  TaskDyldCompactInfoNone: 4294967296,
  TaskDyldCompactInfoTooBig: 8589934592,
  TaskDyldCompactInfoFaultedIn: 17179869184,
  TaskDyldCompactInfoMissing: 34359738368,
  TaskDyldCompactInfoTriedFault: 68719476736,
  TaskWqExceededCooperativeThreadLimit: 137438953472,
  TaskWqExceededActiveConstrainedThreadLimit: 274877906944,
  TaskRunawayMitigation: 549755813888,
  TaskIsActive: 1099511627776,
  TaskIsManaged: 2199023255552,
  TaskHasAssertion: 4398046511104,
};

declare const mach_port_guard_exception_codes: {
  NONE: 0,
  DESTROY: 1,
  MOD_REFS: 2,
  INVALID_OPTIONS: 3,
  SET_CONTEXT: 4,
  THREAD_SET_STATE: 5,
  EXCEPTION_BEHAVIOR_ENFORCE: 6,
  SERVICE_PORT_VIOLATION_FATAL: 7,
  UNGUARDED: 8,
  KOBJECT_REPLY_PORT_SEMANTICS: 9,
  REQUIRE_REPLY_PORT_SEMANTICS: 10,
  INCORRECT_GUARD: 16,
  IMMOVABLE: 32,
  STRICT_REPLY: 64,
  INVALID_NOTIFICATION_REQ: 65,
  INVALID_MPO_ENTITLEMENT: 66,
  DESCRIPTOR_VIOLATION: 67,
  MSG_FILTERED: 128,
  INVALID_RIGHT: 256,
  INVALID_NAME: 512,
  INVALID_VALUE: 1024,
  INVALID_ARGUMENT: 2048,
  RIGHT_EXISTS: 4096,
  KERN_NO_SPACE: 8192,
  KERN_FAILURE: 16384,
  KERN_RESOURCE: 32768,
  SEND_INVALID_REPLY: 65536,
  SEND_INVALID_VOUCHER: 131072,
  SEND_INVALID_RIGHT: 262144,
  RCV_INVALID_NAME: 524288,
  RCV_GUARDED_DESC: 1048576,
  SERVICE_PORT_VIOLATION_NON_FATAL: 1048577,
  PROVISIONAL_REPLY_PORT: 1048578,
  OOL_PORT_ARRAY_CREATION: 1048579,
  MOVE_PROVISIONAL_REPLY_PORT: 1048580,
  REPLY_PORT_SINGLE_SO_RIGHT: 1048581,
  MOD_REFS_NON_FATAL: 2097152,
  IMMOVABLE_NON_FATAL: 4194304,
};

declare const vnode_verify_kind_t: {
  NONE: 0,
  SHA3_256: 1,
  SHA3_384: 2,
  SHA3_512: 3,
};

declare const UCharNameChoice: {
  UNICODE_CHAR_NAME: 0,
  UNICODE_10_CHAR_NAME: 1,
  EXTENDED_CHAR_NAME: 2,
  CHAR_NAME_ALIAS: 3,
  CHAR_NAME_CHOICE_COUNT: 4,
};

declare const malloc_type_callsite_flags_v0_t: {
  NONE: 0,
  FIXED_SIZE: 1,
  ARRAY: 2,
};

declare const ifnet_interface_advisory_rate_trend: {
  UP: 2147483647,
  DOWN: -2147483648,
  NEUTRAL: 0,
};

declare const krb5plugin_preauth_client_request_type: {
  krb5plugin_preauth_client_get_etype: 1,
  krb5plugin_preauth_client_free_etype: 2,
};

declare const vtype: {
  NON: 0,
  REG: 1,
  DIR: 2,
  BLK: 3,
  CHR: 4,
  LNK: 5,
  SOCK: 6,
  FIFO: 7,
  BAD: 8,
  STR: 9,
  CPLX: 10,
};

declare const cups_sc_connected_e: {
  NOT_: 0,
  CUPS_SC_CONNECTED: 1,
};

declare const coalition_flags: {
  TermRequested: 1,
  Terminated: 2,
  Reaped: 4,
  Privileged: 8,
};

declare const UGraphemeClusterBreak: {
  OTHER: 0,
  CONTROL: 1,
  CR: 2,
  EXTEND: 3,
  L: 4,
  LF: 5,
  LV: 6,
  LVT: 7,
  T: 8,
  V: 9,
  SPACING_MARK: 10,
  PREPEND: 11,
  REGIONAL_INDICATOR: 12,
  E_BASE: 13,
  E_BASE_GAZ: 14,
  E_MODIFIER: 15,
  GLUE_AFTER_ZWJ: 16,
  ZWJ: 17,
  COUNT: 18,
};

declare const dyld_shared_cache_flags: {
  SystemPrimary: 1,
  Driverkit: 2,
  AOT: 4,
};

declare const cups_sc_state_e: {
  OFFLINE: 0,
  ONLINE: 1,
  BUSY: 2,
  ERROR: 4,
  MEDIA_LOW: 16,
  MEDIA_EMPTY: 32,
  MARKER_LOW: 64,
  MARKER_EMPTY: 128,
};

declare const cups_encoding_e: {
  AUTO_ENCODING: -1,
  US_ASCII: 0,
  ISO8859_1: 1,
  ISO8859_2: 2,
  ISO8859_3: 3,
  ISO8859_4: 4,
  ISO8859_5: 5,
  ISO8859_6: 6,
  ISO8859_7: 7,
  ISO8859_8: 8,
  ISO8859_9: 9,
  ISO8859_10: 10,
  UTF8: 11,
  ISO8859_13: 12,
  ISO8859_14: 13,
  ISO8859_15: 14,
  WINDOWS_874: 15,
  WINDOWS_1250: 16,
  WINDOWS_1251: 17,
  WINDOWS_1252: 18,
  WINDOWS_1253: 19,
  WINDOWS_1254: 20,
  WINDOWS_1255: 21,
  WINDOWS_1256: 22,
  WINDOWS_1257: 23,
  WINDOWS_1258: 24,
  KOI8_R: 25,
  KOI8_U: 26,
  ISO8859_11: 27,
  ISO8859_16: 28,
  MAC_ROMAN: 29,
  ENCODING_SBCS_END: 63,
  WINDOWS_932: 64,
  WINDOWS_936: 65,
  WINDOWS_949: 66,
  WINDOWS_950: 67,
  WINDOWS_1361: 68,
  ENCODING_DBCS_END: 127,
  EUC_CN: 128,
  EUC_JP: 129,
  EUC_KR: 130,
  EUC_TW: 131,
  JIS_X0213: 132,
  ENCODING_VBCS_END: 191,
};

declare const task_latency_qos: {
  R_UNSPECIFIED: 0,
  R_0: 16711681,
  R_1: 16711682,
  R_2: 16711683,
  R_3: 16711684,
  R_4: 16711685,
  R_5: 16711686,
};

declare const cups_ptype_e: {
  R_LOCAL: 0,
  R_CLASS: 1,
  R_REMOTE: 2,
  R_BW: 4,
  R_COLOR: 8,
  R_DUPLEX: 16,
  R_STAPLE: 32,
  R_COPIES: 64,
  R_COLLATE: 128,
  R_PUNCH: 256,
  R_COVER: 512,
  R_BIND: 1024,
  R_SORT: 2048,
  R_SMALL: 4096,
  R_MEDIUM: 8192,
  R_LARGE: 16384,
  R_VARIABLE: 32768,
  R_IMPLICIT: 65536,
  R_DEFAULT: 131072,
  R_FAX: 262144,
  R_REJECTING: 524288,
  R_DELETE: 1048576,
  R_NOT_SHARED: 2097152,
  R_AUTHENTICATED: 4194304,
  R_COMMANDS: 8388608,
  R_DISCOVERED: 16777216,
  R_SCANNER: 33554432,
  R_MFP: 67108864,
  R_3D: 134217728,
  R_OPTIONS: 458748,
};

declare const UCharCategory: {
  UNASSIGNED: 0,
  GENERAL_OTHER_TYPES: 0,
  UPPERCASE_LETTER: 1,
  LOWERCASE_LETTER: 2,
  TITLECASE_LETTER: 3,
  MODIFIER_LETTER: 4,
  OTHER_LETTER: 5,
  NON_SPACING_MARK: 6,
  ENCLOSING_MARK: 7,
  COMBINING_SPACING_MARK: 8,
  DECIMAL_DIGIT_NUMBER: 9,
  LETTER_NUMBER: 10,
  OTHER_NUMBER: 11,
  SPACE_SEPARATOR: 12,
  LINE_SEPARATOR: 13,
  PARAGRAPH_SEPARATOR: 14,
  CONTROL_CHAR: 15,
  FORMAT_CHAR: 16,
  PRIVATE_USE_CHAR: 17,
  SURROGATE: 18,
  DASH_PUNCTUATION: 19,
  START_PUNCTUATION: 20,
  END_PUNCTUATION: 21,
  CONNECTOR_PUNCTUATION: 22,
  OTHER_PUNCTUATION: 23,
  MATH_SYMBOL: 24,
  CURRENCY_SYMBOL: 25,
  MODIFIER_SYMBOL: 26,
  OTHER_SYMBOL: 27,
  INITIAL_PUNCTUATION: 28,
  FINAL_PUNCTUATION: 29,
  CHAR_CATEGORY_COUNT: 30,
};

declare const _Unwind_Reason_Code: {
  NO_REASON: 0,
  OK: 0,
  FOREIGN_EXCEPTION_CAUGHT: 1,
  FATAL_PHASE2_ERROR: 2,
  FATAL_PHASE1_ERROR: 3,
  NORMAL_STOP: 4,
  END_OF_STACK: 5,
  HANDLER_FOUND: 6,
  INSTALL_CONTEXT: 7,
  CONTINUE_UNWIND: 8,
};

declare const NSLinkEditErrors: {
  FileAccess: 0,
  FileFormat: 1,
  MachResource: 2,
  UnixResource: 3,
  Other: 4,
  Warning: 5,
  MultiplyDefined: 6,
  Undefined: 7,
};

declare const task_role: {
  RENICED: -1,
  UNSPECIFIED: 0,
  FOREGROUND_APPLICATION: 1,
  BACKGROUND_APPLICATION: 2,
  CONTROL_APPLICATION: 3,
  GRAPHICS_SERVER: 4,
  THROTTLE_APPLICATION: 5,
  NONUI_APPLICATION: 6,
  DEFAULT_APPLICATION: 7,
  DARWINBG_APPLICATION: 8,
  USER_INIT_APPLICATION: 9,
};

declare const _Unwind_Action: {
  SEARCH_PHASE: 1,
  CLEANUP_PHASE: 2,
  HANDLER_FRAME: 4,
  FORCE_UNWIND: 8,
  END_OF_STACK: 16,
};

declare const http_field_e: {
  UNKNOWN: -1,
  ACCEPT_LANGUAGE: 0,
  ACCEPT_RANGES: 1,
  AUTHORIZATION: 2,
  CONNECTION: 3,
  CONTENT_ENCODING: 4,
  CONTENT_LANGUAGE: 5,
  CONTENT_LENGTH: 6,
  CONTENT_LOCATION: 7,
  CONTENT_MD5: 8,
  CONTENT_RANGE: 9,
  CONTENT_TYPE: 10,
  CONTENT_VERSION: 11,
  DATE: 12,
  HOST: 13,
  IF_MODIFIED_SINCE: 14,
  IF_UNMODIFIED_SINCE: 15,
  KEEP_ALIVE: 16,
  LAST_MODIFIED: 17,
  LINK: 18,
  LOCATION: 19,
  RANGE: 20,
  REFERER: 21,
  RETRY_AFTER: 22,
  TRANSFER_ENCODING: 23,
  UPGRADE: 24,
  USER_AGENT: 25,
  WWW_AUTHENTICATE: 26,
  ACCEPT_ENCODING: 27,
  ALLOW: 28,
  SERVER: 29,
  AUTHENTICATION_INFO: 30,
  MAX: 31,
};

declare const thread_group_flags: {
  Efficient: 1,
  Application: 2,
  UIApp: 2,
  Critical: 4,
  BestEffort: 8,
  UIApplication: 256,
  Managed: 512,
  StrictTimers: 1024,
};

declare const acl_entry_id_t: {
  FIRS: 0,
  NEX: -1,
  LAS: -2,
};

declare const cups_adv_e: {
  NONE: 0,
  FILE: 1,
  JOB: 2,
  SET: 3,
  PAGE: 4,
};

declare const acl_tag_t: {
  UNDEFINED_TAG: 0,
  EXTENDED_ALLOW: 1,
  EXTENDED_DENY: 2,
};

declare const _Unwind_VRS_Result: {
  OK: 0,
  NOT_IMPLEMENTED: 1,
  FAILED: 2,
};

declare const cups_orient_e: {
  T_0: 0,
  T_90: 1,
  T_180: 2,
  T_270: 3,
};

declare const ipp_pstate_e: {
  IDLE: 3,
  PROCESSING: 4,
  STOPPED: 5,
};

declare const so_tracker_action: {
  INVALID: 0,
  ADD: 1,
  DUMP_BY_APP: 2,
  DUMP_ALL: 3,
  DUMP_MAX: 4,
};

declare const ifnet_interface_advisory_notification_type_wifi: {
  IF_INTERFACE_ADVISORY_NOTIFICATION_TYPE_WIFI_UNDEFINED: 0,
};

declare const cups_sc_command_e: {
  NONE: 0,
  SOFT_RESET: 1,
  DRAIN_OUTPUT: 2,
  GET_BIDI: 3,
  GET_DEVICE_ID: 4,
  GET_STATE: 5,
  SNMP_GET: 6,
  SNMP_GET_NEXT: 7,
  GET_CONNECTED: 8,
  MAX: 9,
};

declare const cups_cut_e: {
  NONE: 0,
  FILE: 1,
  JOB: 2,
  SET: 3,
  PAGE: 4,
};

declare const UCharDirection: {
  LEFT_TO_RIGHT: 0,
  RIGHT_TO_LEFT: 1,
  EUROPEAN_NUMBER: 2,
  EUROPEAN_NUMBER_SEPARATOR: 3,
  EUROPEAN_NUMBER_TERMINATOR: 4,
  ARABIC_NUMBER: 5,
  COMMON_NUMBER_SEPARATOR: 6,
  BLOCK_SEPARATOR: 7,
  SEGMENT_SEPARATOR: 8,
  WHITE_SPACE_NEUTRAL: 9,
  OTHER_NEUTRAL: 10,
  LEFT_TO_RIGHT_EMBEDDING: 11,
  LEFT_TO_RIGHT_OVERRIDE: 12,
  RIGHT_TO_LEFT_ARABIC: 13,
  RIGHT_TO_LEFT_EMBEDDING: 14,
  RIGHT_TO_LEFT_OVERRIDE: 15,
  POP_DIRECTIONAL_FORMAT: 16,
  DIR_NON_SPACING_MARK: 17,
  BOUNDARY_NEUTRAL: 18,
  FIRST_STRONG_ISOLATE: 19,
  LEFT_TO_RIGHT_ISOLATE: 20,
  RIGHT_TO_LEFT_ISOLATE: 21,
  POP_DIRECTIONAL_ISOLATE: 22,
  CHAR_DIRECTION_COUNT: 23,
};

declare const objc_AssociationPolicy: {
  ASSIGN: 0,
  RETAIN_NONATOMIC: 1,
  COPY_NONATOMIC: 3,
  RETAIN: 769,
  COPY: 771,
};

declare const os_activity_flag_t: {
  DEFAULT: 0,
  DETACHED: 1,
  IF_NONE_PRESENT: 2,
};

declare const NSOtherErrorNumbers: {
  Relocation: 0,
  LazyBind: 1,
  IndrLoop: 2,
  LazyInit: 3,
  InvalidArgs: 4,
};

declare const ipp_dstate_e: {
  PENDING: 3,
  PROCESSING: 5,
  CANCELED: 7,
  ABORTED: 8,
  COMPLETED: 9,
};

declare const UPropertyNameChoice: {
  SHORT_PROPERTY_NAME: 0,
  LONG_PROPERTY_NAME: 1,
  PROPERTY_NAME_CHOICE_COUNT: 2,
};

declare const exclave_textlayout_flags: {
  LoadAddressesSynthetic: 1,
  LoadAddressesUnslid: 2,
  HasSharedCache: 4,
};

declare const audit_session_flags: {
  IS_INITIAL: 1,
  HAS_GRAPHIC_ACCESS: 16,
  HAS_TTY: 32,
  IS_REMOTE: 4096,
  HAS_CONSOLE_ACCESS: 8192,
  HAS_AUTHENTICATED: 16384,
};

declare const task_throughput_qos: {
  R_UNSPECIFIED: 0,
  R_0: 16646145,
  R_1: 16646146,
  R_2: 16646147,
  R_3: 16646148,
  R_4: 16646149,
  R_5: 16646150,
};

declare const task_inspect_flavor: {
  TASK_INSPECT_BASIC_COUNTS: 1,
};

declare const passpolicyerror_enum: {
  P_passwordExpired: 0,
  P_accountLocked: 1,
  P_changeAfterReset: 2,
  P_passwordModNotAllowed: 3,
  P_mustSupplyOldPassword: 4,
  P_insufficientPasswordQuality: 5,
  P_passwordTooShort: 6,
  P_passwordTooYoung: 7,
  P_passwordInHistory: 8,
  P_noError: 65535,
};

declare const qos_class_t: {
  USER_INTERACTIVE: 33,
  USER_INITIATED: 25,
  DEFAULT: 21,
  UTILITY: 17,
  BACKGROUND: 9,
  UNSPECIFIED: 0,
};

declare const reloc_type_generic: {
  VANILLA: 0,
  PAIR: 1,
  SECTDIFF: 2,
  PB_LA_PTR: 3,
  LOCAL_SECTDIFF: 4,
  TLV: 5,
};

declare const UWordBreakValues: {
  OTHER: 0,
  ALETTER: 1,
  FORMAT: 2,
  KATAKANA: 3,
  MIDLETTER: 4,
  MIDNUM: 5,
  NUMERIC: 6,
  EXTENDNUMLET: 7,
  CR: 8,
  EXTEND: 9,
  LF: 10,
  MIDNUMLET: 11,
  NEWLINE: 12,
  REGIONAL_INDICATOR: 13,
  HEBREW_LETTER: 14,
  SINGLE_QUOTE: 15,
  DOUBLE_QUOTE: 16,
  E_BASE: 17,
  E_BASE_GAZ: 18,
  E_MODIFIER: 19,
  GLUE_AFTER_ZWJ: 20,
  ZWJ: 21,
  WSEGSPACE: 22,
  COUNT: 23,
};

declare const ipp_jstate_e: {
  PENDING: 3,
  HELD: 4,
  PROCESSING: 5,
  STOPPED: 6,
  CANCELED: 7,
  ABORTED: 8,
  COMPLETED: 9,
};

declare const ipp_status_e: {
  CUPS_INVALID: -1,
  OK: 0,
  OK_IGNORED_OR_SUBSTITUTED: 1,
  OK_CONFLICTING: 2,
  OK_IGNORED_SUBSCRIPTIONS: 3,
  OK_IGNORED_NOTIFICATIONS: 4,
  OK_TOO_MANY_EVENTS: 5,
  OK_BUT_CANCEL_SUBSCRIPTION: 6,
  OK_EVENTS_COMPLETE: 7,
  REDIRECTION_OTHER_SITE: 512,
  CUPS_SEE_OTHER: 640,
  ERROR_BAD_REQUEST: 1024,
  ERROR_FORBIDDEN: 1025,
  ERROR_NOT_AUTHENTICATED: 1026,
  ERROR_NOT_AUTHORIZED: 1027,
  ERROR_NOT_POSSIBLE: 1028,
  ERROR_TIMEOUT: 1029,
  ERROR_NOT_FOUND: 1030,
  ERROR_GONE: 1031,
  ERROR_REQUEST_ENTITY: 1032,
  ERROR_REQUEST_VALUE: 1033,
  ERROR_DOCUMENT_FORMAT_NOT_SUPPORTED: 1034,
  ERROR_ATTRIBUTES_OR_VALUES: 1035,
  ERROR_URI_SCHEME: 1036,
  ERROR_CHARSET: 1037,
  ERROR_CONFLICTING: 1038,
  ERROR_COMPRESSION_NOT_SUPPORTED: 1039,
  ERROR_COMPRESSION_ERROR: 1040,
  ERROR_DOCUMENT_FORMAT_ERROR: 1041,
  ERROR_DOCUMENT_ACCESS: 1042,
  ERROR_ATTRIBUTES_NOT_SETTABLE: 1043,
  ERROR_IGNORED_ALL_SUBSCRIPTIONS: 1044,
  ERROR_TOO_MANY_SUBSCRIPTIONS: 1045,
  ERROR_IGNORED_ALL_NOTIFICATIONS: 1046,
  ERROR_PRINT_SUPPORT_FILE_NOT_FOUND: 1047,
  ERROR_DOCUMENT_PASSWORD: 1048,
  ERROR_DOCUMENT_PERMISSION: 1049,
  ERROR_DOCUMENT_SECURITY: 1050,
  ERROR_DOCUMENT_UNPRINTABLE: 1051,
  ERROR_ACCOUNT_INFO_NEEDED: 1052,
  ERROR_ACCOUNT_CLOSED: 1053,
  ERROR_ACCOUNT_LIMIT_REACHED: 1054,
  ERROR_ACCOUNT_AUTHORIZATION_FAILED: 1055,
  ERROR_NOT_FETCHABLE: 1056,
  ERROR_CUPS_ACCOUNT_INFO_NEEDED: 1180,
  ERROR_CUPS_ACCOUNT_CLOSED: 1181,
  ERROR_CUPS_ACCOUNT_LIMIT_REACHED: 1182,
  ERROR_CUPS_ACCOUNT_AUTHORIZATION_FAILED: 1183,
  ERROR_INTERNAL: 1280,
  ERROR_OPERATION_NOT_SUPPORTED: 1281,
  ERROR_SERVICE_UNAVAILABLE: 1282,
  ERROR_VERSION_NOT_SUPPORTED: 1283,
  ERROR_DEVICE: 1284,
  ERROR_TEMPORARY: 1285,
  ERROR_NOT_ACCEPTING_JOBS: 1286,
  ERROR_BUSY: 1287,
  ERROR_JOB_CANCELED: 1288,
  ERROR_MULTIPLE_JOBS_NOT_SUPPORTED: 1289,
  ERROR_PRINTER_IS_DEACTIVATED: 1290,
  ERROR_TOO_MANY_JOBS: 1291,
  ERROR_TOO_MANY_DOCUMENTS: 1292,
  ERROR_CUPS_AUTHENTICATION_CANCELED: 4096,
  ERROR_CUPS_PKI: 4097,
  ERROR_CUPS_UPGRADE_REQUIRED: 4098,
};

declare const mach_vm_range_tag_t: {
  DEFAULT: 0,
  DATA: 1,
  FIXED: 2,
};

declare const UNumericType: {
  NONE: 0,
  DECIMAL: 1,
  DIGIT: 2,
  NUMERIC: 3,
  COUNT: 4,
};

declare const http_uri_status_e: {
  OVERFLOW: -8,
  BAD_ARGUMENTS: -7,
  BAD_RESOURCE: -6,
  BAD_PORT: -5,
  BAD_HOSTNAME: -4,
  BAD_USERNAME: -3,
  BAD_SCHEME: -2,
  BAD_URI: -1,
  OK: 0,
  MISSING_SCHEME: 1,
  UNKNOWN_SCHEME: 2,
  MISSING_RESOURCE: 3,
};

declare const UErrorCode: {
  USING_FALLBACK_WARNING: -128,
  ERROR_WARNING_START: -128,
  USING_DEFAULT_WARNING: -127,
  SAFECLONE_ALLOCATED_WARNING: -126,
  STATE_OLD_WARNING: -125,
  STRING_NOT_TERMINATED_WARNING: -124,
  SORT_KEY_TOO_SHORT_WARNING: -123,
  AMBIGUOUS_ALIAS_WARNING: -122,
  DIFFERENT_UCA_VERSION: -121,
  PLUGIN_CHANGED_LEVEL_WARNING: -120,
  ERROR_WARNING_LIMIT: -119,
  ZERO_ERROR: 0,
  ILLEGAL_ARGUMENT_ERROR: 1,
  MISSING_RESOURCE_ERROR: 2,
  INVALID_FORMAT_ERROR: 3,
  FILE_ACCESS_ERROR: 4,
  INTERNAL_PROGRAM_ERROR: 5,
  MESSAGE_PARSE_ERROR: 6,
  MEMORY_ALLOCATION_ERROR: 7,
  INDEX_OUTOFBOUNDS_ERROR: 8,
  PARSE_ERROR: 9,
  INVALID_CHAR_FOUND: 10,
  TRUNCATED_CHAR_FOUND: 11,
  ILLEGAL_CHAR_FOUND: 12,
  INVALID_TABLE_FORMAT: 13,
  INVALID_TABLE_FILE: 14,
  BUFFER_OVERFLOW_ERROR: 15,
  UNSUPPORTED_ERROR: 16,
  RESOURCE_TYPE_MISMATCH: 17,
  ILLEGAL_ESCAPE_SEQUENCE: 18,
  UNSUPPORTED_ESCAPE_SEQUENCE: 19,
  NO_SPACE_AVAILABLE: 20,
  CE_NOT_FOUND_ERROR: 21,
  PRIMARY_TOO_LONG_ERROR: 22,
  STATE_TOO_OLD_ERROR: 23,
  TOO_MANY_ALIASES_ERROR: 24,
  ENUM_OUT_OF_SYNC_ERROR: 25,
  INVARIANT_CONVERSION_ERROR: 26,
  INVALID_STATE_ERROR: 27,
  COLLATOR_VERSION_MISMATCH: 28,
  USELESS_COLLATOR_ERROR: 29,
  NO_WRITE_PERMISSION: 30,
  INPUT_TOO_LONG_ERROR: 31,
  STANDARD_ERROR_LIMIT: 32,
  BAD_VARIABLE_DEFINITION: 65536,
  PARSE_ERROR_START: 65536,
  MALFORMED_RULE: 65537,
  MALFORMED_SET: 65538,
  MALFORMED_SYMBOL_REFERENCE: 65539,
  MALFORMED_UNICODE_ESCAPE: 65540,
  MALFORMED_VARIABLE_DEFINITION: 65541,
  MALFORMED_VARIABLE_REFERENCE: 65542,
  MISMATCHED_SEGMENT_DELIMITERS: 65543,
  MISPLACED_ANCHOR_START: 65544,
  MISPLACED_CURSOR_OFFSET: 65545,
  MISPLACED_QUANTIFIER: 65546,
  MISSING_OPERATOR: 65547,
  MISSING_SEGMENT_CLOSE: 65548,
  MULTIPLE_ANTE_CONTEXTS: 65549,
  MULTIPLE_CURSORS: 65550,
  MULTIPLE_POST_CONTEXTS: 65551,
  TRAILING_BACKSLASH: 65552,
  UNDEFINED_SEGMENT_REFERENCE: 65553,
  UNDEFINED_VARIABLE: 65554,
  UNQUOTED_SPECIAL: 65555,
  UNTERMINATED_QUOTE: 65556,
  RULE_MASK_ERROR: 65557,
  MISPLACED_COMPOUND_FILTER: 65558,
  MULTIPLE_COMPOUND_FILTERS: 65559,
  INVALID_RBT_SYNTAX: 65560,
  INVALID_PROPERTY_PATTERN: 65561,
  MALFORMED_PRAGMA: 65562,
  UNCLOSED_SEGMENT: 65563,
  ILLEGAL_CHAR_IN_SEGMENT: 65564,
  VARIABLE_RANGE_EXHAUSTED: 65565,
  VARIABLE_RANGE_OVERLAP: 65566,
  ILLEGAL_CHARACTER: 65567,
  INTERNAL_TRANSLITERATOR_ERROR: 65568,
  INVALID_ID: 65569,
  INVALID_FUNCTION: 65570,
  PARSE_ERROR_LIMIT: 65571,
  UNEXPECTED_TOKEN: 65792,
  FMT_PARSE_ERROR_START: 65792,
  MULTIPLE_DECIMAL_SEPARATORS: 65793,
  MULTIPLE_DECIMAL_SEPERATORS: 65793,
  MULTIPLE_EXPONENTIAL_SYMBOLS: 65794,
  MALFORMED_EXPONENTIAL_PATTERN: 65795,
  MULTIPLE_PERCENT_SYMBOLS: 65796,
  MULTIPLE_PERMILL_SYMBOLS: 65797,
  MULTIPLE_PAD_SPECIFIERS: 65798,
  PATTERN_SYNTAX_ERROR: 65799,
  ILLEGAL_PAD_POSITION: 65800,
  UNMATCHED_BRACES: 65801,
  UNSUPPORTED_PROPERTY: 65802,
  UNSUPPORTED_ATTRIBUTE: 65803,
  ARGUMENT_TYPE_MISMATCH: 65804,
  DUPLICATE_KEYWORD: 65805,
  UNDEFINED_KEYWORD: 65806,
  DEFAULT_KEYWORD_MISSING: 65807,
  DECIMAL_NUMBER_SYNTAX_ERROR: 65808,
  FORMAT_INEXACT_ERROR: 65809,
  NUMBER_ARG_OUTOFBOUNDS_ERROR: 65810,
  NUMBER_SKELETON_SYNTAX_ERROR: 65811,
  MF_UNRESOLVED_VARIABLE_ERROR: 65812,
  MF_SYNTAX_ERROR: 65813,
  MF_UNKNOWN_FUNCTION_ERROR: 65814,
  MF_VARIANT_KEY_MISMATCH_ERROR: 65815,
  MF_FORMATTING_ERROR: 65816,
  MF_NONEXHAUSTIVE_PATTERN_ERROR: 65817,
  MF_DUPLICATE_OPTION_NAME_ERROR: 65818,
  MF_SELECTOR_ERROR: 65819,
  MF_MISSING_SELECTOR_ANNOTATION_ERROR: 65820,
  MF_DUPLICATE_DECLARATION_ERROR: 65821,
  MF_OPERAND_MISMATCH_ERROR: 65822,
  MF_DUPLICATE_VARIANT_ERROR: 65823,
  FMT_PARSE_ERROR_LIMIT: 65824,
  BRK_INTERNAL_ERROR: 66048,
  BRK_ERROR_START: 66048,
  BRK_HEX_DIGITS_EXPECTED: 66049,
  BRK_SEMICOLON_EXPECTED: 66050,
  BRK_RULE_SYNTAX: 66051,
  BRK_UNCLOSED_SET: 66052,
  BRK_ASSIGN_ERROR: 66053,
  BRK_VARIABLE_REDFINITION: 66054,
  BRK_MISMATCHED_PAREN: 66055,
  BRK_NEW_LINE_IN_QUOTED_STRING: 66056,
  BRK_UNDEFINED_VARIABLE: 66057,
  BRK_INIT_ERROR: 66058,
  BRK_RULE_EMPTY_SET: 66059,
  BRK_UNRECOGNIZED_OPTION: 66060,
  BRK_MALFORMED_RULE_TAG: 66061,
  BRK_ERROR_LIMIT: 66062,
  REGEX_INTERNAL_ERROR: 66304,
  REGEX_ERROR_START: 66304,
  REGEX_RULE_SYNTAX: 66305,
  REGEX_INVALID_STATE: 66306,
  REGEX_BAD_ESCAPE_SEQUENCE: 66307,
  REGEX_PROPERTY_SYNTAX: 66308,
  REGEX_UNIMPLEMENTED: 66309,
  REGEX_MISMATCHED_PAREN: 66310,
  REGEX_NUMBER_TOO_BIG: 66311,
  REGEX_BAD_INTERVAL: 66312,
  REGEX_MAX_LT_MIN: 66313,
  REGEX_INVALID_BACK_REF: 66314,
  REGEX_INVALID_FLAG: 66315,
  REGEX_LOOK_BEHIND_LIMIT: 66316,
  REGEX_SET_CONTAINS_STRING: 66317,
  REGEX_OCTAL_TOO_BIG: 66318,
  REGEX_MISSING_CLOSE_BRACKET: 66319,
  REGEX_INVALID_RANGE: 66320,
  REGEX_STACK_OVERFLOW: 66321,
  REGEX_TIME_OUT: 66322,
  REGEX_STOPPED_BY_CALLER: 66323,
  REGEX_PATTERN_TOO_BIG: 66324,
  REGEX_INVALID_CAPTURE_GROUP_NAME: 66325,
  REGEX_ERROR_LIMIT: 66326,
  IDNA_PROHIBITED_ERROR: 66560,
  IDNA_ERROR_START: 66560,
  IDNA_UNASSIGNED_ERROR: 66561,
  IDNA_CHECK_BIDI_ERROR: 66562,
  IDNA_STD3_ASCII_RULES_ERROR: 66563,
  IDNA_ACE_PREFIX_ERROR: 66564,
  IDNA_VERIFICATION_ERROR: 66565,
  IDNA_LABEL_TOO_LONG_ERROR: 66566,
  IDNA_ZERO_LENGTH_LABEL_ERROR: 66567,
  IDNA_DOMAIN_NAME_TOO_LONG_ERROR: 66568,
  IDNA_ERROR_LIMIT: 66569,
  STRINGPREP_PROHIBITED_ERROR: 66560,
  STRINGPREP_UNASSIGNED_ERROR: 66561,
  STRINGPREP_CHECK_BIDI_ERROR: 66562,
  PLUGIN_ERROR_START: 66816,
  PLUGIN_TOO_HIGH: 66816,
  PLUGIN_DIDNT_SET_LEVEL: 66817,
  PLUGIN_ERROR_LIMIT: 66818,
  ERROR_LIMIT: 66818,
};

declare const filesec_property_t: {
  OWNER: 1,
  GROUP: 2,
  UUID: 3,
  MODE: 4,
  ACL: 5,
  GRPUUID: 6,
  ACL_RAW: 100,
  ACL_ALLOCSIZE: 101,
};

declare const ipp_sstate_e: {
  IDLE: 3,
  PROCESSING: 4,
  STOPPED: 5,
};

declare const VISIT: {
  preorder: 0,
  postorder: 1,
  endorder: 2,
  leaf: 3,
};

declare const ppd_section_e: {
  ANY: 0,
  DOCUMENT: 1,
  EXIT: 2,
  JCL: 3,
  PAGE: 4,
  PROLOG: 5,
};

declare const cups_order_e: {
  CHUNKED: 0,
  BANDED: 1,
  PLANAR: 2,
};

declare const cups_jog_e: {
  NONE: 0,
  FILE: 1,
  JOB: 2,
  SET: 3,
};

declare const dispatch_autorelease_frequency_t: {
  INHERIT: 0,
  WORK_ITEM: 1,
  NEVER: 2,
};

declare const ipp_rstate_e: {
  PENDING: 3,
  AVAILABLE: 4,
  INSTALLED: 5,
  CANCELED: 6,
  ABORTED: 7,
};

declare const ipp_jcollate_e: {
  UNCOLLATED_SHEE: 3,
  COLLATED_DOCUMEN: 4,
  UNCOLLATED_DOCUMEN: 5,
};

declare const reloc_type_arm: {
  RELOC_VANILLA: 0,
  RELOC_PAIR: 1,
  RELOC_SECTDIFF: 2,
  RELOC_LOCAL_SECTDIFF: 3,
  RELOC_PB_LA_PTR: 4,
  RELOC_BR24: 5,
  THUMB_RELOC_BR22: 6,
  THUMB_32BIT_BRANCH: 7,
  RELOC_HALF: 8,
  RELOC_HALF_SECTDIFF: 9,
};

declare const ipp_res_e: {
  INCH: 3,
  CM: 4,
};

declare const ppd_ui_e: {
  BOOLEAN: 0,
  PICKONE: 1,
  PICKMANY: 2,
};

declare const http_trust_e: {
  OK: 0,
  INVALID: 1,
  CHANGED: 2,
  EXPIRED: 3,
  RENEWED: 4,
  UNKNOWN: 5,
};

declare const URegexpFlag: {
  CANON_EQ: 128,
  CASE_INSENSITIVE: 2,
  COMMENTS: 4,
  DOTALL: 32,
  LITERAL: 16,
  MULTILINE: 8,
  UNIX_LINES: 1,
  UWORD: 256,
  ERROR_ON_UNKNOWN_ESCAPES: 512,
};

declare const compression_algorithm: {
  LZ4: 256,
  ZLIB: 517,
  LZMA: 774,
  LZ4_RAW: 257,
  BROTLI: 2818,
  LZFSE: 2049,
  LZBITMAP: 1794,
};

declare const UIndicPositionalCategory: {
  NA: 0,
  BOTTOM: 1,
  BOTTOM_AND_LEFT: 2,
  BOTTOM_AND_RIGHT: 3,
  LEFT: 4,
  LEFT_AND_RIGHT: 5,
  OVERSTRUCK: 6,
  RIGHT: 7,
  TOP: 8,
  TOP_AND_BOTTOM: 9,
  TOP_AND_BOTTOM_AND_RIGHT: 10,
  TOP_AND_LEFT: 11,
  TOP_AND_LEFT_AND_RIGHT: 12,
  TOP_AND_RIGHT: 13,
  VISUAL_ORDER_LEFT: 14,
  TOP_AND_BOTTOM_AND_LEFT: 15,
};

declare class TclTomMathStubs {
  constructor(init?: TclTomMathStubs);
  magic: number;
  hooks: interop.Pointer;
  tclBN_epoch: () => number | null;
  tclBN_revision: () => number | null;
  tclBN_mp_add: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_add_d: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_and: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_clamp: (p1: interop.PointerConvertible) => void | null;
  tclBN_mp_clear: (p1: interop.PointerConvertible) => void | null;
  tclBN_mp_clear_multi: (p1: interop.PointerConvertible) => void | null;
  tclBN_mp_cmp: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  tclBN_mp_cmp_d: (p1: interop.PointerConvertible, p2: number) => number | null;
  tclBN_mp_cmp_mag: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  tclBN_mp_copy: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  tclBN_mp_count_bits: (p1: interop.PointerConvertible) => number | null;
  tclBN_mp_div: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number | null;
  tclBN_mp_div_d: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number | null;
  tclBN_mp_div_2: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  tclBN_mp_div_2d: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number | null;
  tclBN_mp_div_3: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_exch: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void | null;
  tclBN_mp_expt_d: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_grow: (p1: interop.PointerConvertible, p2: number) => number | null;
  tclBN_mp_init: (p1: interop.PointerConvertible) => number | null;
  tclBN_mp_init_copy: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  tclBN_mp_init_multi: (p1: interop.PointerConvertible) => number | null;
  tclBN_mp_init_set: (p1: interop.PointerConvertible, p2: number) => number | null;
  tclBN_mp_init_size: (p1: interop.PointerConvertible, p2: number) => number | null;
  tclBN_mp_lshd: (p1: interop.PointerConvertible, p2: number) => number | null;
  tclBN_mp_mod: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_mod_2d: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_mul: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_mul_d: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_mul_2: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  tclBN_mp_mul_2d: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_neg: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  tclBN_mp_or: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_radix_size: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_read_radix: (p1: interop.PointerConvertible, p2: string, p3: number) => number | null;
  tclBN_mp_rshd: (p1: interop.PointerConvertible, p2: number) => void | null;
  tclBN_mp_shrink: (p1: interop.PointerConvertible) => number | null;
  tclBN_mp_set: (p1: interop.PointerConvertible, p2: number) => void | null;
  tclBN_mp_sqr: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  tclBN_mp_sqrt: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  tclBN_mp_sub: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_sub_d: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_to_unsigned_bin: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  tclBN_mp_to_unsigned_bin_n: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_toradix_n: (p1: interop.PointerConvertible, p2: string, p3: number, p4: number) => number | null;
  tclBN_mp_unsigned_bin_size: (p1: interop.PointerConvertible) => number | null;
  tclBN_mp_xor: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_zero: (p1: interop.PointerConvertible) => void | null;
  tclBN_reverse: (p1: interop.PointerConvertible, p2: number) => void | null;
  tclBN_fast_s_mp_mul_digs: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: number) => number | null;
  tclBN_fast_s_mp_sqr: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  tclBN_mp_karatsuba_mul: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_karatsuba_sqr: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  tclBN_mp_toom_mul: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  tclBN_mp_toom_sqr: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  tclBN_s_mp_add: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  tclBN_s_mp_mul_digs: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: number) => number | null;
  tclBN_s_mp_sqr: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  tclBN_s_mp_sub: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
}

declare class list_xattrs_result {
  constructor(init?: list_xattrs_result);
  finderInfoOffset: number;
  resourceForkOffset: number;
  resourceForkLength: number;
  numOfXattrs: number;
  dataLength: number;
  namesLength: number;
  rangesLength: number;
  data: unknown /* const array */;
}

declare class tss {
  constructor(init?: tss);
  oldtss: sel;
  : number;
  esp0: number;
  ss0: sel;
  : number;
  esp1: number;
  ss1: sel;
  : number;
  esp2: number;
  ss2: sel;
  : number;
  cr3: number;
  eip: number;
  eflags: number;
  eax: number;
  ecx: number;
  edx: number;
  ebx: number;
  esp: number;
  ebp: number;
  esi: number;
  edi: number;
  es: sel;
  : number;
  cs: sel;
  : number;
  ss: sel;
  : number;
  ds: sel;
  : number;
  fs: sel;
  : number;
  gs: sel;
  : number;
  ldt: sel;
  : number;
  t: number;
  : number;
  io_bmap: number;
}

declare class unnamed_5022595679192618032 {
  constructor(init?: unnamed_5022595679192618032);
  offset00: number;
  seg: sel;
  : number;
  type: number;
  dpl: number;
  present: number;
  offset16: number;
}

declare class unnamed_15080151464434138647 {
  constructor(init?: unnamed_15080151464434138647);
  limit00: number;
  base00: number;
  base16: number;
  type: number;
  dpl: number;
  present: number;
  limit16: number;
  : number;
  stksz: number;
  granular: number;
  base24: number;
}

declare class mwl_region {
  constructor(init?: mwl_region);
  mwlr_fd: number;
  mwlr_protections: number;
  mwlr_file_offset: number;
  mwlr_address: number;
  mwlr_size: number;
}

declare class unnamed_6555016405554135130 {
  constructor(init?: unnamed_6555016405554135130);
  offset00: number;
  seg: sel;
  argcnt: number;
  : number;
  type: number;
  dpl: number;
  present: number;
  offset16: number;
}

declare class TclTomMathStubHooks {
  constructor(init?: TclTomMathStubHooks);
}

declare class PE_state {
  constructor(init?: PE_state);
  initialized: number;
  video: PE_Video;
  deviceTreeHead: interop.Pointer;
  bootArgs: interop.Pointer;
  deviceTreeSize: number;
}

declare class timebase_freq_t {
  constructor(init?: timebase_freq_t);
  timebase_num: number;
  timebase_den: number;
}

declare class TkIntXlibStubs {
  constructor(init?: TkIntXlibStubs);
  magic: number;
  hooks: interop.Pointer;
}

declare class clock_frequency_info_t {
  constructor(init?: clock_frequency_info_t);
  bus_clock_rate_hz: number;
  cpu_clock_rate_hz: number;
  dec_clock_rate_hz: number;
  bus_clock_rate_num: number;
  bus_clock_rate_den: number;
  bus_to_cpu_rate_num: number;
  bus_to_cpu_rate_den: number;
  bus_to_dec_rate_num: number;
  bus_to_dec_rate_den: number;
  timebase_frequency_hz: number;
  timebase_frequency_num: number;
  timebase_frequency_den: number;
  bus_frequency_hz: number;
  bus_frequency_min_hz: number;
  bus_frequency_max_hz: number;
  cpu_frequency_hz: number;
  cpu_frequency_min_hz: number;
  cpu_frequency_max_hz: number;
  prf_frequency_hz: number;
  prf_frequency_min_hz: number;
  prf_frequency_max_hz: number;
  mem_frequency_hz: number;
  mem_frequency_min_hz: number;
  mem_frequency_max_hz: number;
  fix_frequency_hz: number;
}

declare class __Reply__task_set_ras_pc_t {
  constructor(init?: __Reply__task_set_ras_pc_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class i386_float_state {
  constructor(init?: i386_float_state);
}

declare class objc_method_description {
  constructor(init?: objc_method_description);
  name: string | null;
  types: string | null;
}

declare class __Request__host_get_multiuser_config_flags_t {
  constructor(init?: __Request__host_get_multiuser_config_flags_t);
  Head: mach_msg_header_t;
}

declare class log2phys {
  constructor(init?: log2phys);
  l2p_flags: number;
  l2p_contigbytes: number;
  l2p_devoffset: number;
}

declare class ranlib_64 {
  constructor(init?: ranlib_64);
  ran_un: unnamed_13987264378789662937;
  ran_off: number;
}

declare class HFSMasterDirectoryBlock {
  constructor(init?: HFSMasterDirectoryBlock);
  drSigWord: number;
  drCrDate: number;
  drLsMod: number;
  drAtrb: number;
  drNmFls: number;
  drVBMSt: number;
  drAllocPtr: number;
  drNmAlBlks: number;
  drAlBlkSiz: number;
  drClpSiz: number;
  drAlBlSt: number;
  drNxtCNID: number;
  drFreeBks: number;
  drVN: unknown /* const array */;
  drVolBkUp: number;
  drVSeqNum: number;
  drWrCnt: number;
  drXTClpSiz: number;
  drCTClpSiz: number;
  drNmRtDirs: number;
  drFilCnt: number;
  drDirCnt: number;
  drFndrInfo: unknown /* const array */;
  drEmbedSigWord: number;
  drEmbedExtent: HFSExtentDescriptor;
  drXTFlSize: number;
  drXTExtRec: unknown /* const array */;
  drCTFlSize: number;
  drCTExtRec: unknown /* const array */;
}

declare class mach_msg_port_descriptor_t {
  constructor(init?: mach_msg_port_descriptor_t);
  name: number;
  pad1: number;
  pad2: number;
  disposition: number;
  type: number;
}

declare class __Reply__host_set_special_port_t {
  constructor(init?: __Reply__host_set_special_port_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class sadb_sens {
  constructor(init?: sadb_sens);
  sadb_sens_len: number;
  sadb_sens_exttype: number;
  sadb_sens_dpd: number;
  sadb_sens_sens_level: number;
  sadb_sens_sens_len: number;
  sadb_sens_integ_level: number;
  sadb_sens_integ_len: number;
  sadb_sens_reserved: number;
}

declare class nd_opt_rd_hdr {
  constructor(init?: nd_opt_rd_hdr);
  nd_opt_rh_type: number;
  nd_opt_rh_len: number;
  nd_opt_rh_reserved1: number;
  nd_opt_rh_reserved2: number;
}

declare class task_affinity_tag_info {
  constructor(init?: task_affinity_tag_info);
  set_count: number;
  min: number;
  max: number;
  task_count: number;
}

declare class __Reply__task_get_mach_voucher_t {
  constructor(init?: __Reply__task_get_mach_voucher_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  voucher: mach_msg_port_descriptor_t;
}

declare class sqlite3_vfs {
  constructor(init?: sqlite3_vfs);
  iVersion: number;
  szOsFile: number;
  mxPathname: number;
  pNext: interop.Pointer;
  zName: string | null;
  pAppData: interop.Pointer;
  xOpen: (p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: number, p5: interop.PointerConvertible) => number | null;
  xDelete: (p1: interop.PointerConvertible, p2: string, p3: number) => number | null;
  xAccess: (p1: interop.PointerConvertible, p2: string, p3: number, p4: interop.PointerConvertible) => number | null;
  xFullPathname: (p1: interop.PointerConvertible, p2: string, p3: number, p4: string) => number | null;
  xDlOpen: (p1: interop.PointerConvertible, p2: string) => interop.Pointer | null;
  xDlError: (p1: interop.PointerConvertible, p2: number, p3: string) => void | null;
  xDlSym: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string) => () => void | null;
  xDlClose: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void | null;
  xRandomness: (p1: interop.PointerConvertible, p2: number, p3: string) => number | null;
  xSleep: (p1: interop.PointerConvertible, p2: number) => number | null;
  xCurrentTime: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  xGetLastError: (p1: interop.PointerConvertible, p2: number, p3: string) => number | null;
  xCurrentTimeInt64: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  xSetSystemCall: (p1: interop.PointerConvertible, p2: string, p3: () => void) => number | null;
  xGetSystemCall: (p1: interop.PointerConvertible, p2: string) => () => void | null;
  xNextSystemCall: (p1: interop.PointerConvertible, p2: string) => string | null;
}

declare class simd_quatf {
  constructor(init?: simd_quatf);
  vector: unknown /* ext vector */;
}

declare class simd_quath {
  constructor(init?: simd_quath);
  vector: unknown /* ext vector */;
}

declare class simd_double3x4 {
  constructor(init?: simd_double3x4);
  columns: unknown /* const array */;
}

declare class sqlite3_index_constraint_usage {
  constructor(init?: sqlite3_index_constraint_usage);
  argvIndex: number;
  omit: number;
}

declare class simd_double2x4 {
  constructor(init?: simd_double2x4);
  columns: unknown /* const array */;
}

declare class secure_boot_cryptex_args {
  constructor(init?: secure_boot_cryptex_args);
  sbc_version: number;
  sbc_4cc: number;
  sbc_authentic_manifest_fd: number;
  sbc_user_manifest_fd: number;
  sbc_payload_fd: number;
  sbc_flags: number;
}

declare class simd_double4x2 {
  constructor(init?: simd_double4x2);
  columns: unknown /* const array */;
}

declare class simd_double3x2 {
  constructor(init?: simd_double3x2);
  columns: unknown /* const array */;
}

declare class simd_double2x2 {
  constructor(init?: simd_double2x2);
  columns: unknown /* const array */;
}

declare class simd_float4x4 {
  constructor(init?: simd_float4x4);
  columns: unknown /* const array */;
}

declare class simd_float3x2 {
  constructor(init?: simd_float3x2);
  columns: unknown /* const array */;
}

declare class simd_half4x4 {
  constructor(init?: simd_half4x4);
  columns: unknown /* const array */;
}

declare class simd_half4x3 {
  constructor(init?: simd_half4x3);
  columns: unknown /* const array */;
}

declare class simd_half2x2 {
  constructor(init?: simd_half2x2);
  columns: unknown /* const array */;
}

declare class __Reply__mach_port_guard_with_flags_t {
  constructor(init?: __Reply__mach_port_guard_with_flags_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__task_register_dyld_shared_cache_image_info_t {
  constructor(init?: __Reply__task_register_dyld_shared_cache_image_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class iconv_hooks {
  constructor(init?: iconv_hooks);
  uc_hook: (p1: number, p2: interop.PointerConvertible) => void | null;
  wc_hook: (p1: number, p2: interop.PointerConvertible) => void | null;
  data: interop.Pointer;
}

declare class sockaddr_ctl {
  constructor(init?: sockaddr_ctl);
  sc_len: number;
  sc_family: number;
  ss_sysaddr: number;
  sc_id: number;
  sc_unit: number;
  sc_reserved: unknown /* const array */;
}

declare class ipv6_mreq {
  constructor(init?: ipv6_mreq);
  ipv6mr_multiaddr: in6_addr;
  ipv6mr_interface: number;
}

declare class thread_group_snapshot_v2 {
  constructor(init?: thread_group_snapshot_v2);
  tgs_id: number;
  tgs_name: unknown /* const array */;
  tgs_flags: number;
}

declare class xtcpcb64 {
  constructor(init?: xtcpcb64);
  xt_len: number;
  xt_inpcb: xinpcb64;
  t_segq: number;
  t_dupacks: number;
  t_timer: unknown /* const array */;
  t_state: number;
  t_flags: number;
  t_force: number;
  snd_una: number;
  snd_max: number;
  snd_nxt: number;
  snd_up: number;
  snd_wl1: number;
  snd_wl2: number;
  iss: number;
  irs: number;
  rcv_nxt: number;
  rcv_adv: number;
  rcv_wnd: number;
  rcv_up: number;
  snd_wnd: number;
  snd_cwnd: number;
  snd_ssthresh: number;
  t_maxopd: number;
  t_rcvtime: number;
  t_starttime: number;
  t_rtttime: number;
  t_rtseq: number;
  t_rxtcur: number;
  t_maxseg: number;
  t_srtt: number;
  t_rttvar: number;
  t_rxtshift: number;
  t_rttmin: number;
  t_rttupdated: number;
  max_sndwnd: number;
  t_softerror: number;
  t_oobflags: number;
  t_iobc: number;
  snd_scale: number;
  rcv_scale: number;
  request_r_scale: number;
  requested_s_scale: number;
  ts_recent: number;
  ts_recent_age: number;
  last_ack_sent: number;
  cc_send: number;
  cc_recv: number;
  snd_recover: number;
  snd_cwnd_prev: number;
  snd_ssthresh_prev: number;
  t_badrxtwin: number;
  xt_alignment_hack: number;
}

declare class sqlite3_mem_methods {
  constructor(init?: sqlite3_mem_methods);
  xMalloc: (p1: number) => interop.Pointer | null;
  xFree: (p1: interop.PointerConvertible) => void | null;
  xRealloc: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  xSize: (p1: interop.PointerConvertible) => number | null;
  xRoundup: (p1: number) => number | null;
  xInit: (p1: interop.PointerConvertible) => number | null;
  xShutdown: (p1: interop.PointerConvertible) => void | null;
  pAppData: interop.Pointer;
}

declare class __Request__task_set_phys_footprint_limit_t {
  constructor(init?: __Request__task_set_phys_footprint_limit_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  new_limit: number;
}

declare class utmpx {
  constructor(init?: utmpx);
  ut_user: unknown /* const array */;
  ut_id: unknown /* const array */;
  ut_line: unknown /* const array */;
  ut_pid: number;
  ut_type: number;
  ut_tv: timeval;
  ut_host: unknown /* const array */;
  ut_pad: unknown /* const array */;
}

declare class sadb_sa {
  constructor(init?: sadb_sa);
  sadb_sa_len: number;
  sadb_sa_exttype: number;
  sadb_sa_spi: number;
  sadb_sa_replay: number;
  sadb_sa_state: number;
  sadb_sa_auth: number;
  sadb_sa_encrypt: number;
  sadb_sa_flags: number;
}

declare class hostent {
  constructor(init?: hostent);
  h_name: string | null;
  h_aliases: interop.Pointer;
  h_addrtype: number;
  h_length: number;
  h_addr_list: interop.Pointer;
}

declare class historyW {
  constructor(init?: historyW);
}

declare class os_workgroup_join_token_opaque_s {
  constructor(init?: os_workgroup_join_token_opaque_s);
  sig: number;
  opaque: unknown /* const array */;
}

declare class un_sockinfo {
  constructor(init?: un_sockinfo);
  unsi_conn_so: number;
  unsi_conn_pcb: number;
  unsi_addr: unnamed_10884612490709219565;
  unsi_caddr: unnamed_6952071012929515318;
}

declare class __darwin_arm_neon_state64 {
  constructor(init?: __darwin_arm_neon_state64);
  __v: unknown /* const array */;
  __fpsr: number;
  __fpcr: number;
}

declare class mach_msg_ool_descriptor_t {
  constructor(init?: mach_msg_ool_descriptor_t);
  address: interop.Pointer;
  deallocate: number;
  copy: number;
  pad1: number;
  type: number;
  size: number;
}

declare class exclave_textlayout_segment_v2 {
  constructor(init?: exclave_textlayout_segment_v2);
  layoutSegment_uuid: unknown /* const array */;
  layoutSegment_loadAddress: number;
  layoutSegment_rawLoadAddress: number;
}

declare class sqlite3_pcache_methods2 {
  constructor(init?: sqlite3_pcache_methods2);
  iVersion: number;
  pArg: interop.Pointer;
  xInit: (p1: interop.PointerConvertible) => number | null;
  xShutdown: (p1: interop.PointerConvertible) => void | null;
  xCreate: (p1: number, p2: number, p3: number) => interop.Pointer | null;
  xCachesize: (p1: interop.PointerConvertible, p2: number) => void | null;
  xPagecount: (p1: interop.PointerConvertible) => number | null;
  xFetch: (p1: interop.PointerConvertible, p2: number, p3: number) => interop.Pointer | null;
  xUnpin: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number) => void | null;
  xRekey: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number) => void | null;
  xTruncate: (p1: interop.PointerConvertible, p2: number) => void | null;
  xDestroy: (p1: interop.PointerConvertible) => void | null;
  xShrink: (p1: interop.PointerConvertible) => void | null;
}

declare class au_event_ent {
  constructor(init?: au_event_ent);
  ae_number: number;
  ae_name: string | null;
  ae_desc: string | null;
  ae_class: number;
}

declare class __Request___host_page_size_t {
  constructor(init?: __Request___host_page_size_t);
  Head: mach_msg_header_t;
}

declare class bpf_insn {
  constructor(init?: bpf_insn);
  code: number;
  jt: number;
  jf: number;
  k: number;
}

declare class dyld_chained_ptr_arm64e_shared_cache_rebase {
  constructor(init?: dyld_chained_ptr_arm64e_shared_cache_rebase);
  runtimeOffset: number;
  high8: number;
  unused: number;
  next: number;
  auth: number;
}

declare class dyld_all_image_infos {
  constructor(init?: dyld_all_image_infos);
  version: number;
  infoArrayCount: number;
  infoArray: interop.Pointer;
  notification: (p1: interop.Enum<typeof dyld_image_mode>, p2: number, p3: interop.PointerConvertible) => void | null;
  processDetachedFromSharedRegion: boolean;
  libSystemInitialized: boolean;
  dyldImageLoadAddress: interop.Pointer;
  jitInfo: interop.Pointer;
  dyldVersion: string | null;
  errorMessage: string | null;
  terminationFlags: number;
  coreSymbolicationShmPage: interop.Pointer;
  systemOrderFlag: number;
  uuidArrayCount: number;
  uuidArray: interop.Pointer;
  dyldAllImageInfosAddress: interop.Pointer;
  initialImageCount: number;
  errorKind: number;
  errorClientOfDylibPath: string | null;
  errorTargetDylibPath: string | null;
  errorSymbol: string | null;
  sharedCacheSlide: number;
  sharedCacheUUID: unknown /* const array */;
  sharedCacheBaseAddress: number;
  infoArrayChangeTimestamp: number;
  dyldPath: string | null;
  notifyPorts: unknown /* const array */;
  reserved: unknown /* const array */;
  sharedCacheFSID: number;
  sharedCacheFSObjID: number;
  compact_dyld_image_info_addr: number;
  compact_dyld_image_info_size: number;
  platform: number;
  aotInfoCount: number;
  aotInfoArray: interop.Pointer;
  aotInfoArrayChangeTimestamp: number;
  aotSharedCacheBaseAddress: number;
  aotSharedCacheUUID: unknown /* const array */;
}

declare class __Reply__task_dyld_process_info_notify_deregister_t {
  constructor(init?: __Reply__task_dyld_process_info_notify_deregister_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__vm_write_t {
  constructor(init?: __Request__vm_write_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  data: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  address: number;
  dataCnt: number;
}

declare class __Request__thread_terminate_t {
  constructor(init?: __Request__thread_terminate_t);
  Head: mach_msg_header_t;
}

declare class __Request__task_map_corpse_info_t {
  constructor(init?: __Request__task_map_corpse_info_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  corspe_task: mach_msg_port_descriptor_t;
}

declare class proc_fdinfo {
  constructor(init?: proc_fdinfo);
  proc_fd: number;
  proc_fdtype: number;
}

declare class simd_half4x2 {
  constructor(init?: simd_half4x2);
  columns: unknown /* const array */;
}

declare class __Reply__host_get_io_main_t {
  constructor(init?: __Reply__host_get_io_main_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  io_main: mach_msg_port_descriptor_t;
}

declare class __Reply__vm_protect_t {
  constructor(init?: __Reply__vm_protect_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class nextvend {
  constructor(init?: nextvend);
  nv_magic: unknown /* const array */;
  nv_version: number;
  : number;
  nv_U: unnamed_9279470776087544183;
}

declare class _krb5_enc_kdc_rep_part {
  constructor(init?: _krb5_enc_kdc_rep_part);
  magic: number;
  msg_type: number;
  session: interop.Pointer;
  last_req: interop.Pointer;
  nonce: number;
  key_exp: number;
  flags: number;
  times: _krb5_ticket_times;
  server: interop.Pointer;
  caddrs: interop.Pointer;
}

declare class sqlite3_str {
  constructor(init?: sqlite3_str);
}

declare class UBreakIterator {
  constructor(init?: UBreakIterator);
}

declare class security_token_t {
  constructor(init?: security_token_t);
  val: unknown /* const array */;
}

declare class unnamed_7192305794184816688 {
  constructor(init?: unnamed_7192305794184816688);
  w_Termsig: number;
  w_Coredump: number;
  w_Retcode: number;
  w_Filler: number;
}

declare class __Request__kext_request_t {
  constructor(init?: __Request__kext_request_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  request_data: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  user_log_flags: number;
  request_dataCnt: number;
}

declare class ldap_url_desc {
  constructor(init?: ldap_url_desc);
  lud_next: interop.Pointer;
  lud_scheme: string | null;
  lud_host: string | null;
  lud_port: number;
  lud_dn: string | null;
  lud_attrs: interop.Pointer;
  lud_scope: number;
  lud_filter: string | null;
  lud_exts: interop.Pointer;
  lud_crit_exts: number;
}

declare class kev_request {
  constructor(init?: kev_request);
  vendor_code: number;
  kev_class: number;
  kev_subclass: number;
}

declare class rpc_routine_arg_descriptor {
  constructor(init?: rpc_routine_arg_descriptor);
  type: number;
  size: number;
  count: number;
  offset: number;
}

declare class timeb {
  constructor(init?: timeb);
  time: number;
  millitm: number;
  timezone: number;
  dstflag: number;
}

declare class thread_extended_policy {
  constructor(init?: thread_extended_policy);
  timeshare: number;
}

declare class __Request__mach_port_destroy_t {
  constructor(init?: __Request__mach_port_destroy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
}

declare class __Request__task_get_exc_guard_behavior_t {
  constructor(init?: __Request__task_get_exc_guard_behavior_t);
  Head: mach_msg_header_t;
}

declare class __Reply__mach_port_get_service_port_info_t {
  constructor(init?: __Reply__mach_port_get_service_port_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  sp_info_out: mach_service_port_info;
}

declare class icmp6_hdr {
  constructor(init?: icmp6_hdr);
  icmp6_type: number;
  icmp6_code: number;
  icmp6_cksum: number;
  icmp6_dataun: unnamed_9993560228078637820;
}

declare class __Reply__task_get_emulation_vector_t {
  constructor(init?: __Reply__task_get_emulation_vector_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  emulation_vector: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  vector_start: number;
  emulation_vectorCnt: number;
}

declare class ldap_matchingrule {
  constructor(init?: ldap_matchingrule);
  mr_oid: string | null;
  mr_names: interop.Pointer;
  mr_desc: string | null;
  mr_obsolete: number;
  mr_syntax_oid: string | null;
  mr_extensions: interop.Pointer;
}

declare class sockbuf {
  constructor(init?: sockbuf);
}

declare class FixedPoint {
  constructor(init?: FixedPoint);
  x: number;
  y: number;
}

declare class _keymap_entry {
  constructor(init?: _keymap_entry);
  type: number;
  function: (p1: string, p2: number) => number | null;
}

declare class au_header32_ex_t {
  constructor(init?: au_header32_ex_t);
  size: number;
  version: number;
  e_type: number;
  e_mod: number;
  ad_type: number;
  addr: unknown /* const array */;
  s: number;
  ms: number;
}

declare class __Request__vm_region_recurse_t {
  constructor(init?: __Request__vm_region_recurse_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  nesting_depth: number;
  infoCnt: number;
}

declare class __Request__mach_port_construct_t {
  constructor(init?: __Request__mach_port_construct_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  options: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  context: number;
}

declare class dyld_chained_starts_offsets {
  constructor(init?: dyld_chained_starts_offsets);
  pointer_format: number;
  starts_count: number;
  chain_starts: unknown /* const array */;
}

declare class ifma_msghdr {
  constructor(init?: ifma_msghdr);
  ifmam_msglen: number;
  ifmam_version: number;
  ifmam_type: number;
  ifmam_addrs: number;
  ifmam_flags: number;
  ifmam_index: number;
}

declare class kauth_identity_extlookup {
  constructor(init?: kauth_identity_extlookup);
  el_seqno: number;
  el_result: number;
  el_flags: number;
  el_info_pid: number;
  el_extend: number;
  el_info_reserved_1: number;
  el_uid: number;
  el_uguid: guid_t;
  el_uguid_valid: number;
  el_usid: ntsid_t;
  el_usid_valid: number;
  el_gid: number;
  el_gguid: guid_t;
  el_gguid_valid: number;
  el_gsid: ntsid_t;
  el_gsid_valid: number;
  el_member_valid: number;
  el_sup_grp_cnt: number;
  el_sup_groups: unknown /* const array */;
}

declare class sockaddr_in {
  constructor(init?: sockaddr_in);
  sin_len: number;
  sin_family: number;
  sin_port: number;
  sin_addr: in_addr;
  sin_zero: unknown /* const array */;
}

declare class __Request__vm_protect_t {
  constructor(init?: __Request__vm_protect_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  set_maximum: number;
  new_protection: number;
}

declare class __Request__host_security_create_task_token_t {
  constructor(init?: __Request__host_security_create_task_token_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  parent_task: mach_msg_port_descriptor_t;
  host: mach_msg_port_descriptor_t;
  ledgers: mach_msg_ool_ports_descriptor_t;
  NDR: NDR_record_t;
  sec_token: security_token_t;
  audit_token: audit_token_t;
  ledgersCnt: number;
  inherit_memory: number;
}

declare class __Request__mach_port_get_attributes_t {
  constructor(init?: __Request__mach_port_get_attributes_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  flavor: number;
  port_info_outCnt: number;
}

declare class __Reply__host_request_notification_t {
  constructor(init?: __Reply__host_request_notification_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__task_map_corpse_info_t {
  constructor(init?: __Reply__task_map_corpse_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  kcd_addr_begin: number;
  kcd_size: number;
}

declare class bpf_program {
  constructor(init?: bpf_program);
  bf_len: number;
  bf_insns: interop.Pointer;
}

declare class proc_channel_info {
  constructor(init?: proc_channel_info);
  chi_instance: unknown /* const array */;
  chi_port: number;
  chi_type: number;
  chi_flags: number;
  rfu_1: number;
}

declare class policy_fifo_info {
  constructor(init?: policy_fifo_info);
  max_priority: number;
  base_priority: number;
  depressed: number;
  depress_priority: number;
}

declare class memory_object_perf_info {
  constructor(init?: memory_object_perf_info);
  cluster_size: number;
  may_cache: number;
}

declare class __Request__mach_port_destruct_t {
  constructor(init?: __Request__mach_port_destruct_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  srdelta: number;
  guard: number;
}

declare class ldapcontrol {
  constructor(init?: ldapcontrol);
  ldctl_oid: string | null;
  ldctl_value: berval;
  ldctl_iscritical: number;
}

declare class mstats {
  constructor(init?: mstats);
  bytes_total: number;
  chunks_used: number;
  bytes_used: number;
  chunks_free: number;
  bytes_free: number;
}

declare class rusage {
  constructor(init?: rusage);
  ru_utime: timeval;
  ru_stime: timeval;
  ru_maxrss: number;
  ru_ixrss: number;
  ru_idrss: number;
  ru_isrss: number;
  ru_minflt: number;
  ru_majflt: number;
  ru_nswap: number;
  ru_inblock: number;
  ru_oublock: number;
  ru_msgsnd: number;
  ru_msgrcv: number;
  ru_nsignals: number;
  ru_nvcsw: number;
  ru_nivcsw: number;
}

declare class thread_crash_exclaves_info {
  constructor(init?: thread_crash_exclaves_info);
  tcei_scid: number;
  tcei_thread_id: number;
  tcei_flags: number;
}

declare class vm_region_submap_info_64 {
  constructor(init?: vm_region_submap_info_64);
  protection: number;
  max_protection: number;
  inheritance: number;
  offset: number;
  user_tag: number;
  pages_resident: number;
  pages_shared_now_private: number;
  pages_swapped_out: number;
  pages_dirtied: number;
  ref_count: number;
  shadow_depth: number;
  external_pager: number;
  share_mode: number;
  is_submap: number;
  behavior: number;
  object_id: number;
  user_wired_count: number;
  flags: number;
  pages_reusable: number;
  object_id_full: number;
}

declare class task_snapshot_v2 {
  constructor(init?: task_snapshot_v2);
  ts_unique_pid: number;
  ts_ss_flags: number;
  ts_user_time_in_terminated_threads: number;
  ts_system_time_in_terminated_threads: number;
  ts_p_start_sec: number;
  ts_task_size: number;
  ts_max_resident_size: number;
  ts_suspend_count: number;
  ts_faults: number;
  ts_pageins: number;
  ts_cow_faults: number;
  ts_was_throttled: number;
  ts_did_throttle: number;
  ts_latency_qos: number;
  ts_pid: number;
  ts_p_comm: unknown /* const array */;
}

declare class frmrinfo {
  constructor(init?: frmrinfo);
  frmr_rej_pdu0: number;
  frmr_rej_pdu1: number;
  frmr_control: number;
  frmr_control_ext: number;
  frmr_cause: number;
}

declare class __Reply__vm_purgable_control_t {
  constructor(init?: __Reply__vm_purgable_control_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  state: number;
}

declare class __Reply__host_get_multiuser_config_flags_t {
  constructor(init?: __Reply__host_get_multiuser_config_flags_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  multiuser_flags: number;
}

declare class __shmid_ds_new {
  constructor(init?: __shmid_ds_new);
  shm_perm: ipc_perm;
  shm_segsz: number;
  shm_lpid: number;
  shm_cpid: number;
  shm_nattch: number;
  shm_atime: number;
  shm_dtime: number;
  shm_ctime: number;
  shm_internal: interop.Pointer;
}

declare class igmpv3 {
  constructor(init?: igmpv3);
  igmp_type: number;
  igmp_code: number;
  igmp_cksum: number;
  igmp_group: in_addr;
  igmp_misc: number;
  igmp_qqi: number;
  igmp_numsrc: number;
}

declare class __Request__host_reboot_t {
  constructor(init?: __Request__host_reboot_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  options: number;
}

declare class mb_class_stat {
  constructor(init?: mb_class_stat);
  mbcl_cname: unknown /* const array */;
  mbcl_size: number;
  mbcl_total: number;
  mbcl_active: number;
  mbcl_infree: number;
  mbcl_slab_cnt: number;
  mbcl_pad: number;
  mbcl_alloc_cnt: number;
  mbcl_free_cnt: number;
  mbcl_notified: number;
  mbcl_purge_cnt: number;
  mbcl_fail_cnt: number;
  mbcl_ctotal: number;
  mbcl_release_cnt: number;
  mbcl_mc_state: number;
  mbcl_mc_cached: number;
  mbcl_mc_waiter_cnt: number;
  mbcl_mc_wretry_cnt: number;
  mbcl_mc_nwretry_cnt: number;
  mbcl_reserved: unknown /* const array */;
}

declare class vm_region_submap_short_info_64 {
  constructor(init?: vm_region_submap_short_info_64);
  protection: number;
  max_protection: number;
  inheritance: number;
  offset: number;
  user_tag: number;
  ref_count: number;
  shadow_depth: number;
  external_pager: number;
  share_mode: number;
  is_submap: number;
  behavior: number;
  object_id: number;
  user_wired_count: number;
  flags: number;
}

declare class __Reply__task_create_t {
  constructor(init?: __Reply__task_create_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  child_task: mach_msg_port_descriptor_t;
}

declare class iocs_store_buffer_entry {
  constructor(init?: iocs_store_buffer_entry);
  path_name: unknown /* const array */;
  iocs: io_compression_stats;
}

declare class stackshot_latency_collection {
  constructor(init?: stackshot_latency_collection);
  latency_version: number;
  setup_latency: number;
  total_task_iteration_latency: number;
  total_terminated_task_iteration_latency: number;
}

declare class __Request__host_set_special_port_t {
  constructor(init?: __Request__host_set_special_port_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  port: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  which: number;
}

declare class __Reply__mach_port_set_context_t {
  constructor(init?: __Reply__mach_port_set_context_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__task_assign_default_t {
  constructor(init?: __Request__task_assign_default_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  assign_threads: number;
}

declare class __Reply__host_kernel_version_t {
  constructor(init?: __Reply__host_kernel_version_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  kernel_versionOffset: number;
  kernel_versionCnt: number;
  kernel_version: unknown /* const array */;
}

declare class unnamed_1269110085973050989 {
  constructor(init?: unnamed_1269110085973050989);
  bitpattern: unknown /* const array */;
}

declare class objc_selector {
  constructor(init?: objc_selector);
}

declare class __Request__mach_vm_remap_new_t {
  constructor(init?: __Request__mach_vm_remap_new_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  src_task: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  target_address: number;
  size: number;
  mask: number;
  flags: number;
  src_address: number;
  copy: number;
  cur_protection: number;
  max_protection: number;
  inheritance: number;
}

declare class _filesec {
  constructor(init?: _filesec);
}

declare class __Reply__task_resume_t {
  constructor(init?: __Reply__task_resume_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__host_statistics_t {
  constructor(init?: __Reply__host_statistics_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  host_info_outCnt: number;
  host_info_out: unknown /* const array */;
}

declare class __Request__host_lockgroup_info_t {
  constructor(init?: __Request__host_lockgroup_info_t);
  Head: mach_msg_header_t;
}

declare class sadb_alg {
  constructor(init?: sadb_alg);
  sadb_alg_id: number;
  sadb_alg_ivlen: number;
  sadb_alg_minbits: number;
  sadb_alg_maxbits: number;
  sadb_alg_reserved: number;
}

declare class segment_command {
  constructor(init?: segment_command);
  cmd: number;
  cmdsize: number;
  segname: unknown /* const array */;
  vmaddr: number;
  vmsize: number;
  fileoff: number;
  filesize: number;
  maxprot: number;
  initprot: number;
  nsects: number;
  flags: number;
}

declare class netent {
  constructor(init?: netent);
  n_name: string | null;
  n_aliases: interop.Pointer;
  n_addrtype: number;
  n_net: number;
}

declare class __Request__mach_port_kernel_object_t {
  constructor(init?: __Request__mach_port_kernel_object_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
}

declare class processor_basic_info {
  constructor(init?: processor_basic_info);
  cpu_type: number;
  cpu_subtype: number;
  running: number;
  slot_num: number;
}

declare class at_texel_region_t {
  constructor(init?: at_texel_region_t);
  texels: interop.Pointer;
  validSize: at_size_t;
  rowBytes: number;
  sliceBytes: number;
}

declare class tcpiphdr {
  constructor(init?: tcpiphdr);
  ti_i: ipovly;
  ti_t: tcphdr;
}

declare class sqlite3_mutex_methods {
  constructor(init?: sqlite3_mutex_methods);
  xMutexInit: () => number | null;
  xMutexEnd: () => number | null;
  xMutexAlloc: (p1: number) => interop.Pointer | null;
  xMutexFree: (p1: interop.PointerConvertible) => void | null;
  xMutexEnter: (p1: interop.PointerConvertible) => void | null;
  xMutexTry: (p1: interop.PointerConvertible) => number | null;
  xMutexLeave: (p1: interop.PointerConvertible) => void | null;
  xMutexHeld: (p1: interop.PointerConvertible) => number | null;
  xMutexNotheld: (p1: interop.PointerConvertible) => number | null;
}

declare class _krb5_key_data {
  constructor(init?: _krb5_key_data);
}

declare class fstab {
  constructor(init?: fstab);
  fs_spec: string | null;
  fs_file: string | null;
  fs_vfstype: string | null;
  fs_mntops: string | null;
  fs_type: string | null;
  fs_freq: number;
  fs_passno: number;
}

declare class btinfo_sc_load_info {
  constructor(init?: btinfo_sc_load_info);
  sharedCacheSlide: number;
  sharedCacheUUID: unknown /* const array */;
  sharedCacheBaseAddress: number;
}

declare class Float80 {
  constructor(init?: Float80);
  exp: number;
  man: unknown /* const array */;
}

declare class au_tid {
  constructor(init?: au_tid);
  port: number;
  machine: number;
}

declare class rr_result {
  constructor(init?: rr_result);
  rrr_flags: number;
  rrr_ordinal: number;
  rrr_matchedlen: number;
  rrr_ifid: number;
  rrr_prefix: in6_addr;
}

declare class transitioning_task_snapshot {
  constructor(init?: transitioning_task_snapshot);
  tts_unique_pid: number;
  tts_ss_flags: number;
  tts_transition_type: number;
  tts_pid: number;
  tts_p_comm: unknown /* const array */;
}

declare class ttychars {
  constructor(init?: ttychars);
  tc_erase: number;
  tc_kill: number;
  tc_intrc: number;
  tc_quitc: number;
  tc_startc: number;
  tc_stopc: number;
  tc_eofc: number;
  tc_brkc: number;
  tc_suspc: number;
  tc_dsuspc: number;
  tc_rprntc: number;
  tc_flushc: number;
  tc_werasc: number;
  tc_lnextc: number;
}

declare class __Request__thread_swap_mach_voucher_t {
  constructor(init?: __Request__thread_swap_mach_voucher_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  new_voucher: mach_msg_port_descriptor_t;
  old_voucher: mach_msg_port_descriptor_t;
}

declare class HFSPlusAttrInlineData {
  constructor(init?: HFSPlusAttrInlineData);
  recordType: number;
  reserved: number;
  logicalSize: number;
  userData: unknown /* const array */;
}

declare class __Reply__thread_sample_t {
  constructor(init?: __Reply__thread_sample_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class unnamed_3131632208855827044 {
  constructor(init?: unnamed_3131632208855827044);
  reserved1: number;
  reserved2: number;
  reserved3: number;
  reserved4: number;
  reserved5: number;
}

declare class ip6_opt_router {
  constructor(init?: ip6_opt_router);
  ip6or_type: number;
  ip6or_len: number;
  ip6or_value: unknown /* const array */;
}

declare class __Reply__task_get_dyld_image_infos_t {
  constructor(init?: __Reply__task_get_dyld_image_infos_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  dyld_images: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  dyld_imagesCnt: number;
}

declare class __Reply__mach_port_swap_guard_t {
  constructor(init?: __Reply__mach_port_swap_guard_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class xinpgen {
  constructor(init?: xinpgen);
  xig_len: number;
  xig_count: number;
  xig_gen: number;
  xig_sogen: number;
}

declare class fts5_api {
  constructor(init?: fts5_api);
  iVersion: number;
  xCreateTokenizer: (p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: (p1: interop.PointerConvertible) => void) => number | null;
  xFindTokenizer: (p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number | null;
  xCreateFunction: (p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: number, p5: interop.PointerConvertible) => void, p5: (p1: interop.PointerConvertible) => void) => number | null;
  xCreateTokenizer_v2: (p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: (p1: interop.PointerConvertible) => void) => number | null;
  xFindTokenizer_v2: (p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number | null;
}

declare class tcpstat_local {
  constructor(init?: tcpstat_local);
  badformat: number;
  unspecv6: number;
  synfin: number;
  badformatipsec: number;
  noconnnolist: number;
  noconnlist: number;
  listbadsyn: number;
  icmp6unreach: number;
  deprecate6: number;
  ooopacket: number;
  rstinsynrcv: number;
  dospacket: number;
  cleanup: number;
  synwindow: number;
  linkheur_stealthdrop: number;
  linkheur_noackpri: number;
  linkheur_comprxmt: number;
  linkheur_synrxmt: number;
  linkheur_rxmtfloor: number;
}

declare class vfsconf {
  constructor(init?: vfsconf);
  vfc_reserved1: number;
  vfc_name: unknown /* const array */;
  vfc_typenum: number;
  vfc_refcount: number;
  vfc_flags: number;
  vfc_reserved2: number;
  vfc_reserved3: number;
}

declare class __Request__mach_port_dnrequest_info_t {
  constructor(init?: __Request__mach_port_dnrequest_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
}

declare class vfsstatfs {
  constructor(init?: vfsstatfs);
  f_bsize: number;
  f_iosize: number;
  f_blocks: number;
  f_bfree: number;
  f_bavail: number;
  f_bused: number;
  f_files: number;
  f_ffree: number;
  f_fsid: fsid;
  f_owner: number;
  f_flags: number;
  f_fstypename: unknown /* const array */;
  f_mntonname: unknown /* const array */;
  f_mntfromname: unknown /* const array */;
  f_fssubtype: number;
  f_reserved: unknown /* const array */;
}

declare class kev_in6_data {
  constructor(init?: kev_in6_data);
  link_data: net_event_data;
  ia_addr: sockaddr_in6;
  ia_net: sockaddr_in6;
  ia_dstaddr: sockaddr_in6;
  ia_prefixmask: sockaddr_in6;
  ia_plen: number;
  ia6_flags: number;
  ia_lifetime: kev_in6_addrlifetime;
  ia_mac: unknown /* const array */;
}

declare class fenv_t {
  constructor(init?: fenv_t);
  __fpsr: number;
  __fpcr: number;
}

declare class _opaque_pthread_mutexattr_t {
  constructor(init?: _opaque_pthread_mutexattr_t);
  __sig: number;
  __opaque: unknown /* const array */;
}

declare class unwind_info_section_header_lsda_index_entry {
  constructor(init?: unwind_info_section_header_lsda_index_entry);
  functionOffset: number;
  lsdaOffset: number;
}

declare class ifnet_ip_addr {
  constructor(init?: ifnet_ip_addr);
}

declare class au_trailer_t {
  constructor(init?: au_trailer_t);
  magic: number;
  count: number;
}

declare class __Request__task_set_state_t {
  constructor(init?: __Request__task_set_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  new_stateCnt: number;
  new_state: unknown /* const array */;
}

declare class __Reply__task_set_emulation_vector_t {
  constructor(init?: __Reply__task_set_emulation_vector_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class UText {
  constructor(init?: UText);
  magic: number;
  flags: number;
  providerProperties: number;
  sizeOfStruct: number;
  chunkNativeLimit: number;
  extraSize: number;
  nativeIndexingLimit: number;
  chunkNativeStart: number;
  chunkOffset: number;
  chunkLength: number;
  chunkContents: interop.Pointer;
  pFuncs: interop.Pointer;
  pExtra: interop.Pointer;
  context: interop.Pointer;
  p: interop.Pointer;
  q: interop.Pointer;
  r: interop.Pointer;
  privP: interop.Pointer;
  a: number;
  b: number;
  c: number;
  privA: number;
  privB: number;
  privC: number;
}

declare class unnamed_12804984068000564476 {
  constructor(init?: unnamed_12804984068000564476);
  instr1: number;
  instr2: number;
}

declare class if_cellular_status {
  constructor(init?: if_cellular_status);
  if_cell_u: unnamed_10982442776747473916;
}

declare class thread_standard_policy {
  constructor(init?: thread_standard_policy);
  no_data: number;
}

declare class ip6_rthdr0 {
  constructor(init?: ip6_rthdr0);
  ip6r0_nxt: number;
  ip6r0_len: number;
  ip6r0_type: number;
  ip6r0_segleft: number;
  ip6r0_reserved: number;
}

declare class gmonhdr_64 {
  constructor(init?: gmonhdr_64);
  lpc: number;
  hpc: number;
  ncnt: number;
  version: number;
  profrate: number;
  spare: unknown /* const array */;
}

declare class appletalk_fdinfo {
  constructor(init?: appletalk_fdinfo);
  pfi: proc_fileinfo;
  appletalkinfo: appletalk_info;
}

declare class cups_lang_s {
  constructor(init?: cups_lang_s);
  next: interop.Pointer;
  used: number;
  encoding: interop.Enum<typeof cups_encoding_e>;
  language: unknown /* const array */;
  strings: interop.Pointer;
}

declare class fvmfile_command {
  constructor(init?: fvmfile_command);
  cmd: number;
  cmdsize: number;
  name: lc_str;
  header_addr: number;
}

declare class ranlib {
  constructor(init?: ranlib);
  ran_un: unnamed_16399479197806178150;
  ran_off: number;
}

declare class __Reply__task_get_special_port_t {
  constructor(init?: __Reply__task_get_special_port_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  special_port: mach_msg_port_descriptor_t;
}

declare class __Request__task_get_exception_ports_info_t {
  constructor(init?: __Request__task_get_exception_ports_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  exception_mask: number;
}

declare class ipc_info_space {
  constructor(init?: ipc_info_space);
  iis_genno_mask: number;
  iis_table_size: number;
  iis_table_next: number;
  iis_tree_size: number;
  iis_tree_small: number;
  iis_tree_hash: number;
}

declare class __Reply__task_set_mach_voucher_t {
  constructor(init?: __Reply__task_set_mach_voucher_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__thread_get_assignment_t {
  constructor(init?: __Request__thread_get_assignment_t);
  Head: mach_msg_header_t;
}

declare class __Reply__task_threads_t {
  constructor(init?: __Reply__task_threads_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  act_list: mach_msg_ool_ports_descriptor_t;
  NDR: NDR_record_t;
  act_listCnt: number;
}

declare class ostat {
  constructor(init?: ostat);
  st_dev: number;
  st_ino: number;
  st_mode: number;
  st_nlink: number;
  st_uid: number;
  st_gid: number;
  st_rdev: number;
  st_size: number;
  st_atimespec: timespec;
  st_mtimespec: timespec;
  st_ctimespec: timespec;
  st_blksize: number;
  st_blocks: number;
  st_flags: number;
  st_gen: number;
}

declare class fat_arch_64 {
  constructor(init?: fat_arch_64);
  cputype: number;
  cpusubtype: number;
  offset: number;
  size: number;
  align: number;
  reserved: number;
}

declare class rusage_info_v3 {
  constructor(init?: rusage_info_v3);
  ri_uuid: unknown /* const array */;
  ri_user_time: number;
  ri_system_time: number;
  ri_pkg_idle_wkups: number;
  ri_interrupt_wkups: number;
  ri_pageins: number;
  ri_wired_size: number;
  ri_resident_size: number;
  ri_phys_footprint: number;
  ri_proc_start_abstime: number;
  ri_proc_exit_abstime: number;
  ri_child_user_time: number;
  ri_child_system_time: number;
  ri_child_pkg_idle_wkups: number;
  ri_child_interrupt_wkups: number;
  ri_child_pageins: number;
  ri_child_elapsed_abstime: number;
  ri_diskio_bytesread: number;
  ri_diskio_byteswritten: number;
  ri_cpu_time_qos_default: number;
  ri_cpu_time_qos_maintenance: number;
  ri_cpu_time_qos_background: number;
  ri_cpu_time_qos_utility: number;
  ri_cpu_time_qos_legacy: number;
  ri_cpu_time_qos_user_initiated: number;
  ri_cpu_time_qos_user_interactive: number;
  ri_billed_system_time: number;
  ri_serviced_system_time: number;
}

declare class Operation {
  constructor(init?: Operation);
}

declare class TkIntXlibStubHooks {
  constructor(init?: TkIntXlibStubHooks);
}

declare class __Reply__mach_port_construct_t {
  constructor(init?: __Reply__mach_port_construct_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  name: number;
}

declare class stackshot_latency_cpu {
  constructor(init?: stackshot_latency_cpu);
  cpu_number: number;
  cluster_type: number;
  init_latency_mt: number;
  workqueue_latency_mt: number;
  total_latency_mt: number;
  total_cycles: number;
  total_instrs: number;
  tasks_processed: number;
  threads_processed: number;
  faulting_time_mt: number;
  total_buf: number;
  intercluster_buf_used: number;
}

declare class __Request__processor_set_policy_enable_t {
  constructor(init?: __Request__processor_set_policy_enable_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  policy: number;
}

declare class _Unwind_Control_Block {
  constructor(init?: _Unwind_Control_Block);
  exception_class: number;
  exception_cleanup: (p1: interop.Enum<typeof _Unwind_Reason_Code>, p2: interop.PointerConvertible) => void | null;
  unwinder_cache: unnamed_3131632208855827044;
  barrier_cache: unnamed_15547771113679546793;
  cleanup_cache: unnamed_1269110085973050989;
  pr_cache: unnamed_11104031724170527042;
  : number;
}

declare class __socket {
  constructor(init?: __socket);
}

declare class linker_option_command {
  constructor(init?: linker_option_command);
  cmd: number;
  cmdsize: number;
  count: number;
}

declare class group_req {
  constructor(init?: group_req);
  gr_interface: number;
  gr_group: sockaddr_storage;
}

declare class fhandle {
  constructor(init?: fhandle);
  fh_len: number;
  fh_data: unknown /* const array */;
}

declare class __Request__task_set_info_t {
  constructor(init?: __Request__task_set_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  task_info_inCnt: number;
  task_info_in: unknown /* const array */;
}

declare class nd_opt_pref64 {
  constructor(init?: nd_opt_pref64);
  nd_opt_pref64_type: number;
  nd_opt_pref64_len: number;
  nd_opt_pref64_scaled_lifetime_plc: number;
  nd_opt_pref64_prefix: unknown /* const array */;
}

declare class if_msghdr {
  constructor(init?: if_msghdr);
  ifm_msglen: number;
  ifm_version: number;
  ifm_type: number;
  ifm_addrs: number;
  ifm_flags: number;
  ifm_index: number;
  ifm_data: if_data;
}

declare class stackshot_cpu_times {
  constructor(init?: stackshot_cpu_times);
  user_usec: number;
  system_usec: number;
}

declare class __Reply__mach_port_insert_right_t {
  constructor(init?: __Reply__mach_port_insert_right_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class nd_opt_mtu {
  constructor(init?: nd_opt_mtu);
  nd_opt_mtu_type: number;
  nd_opt_mtu_len: number;
  nd_opt_mtu_reserved: number;
  nd_opt_mtu_mtu: number;
}

declare class btinfo_thread_state_data_t {
  constructor(init?: btinfo_thread_state_data_t);
  flavor: number;
  count: number;
  tstate: interop.Pointer;
}

declare class __Reply__processor_assign_t {
  constructor(init?: __Reply__processor_assign_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class arpstat {
  constructor(init?: arpstat);
  txrequests: number;
  txreplies: number;
  txannounces: number;
  rxrequests: number;
  rxreplies: number;
  received: number;
  txconflicts: number;
  invalidreqs: number;
  reqnobufs: number;
  dropped: number;
  purged: number;
  timeouts: number;
  dupips: number;
  inuse: number;
  txurequests: number;
  held: number;
}

declare class mach_msg_guarded_port_descriptor32_t {
  constructor(init?: mach_msg_guarded_port_descriptor32_t);
  context: number;
  name: number;
  flags: number;
  disposition: number;
  type: number;
}

declare class __Request__mach_port_set_context_t {
  constructor(init?: __Request__mach_port_set_context_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  context: number;
}

declare class mwl_info_hdr {
  constructor(init?: mwl_info_hdr);
  mwli_version: number;
  mwli_page_size: number;
  mwli_pointer_format: number;
  mwli_binds_offset: number;
  mwli_binds_count: number;
  mwli_chains_offset: number;
  mwli_chains_size: number;
  mwli_slide: number;
  mwli_image_address: number;
}

declare class __Request__lock_set_create_t {
  constructor(init?: __Request__lock_set_create_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  n_ulocks: number;
  policy: number;
}

declare class rawarc {
  constructor(init?: rawarc);
  raw_frompc: number;
  raw_selfpc: number;
  raw_count: number;
}

declare class __Reply__mach_port_destroy_t {
  constructor(init?: __Reply__mach_port_destroy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class _ucred {
  constructor(init?: _ucred);
  cr_ref: number;
  cr_uid: number;
  cr_ngroups: number;
  cr_groups: unknown /* const array */;
}

declare class __Reply__mach_port_extract_right_t {
  constructor(init?: __Reply__mach_port_extract_right_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  poly: mach_msg_port_descriptor_t;
}

declare class __Reply__thread_abort_t {
  constructor(init?: __Reply__thread_abort_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class slapi_dn {
  constructor(init?: slapi_dn);
}

declare class unnamed_550285818874235861 {
  constructor(init?: unnamed_550285818874235861);
  v: number;
  h: number;
}

declare class __Request__mach_port_insert_right_t {
  constructor(init?: __Request__mach_port_insert_right_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  poly: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  name: number;
}

declare class __Reply__vm_remap_new_t {
  constructor(init?: __Reply__vm_remap_new_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  target_address: number;
  cur_protection: number;
  max_protection: number;
}

declare class __Request__vm_allocate_t {
  constructor(init?: __Request__vm_allocate_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  flags: number;
}

declare class policy_infos {
  constructor(init?: policy_infos);
  ts: policy_timeshare_info;
  rr: policy_rr_info;
  fifo: policy_fifo_info;
}

declare class __Reply__vm_region_64_t {
  constructor(init?: __Reply__vm_region_64_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  object_name: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  infoCnt: number;
  info: unknown /* const array */;
}

declare class vm_page_info_basic {
  constructor(init?: vm_page_info_basic);
  disposition: number;
  ref_count: number;
  object_id: number;
  offset: number;
  depth: number;
  __pad: number;
}

declare class kqueue_dyninfo {
  constructor(init?: kqueue_dyninfo);
  kqdi_info: kqueue_info;
  kqdi_servicer: number;
  kqdi_owner: number;
  kqdi_sync_waiters: number;
  kqdi_sync_waiter_qos: number;
  kqdi_async_qos: number;
  kqdi_request_state: number;
  kqdi_events_qos: number;
  kqdi_pri: number;
  kqdi_pol: number;
  kqdi_cpupercent: number;
  _kqdi_reserved0: unknown /* const array */;
  _kqdi_reserved1: unknown /* const array */;
}

declare class ifstat {
  constructor(init?: ifstat);
  ifs_name: unknown /* const array */;
  ascii: unknown /* const array */;
}

declare class __Reply__mach_memory_entry_get_page_counts_t {
  constructor(init?: __Reply__mach_memory_entry_get_page_counts_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  resident_cnt: number;
  dirty_cnt: number;
  swapped_cnt: number;
}

declare class tagMENU {
  constructor(init?: tagMENU);
  height: number;
  width: number;
  rows: number;
  cols: number;
  frows: number;
  fcols: number;
  arows: number;
  namelen: number;
  desclen: number;
  marklen: number;
  itemlen: number;
  spc_desc: number;
  spc_cols: number;
  spc_rows: number;
  pattern: string | null;
  pindex: number;
  win: interop.Pointer;
  sub: interop.Pointer;
  userwin: interop.Pointer;
  usersub: interop.Pointer;
  items: interop.Pointer;
  nitems: number;
  curitem: interop.Pointer;
  toprow: number;
  fore: number;
  back: number;
  grey: number;
  pad: number;
  menuinit: (p1: interop.PointerConvertible) => void | null;
  menuterm: (p1: interop.PointerConvertible) => void | null;
  iteminit: (p1: interop.PointerConvertible) => void | null;
  itemterm: (p1: interop.PointerConvertible) => void | null;
  userptr: interop.Pointer;
  mark: string | null;
  opt: number;
  status: number;
}

declare class _krb5_pa_data {
  constructor(init?: _krb5_pa_data);
  magic: number;
  pa_type: number;
  length: number;
  contents: interop.Pointer;
}

declare class exit_reason_snapshot {
  constructor(init?: exit_reason_snapshot);
  ers_namespace: number;
  ers_code: number;
  ers_flags: number;
}

declare class __Request__mach_port_type_t {
  constructor(init?: __Request__mach_port_type_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
}

declare class UCharIterator {
  constructor(init?: UCharIterator);
  context: interop.Pointer;
  length: number;
  start: number;
  index: number;
  limit: number;
  reservedField: number;
  getIndex: (p1: interop.PointerConvertible, p2: interop.Enum<typeof UCharIteratorOrigin>) => number | null;
  move: (p1: interop.PointerConvertible, p2: number, p3: interop.Enum<typeof UCharIteratorOrigin>) => number | null;
  hasNext: (p1: interop.PointerConvertible) => number | null;
  hasPrevious: (p1: interop.PointerConvertible) => number | null;
  current: (p1: interop.PointerConvertible) => number | null;
  next: (p1: interop.PointerConvertible) => number | null;
  previous: (p1: interop.PointerConvertible) => number | null;
  reservedFn: (p1: interop.PointerConvertible, p2: number) => number | null;
  getState: (p1: interop.PointerConvertible) => number | null;
  setState: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void | null;
}

declare class __Request__processor_set_policy_disable_t {
  constructor(init?: __Request__processor_set_policy_disable_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  policy: number;
  change_threads: number;
}

declare class __double2 {
  constructor(init?: __double2);
  __sinval: number;
  __cosval: number;
}

declare class __float2 {
  constructor(init?: __float2);
  __sinval: number;
  __cosval: number;
}

declare class __Request__thread_get_special_port_t {
  constructor(init?: __Request__thread_get_special_port_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  which_port: number;
}

declare class dwarf_eh_bases {
  constructor(init?: dwarf_eh_bases);
  tbase: number;
  dbase: number;
  func: number;
}

declare class unnamed_16820094213973402152 {
  constructor(init?: unnamed_16820094213973402152);
  w_Stopval: number;
  w_Stopsig: number;
  w_Filler: number;
}

declare class _Unwind_Context {
  constructor(init?: _Unwind_Context);
}

declare class rb_tree_ops_t {
  constructor(init?: rb_tree_ops_t);
  rbto_compare_nodes: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  rbto_compare_key: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  rbto_node_offset: number;
  rbto_context: interop.Pointer;
}

declare class qelem {
  constructor(init?: qelem);
  q_forw: interop.Pointer;
  q_back: interop.Pointer;
  q_data: string | null;
}

declare class io_compression_stats {
  constructor(init?: io_compression_stats);
  uncompressed_size: number;
  compressed_size: number;
  buffer_size_compression_dist: unknown /* const array */;
  block_compressed_size_dist: unknown /* const array */;
}

declare class waitq_set {
  constructor(init?: waitq_set);
}

declare class __Request__mach_vm_wire_t {
  constructor(init?: __Request__mach_vm_wire_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  task: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  desired_access: number;
}

declare class xunpgen {
  constructor(init?: xunpgen);
  xug_len: number;
  xug_count: number;
  xug_gen: number;
  xug_sogen: number;
}

declare class exclave_scresult_info {
  constructor(init?: exclave_scresult_info);
  esc_id: number;
  esc_flags: number;
}

declare class _unpcb_list_entry {
  constructor(init?: _unpcb_list_entry);
  le_next: number;
  le_prev: number;
}

declare class speedtab {
  constructor(init?: speedtab);
  sp_speed: number;
  sp_code: number;
}

declare class sbuf {
  constructor(init?: sbuf);
  s_buf: string | null;
  s_unused: interop.Pointer;
  s_size: number;
  s_len: number;
  s_flags: number;
}

declare class __Request__mach_vm_remap_t {
  constructor(init?: __Request__mach_vm_remap_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  src_task: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  target_address: number;
  size: number;
  mask: number;
  flags: number;
  src_address: number;
  copy: number;
  inheritance: number;
}

declare class ether_header {
  constructor(init?: ether_header);
  ether_dhost: unknown /* const array */;
  ether_shost: unknown /* const array */;
  ether_type: number;
}

declare class _krb5_context {
  constructor(init?: _krb5_context);
}

declare class uprof {
  constructor(init?: uprof);
  pr_next: interop.Pointer;
  pr_base: string | null;
  pr_size: number;
  pr_off: number;
  pr_scale: number;
  pr_addr: number;
  pr_ticks: number;
}

declare class pstats {
  constructor(init?: pstats);
  p_ru: rusage;
  p_cru: rusage;
  p_prof: uprof;
  ps_start: number;
}

declare class rb_tree {
  constructor(init?: rb_tree);
  opaque: unknown /* const array */;
}

declare class rb_node {
  constructor(init?: rb_node);
  opaque: unknown /* const array */;
}

declare class unnamed_9395669575269098940 {
  constructor(init?: unnamed_9395669575269098940);
  top: number;
  left: number;
  bottom: number;
  right: number;
}

declare class np_uid_t {
  constructor(init?: np_uid_t);
  np_uid_high: number;
  np_uid_low: number;
}

declare class msgbuf {
  constructor(init?: msgbuf);
  msg_magic: number;
  msg_size: number;
  msg_bufx: number;
  msg_bufr: number;
  msg_bufc: string | null;
}

declare class host_basic_info {
  constructor(init?: host_basic_info);
  max_cpus: number;
  avail_cpus: number;
  memory_size: number;
  cpu_type: number;
  cpu_subtype: number;
  cpu_threadtype: number;
  physical_cpu: number;
  physical_cpu_max: number;
  logical_cpu: number;
  logical_cpu_max: number;
  max_mem: number;
}

declare class mbstat {
  constructor(init?: mbstat);
  m_mbufs: number;
  m_clusters: number;
  m_spare: number;
  m_clfree: number;
  m_drops: number;
  m_wait: number;
  m_drain: number;
  m_mtypes: unknown /* const array */;
  m_mcfail: number;
  m_mpfail: number;
  m_msize: number;
  m_mclbytes: number;
  m_minclsize: number;
  m_mlen: number;
  m_mhlen: number;
  m_bigclusters: number;
  m_bigclfree: number;
  m_bigmclbytes: number;
  m_forcedefunct: number;
}

declare class slapi_mods {
  constructor(init?: slapi_mods);
}

declare class os_activity_scope_state_s {
  constructor(init?: os_activity_scope_state_s);
  opaque: unknown /* const array */;
}

declare class ltchars {
  constructor(init?: ltchars);
  t_suspc: number;
  t_dsuspc: number;
  t_rprntc: number;
  t_flushc: number;
  t_werasc: number;
  t_lnextc: number;
}

declare class mach_send_once_notification_t {
  constructor(init?: mach_send_once_notification_t);
  not_header: mach_msg_header_t;
  trailer: mach_msg_security_trailer_t;
}

declare class tchars {
  constructor(init?: tchars);
  t_intrc: number;
  t_quitc: number;
  t_startc: number;
  t_stopc: number;
  t_eofc: number;
  t_brkc: number;
}

declare class rawarc_order_64 {
  constructor(init?: rawarc_order_64);
  raw_frompc: number;
  raw_selfpc: number;
  raw_count: number;
  raw_order: number;
}

declare class zone_name {
  constructor(init?: zone_name);
  zn_name: unknown /* const array */;
}

declare class gmonparam {
  constructor(init?: gmonparam);
  state: number;
  kcount: interop.Pointer;
  kcountsize: number;
  froms: interop.Pointer;
  fromssize: number;
  tos: interop.Pointer;
  tossize: number;
  tolimit: number;
  lowpc: number;
  highpc: number;
  textsize: number;
  hashfraction: number;
}

declare class rawarc_64 {
  constructor(init?: rawarc_64);
  raw_frompc: number;
  raw_selfpc: number;
  raw_count: number;
}

declare class gmonhdr {
  constructor(init?: gmonhdr);
  lpc: number;
  hpc: number;
  ncnt: number;
  version: number;
  profrate: number;
  spare: unknown /* const array */;
}

declare class dk_provision_status_t {
  constructor(init?: dk_provision_status_t);
  offset: number;
  length: number;
  options: number;
  reserved: number;
  extentsCount: number;
  extents: interop.Pointer;
}

declare class dk_provision_extent_t {
  constructor(init?: dk_provision_extent_t);
  offset: number;
  length: number;
  provisionType: number;
  reserved: unknown /* const array */;
}

declare class dk_corestorage_info_t {
  constructor(init?: dk_corestorage_info_t);
  flags: number;
  hotfile_size: number;
  hibernate_minsize: number;
  swapfile_pinning: number;
  padding: unknown /* const array */;
}

declare class dk_format_capacities_t {
  constructor(init?: dk_format_capacities_t);
  capacities: interop.Pointer;
  capacitiesCount: number;
  reserved0096: unknown /* const array */;
}

declare class policy_fifo_base {
  constructor(init?: policy_fifo_base);
  base_priority: number;
}

declare class dk_format_capacity_t {
  constructor(init?: dk_format_capacity_t);
  blockCount: number;
  blockSize: number;
  reserved0096: unknown /* const array */;
}

declare class tty {
  constructor(init?: tty);
}

declare class tss_desc {
  constructor(init?: tss_desc);
  limit00: number;
  base00: number;
  base16: number;
  type: number;
  dpl: number;
  present: number;
  limit16: number;
  : number;
  granular: number;
  base24: number;
}

declare class __rtentry {
  constructor(init?: __rtentry);
}

declare class __pkthdr {
  constructor(init?: __pkthdr);
}

declare class __Request__host_set_exception_ports_t {
  constructor(init?: __Request__host_set_exception_ports_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  new_port: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  exception_mask: number;
  behavior: number;
  new_flavor: number;
}

declare class __mbuf {
  constructor(init?: __mbuf);
}

declare class __ifnet {
  constructor(init?: __ifnet);
}

declare class vfs_context {
  constructor(init?: vfs_context);
}

declare class uio {
  constructor(init?: uio);
}

declare class file {
  constructor(init?: file);
}

declare class buf {
  constructor(init?: buf);
}

declare class _acl_flagset {
  constructor(init?: _acl_flagset);
}

declare class _acl_permset {
  constructor(init?: _acl_permset);
}

declare class _acl {
  constructor(init?: _acl);
}

declare class kauth_ace {
  constructor(init?: kauth_ace);
  ace_applicable: guid_t;
  ace_flags: number;
  ace_rights: number;
}

declare class ntsid_t {
  constructor(init?: ntsid_t);
  sid_kind: number;
  sid_authcount: number;
  sid_authority: unknown /* const array */;
  sid_authorities: unknown /* const array */;
}

declare class acct {
  constructor(init?: acct);
  ac_comm: unknown /* const array */;
  ac_utime: number;
  ac_stime: number;
  ac_etime: number;
  ac_btime: number;
  ac_uid: number;
  ac_gid: number;
  ac_mem: number;
  ac_io: number;
  ac_tty: number;
  ac_flag: number;
}

declare class prdb_property {
  constructor(init?: prdb_property);
  pp_key: string | null;
  pp_value: string | null;
}

declare class policy_timeshare_limit {
  constructor(init?: policy_timeshare_limit);
  max_priority: number;
}

declare class rip6stat {
  constructor(init?: rip6stat);
  rip6s_ipackets: number;
  rip6s_isum: number;
  rip6s_badsum: number;
  rip6s_nosock: number;
  rip6s_nosockmcast: number;
  rip6s_fullsock: number;
  rip6s_opackets: number;
}

declare class ipcomp {
  constructor(init?: ipcomp);
  comp_nxt: number;
  comp_flags: number;
  comp_cpi: number;
}

declare class ipsecstat {
  constructor(init?: ipsecstat);
  in_success: number;
  in_polvio: number;
  in_nosa: number;
  in_inval: number;
  in_nomem: number;
  in_badspi: number;
  in_ahreplay: number;
  in_espreplay: number;
  in_ahauthsucc: number;
  in_ahauthfail: number;
  in_espauthsucc: number;
  in_espauthfail: number;
  in_esphist: unknown /* const array */;
  in_ahhist: unknown /* const array */;
  in_comphist: unknown /* const array */;
  out_success: number;
  out_polvio: number;
  out_nosa: number;
  out_inval: number;
  out_nomem: number;
  out_noroute: number;
  out_esphist: unknown /* const array */;
  out_ahhist: unknown /* const array */;
  out_comphist: unknown /* const array */;
}

declare class icmp6stat {
  constructor(init?: icmp6stat);
  icp6s_error: number;
  icp6s_canterror: number;
  icp6s_toofreq: number;
  icp6s_outhist: unknown /* const array */;
  icp6s_badcode: number;
  icp6s_tooshort: number;
  icp6s_checksum: number;
  icp6s_badlen: number;
  icp6s_reflect: number;
  icp6s_inhist: unknown /* const array */;
  icp6s_nd_toomanyopt: number;
  icp6s_outerrhist: icmp6errstat;
  icp6s_pmtuchg: number;
  icp6s_nd_badopt: number;
  icp6s_badns: number;
  icp6s_badna: number;
  icp6s_badrs: number;
  icp6s_badra: number;
  icp6s_badredirect: number;
  icp6s_rfc6980_drop: number;
  icp6s_badpkttoobig: number;
}

declare class ah {
  constructor(init?: ah);
  ah_nxt: number;
  ah_len: number;
  ah_reserve: number;
  ah_spi: number;
}

declare class task_gate {
  constructor(init?: task_gate);
  : number;
  tss: sel;
  : number;
  type: number;
  dpl: number;
  present: number;
  : number;
}

declare class tagITEM {
  constructor(init?: tagITEM);
  name: TEXT;
  description: TEXT;
  imenu: interop.Pointer;
  userptr: interop.Pointer;
  opt: number;
  index: number;
  y: number;
  x: number;
  value: boolean;
  left: interop.Pointer;
  right: interop.Pointer;
  up: interop.Pointer;
  down: interop.Pointer;
}

declare class mach_voucher_attr_recipe_data {
  constructor(init?: mach_voucher_attr_recipe_data);
  key: number;
  command: number;
  previous_voucher: number;
  content_size: number;
  content: interop.Pointer;
}

declare class TEXT {
  constructor(init?: TEXT);
  str: string | null;
  length: number;
}

declare class typenode {
  constructor(init?: typenode);
  status: number;
  ref: number;
  left: interop.Pointer;
  right: interop.Pointer;
  makearg: (p1: interop.PointerConvertible) => interop.Pointer | null;
  copyarg: (p1: interop.PointerConvertible) => interop.Pointer | null;
  freearg: (p1: interop.PointerConvertible) => void | null;
  fcheck: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => boolean | null;
  ccheck: (p1: number, p2: interop.PointerConvertible) => boolean | null;
  next: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => boolean | null;
  prev: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => boolean | null;
}

declare class formnode {
  constructor(init?: formnode);
  status: number;
  rows: number;
  cols: number;
  currow: number;
  curcol: number;
  toprow: number;
  begincol: number;
  maxfield: number;
  maxpage: number;
  curpage: number;
  opts: number;
  win: interop.Pointer;
  sub: interop.Pointer;
  w: interop.Pointer;
  field: interop.Pointer;
  current: interop.Pointer;
  page: interop.Pointer;
  usrptr: interop.Pointer;
  forminit: (p1: interop.PointerConvertible) => void | null;
  formterm: (p1: interop.PointerConvertible) => void | null;
  fieldinit: (p1: interop.PointerConvertible) => void | null;
  fieldterm: (p1: interop.PointerConvertible) => void | null;
}

declare class _PAGE {
  constructor(init?: _PAGE);
  pmin: number;
  pmax: number;
  smin: number;
  smax: number;
}

declare class _win_st {
  constructor(init?: _win_st);
}

declare class tostruct {
  constructor(init?: tostruct);
  selfpc: number;
  count: number;
  link: number;
  order: number;
}

declare class BTHeaderRec {
  constructor(init?: BTHeaderRec);
  treeDepth: number;
  rootNode: number;
  leafRecords: number;
  firstLeafNode: number;
  lastLeafNode: number;
  nodeSize: number;
  maxKeyLength: number;
  totalNodes: number;
  freeNodes: number;
  reserved1: number;
  clumpSize: number;
  btreeType: number;
  keyCompareType: number;
  attributes: number;
  reserved3: unknown /* const array */;
}

declare class screen {
  constructor(init?: screen);
}

declare class nt_sid_t {
  constructor(init?: nt_sid_t);
  sid_kind: number;
  sid_authcount: number;
  sid_authority: unknown /* const array */;
  sid_authorities: unknown /* const array */;
}

declare class hfs_mount_args {
  constructor(init?: hfs_mount_args);
  fspec: string | null;
  hfs_uid: number;
  hfs_gid: number;
  hfs_mask: number;
  hfs_encoding: number;
  hfs_timezone: timezone;
  flags: number;
  journal_tbuffer_size: number;
  journal_flags: number;
  journal_disable: number;
}

declare class BTNodeDescriptor {
  constructor(init?: BTNodeDescriptor);
  fLink: number;
  bLink: number;
  kind: number;
  height: number;
  numRecords: number;
  reserved: number;
}

declare class HFSPlusVolumeHeader {
  constructor(init?: HFSPlusVolumeHeader);
  signature: number;
  version: number;
  attributes: number;
  lastMountedVersion: number;
  journalInfoBlock: number;
  createDate: number;
  modifyDate: number;
  backupDate: number;
  checkedDate: number;
  fileCount: number;
  folderCount: number;
  blockSize: number;
  totalBlocks: number;
  freeBlocks: number;
  nextAllocation: number;
  rsrcClumpSize: number;
  dataClumpSize: number;
  nextCatalogID: number;
  writeCount: number;
  encodingsBitmap: number;
  finderInfo: unknown /* const array */;
  allocationFile: HFSPlusForkData;
  extentsFile: HFSPlusForkData;
  catalogFile: HFSPlusForkData;
  attributesFile: HFSPlusForkData;
  startupFile: HFSPlusForkData;
}

declare class HFSPlusAttrKey {
  constructor(init?: HFSPlusAttrKey);
  keyLength: number;
  pad: number;
  fileID: number;
  startBlock: number;
  attrNameLen: number;
  attrName: unknown /* const array */;
}

declare class HFSPlusAttrData {
  constructor(init?: HFSPlusAttrData);
  recordType: number;
  reserved: unknown /* const array */;
  attrSize: number;
  attrData: unknown /* const array */;
}

declare class HFSPlusAttrExtents {
  constructor(init?: HFSPlusAttrExtents);
  recordType: number;
  reserved: number;
  extents: unknown /* const array */;
}

declare class HFSPlusAttrForkData {
  constructor(init?: HFSPlusAttrForkData);
  recordType: number;
  reserved: number;
  theFork: HFSPlusForkData;
}

declare class HFSPlusCatalogThread {
  constructor(init?: HFSPlusCatalogThread);
  recordType: number;
  reserved: number;
  parentID: number;
  nodeName: HFSUniStr255;
}

declare class HFSPlusCatalogFile {
  constructor(init?: HFSPlusCatalogFile);
  recordType: number;
  flags: number;
  reserved1: number;
  fileID: number;
  createDate: number;
  contentModDate: number;
  attributeModDate: number;
  accessDate: number;
  backupDate: number;
  bsdInfo: HFSPlusBSDInfo;
  userInfo: FndrFileInfo;
  finderInfo: FndrOpaqueInfo;
  textEncoding: number;
  reserved2: number;
  dataFork: HFSPlusForkData;
  resourceFork: HFSPlusForkData;
}

declare class sf_hdtr {
  constructor(init?: sf_hdtr);
  headers: interop.Pointer;
  hdr_cnt: number;
  trailers: interop.Pointer;
  trl_cnt: number;
}

declare class HFSPlusCatalogFolder {
  constructor(init?: HFSPlusCatalogFolder);
  recordType: number;
  flags: number;
  valence: number;
  folderID: number;
  createDate: number;
  contentModDate: number;
  attributeModDate: number;
  accessDate: number;
  backupDate: number;
  bsdInfo: HFSPlusBSDInfo;
  userInfo: FndrDirInfo;
  finderInfo: FndrOpaqueInfo;
  textEncoding: number;
  folderCount: number;
}

declare class HFSCatalogFolder {
  constructor(init?: HFSCatalogFolder);
  recordType: number;
  flags: number;
  valence: number;
  folderID: number;
  createDate: number;
  modifyDate: number;
  backupDate: number;
  userInfo: FndrDirInfo;
  finderInfo: FndrOpaqueInfo;
  reserved: unknown /* const array */;
}

declare class HFSPlusCatalogKey {
  constructor(init?: HFSPlusCatalogKey);
  keyLength: number;
  parentID: number;
  nodeName: HFSUniStr255;
}

declare class sqlite3_rtree_query_info {
  constructor(init?: sqlite3_rtree_query_info);
  pContext: interop.Pointer;
  nParam: number;
  aParam: interop.Pointer;
  pUser: interop.Pointer;
  xDelUser: (p1: interop.PointerConvertible) => void | null;
  aCoord: interop.Pointer;
  anQueue: interop.Pointer;
  nCoord: number;
  iLevel: number;
  mxLevel: number;
  iRowid: number;
  rParentScore: number;
  eParentWithin: number;
  eWithin: number;
  rScore: number;
  apSqlParam: interop.Pointer;
}

declare class HFSCatalogKey {
  constructor(init?: HFSCatalogKey);
  keyLength: number;
  reserved: number;
  parentID: number;
  nodeName: unknown /* const array */;
}

declare class tostruct_64 {
  constructor(init?: tostruct_64);
  selfpc: number;
  count: number;
  link: number;
  order: number;
}

declare class HFSPlusForkData {
  constructor(init?: HFSPlusForkData);
  logicalSize: number;
  clumpSize: number;
  totalBlocks: number;
  extents: unknown /* const array */;
}

declare class ip6_opt_nsap {
  constructor(init?: ip6_opt_nsap);
  ip6on_type: number;
  ip6on_len: number;
  ip6on_src_nsap_len: number;
  ip6on_dst_nsap_len: number;
}

declare class FndrExtendedFileInfo {
  constructor(init?: FndrExtendedFileInfo);
  document_id: number;
  date_added: number;
  extended_flags: number;
  reserved2: number;
  write_gen_counter: number;
}

declare class FndrExtendedDirInfo {
  constructor(init?: FndrExtendedDirInfo);
  document_id: number;
  date_added: number;
  extended_flags: number;
  reserved3: number;
  write_gen_counter: number;
}

declare class FndrOpaqueInfo {
  constructor(init?: FndrOpaqueInfo);
  opaque: unknown /* const array */;
}

declare class host_priority_info {
  constructor(init?: host_priority_info);
  kernel_priority: number;
  system_priority: number;
  server_priority: number;
  user_priority: number;
  depress_priority: number;
  idle_priority: number;
  minimum_priority: number;
  maximum_priority: number;
}

declare class xsocket64 {
  constructor(init?: xsocket64);
  xso_len: number;
  xso_so: number;
  so_type: number;
  so_options: number;
  so_linger: number;
  so_state: number;
  so_pcb: number;
  xso_protocol: number;
  xso_family: number;
  so_qlen: number;
  so_incqlen: number;
  so_qlimit: number;
  so_timeo: number;
  so_error: number;
  so_pgid: number;
  so_oobmark: number;
  so_rcv: xsockbuf;
  so_snd: xsockbuf;
  so_uid: number;
}

declare class auditpinfo_addr {
  constructor(init?: auditpinfo_addr);
  ap_pid: number;
  ap_auid: number;
  ap_mask: au_mask;
  ap_termid: au_tid_addr;
  ap_asid: number;
  ap_flags: number;
}

declare class FndrDirInfo {
  constructor(init?: FndrDirInfo);
  frRect: unnamed_9395669575269098940;
  frFlags: number;
  frLocation: unnamed_7401283081960241141;
  opaque: number;
}

declare class mach_port_qos {
  constructor(init?: mach_port_qos);
  name: number;
  prealloc: number;
  pad1: number;
  len: number;
}

declare class source_version_command {
  constructor(init?: source_version_command);
  cmd: number;
  cmdsize: number;
  version: number;
}

declare class newesp {
  constructor(init?: newesp);
  esp_spi: number;
  esp_seq: number;
}

declare class FndrFileInfo {
  constructor(init?: FndrFileInfo);
  fdType: number;
  fdCreator: number;
  fdFlags: number;
  fdLocation: unnamed_550285818874235861;
  opaque: number;
}

declare class HFSPlusExtentDescriptor {
  constructor(init?: HFSPlusExtentDescriptor);
  startBlock: number;
  blockCount: number;
}

declare class mach_core_fileheader_v2 {
  constructor(init?: mach_core_fileheader_v2);
  signature: number;
  version: number;
  flags: number;
  pub_key_offset: number;
  pub_key_length: number;
  log_offset: number;
  log_length: number;
  num_files: number;
  files: interop.Pointer;
}

declare class HFSExtentDescriptor {
  constructor(init?: HFSExtentDescriptor);
  startBlock: number;
  blockCount: number;
}

declare class HFSUniStr255 {
  constructor(init?: HFSUniStr255);
  length: number;
  unicode: unknown /* const array */;
}

declare class image_offset {
  constructor(init?: image_offset);
  uuid: unknown /* const array */;
  offset: number;
}

declare class panel {
  constructor(init?: panel);
  win: interop.Pointer;
  below: interop.Pointer;
  above: interop.Pointer;
  user: interop.Pointer;
}

declare class au_tidaddr64 {
  constructor(init?: au_tidaddr64);
  port: number;
  type: number;
  addr: unknown /* const array */;
}

declare class unnamed_8096331331514043626 {
  constructor(init?: unnamed_8096331331514043626);
  le_next: interop.Pointer;
  le_prev: interop.Pointer;
}

declare class unnamed_17222040562567524509 {
  constructor(init?: unnamed_17222040562567524509);
  tqh_first: interop.Pointer;
  tqh_last: interop.Pointer;
}

declare class au_invalid_t {
  constructor(init?: au_invalid_t);
  length: number;
  data: string | null;
}

declare class stack_snapshot_frame64 {
  constructor(init?: stack_snapshot_frame64);
  lr: number;
  sp: number;
}

declare class au_kevent_t {
  constructor(init?: au_kevent_t);
  ident: number;
  filter: number;
  flags: number;
  fflags: number;
  data: number;
}

declare class au_text_t {
  constructor(init?: au_text_t);
  len: number;
  text: string | null;
}

declare class dyld_chained_ptr_arm64e_auth_bind {
  constructor(init?: dyld_chained_ptr_arm64e_auth_bind);
  ordinal: number;
  zero: number;
  diversity: number;
  addrDiv: number;
  key: number;
  next: number;
  bind: number;
  auth: number;
}

declare class au_subject64ex_t {
  constructor(init?: au_subject64ex_t);
  auid: number;
  euid: number;
  egid: number;
  ruid: number;
  rgid: number;
  pid: number;
  sid: number;
  tid: au_tidaddr64;
}

declare class au_subject64_t {
  constructor(init?: au_subject64_t);
  auid: number;
  euid: number;
  egid: number;
  ruid: number;
  rgid: number;
  pid: number;
  sid: number;
  tid: au_tid64;
}

declare class au_socketunix_t {
  constructor(init?: au_socketunix_t);
  family: number;
  path: unknown /* const array */;
}

declare class au_socketinet32_t {
  constructor(init?: au_socketinet32_t);
  family: number;
  port: number;
  addr: number;
}

declare class au_socket_ex32_t {
  constructor(init?: au_socket_ex32_t);
  domain: number;
  type: number;
  atype: number;
  l_port: number;
  l_addr: unknown /* const array */;
  r_port: number;
  r_addr: unknown /* const array */;
}

declare class au_socket_t {
  constructor(init?: au_socket_t);
  type: number;
  l_port: number;
  l_addr: number;
  r_port: number;
  r_addr: number;
}

declare class sub_umbrella_command {
  constructor(init?: sub_umbrella_command);
  cmd: number;
  cmdsize: number;
  sub_umbrella: lc_str;
}

declare class au_seq_t {
  constructor(init?: au_seq_t);
  seqno: number;
}

declare class au_ret64_t {
  constructor(init?: au_ret64_t);
  err: number;
  val: number;
}

declare class Float96 {
  constructor(init?: Float96);
  exp: unknown /* const array */;
  man: unknown /* const array */;
}

declare class au_proc64_t {
  constructor(init?: au_proc64_t);
  auid: number;
  euid: number;
  egid: number;
  ruid: number;
  rgid: number;
  pid: number;
  sid: number;
  tid: au_tid64;
}

declare class auditinfo {
  constructor(init?: auditinfo);
  ai_auid: number;
  ai_mask: au_mask;
  ai_termid: au_tid;
  ai_asid: number;
}

declare class au_proc32_t {
  constructor(init?: au_proc32_t);
  auid: number;
  euid: number;
  egid: number;
  ruid: number;
  rgid: number;
  pid: number;
  sid: number;
  tid: au_tid32;
}

declare class __Reply__processor_set_tasks_t {
  constructor(init?: __Reply__processor_set_tasks_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  task_list: mach_msg_ool_ports_descriptor_t;
  NDR: NDR_record_t;
  task_listCnt: number;
}

declare class dyld_chained_ptr_64_kernel_cache_rebase {
  constructor(init?: dyld_chained_ptr_64_kernel_cache_rebase);
  target: number;
  cacheLevel: number;
  diversity: number;
  addrDiv: number;
  key: number;
  next: number;
  isAuth: number;
}

declare class au_path_t {
  constructor(init?: au_path_t);
  len: number;
  path: string | null;
}

declare class mach_timespec {
  constructor(init?: mach_timespec);
  tv_sec: number;
  tv_nsec: number;
}

declare class au_iport_t {
  constructor(init?: au_iport_t);
  port: number;
}

declare class au_ipc_t {
  constructor(init?: au_ipc_t);
  type: number;
  id: number;
}

declare class au_inaddr_ex_t {
  constructor(init?: au_inaddr_ex_t);
  type: number;
  addr: unknown /* const array */;
}

declare class cups_dest_s {
  constructor(init?: cups_dest_s);
  name: string | null;
  instance: string | null;
  is_default: number;
  num_options: number;
  options: interop.Pointer;
}

declare class au_inaddr_t {
  constructor(init?: au_inaddr_t);
  addr: number;
}

declare class au_header64_ex_t {
  constructor(init?: au_header64_ex_t);
  size: number;
  version: number;
  e_type: number;
  e_mod: number;
  ad_type: number;
  addr: unknown /* const array */;
  s: number;
  ms: number;
}

declare class au_header64_t {
  constructor(init?: au_header64_t);
  size: number;
  version: number;
  e_type: number;
  e_mod: number;
  s: number;
  ms: number;
}

declare class au_header32_t {
  constructor(init?: au_header32_t);
  size: number;
  version: number;
  e_type: number;
  e_mod: number;
  s: number;
  ms: number;
}

declare class au_groups_t {
  constructor(init?: au_groups_t);
  no: number;
  list: unknown /* const array */;
}

declare class dl_info {
  constructor(init?: dl_info);
  dli_fname: string | null;
  dli_fbase: interop.Pointer;
  dli_sname: string | null;
  dli_saddr: interop.Pointer;
}

declare class au_file_t {
  constructor(init?: au_file_t);
  s: number;
  ms: number;
  len: number;
  name: string | null;
}

declare class au_krb5_principal_t {
  constructor(init?: au_krb5_principal_t);
  count: number;
  text: unknown /* const array */;
}

declare class au_cert_hash_t {
  constructor(init?: au_cert_hash_t);
  count: number;
  text: unknown /* const array */;
}

declare class au_execenv_t {
  constructor(init?: au_execenv_t);
  count: number;
  text: unknown /* const array */;
}

declare class au_execarg_t {
  constructor(init?: au_execarg_t);
  count: number;
  text: unknown /* const array */;
}

declare class au_attr32_t {
  constructor(init?: au_attr32_t);
  mode: number;
  uid: number;
  gid: number;
  fsid: number;
  nid: number;
  dev: number;
}

declare class au_tidaddr32 {
  constructor(init?: au_tidaddr32);
  port: number;
  type: number;
  addr: unknown /* const array */;
}

declare class sqlite3_file {
  constructor(init?: sqlite3_file);
  pMethods: interop.Pointer;
}

declare class au_tid32 {
  constructor(init?: au_tid32);
  port: number;
  addr: number;
}

declare class mach_msg_body_t {
  constructor(init?: mach_msg_body_t);
  msgh_descriptor_count: number;
}

declare class au_user_ent {
  constructor(init?: au_user_ent);
  au_name: string | null;
  au_always: au_mask;
  au_never: au_mask;
}

declare class au_class_ent {
  constructor(init?: au_class_ent);
  ac_name: string | null;
  ac_class: number;
  ac_desc: string | null;
}

declare class simd_half2x3 {
  constructor(init?: simd_half2x3);
  columns: unknown /* const array */;
}

declare class channel_fdinfo {
  constructor(init?: channel_fdinfo);
  pfi: proc_fileinfo;
  channelinfo: proc_channel_info;
}

declare class audit_token_t {
  constructor(init?: audit_token_t);
  val: unknown /* const array */;
}

declare class unw_cursor_t {
  constructor(init?: unw_cursor_t);
  data: unknown /* const array */;
}

declare class appletalk_info {
  constructor(init?: appletalk_info);
  atalk_stat: vinfo_stat;
}

declare class kqueue_fdinfo {
  constructor(init?: kqueue_fdinfo);
  pfi: proc_fileinfo;
  kqueueinfo: kqueue_info;
}

declare class pipe_fdinfo {
  constructor(init?: pipe_fdinfo);
  pfi: proc_fileinfo;
  pipeinfo: pipe_info;
}

declare class pipe_info {
  constructor(init?: pipe_info);
  pipe_stat: vinfo_stat;
  pipe_handle: number;
  pipe_peerhandle: number;
  pipe_status: number;
  rfu_1: number;
}

declare class pshm_info {
  constructor(init?: pshm_info);
  pshm_stat: vinfo_stat;
  pshm_mappaddr: number;
  pshm_name: unknown /* const array */;
}

declare class psem_fdinfo {
  constructor(init?: psem_fdinfo);
  pfi: proc_fileinfo;
  pseminfo: psem_info;
}

declare class __Reply__vm_behavior_set_t {
  constructor(init?: __Reply__vm_behavior_set_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class task_power_info {
  constructor(init?: task_power_info);
  total_user: number;
  total_system: number;
  task_interrupt_wakeups: number;
  task_platform_idle_wakeups: number;
  task_timer_wakeups_bin_1: number;
  task_timer_wakeups_bin_2: number;
}

declare class psem_info {
  constructor(init?: psem_info);
  psem_stat: vinfo_stat;
  psem_name: unknown /* const array */;
}

declare class sockbuf_info {
  constructor(init?: sockbuf_info);
  sbi_cc: number;
  sbi_hiwat: number;
  sbi_mbcnt: number;
  sbi_mbmax: number;
  sbi_lowat: number;
  sbi_flags: number;
  sbi_timeo: number;
}

declare class __Reply__task_map_corpse_info_64_t {
  constructor(init?: __Reply__task_map_corpse_info_64_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  kcd_addr_begin: number;
  kcd_size: number;
}

declare class vsock_sockinfo {
  constructor(init?: vsock_sockinfo);
  local_cid: number;
  local_port: number;
  remote_cid: number;
  remote_port: number;
}

declare class kern_ctl_info {
  constructor(init?: kern_ctl_info);
  kcsi_id: number;
  kcsi_reg_unit: number;
  kcsi_flags: number;
  kcsi_recvbufsize: number;
  kcsi_sendbufsize: number;
  kcsi_unit: number;
  kcsi_name: unknown /* const array */;
}

declare class kern_event_info {
  constructor(init?: kern_event_info);
  kesi_vendor_code_filter: number;
  kesi_class_filter: number;
  kesi_subclass_filter: number;
}

declare class ldap {
  constructor(init?: ldap);
}

declare class __darwin_arm_debug_state32 {
  constructor(init?: __darwin_arm_debug_state32);
  __bvr: unknown /* const array */;
  __bcr: unknown /* const array */;
  __wvr: unknown /* const array */;
  __wcr: unknown /* const array */;
  __mdscr_el1: number;
}

declare class tcp_sockinfo {
  constructor(init?: tcp_sockinfo);
  tcpsi_ini: in_sockinfo;
  tcpsi_state: number;
  tcpsi_timer: unknown /* const array */;
  tcpsi_mss: number;
  tcpsi_flags: number;
  rfu_1: number;
  tcpsi_tp: number;
}

declare class __Reply__kext_request_t {
  constructor(init?: __Reply__kext_request_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  response_data: mach_msg_ool_descriptor_t;
  log_data: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  response_dataCnt: number;
  log_dataCnt: number;
  op_result: number;
}

declare class unnamed_6246702640726293513 {
  constructor(init?: unnamed_6246702640726293513);
  in4_tos: number;
}

declare class in_sockinfo {
  constructor(init?: in_sockinfo);
  insi_fport: number;
  insi_lport: number;
  insi_gencnt: number;
  insi_flags: number;
  insi_flow: number;
  insi_vflag: number;
  insi_ip_ttl: number;
  rfu_1: number;
  insi_faddr: unnamed_5875706616793615818;
  insi_laddr: unnamed_18439627466317917467;
  insi_v4: unnamed_6246702640726293513;
  insi_v6: unnamed_16467482743495324948;
}

declare class in4in6_addr {
  constructor(init?: in4in6_addr);
  i46a_pad32: unknown /* const array */;
  i46a_addr4: in_addr;
}

declare class __Request__mach_port_allocate_name_t {
  constructor(init?: __Request__mach_port_allocate_name_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  right: number;
  name: number;
}

declare class dk_unmap_t {
  constructor(init?: dk_unmap_t);
  extents: interop.Pointer;
  extentsCount: number;
  options: number;
}

declare class proc_archinfo {
  constructor(init?: proc_archinfo);
  p_cputype: number;
  p_cpusubtype: number;
}

declare class kev_in_data {
  constructor(init?: kev_in_data);
  link_data: net_event_data;
  ia_addr: in_addr;
  ia_net: number;
  ia_netmask: number;
  ia_subnet: number;
  ia_subnetmask: number;
  ia_netbroadcast: in_addr;
  ia_dstaddr: in_addr;
}

declare class rusage_info_v4 {
  constructor(init?: rusage_info_v4);
  ri_uuid: unknown /* const array */;
  ri_user_time: number;
  ri_system_time: number;
  ri_pkg_idle_wkups: number;
  ri_interrupt_wkups: number;
  ri_pageins: number;
  ri_wired_size: number;
  ri_resident_size: number;
  ri_phys_footprint: number;
  ri_proc_start_abstime: number;
  ri_proc_exit_abstime: number;
  ri_child_user_time: number;
  ri_child_system_time: number;
  ri_child_pkg_idle_wkups: number;
  ri_child_interrupt_wkups: number;
  ri_child_pageins: number;
  ri_child_elapsed_abstime: number;
  ri_diskio_bytesread: number;
  ri_diskio_byteswritten: number;
  ri_cpu_time_qos_default: number;
  ri_cpu_time_qos_maintenance: number;
  ri_cpu_time_qos_background: number;
  ri_cpu_time_qos_utility: number;
  ri_cpu_time_qos_legacy: number;
  ri_cpu_time_qos_user_initiated: number;
  ri_cpu_time_qos_user_interactive: number;
  ri_billed_system_time: number;
  ri_serviced_system_time: number;
  ri_logical_writes: number;
  ri_lifetime_max_phys_footprint: number;
  ri_instructions: number;
  ri_cycles: number;
  ri_billed_energy: number;
  ri_serviced_energy: number;
  ri_interval_max_phys_footprint: number;
  ri_runnable_time: number;
}

declare class proc_threadwithpathinfo {
  constructor(init?: proc_threadwithpathinfo);
  pt: proc_threadinfo;
  pvip: vnode_info_path;
}

declare class vnode_fdinfowithpath {
  constructor(init?: vnode_fdinfowithpath);
  pfi: proc_fileinfo;
  pvip: vnode_info_path;
}

declare class dk_extent_t {
  constructor(init?: dk_extent_t);
  offset: number;
  length: number;
}

declare class vnode_fdinfo {
  constructor(init?: vnode_fdinfo);
  pfi: proc_fileinfo;
  pvi: vnode_info;
}

declare class vnode_info_path {
  constructor(init?: vnode_info_path);
  vip_vi: vnode_info;
  vip_path: unknown /* const array */;
}

declare class proc_regionwithpathinfo {
  constructor(init?: proc_regionwithpathinfo);
  prp_prinfo: proc_regioninfo;
  prp_vip: vnode_info_path;
}

declare class vnode_info {
  constructor(init?: vnode_info);
  vi_stat: vinfo_stat;
  vi_type: number;
  vi_pad: number;
  vi_fsid: fsid;
}

declare class vinfo_stat {
  constructor(init?: vinfo_stat);
  vst_dev: number;
  vst_mode: number;
  vst_nlink: number;
  vst_ino: number;
  vst_uid: number;
  vst_gid: number;
  vst_atime: number;
  vst_atimensec: number;
  vst_mtime: number;
  vst_mtimensec: number;
  vst_ctime: number;
  vst_ctimensec: number;
  vst_birthtime: number;
  vst_birthtimensec: number;
  vst_size: number;
  vst_blocks: number;
  vst_blksize: number;
  vst_flags: number;
  vst_gen: number;
  vst_rdev: number;
  vst_qspare: unknown /* const array */;
}

declare class proc_exitreasoninfo {
  constructor(init?: proc_exitreasoninfo);
  eri_namespace: number;
  eri_code: number;
  eri_flags: number;
  eri_reason_buf_size: number;
  eri_kcd_buf: number;
}

declare class __Reply__exception_raise_t {
  constructor(init?: __Reply__exception_raise_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class proc_exitreasonbasicinfo {
  constructor(init?: proc_exitreasonbasicinfo);
  beri_namespace: number;
  beri_code: number;
  beri_flags: number;
  beri_reason_buf_size: number;
}

declare class proc_fileinfo {
  constructor(init?: proc_fileinfo);
  fi_openflags: number;
  fi_status: number;
  fi_offset: number;
  fi_type: number;
  fi_guardflags: number;
}

declare class proc_regioninfo {
  constructor(init?: proc_regioninfo);
  pri_protection: number;
  pri_max_protection: number;
  pri_inheritance: number;
  pri_flags: number;
  pri_offset: number;
  pri_behavior: number;
  pri_user_wired_count: number;
  pri_user_tag: number;
  pri_pages_resident: number;
  pri_pages_shared_now_private: number;
  pri_pages_swapped_out: number;
  pri_pages_dirtied: number;
  pri_ref_count: number;
  pri_shadow_depth: number;
  pri_share_mode: number;
  pri_private_pages_resident: number;
  pri_shared_pages_resident: number;
  pri_obj_id: number;
  pri_depth: number;
  pri_address: number;
  pri_size: number;
}

declare class proc_taskinfo {
  constructor(init?: proc_taskinfo);
  pti_virtual_size: number;
  pti_resident_size: number;
  pti_total_user: number;
  pti_total_system: number;
  pti_threads_user: number;
  pti_threads_system: number;
  pti_policy: number;
  pti_faults: number;
  pti_pageins: number;
  pti_cow_faults: number;
  pti_messages_sent: number;
  pti_messages_received: number;
  pti_syscalls_mach: number;
  pti_syscalls_unix: number;
  pti_csw: number;
  pti_threadnum: number;
  pti_numrunning: number;
  pti_priority: number;
}

declare class proc_bsdshortinfo {
  constructor(init?: proc_bsdshortinfo);
  pbsi_pid: number;
  pbsi_ppid: number;
  pbsi_pgid: number;
  pbsi_status: number;
  pbsi_comm: unknown /* const array */;
  pbsi_flags: number;
  pbsi_uid: number;
  pbsi_gid: number;
  pbsi_ruid: number;
  pbsi_rgid: number;
  pbsi_svuid: number;
  pbsi_svgid: number;
  pbsi_rfu: number;
}

declare class sqlite3_rtree_geometry {
  constructor(init?: sqlite3_rtree_geometry);
  pContext: interop.Pointer;
  nParam: number;
  aParam: interop.Pointer;
  pUser: interop.Pointer;
  xDelUser: (p1: interop.PointerConvertible) => void | null;
}

declare class ctl_info {
  constructor(init?: ctl_info);
  ctl_id: number;
  ctl_name: unknown /* const array */;
}

declare class ctl_event_data {
  constructor(init?: ctl_event_data);
  ctl_id: number;
  ctl_unit: number;
}

declare class vfs_server {
  constructor(init?: vfs_server);
  vs_minutes: number;
  vs_server_name: unknown /* const array */;
}

declare class vfsquery {
  constructor(init?: vfsquery);
  vq_flags: number;
  vq_spare: unknown /* const array */;
}

declare class vfsidctl {
  constructor(init?: vfsidctl);
  vc_vers: number;
  vc_fsid: fsid;
  vc_ptr: interop.Pointer;
  vc_len: number;
  vc_spare: unknown /* const array */;
}

declare class in_aliasreq {
  constructor(init?: in_aliasreq);
  ifra_name: unknown /* const array */;
  ifra_addr: sockaddr_in;
  ifra_broadaddr: sockaddr_in;
  ifra_mask: sockaddr_in;
}

declare class statfs {
  constructor(init?: statfs);
  f_bsize: number;
  f_iosize: number;
  f_blocks: number;
  f_bfree: number;
  f_bavail: number;
  f_files: number;
  f_ffree: number;
  f_fsid: fsid;
  f_owner: number;
  f_type: number;
  f_flags: number;
  f_fssubtype: number;
  f_fstypename: unknown /* const array */;
  f_mntonname: unknown /* const array */;
  f_mntfromname: unknown /* const array */;
  f_flags_ext: number;
  f_reserved: unknown /* const array */;
}

declare class __Reply__host_set_atm_diagnostic_flag_t {
  constructor(init?: __Reply__host_set_atm_diagnostic_flag_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class termios {
  constructor(init?: termios);
  c_iflag: number;
  c_oflag: number;
  c_cflag: number;
  c_lflag: number;
  c_cc: unknown /* const array */;
  c_ispeed: number;
  c_ospeed: number;
}

declare class diskextent {
  constructor(init?: diskextent);
  startblock: number;
  blockcount: number;
}

declare class attrreference {
  constructor(init?: attrreference);
  attr_dataoffset: number;
  attr_length: number;
}

declare class shared_file_np {
  constructor(init?: shared_file_np);
  sf_fd: number;
  sf_mappings_count: number;
  sf_slide: number;
}

declare class au_identity_t {
  constructor(init?: au_identity_t);
  signer_type: number;
  signing_id_len: number;
  signing_id: string | null;
  signing_id_truncated: number;
  team_id_len: number;
  team_id: string | null;
  team_id_truncated: number;
  cdhash_len: number;
  cdhash: interop.Pointer;
}

declare class shared_file_mapping_np {
  constructor(init?: shared_file_mapping_np);
  sfm_address: number;
  sfm_size: number;
  sfm_file_offset: number;
  sfm_max_prot: number;
  sfm_init_prot: number;
}

declare class __Reply__mach_memory_entry_access_tracking_t {
  constructor(init?: __Reply__mach_memory_entry_access_tracking_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  access_tracking: number;
  access_tracking_reads: number;
  access_tracking_writes: number;
}

declare class inpcbport {
  constructor(init?: inpcbport);
}

declare class __Request__mach_memory_entry_get_page_counts_t {
  constructor(init?: __Request__mach_memory_entry_get_page_counts_t);
  Head: mach_msg_header_t;
}

declare class __Reply__mach_port_extract_member_t {
  constructor(init?: __Reply__mach_port_extract_member_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__mach_memory_entry_access_tracking_t {
  constructor(init?: __Request__mach_memory_entry_access_tracking_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  access_tracking: number;
}

declare class unw_proc_info_t {
  constructor(init?: unw_proc_info_t);
  start_ip: number;
  end_ip: number;
  lsda: number;
  handler: number;
  gp: number;
  flags: number;
  format: number;
  unwind_info_size: number;
  unwind_info: number;
  extra: number;
}

declare class __Reply__mach_voucher_debug_info_t {
  constructor(init?: __Reply__mach_voucher_debug_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  recipesCnt: number;
  recipes: unknown /* const array */;
}

declare class __Reply__mach_voucher_extract_all_attr_recipes_t {
  constructor(init?: __Reply__mach_voucher_extract_all_attr_recipes_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  recipesCnt: number;
  recipes: unknown /* const array */;
}

declare class __Reply__mach_voucher_extract_attr_recipe_t {
  constructor(init?: __Reply__mach_voucher_extract_attr_recipe_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  recipeCnt: number;
  recipe: unknown /* const array */;
}

declare class __Reply__mach_voucher_extract_attr_content_t {
  constructor(init?: __Reply__mach_voucher_extract_attr_content_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  contentCnt: number;
  content: unknown /* const array */;
}

declare class __Request__mach_voucher_debug_info_t {
  constructor(init?: __Request__mach_voucher_debug_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  voucher_name: number;
  recipesCnt: number;
}

declare class __Request__mach_voucher_attr_command_t {
  constructor(init?: __Request__mach_voucher_attr_command_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  key: number;
  command: number;
  in_contentCnt: number;
  in_content: unknown /* const array */;
  out_contentCnt: number;
}

declare class __Request__mach_voucher_extract_attr_recipe_t {
  constructor(init?: __Request__mach_voucher_extract_attr_recipe_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  key: number;
  recipeCnt: number;
}

declare class ipsec_wake_pkt_info {
  constructor(init?: ipsec_wake_pkt_info);
  wake_pkt: unknown /* const array */;
  wake_uuid: unknown /* const array */;
  wake_pkt_spi: number;
  wake_pkt_seq: number;
  wake_pkt_len: number;
}

declare class dylib_table_of_contents {
  constructor(init?: dylib_table_of_contents);
  symbol_index: number;
  module_index: number;
}

declare class __Reply__mach_vm_range_create_t {
  constructor(init?: __Reply__mach_vm_range_create_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__mach_vm_remap_new_t {
  constructor(init?: __Reply__mach_vm_remap_new_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  target_address: number;
  cur_protection: number;
  max_protection: number;
}

declare class __Reply__mach_vm_purgable_control_t {
  constructor(init?: __Reply__mach_vm_purgable_control_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  state: number;
}

declare class __Reply___mach_make_memory_entry_t {
  constructor(init?: __Reply___mach_make_memory_entry_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  object_handle: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  size: number;
}

declare class __Reply__mach_vm_region_t {
  constructor(init?: __Reply__mach_vm_region_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  object_name: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  infoCnt: number;
  info: unknown /* const array */;
}

declare class internal_state {
  constructor(init?: internal_state);
}

declare class __Reply__mach_vm_region_recurse_t {
  constructor(init?: __Reply__mach_vm_region_recurse_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  address: number;
  size: number;
  nesting_depth: number;
  infoCnt: number;
  info: unknown /* const array */;
}

declare class __Reply__mach_vm_page_query_t {
  constructor(init?: __Reply__mach_vm_page_query_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  disposition: number;
  ref_count: number;
}

declare class thread_precedence_policy {
  constructor(init?: thread_precedence_policy);
  importance: number;
}

declare class __Reply__mach_vm_machine_attribute_t {
  constructor(init?: __Reply__mach_vm_machine_attribute_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  value: number;
}

declare class __Reply__mach_vm_msync_t {
  constructor(init?: __Reply__mach_vm_msync_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class task_kernelmemory_info {
  constructor(init?: task_kernelmemory_info);
  total_palloc: number;
  total_pfree: number;
  total_salloc: number;
  total_sfree: number;
}

declare class msghdr {
  constructor(init?: msghdr);
  msg_name: interop.Pointer;
  msg_namelen: number;
  msg_iov: interop.Pointer;
  msg_iovlen: number;
  msg_control: interop.Pointer;
  msg_controllen: number;
  msg_flags: number;
}

declare class __Reply__mach_vm_read_t {
  constructor(init?: __Reply__mach_vm_read_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  data: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  dataCnt: number;
}

declare class au_proc32ex_t {
  constructor(init?: au_proc32ex_t);
  auid: number;
  euid: number;
  egid: number;
  ruid: number;
  rgid: number;
  pid: number;
  sid: number;
  tid: au_tidaddr32;
}

declare class fat_arch {
  constructor(init?: fat_arch);
  cputype: number;
  cpusubtype: number;
  offset: number;
  size: number;
  align: number;
}

declare class __Request__mach_port_assert_attributes_t {
  constructor(init?: __Request__mach_port_assert_attributes_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  flavor: number;
  infoCnt: number;
  info: unknown /* const array */;
}

declare class sadb_prop {
  constructor(init?: sadb_prop);
  sadb_prop_len: number;
  sadb_prop_exttype: number;
  sadb_prop_replay: number;
  sadb_prop_reserved: unknown /* const array */;
}

declare class __Reply__mach_vm_deallocate_t {
  constructor(init?: __Reply__mach_vm_deallocate_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class simd_double3x3 {
  constructor(init?: simd_double3x3);
  columns: unknown /* const array */;
}

declare class _opaque_pthread_t {
  constructor(init?: _opaque_pthread_t);
  __sig: number;
  __cleanup_stack: interop.Pointer;
  __opaque: unknown /* const array */;
}

declare class ifnet_interface_advisory_wifi_context {
  constructor(init?: ifnet_interface_advisory_wifi_context);
  frequency_band: interop.Enum<typeof ifnet_interface_advisory_wifi_freq_band>;
  intermittent_state: number;
  estimated_intermittent_period: number;
  single_outage_period: number;
  bt_coex: number;
  quality_score_delay: number;
  quality_score_loss: number;
  quality_score_channel: number;
  radio_coex: number;
  wlan_duty_cycle: number;
  wifi_observed_tx_bitrate: unknown /* const array */;
}

declare class __Request__mach_vm_page_range_query_t {
  constructor(init?: __Request__mach_vm_page_range_query_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  dispositions: number;
  dispositions_count: number;
}

declare class __Request__task_get_special_port_t {
  constructor(init?: __Request__task_get_special_port_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  which_port: number;
}

declare class ip6_frag {
  constructor(init?: ip6_frag);
  ip6f_nxt: number;
  ip6f_reserved: number;
  ip6f_offlg: number;
  ip6f_ident: number;
}

declare class __Request__mach_vm_behavior_set_t {
  constructor(init?: __Request__mach_vm_behavior_set_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  new_behavior: number;
}

declare class sqlite3_pcache {
  constructor(init?: sqlite3_pcache);
}

declare class __Request__mach_vm_read_overwrite_t {
  constructor(init?: __Request__mach_vm_read_overwrite_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  data: number;
}

declare class in6_pktinfo {
  constructor(init?: in6_pktinfo);
  ipi6_addr: in6_addr;
  ipi6_ifindex: number;
}

declare class au_socketinet_ex32_t {
  constructor(init?: au_socketinet_ex32_t);
  family: number;
  port: number;
  addr: unknown /* const array */;
}

declare class __Request__mach_vm_read_t {
  constructor(init?: __Request__mach_vm_read_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
}

declare class __Request__mach_vm_inherit_t {
  constructor(init?: __Request__mach_vm_inherit_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  new_inheritance: number;
}

declare class slapi_filter {
  constructor(init?: slapi_filter);
}

declare class __Request__mach_vm_protect_t {
  constructor(init?: __Request__mach_vm_protect_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  set_maximum: number;
  new_protection: number;
}

declare class __Reply__mach_vm_page_range_query_t {
  constructor(init?: __Reply__mach_vm_page_range_query_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  dispositions_count: number;
}

declare class Kkrb5plugin_preauth_server_ftable_v1 {
  constructor(init?: Kkrb5plugin_preauth_server_ftable_v1);
  name: string | null;
  pa_type_list: interop.Pointer;
  init_proc: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  fini_proc: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void | null;
  flags_proc: (p1: interop.PointerConvertible, p2: number) => number | null;
  edata_proc: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: number, p5: interop.PointerConvertible) => number, p6: interop.PointerConvertible, p7: interop.PointerConvertible) => number | null;
  verify_proc: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible, p7: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: number, p5: interop.PointerConvertible) => number, p8: interop.PointerConvertible, p9: interop.PointerConvertible, p10: interop.PointerConvertible, p11: interop.PointerConvertible) => number | null;
  return_proc: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible, p7: interop.PointerConvertible, p8: interop.PointerConvertible, p9: interop.PointerConvertible, p10: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: number, p5: interop.PointerConvertible) => number, p11: interop.PointerConvertible, p12: interop.PointerConvertible) => number | null;
  freepa_reqcontext_proc: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
}

declare class __Reply__exception_raise_state_identity_t {
  constructor(init?: __Reply__exception_raise_state_identity_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  flavor: number;
  new_stateCnt: number;
  new_state: unknown /* const array */;
}

declare class __ifnet_filter {
  constructor(init?: __ifnet_filter);
}

declare class vm_info_region_64 {
  constructor(init?: vm_info_region_64);
  vir_start: number;
  vir_end: number;
  vir_object: number;
  vir_offset: number;
  vir_needs_copy: number;
  vir_protection: number;
  vir_max_protection: number;
  vir_inheritance: number;
  vir_wired_count: number;
  vir_user_wired_count: number;
}

declare class sub_library_command {
  constructor(init?: sub_library_command);
  cmd: number;
  cmdsize: number;
  sub_library: lc_str;
}

declare class __Request__exception_raise_state_identity_t {
  constructor(init?: __Request__exception_raise_state_identity_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  thread: mach_msg_port_descriptor_t;
  task: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  exception: number;
  codeCnt: number;
  code: unknown /* const array */;
  flavor: number;
  old_stateCnt: number;
  old_state: unknown /* const array */;
}

declare class LDAPDerefVal {
  constructor(init?: LDAPDerefVal);
  type: string | null;
  vals: interop.Pointer;
  next: interop.Pointer;
}

declare class mach_core_fileheader_base {
  constructor(init?: mach_core_fileheader_base);
  signature: number;
  version: number;
}

declare class __Request__exception_raise_state_t {
  constructor(init?: __Request__exception_raise_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  exception: number;
  codeCnt: number;
  code: unknown /* const array */;
  flavor: number;
  old_stateCnt: number;
  old_state: unknown /* const array */;
}

declare class kcdata_type_definition {
  constructor(init?: kcdata_type_definition);
  kct_type_identifier: number;
  kct_num_elements: number;
  kct_name: unknown /* const array */;
  kct_elements: interop.Pointer;
}

declare class __Reply__clock_alarm_t {
  constructor(init?: __Reply__clock_alarm_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class proc_vnodepathinfo {
  constructor(init?: proc_vnodepathinfo);
  pvi_cdir: vnode_info_path;
  pvi_rdir: vnode_info_path;
}

declare class __Reply__clock_get_attributes_t {
  constructor(init?: __Reply__clock_get_attributes_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  clock_attrCnt: number;
  clock_attr: unknown /* const array */;
}

declare class option {
  constructor(init?: option);
  name: string | null;
  has_arg: number;
  flag: interop.Pointer;
  val: number;
}

declare class _ftsent {
  constructor(init?: _ftsent);
  fts_cycle: interop.Pointer;
  fts_parent: interop.Pointer;
  fts_link: interop.Pointer;
  fts_number: number;
  fts_pointer: interop.Pointer;
  fts_accpath: string | null;
  fts_path: string | null;
  fts_errno: number;
  fts_symfd: number;
  fts_pathlen: number;
  fts_namelen: number;
  fts_ino: number;
  fts_dev: number;
  fts_nlink: number;
  fts_level: number;
  fts_info: number;
  fts_flags: number;
  fts_instr: number;
  fts_statp: interop.Pointer;
  fts_name: unknown /* const array */;
}

declare class __nl_cat_d {
  constructor(init?: __nl_cat_d);
  __data: interop.Pointer;
  __size: number;
}

declare class __Request__semaphore_destroy_t {
  constructor(init?: __Request__semaphore_destroy_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  semaphore: mach_msg_port_descriptor_t;
}

declare class tm {
  constructor(init?: tm);
  tm_sec: number;
  tm_min: number;
  tm_hour: number;
  tm_mday: number;
  tm_mon: number;
  tm_year: number;
  tm_wday: number;
  tm_yday: number;
  tm_isdst: number;
  tm_gmtoff: number;
  tm_zone: string | null;
}

declare class lastlogx {
  constructor(init?: lastlogx);
  ll_tv: timeval;
  ll_line: unknown /* const array */;
  ll_host: unknown /* const array */;
}

declare class xvsockpcb {
  constructor(init?: xvsockpcb);
  xv_len: number;
  xv_vsockpp: number;
  xvp_local_cid: number;
  xvp_local_port: number;
  xvp_remote_cid: number;
  xvp_remote_port: number;
  xvp_rxcnt: number;
  xvp_txcnt: number;
  xvp_peer_rxhiwat: number;
  xvp_peer_rxcnt: number;
  xvp_last_pid: number;
  xvp_gencnt: number;
  xv_socket: xsocket;
}

declare class sockaddr_vm {
  constructor(init?: sockaddr_vm);
  svm_len: number;
  svm_family: number;
  svm_reserved1: number;
  svm_port: number;
  svm_cid: number;
}

declare class utsname {
  constructor(init?: utsname);
  sysname: unknown /* const array */;
  nodename: unknown /* const array */;
  release: unknown /* const array */;
  version: unknown /* const array */;
  machine: unknown /* const array */;
}

declare class mount {
  constructor(init?: mount);
}

declare class tms {
  constructor(init?: tms);
  tms_utime: number;
  tms_stime: number;
  tms_cutime: number;
  tms_cstime: number;
}

declare class dk_firmware_path_t {
  constructor(init?: dk_firmware_path_t);
  path: unknown /* const array */;
}

declare class malloc_type_layout_semantics_v0_t {
  constructor(init?: malloc_type_layout_semantics_v0_t);
  contains_data_pointer: boolean;
  contains_struct_pointer: boolean;
  contains_immutable_pointer: boolean;
  contains_anonymous_pointer: boolean;
  is_reference_counted: boolean;
  reserved_0: number;
  contains_generic_data: boolean;
  reserved_1: number;
}

declare class dyld_chained_starts_in_segment {
  constructor(init?: dyld_chained_starts_in_segment);
  size: number;
  page_size: number;
  pointer_format: number;
  segment_offset: number;
  max_valid_pointer: number;
  page_count: number;
  page_start: unknown /* const array */;
}

declare class sem {
  constructor(init?: sem);
  semval: number;
  sempid: number;
  semncnt: number;
  semzcnt: number;
}

declare class sqlite3_index_constraint {
  constructor(init?: sqlite3_index_constraint);
  iColumn: number;
  op: number;
  usable: number;
  iTermOffset: number;
}

declare class ldiv_t {
  constructor(init?: ldiv_t);
  quot: number;
  rem: number;
}

declare class Point {
  constructor(init?: Point);
  v: number;
  h: number;
}

declare class msg {
  constructor(init?: msg);
  msg_next: interop.Pointer;
  msg_type: number;
  msg_ts: number;
  msg_spot: number;
  label: interop.Pointer;
}

declare class __msqid_ds_new {
  constructor(init?: __msqid_ds_new);
  msg_perm: ipc_perm;
  msg_first: number;
  msg_last: number;
  msg_cbytes: number;
  msg_qnum: number;
  msg_qbytes: number;
  msg_lspid: number;
  msg_lrpid: number;
  msg_stime: number;
  msg_pad1: number;
  msg_rtime: number;
  msg_pad2: number;
  msg_ctime: number;
  msg_pad3: number;
  msg_pad4: unknown /* const array */;
}

declare class loadavg {
  constructor(init?: loadavg);
  ldavg: unknown /* const array */;
  fscale: number;
}

declare class __Request__host_processor_info_t {
  constructor(init?: __Request__host_processor_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
}

declare class __darwin_arm_cpmu_state64 {
  constructor(init?: __darwin_arm_cpmu_state64);
  __ctrs: unknown /* const array */;
}

declare class eproc {
  constructor(init?: eproc);
  e_paddr: interop.Pointer;
  e_sess: interop.Pointer;
  e_pcred: _pcred;
  e_ucred: _ucred;
  e_vm: vmspace;
  e_ppid: number;
  e_pgid: number;
  e_jobc: number;
  e_tdev: number;
  e_tpgid: number;
  e_tsess: interop.Pointer;
  e_wmesg: unknown /* const array */;
  e_xsize: number;
  e_xrssize: number;
  e_xccount: number;
  e_xswrss: number;
  e_flag: number;
  e_login: unknown /* const array */;
  e_spare: unknown /* const array */;
}

declare class _pcred {
  constructor(init?: _pcred);
  pc_lock: unknown /* const array */;
  pc_ucred: interop.Pointer;
  p_ruid: number;
  p_svuid: number;
  p_rgid: number;
  p_svgid: number;
  p_refcnt: number;
}

declare class __Reply__clock_set_time_t {
  constructor(init?: __Reply__clock_set_time_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class sigacts {
  constructor(init?: sigacts);
}

declare class vmspace {
  constructor(init?: vmspace);
  dummy: number;
  dummy2: string | null;
  dummy3: unknown /* const array */;
  dummy4: unknown /* const array */;
}

declare class __sbuf {
  constructor(init?: __sbuf);
  _base: interop.Pointer;
  _size: number;
}

declare class sqlite3_io_methods {
  constructor(init?: sqlite3_io_methods);
  iVersion: number;
  xClose: (p1: interop.PointerConvertible) => number | null;
  xRead: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number) => number | null;
  xWrite: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number) => number | null;
  xTruncate: (p1: interop.PointerConvertible, p2: number) => number | null;
  xSync: (p1: interop.PointerConvertible, p2: number) => number | null;
  xFileSize: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  xLock: (p1: interop.PointerConvertible, p2: number) => number | null;
  xUnlock: (p1: interop.PointerConvertible, p2: number) => number | null;
  xCheckReservedLock: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  xFileControl: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number | null;
  xSectorSize: (p1: interop.PointerConvertible) => number | null;
  xDeviceCharacteristics: (p1: interop.PointerConvertible) => number | null;
  xShmMap: (p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: interop.PointerConvertible) => number | null;
  xShmLock: (p1: interop.PointerConvertible, p2: number, p3: number, p4: number) => number | null;
  xShmBarrier: (p1: interop.PointerConvertible) => void | null;
  xShmUnmap: (p1: interop.PointerConvertible, p2: number) => number | null;
  xFetch: (p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible) => number | null;
  xUnfetch: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number | null;
}

declare class __Reply__host_virtual_physical_table_info_t {
  constructor(init?: __Reply__host_virtual_physical_table_info_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  info: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  infoCnt: number;
}

declare class unwind_info_regular_second_level_page_header {
  constructor(init?: unwind_info_regular_second_level_page_header);
  kind: number;
  entryPageOffset: number;
  entryCount: number;
}

declare class proc {
  constructor(init?: proc);
}

declare class vm_region_top_info {
  constructor(init?: vm_region_top_info);
  obj_id: number;
  ref_count: number;
  private_pages_resident: number;
  shared_pages_resident: number;
  share_mode: number;
}

declare class __Request__mach_vm_machine_attribute_t {
  constructor(init?: __Request__mach_vm_machine_attribute_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  attribute: number;
  value: number;
}

declare class __Request__mach_voucher_extract_all_attr_recipes_t {
  constructor(init?: __Request__mach_voucher_extract_all_attr_recipes_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  recipesCnt: number;
}

declare class __Reply__vm_write_t {
  constructor(init?: __Reply__vm_write_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class session {
  constructor(init?: session);
}

declare class dyld_chained_ptr_32_cache_rebase {
  constructor(init?: dyld_chained_ptr_32_cache_rebase);
  target: number;
  next: number;
}

declare class __Reply__thread_policy_set_t {
  constructor(init?: __Reply__thread_policy_set_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class klist {
  constructor(init?: klist);
  slh_first: interop.Pointer;
}

declare class __Reply__mach_vm_inherit_t {
  constructor(init?: __Reply__mach_vm_inherit_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class knote {
  constructor(init?: knote);
}

declare class posix_cred {
  constructor(init?: posix_cred);
}

declare class ucred {
  constructor(init?: ucred);
}

declare class HFSPlusBSDInfo {
  constructor(init?: HFSPlusBSDInfo);
  ownerID: number;
  groupID: number;
  adminFlags: number;
  ownerFlags: number;
  fileMode: number;
  special: unnamed_6913317967658464317;
}

declare class label {
  constructor(init?: label);
}

declare class mach_send_possible_notification_t {
  constructor(init?: mach_send_possible_notification_t);
  not_header: mach_msg_header_t;
  NDR: NDR_record_t;
  not_port: number;
  trailer: mach_msg_security_trailer_t;
}

declare class __Request__mach_vm_read_list_t {
  constructor(init?: __Request__mach_vm_read_list_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  data_list: unknown /* const array */;
  count: number;
}

declare class __Request__semaphore_create_t {
  constructor(init?: __Request__semaphore_create_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  policy: number;
  value: number;
}

declare class task_basic_info {
  constructor(init?: task_basic_info);
  suspend_count: number;
  virtual_size: number;
  resident_size: number;
  user_time: time_value;
  system_time: time_value;
  policy: number;
}

declare class __Reply__thread_convert_thread_state_t {
  constructor(init?: __Reply__thread_convert_thread_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  out_stateCnt: number;
  out_state: unknown /* const array */;
}

declare class xtcpcb {
  constructor(init?: xtcpcb);
  xt_len: number;
  xt_inp: inpcb;
  xt_tp: tcpcb;
  xt_socket: xsocket;
  xt_alignment_hack: number;
}

declare class tcpstat {
  constructor(init?: tcpstat);
  tcps_connattempt: number;
  tcps_accepts: number;
  tcps_connects: number;
  tcps_drops: number;
  tcps_conndrops: number;
  tcps_closed: number;
  tcps_segstimed: number;
  tcps_rttupdated: number;
  tcps_delack: number;
  tcps_timeoutdrop: number;
  tcps_rexmttimeo: number;
  tcps_persisttimeo: number;
  tcps_keeptimeo: number;
  tcps_keepprobe: number;
  tcps_keepdrops: number;
  tcps_sndtotal: number;
  tcps_sndpack: number;
  tcps_sndbyte: number;
  tcps_sndrexmitpack: number;
  tcps_sndrexmitbyte: number;
  tcps_sndacks: number;
  tcps_sndprobe: number;
  tcps_sndurg: number;
  tcps_sndwinup: number;
  tcps_sndctrl: number;
  tcps_rcvtotal: number;
  tcps_rcvpack: number;
  tcps_rcvbyte: number;
  tcps_rcvbadsum: number;
  tcps_rcvbadoff: number;
  tcps_rcvmemdrop: number;
  tcps_rcvshort: number;
  tcps_rcvduppack: number;
  tcps_rcvdupbyte: number;
  tcps_rcvpartduppack: number;
  tcps_rcvpartdupbyte: number;
  tcps_rcvoopack: number;
  tcps_rcvoobyte: number;
  tcps_rcvpackafterwin: number;
  tcps_rcvbyteafterwin: number;
  tcps_rcvafterclose: number;
  tcps_rcvwinprobe: number;
  tcps_rcvdupack: number;
  tcps_rcvacktoomuch: number;
  tcps_rcvackpack: number;
  tcps_rcvackbyte: number;
  tcps_rcvwinupd: number;
  tcps_pawsdrop: number;
  tcps_predack: number;
  tcps_preddat: number;
  tcps_cachedrtt: number;
  tcps_cachedrttvar: number;
  tcps_cachedssthresh: number;
  tcps_usedrtt: number;
  tcps_usedrttvar: number;
  tcps_usedssthresh: number;
  tcps_persistdrop: number;
  tcps_badsyn: number;
  tcps_mturesent: number;
  tcps_listendrop: number;
  tcps_synchallenge: number;
  tcps_rstchallenge: number;
  tcps_minmssdrops: number;
  tcps_sndrexmitbad: number;
  tcps_badrst: number;
  tcps_sc_dropped: number;
  tcps_sc_completed: number;
  tcps_sc_aborted: number;
  tcps_sc_sendcookie: number;
  tcps_sc_recvcookie: number;
  tcps_sack_recovery_episode: number;
  tcps_sack_rexmits: number;
  tcps_sack_rexmit_bytes: number;
  tcps_sack_rcv_blocks: number;
  tcps_sack_send_blocks: number;
  tcps_sack_sboverflow: number;
  tcps_rack_recovery_episode: number;
  tcps_rack_reordering_timeout_recovery_episode: number;
  tcps_rack_rexmits: number;
  tcps_bg_rcvtotal: number;
  tcps_rxtfindrop: number;
  tcps_fcholdpacket: number;
  tcps_limited_txt: number;
  tcps_early_rexmt: number;
  tcps_sack_ackadv: number;
  tcps_rcv_swcsum: number;
  tcps_rcv_swcsum_bytes: number;
  tcps_rcv6_swcsum: number;
  tcps_rcv6_swcsum_bytes: number;
  tcps_snd_swcsum: number;
  tcps_snd_swcsum_bytes: number;
  tcps_snd6_swcsum: number;
  tcps_snd6_swcsum_bytes: number;
  tcps_invalid_mpcap: number;
  tcps_invalid_joins: number;
  tcps_mpcap_fallback: number;
  tcps_join_fallback: number;
  tcps_estab_fallback: number;
  tcps_invalid_opt: number;
  tcps_mp_reducedwin: number;
  tcps_mp_badcsum: number;
  tcps_mp_oodata: number;
  tcps_mp_switches: number;
  tcps_mp_rcvtotal: number;
  tcps_mp_rcvbytes: number;
  tcps_mp_sndpacks: number;
  tcps_mp_sndbytes: number;
  tcps_join_rxmts: number;
  tcps_tailloss_rto: number;
  tcps_reordered_pkts: number;
  tcps_recovered_pkts: number;
  tcps_pto: number;
  tcps_rto_after_pto: number;
  tcps_tlp_recovery: number;
  tcps_tlp_recoverlastpkt: number;
  tcps_ecn_client_success: number;
  tcps_ecn_recv_ece: number;
  tcps_ecn_sent_ece: number;
  tcps_detect_reordering: number;
  tcps_delay_recovery: number;
  tcps_avoid_rxmt: number;
  tcps_pto_in_recovery: number;
  tcps_pmtudbh_reverted: number;
  tcps_dsack_ackloss: number;
  tcps_dsack_badrexmt: number;
  tcps_dsack_sent: number;
  tcps_dsack_recvd: number;
  tcps_dsack_recvd_old: number;
  tcps_mp_sel_rtt: number;
  tcps_mp_sel_rto: number;
  tcps_mp_num_probes: number;
  tcps_mp_verdowngrade: number;
  tcps_drop_after_sleep: number;
  tcps_probe_if: number;
  tcps_probe_if_conflict: number;
  tcps_ecn_client_setup: number;
  tcps_ecn_server_setup: number;
  tcps_ecn_server_success: number;
  tcps_ecn_ace_syn_not_ect: number;
  tcps_ecn_ace_syn_ect1: number;
  tcps_ecn_ace_syn_ect0: number;
  tcps_ecn_ace_syn_ce: number;
  tcps_ecn_lost_synack: number;
  tcps_ecn_lost_syn: number;
  tcps_ecn_not_supported: number;
  tcps_ecn_recv_ce: number;
  tcps_ecn_ace_recv_ce: number;
  tcps_ecn_conn_recv_ce: number;
  tcps_ecn_conn_recv_ece: number;
  tcps_ecn_conn_plnoce: number;
  tcps_ecn_conn_pl_ce: number;
  tcps_ecn_conn_nopl_ce: number;
  tcps_ecn_fallback_synloss: number;
  tcps_ecn_fallback_reorder: number;
  tcps_ecn_fallback_ce: number;
  tcps_tfo_syn_data_rcv: number;
  tcps_tfo_cookie_req_rcv: number;
  tcps_tfo_cookie_sent: number;
  tcps_tfo_cookie_invalid: number;
  tcps_tfo_cookie_req: number;
  tcps_tfo_cookie_rcv: number;
  tcps_tfo_syn_data_sent: number;
  tcps_tfo_syn_data_acked: number;
  tcps_tfo_syn_loss: number;
  tcps_tfo_blackhole: number;
  tcps_tfo_cookie_wrong: number;
  tcps_tfo_no_cookie_rcv: number;
  tcps_tfo_heuristics_disable: number;
  tcps_tfo_sndblackhole: number;
  tcps_mss_to_default: number;
  tcps_mss_to_medium: number;
  tcps_mss_to_low: number;
  tcps_ecn_fallback_droprst: number;
  tcps_ecn_fallback_droprxmt: number;
  tcps_ecn_fallback_synrst: number;
  tcps_mptcp_rcvmemdrop: number;
  tcps_mptcp_rcvduppack: number;
  tcps_mptcp_rcvpackafterwin: number;
  tcps_timer_drift_le_1_ms: number;
  tcps_timer_drift_le_10_ms: number;
  tcps_timer_drift_le_20_ms: number;
  tcps_timer_drift_le_50_ms: number;
  tcps_timer_drift_le_100_ms: number;
  tcps_timer_drift_le_200_ms: number;
  tcps_timer_drift_le_500_ms: number;
  tcps_timer_drift_le_1000_ms: number;
  tcps_timer_drift_gt_1000_ms: number;
  tcps_mptcp_handover_attempt: number;
  tcps_mptcp_interactive_attempt: number;
  tcps_mptcp_aggregate_attempt: number;
  tcps_mptcp_fp_handover_attempt: number;
  tcps_mptcp_fp_interactive_attempt: number;
  tcps_mptcp_fp_aggregate_attempt: number;
  tcps_mptcp_heuristic_fallback: number;
  tcps_mptcp_fp_heuristic_fallback: number;
  tcps_mptcp_handover_success_wifi: number;
  tcps_mptcp_handover_success_cell: number;
  tcps_mptcp_interactive_success: number;
  tcps_mptcp_aggregate_success: number;
  tcps_mptcp_fp_handover_success_wifi: number;
  tcps_mptcp_fp_handover_success_cell: number;
  tcps_mptcp_fp_interactive_success: number;
  tcps_mptcp_fp_aggregate_success: number;
  tcps_mptcp_handover_cell_from_wifi: number;
  tcps_mptcp_handover_wifi_from_cell: number;
  tcps_mptcp_interactive_cell_from_wifi: number;
  tcps_mptcp_handover_cell_bytes: number;
  tcps_mptcp_interactive_cell_bytes: number;
  tcps_mptcp_aggregate_cell_bytes: number;
  tcps_mptcp_handover_all_bytes: number;
  tcps_mptcp_interactive_all_bytes: number;
  tcps_mptcp_aggregate_all_bytes: number;
  tcps_mptcp_back_to_wifi: number;
  tcps_mptcp_wifi_proxy: number;
  tcps_mptcp_cell_proxy: number;
  tcps_ka_offload_drops: number;
  tcps_mptcp_triggered_cell: number;
  tcps_fin_timeout_drops: number;
}

declare class twolevel_hints_command {
  constructor(init?: twolevel_hints_command);
  cmd: number;
  cmdsize: number;
  offset: number;
  nhints: number;
}

declare class tcpcb {
  constructor(init?: tcpcb);
  t_segq: tsegqe_head;
  t_dupacks: number;
  unused: number;
  t_timer: unknown /* const array */;
  t_inpcb: number;
  t_state: number;
  t_flags: number;
  t_force: number;
  snd_una: number;
  snd_max: number;
  snd_nxt: number;
  snd_up: number;
  snd_wl1: number;
  snd_wl2: number;
  iss: number;
  irs: number;
  rcv_nxt: number;
  rcv_adv: number;
  rcv_wnd: number;
  rcv_up: number;
  snd_wnd: number;
  snd_cwnd: number;
  snd_ssthresh: number;
  t_maxopd: number;
  t_rcvtime: number;
  t_starttime: number;
  t_rtttime: number;
  t_rtseq: number;
  t_rxtcur: number;
  t_maxseg: number;
  t_srtt: number;
  t_rttvar: number;
  t_rxtshift: number;
  t_rttmin: number;
  t_rttupdated: number;
  max_sndwnd: number;
  t_softerror: number;
  t_oobflags: number;
  t_iobc: number;
  snd_scale: number;
  rcv_scale: number;
  request_r_scale: number;
  requested_s_scale: number;
  ts_recent: number;
  ts_recent_age: number;
  last_ack_sent: number;
  cc_send: number;
  cc_recv: number;
  snd_recover: number;
  snd_cwnd_prev: number;
  snd_ssthresh_prev: number;
  t_badrxtwin: number;
}

declare class cups_option_s {
  constructor(init?: cups_option_s);
  name: string | null;
  value: string | null;
}

declare class au_arg32_t {
  constructor(init?: au_arg32_t);
  no: number;
  val: number;
  len: number;
  text: string | null;
}

declare class prebound_dylib_command {
  constructor(init?: prebound_dylib_command);
  cmd: number;
  cmdsize: number;
  name: lc_str;
  nmodules: number;
  linked_modules: lc_str;
}

declare class tseg_qent {
  constructor(init?: tseg_qent);
}

declare class _krb5_cc_ops {
  constructor(init?: _krb5_cc_ops);
}

declare class ip_linklocal_stat {
  constructor(init?: ip_linklocal_stat);
  iplls_in_total: number;
  iplls_in_badttl: number;
  iplls_out_total: number;
  iplls_out_badttl: number;
}

declare class __Reply__host_processor_info_t {
  constructor(init?: __Reply__host_processor_info_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  out_processor_info: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  out_processor_count: number;
  out_processor_infoCnt: number;
}

declare class _inpcb_list_entry {
  constructor(init?: _inpcb_list_entry);
  le_next: number;
  le_prev: number;
}

declare class hv_data_abort_notification_t {
  constructor(init?: hv_data_abort_notification_t);
  context: number;
  ipa: number;
  value: number;
  access_size: number;
  access_type: number;
}

declare class _cups_array_s {
  constructor(init?: _cups_array_s);
}

declare class ip6_opt_tunnel {
  constructor(init?: ip6_opt_tunnel);
  ip6ot_type: number;
  ip6ot_len: number;
  ip6ot_encap_limit: number;
}

declare class ip6_opt_jumbo {
  constructor(init?: ip6_opt_jumbo);
  ip6oj_type: number;
  ip6oj_len: number;
  ip6oj_jumbo_len: unknown /* const array */;
}

declare class ether_addr {
  constructor(init?: ether_addr);
  octet: unknown /* const array */;
}

declare class ifnet_traffic_rule_action_steer {
  constructor(init?: ifnet_traffic_rule_action_steer);
  ras_common: ifnet_traffic_rule_action;
  ras_qset_id: number;
}

declare class ip6_hbh {
  constructor(init?: ip6_hbh);
  ip6h_nxt: number;
  ip6h_len: number;
}

declare class _xpc_dictionary_s {
  constructor(init?: _xpc_dictionary_s);
}

declare class ip6_ext {
  constructor(init?: ip6_ext);
  ip6e_nxt: number;
  ip6e_len: number;
}

declare class credentials {
  constructor(init?: credentials);
}

declare class ip6_hdr {
  constructor(init?: ip6_hdr);
  ip6_ctlun: unnamed_1268940931141765636;
  ip6_src: in6_addr;
  ip6_dst: in6_addr;
}

declare class irr_raflagmask {
  constructor(init?: irr_raflagmask);
  onlink: number;
  autonomous: number;
  reserved: number;
}

declare class au_opaque_t {
  constructor(init?: au_opaque_t);
  size: number;
  data: string | null;
}

declare class in6_prefixreq {
  constructor(init?: in6_prefixreq);
  ipr_name: unknown /* const array */;
  ipr_origin: number;
  ipr_plen: number;
  ipr_vltime: number;
  ipr_pltime: number;
  ipr_flags: in6_prflags;
  ipr_prefix: sockaddr_in6;
}

declare class __Reply__processor_set_policy_control_t {
  constructor(init?: __Reply__processor_set_policy_control_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class fileset_entry_command {
  constructor(init?: fileset_entry_command);
  cmd: number;
  cmdsize: number;
  vmaddr: number;
  fileoff: number;
  entry_id: lc_str;
  reserved: number;
}

declare class icmp6_ifstat {
  constructor(init?: icmp6_ifstat);
  ifs6_in_msg: number;
  ifs6_in_error: number;
  ifs6_in_dstunreach: number;
  ifs6_in_adminprohib: number;
  ifs6_in_timeexceed: number;
  ifs6_in_paramprob: number;
  ifs6_in_pkttoobig: number;
  ifs6_in_echo: number;
  ifs6_in_echoreply: number;
  ifs6_in_routersolicit: number;
  ifs6_in_routeradvert: number;
  ifs6_in_neighborsolicit: number;
  ifs6_in_neighboradvert: number;
  ifs6_in_redirect: number;
  ifs6_in_mldquery: number;
  ifs6_in_mldreport: number;
  ifs6_in_mlddone: number;
  ifs6_out_msg: number;
  ifs6_out_error: number;
  ifs6_out_dstunreach: number;
  ifs6_out_adminprohib: number;
  ifs6_out_timeexceed: number;
  ifs6_out_paramprob: number;
  ifs6_out_pkttoobig: number;
  ifs6_out_echo: number;
  ifs6_out_echoreply: number;
  ifs6_out_routersolicit: number;
  ifs6_out_routeradvert: number;
  ifs6_out_neighborsolicit: number;
  ifs6_out_neighboradvert: number;
  ifs6_out_redirect: number;
  ifs6_out_mldquery: number;
  ifs6_out_mldreport: number;
  ifs6_out_mlddone: number;
}

declare class in6_addrpolicy {
  constructor(init?: in6_addrpolicy);
  addr: sockaddr_in6;
  addrmask: sockaddr_in6;
  preced: number;
  label: number;
  use: number;
}

declare class kev_in_portinuse {
  constructor(init?: kev_in_portinuse);
  port: number;
  req_pid: number;
  reserved: unknown /* const array */;
}

declare class kev_in_collision {
  constructor(init?: kev_in_collision);
  link_data: net_event_data;
  ia_ipaddr: in_addr;
  hw_len: number;
  hw_addr: interop.Pointer;
}

declare class kev_vendor_code {
  constructor(init?: kev_vendor_code);
  vendor_code: number;
  vendor_string: unknown /* const array */;
}

declare class fieldnode {
  constructor(init?: fieldnode);
  status: number;
  rows: number;
  cols: number;
  frow: number;
  fcol: number;
  drows: number;
  dcols: number;
  maxgrow: number;
  nrow: number;
  nbuf: number;
  just: number;
  page: number;
  index: number;
  pad: number;
  fore: number;
  back: number;
  opts: number;
  snext: interop.Pointer;
  sprev: interop.Pointer;
  link: interop.Pointer;
  form: interop.Pointer;
  type: interop.Pointer;
  arg: interop.Pointer;
  buf: interop.Pointer;
  usrptr: interop.Pointer;
}

declare class if_nameindex {
  constructor(init?: if_nameindex);
  if_index: number;
  if_name: string | null;
}

declare class sockaddr_sys {
  constructor(init?: sockaddr_sys);
  ss_len: number;
  ss_family: number;
  ss_sysaddr: number;
  ss_reserved: unknown /* const array */;
}

declare class __Reply__host_processors_t {
  constructor(init?: __Reply__host_processors_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  out_processor_list: mach_msg_ool_ports_descriptor_t;
  NDR: NDR_record_t;
  out_processor_listCnt: number;
}

declare class processor_cpu_stat64 {
  constructor(init?: processor_cpu_stat64);
  irq_ex_cnt: number;
  ipi_cnt: number;
  timer_cnt: number;
  undef_ex_cnt: number;
  unaligned_cnt: number;
  vfp_cnt: number;
  vfp_shortv_cnt: number;
  data_ex_cnt: number;
  instr_ex_cnt: number;
  pmi_cnt: number;
}

declare class dyld_kernel_process_info {
  constructor(init?: dyld_kernel_process_info);
  cache_image_info: dyld_kernel_image_info;
  timestamp: number;
  imageCount: number;
  initialImageCount: number;
  dyldState: number;
  no_cache: number;
  private_cache: number;
}

declare class unnamed_4284362100486935547 {
  constructor(init?: unnamed_4284362100486935547);
  inp4_ip_tos: number;
}

declare class xinpcb64 {
  constructor(init?: xinpcb64);
  xi_len: number;
  xi_inpp: number;
  inp_fport: number;
  inp_lport: number;
  inp_list: inpcb64_list_entry;
  inp_ppcb: number;
  inp_pcbinfo: number;
  inp_portlist: inpcb64_list_entry;
  inp_phd: number;
  inp_gencnt: number;
  inp_flags: number;
  inp_flow: number;
  inp_vflag: number;
  inp_ip_ttl: number;
  inp_ip_p: number;
  inp_dependfaddr: unnamed_9658494857777605109;
  inp_dependladdr: unnamed_1421198579709750629;
  inp_depend4: unnamed_4284362100486935547;
  inp_depend6: unnamed_5798418872761254777;
  xi_socket: xsocket64;
  xi_alignment_hack: number;
}

declare class rusage_info_v6 {
  constructor(init?: rusage_info_v6);
  ri_uuid: unknown /* const array */;
  ri_user_time: number;
  ri_system_time: number;
  ri_pkg_idle_wkups: number;
  ri_interrupt_wkups: number;
  ri_pageins: number;
  ri_wired_size: number;
  ri_resident_size: number;
  ri_phys_footprint: number;
  ri_proc_start_abstime: number;
  ri_proc_exit_abstime: number;
  ri_child_user_time: number;
  ri_child_system_time: number;
  ri_child_pkg_idle_wkups: number;
  ri_child_interrupt_wkups: number;
  ri_child_pageins: number;
  ri_child_elapsed_abstime: number;
  ri_diskio_bytesread: number;
  ri_diskio_byteswritten: number;
  ri_cpu_time_qos_default: number;
  ri_cpu_time_qos_maintenance: number;
  ri_cpu_time_qos_background: number;
  ri_cpu_time_qos_utility: number;
  ri_cpu_time_qos_legacy: number;
  ri_cpu_time_qos_user_initiated: number;
  ri_cpu_time_qos_user_interactive: number;
  ri_billed_system_time: number;
  ri_serviced_system_time: number;
  ri_logical_writes: number;
  ri_lifetime_max_phys_footprint: number;
  ri_instructions: number;
  ri_cycles: number;
  ri_billed_energy: number;
  ri_serviced_energy: number;
  ri_interval_max_phys_footprint: number;
  ri_runnable_time: number;
  ri_flags: number;
  ri_user_ptime: number;
  ri_system_ptime: number;
  ri_pinstructions: number;
  ri_pcycles: number;
  ri_energy_nj: number;
  ri_penergy_nj: number;
  ri_secure_time_in_system: number;
  ri_secure_ptime_in_system: number;
  ri_neural_footprint: number;
  ri_lifetime_max_neural_footprint: number;
  ri_interval_max_neural_footprint: number;
  ri_reserved: unknown /* const array */;
}

declare class xinpcb {
  constructor(init?: xinpcb);
  xi_len: number;
  xi_inp: inpcb;
  xi_socket: xsocket;
  xi_alignment_hack: number;
}

declare class __Reply__host_set_exception_ports_t {
  constructor(init?: __Reply__host_set_exception_ports_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class unnamed_12889346842302587936 {
  constructor(init?: unnamed_12889346842302587936);
  inp4_ip_tos: number;
  inp4_options: number;
  inp4_moptions: number;
}

declare class __Reply__processor_set_threads_t {
  constructor(init?: __Reply__processor_set_threads_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  thread_list: mach_msg_ool_ports_descriptor_t;
  NDR: NDR_record_t;
  thread_listCnt: number;
}

declare class inpcbpolicy {
  constructor(init?: inpcbpolicy);
}

declare class ip6_moptions {
  constructor(init?: ip6_moptions);
}

declare class mach_msg_mac_trailer_t {
  constructor(init?: mach_msg_mac_trailer_t);
  msgh_trailer_type: number;
  msgh_trailer_size: number;
  msgh_seqno: number;
  msgh_sender: security_token_t;
  msgh_audit: audit_token_t;
  msgh_context: number;
  msgh_ad: number;
  msgh_labels: msg_labels_t;
}

declare class inpcbinfo {
  constructor(init?: inpcbinfo);
}

declare class in_addr_4in6 {
  constructor(init?: in_addr_4in6);
  ia46_pad32: unknown /* const array */;
  ia46_addr4: in_addr;
}

declare class mach_msg_trailer_t {
  constructor(init?: mach_msg_trailer_t);
  msgh_trailer_type: number;
  msgh_trailer_size: number;
}

declare class xsocket {
  constructor(init?: xsocket);
  xso_len: number;
  xso_so: number;
  so_type: number;
  so_options: number;
  so_linger: number;
  so_state: number;
  so_pcb: number;
  xso_protocol: number;
  xso_family: number;
  so_qlen: number;
  so_incqlen: number;
  so_qlimit: number;
  so_timeo: number;
  so_error: number;
  so_pgid: number;
  so_oobmark: number;
  so_rcv: xsockbuf;
  so_snd: xsockbuf;
  so_uid: number;
}

declare class __Request__task_set_port_space_t {
  constructor(init?: __Request__task_set_port_space_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  table_entries: number;
}

declare class igmpstat {
  constructor(init?: igmpstat);
  igps_rcv_total: number;
  igps_rcv_tooshort: number;
  igps_rcv_badsum: number;
  igps_rcv_queries: number;
  igps_rcv_badqueries: number;
  igps_rcv_reports: number;
  igps_rcv_badreports: number;
  igps_rcv_ourreports: number;
  igps_snd_reports: number;
}

declare class __Request__mach_vm_deallocate_t {
  constructor(init?: __Request__mach_vm_deallocate_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
}

declare class __Request__processor_set_default_t {
  constructor(init?: __Request__processor_set_default_t);
  Head: mach_msg_header_t;
}

declare class mach_memory_info {
  constructor(init?: mach_memory_info);
  flags: number;
  site: number;
  size: number;
  free: number;
  largest: number;
  collectable_bytes: number;
  mapped: number;
  peak: number;
  tag: number;
  zone: number;
  _resvA: unknown /* const array */;
  _resv: unknown /* const array */;
  name: unknown /* const array */;
}

declare class id_ip {
  constructor(init?: id_ip);
  idi_ip: ip;
}

declare class id_ts {
  constructor(init?: id_ts);
  its_otime: number;
  its_rtime: number;
  its_ttime: number;
}

declare class ih_pmtu {
  constructor(init?: ih_pmtu);
  ipm_void: number;
  ipm_nextmtu: number;
}

declare class shared_file_mapping_slide_np {
  constructor(init?: shared_file_mapping_slide_np);
  sms_address: number;
  sms_size: number;
  sms_file_offset: number;
  sms_slide_size: number;
  sms_slide_start: number;
  sms_max_prot: number;
  sms_init_prot: number;
}

declare class nd_opt_dnssl {
  constructor(init?: nd_opt_dnssl);
  nd_opt_dnssl_type: number;
  nd_opt_dnssl_len: number;
  nd_opt_dnssl_reserved: number;
  nd_opt_dnssl_lifetime: number;
  nd_opt_dnssl_domains: unknown /* const array */;
}

declare class icmp {
  constructor(init?: icmp);
  icmp_type: number;
  icmp_code: number;
  icmp_cksum: number;
  icmp_hun: unnamed_16163939891023180617;
  icmp_dun: unnamed_18274963185808352070;
}

declare class __Reply__task_register_dyld_set_dyld_state_t {
  constructor(init?: __Reply__task_register_dyld_set_dyld_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class crashinfo_jit_address_range {
  constructor(init?: crashinfo_jit_address_range);
  start_address: number;
  end_address: number;
}

declare class icmp_ra_addr {
  constructor(init?: icmp_ra_addr);
  ira_addr: number;
  ira_preference: number;
}

declare class __Request__mach_port_set_mscount_t {
  constructor(init?: __Request__mach_port_set_mscount_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  mscount: number;
}

declare class icmp6errstat {
  constructor(init?: icmp6errstat);
  icp6errs_dst_unreach_noroute: number;
  icp6errs_dst_unreach_admin: number;
  icp6errs_dst_unreach_beyondscope: number;
  icp6errs_dst_unreach_addr: number;
  icp6errs_dst_unreach_noport: number;
  icp6errs_packet_too_big: number;
  icp6errs_time_exceed_transit: number;
  icp6errs_time_exceed_reassembly: number;
  icp6errs_paramprob_header: number;
  icp6errs_paramprob_nextheader: number;
  icp6errs_paramprob_option: number;
  icp6errs_redirect: number;
  icp6errs_unknown: number;
}

declare class sadb_lifetime {
  constructor(init?: sadb_lifetime);
  sadb_lifetime_len: number;
  sadb_lifetime_exttype: number;
  sadb_lifetime_allocations: number;
  sadb_lifetime_bytes: number;
  sadb_lifetime_addtime: number;
  sadb_lifetime_usetime: number;
}

declare class icmp6_filter {
  constructor(init?: icmp6_filter);
  icmp6_filt: unknown /* const array */;
}

declare class rr_pco_match {
  constructor(init?: rr_pco_match);
  rpm_code: number;
  rpm_len: number;
  rpm_ordinal: number;
  rpm_matchlen: number;
  rpm_minlen: number;
  rpm_maxlen: number;
  rpm_reserved: number;
  rpm_prefix: in6_addr;
}

declare class _OSUnalignedU16 {
  constructor(init?: _OSUnalignedU16);
  __val: number;
}

declare class __Reply__host_statistics64_t {
  constructor(init?: __Reply__host_statistics64_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  host_info64_outCnt: number;
  host_info64_out: unknown /* const array */;
}

declare class icmp6_router_renum {
  constructor(init?: icmp6_router_renum);
  rr_hdr: icmp6_hdr;
  rr_segnum: number;
  rr_flags: number;
  rr_maxdelay: number;
  rr_reserved: number;
}

declare class ni_reply_fqdn {
  constructor(init?: ni_reply_fqdn);
  ni_fqdn_ttl: number;
  ni_fqdn_namelen: number;
  ni_fqdn_name: unknown /* const array */;
}

declare class sigvec {
  constructor(init?: sigvec);
  sv_handler: (p1: number) => void | null;
  sv_mask: number;
  sv_flags: number;
}

declare class icmp6_nodeinfo {
  constructor(init?: icmp6_nodeinfo);
  icmp6_ni_hdr: icmp6_hdr;
  icmp6_ni_nonce: unknown /* const array */;
}

declare class simd_float2x4 {
  constructor(init?: simd_float2x4);
  columns: unknown /* const array */;
}

declare class hv_vm_mem_access_msg_t {
  constructor(init?: hv_vm_mem_access_msg_t);
  header: mach_msg_header_t;
  body: hv_data_abort_notification_t;
}

declare class unnamed_15547771113679546793 {
  constructor(init?: unnamed_15547771113679546793);
  sp: number;
  bitpattern: unknown /* const array */;
}

declare class __Request__thread_set_mach_voucher_t {
  constructor(init?: __Request__thread_set_mach_voucher_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  voucher: mach_msg_port_descriptor_t;
}

declare class ctlname {
  constructor(init?: ctlname);
  ctl_name: string | null;
  ctl_type: number;
}

declare class __Reply__mach_port_names_t {
  constructor(init?: __Reply__mach_port_names_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  names: mach_msg_ool_descriptor_t;
  types: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  namesCnt: number;
  typesCnt: number;
}

declare class entry {
  constructor(init?: entry);
  key: string | null;
  data: interop.Pointer;
}

declare class nd_opt_dnr {
  constructor(init?: nd_opt_dnr);
  nd_opt_dnr_type: number;
  nd_opt_dnr_len: number;
  nd_opt_dnr_svc_priority: unknown /* const array */;
  nd_opt_dnr_lifetime: unknown /* const array */;
  nd_opt_dnr_adn_len: unknown /* const array */;
  nd_opt_dnr_continuation: unknown /* const array */;
}

declare class nd_opt_nonce {
  constructor(init?: nd_opt_nonce);
  nd_opt_nonce_type: number;
  nd_opt_nonce_len: number;
  nd_opt_nonce: unknown /* const array */;
}

declare class __Request__thread_set_state_t {
  constructor(init?: __Request__thread_set_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  new_stateCnt: number;
  new_state: unknown /* const array */;
}

declare class _krb5_octet_data {
  constructor(init?: _krb5_octet_data);
  magic: number;
  length: number;
  data: interop.Pointer;
}

declare class nd_opt_prefix_info {
  constructor(init?: nd_opt_prefix_info);
  nd_opt_pi_type: number;
  nd_opt_pi_len: number;
  nd_opt_pi_prefix_len: number;
  nd_opt_pi_flags_reserved: number;
  nd_opt_pi_valid_time: number;
  nd_opt_pi_preferred_time: number;
  nd_opt_pi_reserved2: number;
  nd_opt_pi_prefix: in6_addr;
}

declare class _xlocale {
  constructor(init?: _xlocale);
}

declare class sadb_key {
  constructor(init?: sadb_key);
  sadb_key_len: number;
  sadb_key_exttype: number;
  sadb_key_bits: number;
  sadb_key_reserved: number;
}

declare class nd_opt_hdr {
  constructor(init?: nd_opt_hdr);
  nd_opt_type: number;
  nd_opt_len: number;
}

declare class bpf_version {
  constructor(init?: bpf_version);
  bv_major: number;
  bv_minor: number;
}

declare class ipovly {
  constructor(init?: ipovly);
  ih_x1: unknown /* const array */;
  ih_pr: number;
  ih_len: number;
  ih_src: in_addr;
  ih_dst: in_addr;
}

declare class sqlite3_stmt {
  constructor(init?: sqlite3_stmt);
}

declare class ifdevmtu {
  constructor(init?: ifdevmtu);
  ifdm_current: number;
  ifdm_min: number;
  ifdm_max: number;
}

declare class _OSUnalignedU32 {
  constructor(init?: _OSUnalignedU32);
  __val: number;
}

declare class nd_neighbor_solicit {
  constructor(init?: nd_neighbor_solicit);
  nd_ns_hdr: icmp6_hdr;
  nd_ns_target: in6_addr;
}

declare class __Reply__task_swap_mach_voucher_t {
  constructor(init?: __Reply__task_swap_mach_voucher_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  old_voucher: mach_msg_port_descriptor_t;
}

declare class thread_time_constraint_policy {
  constructor(init?: thread_time_constraint_policy);
  period: number;
  computation: number;
  constraint: number;
  preemptible: number;
}

declare class __Reply__host_swap_exception_ports_t {
  constructor(init?: __Reply__host_swap_exception_ports_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  old_handlerss: unknown /* const array */;
  NDR: NDR_record_t;
  masksCnt: number;
  masks: unknown /* const array */;
  old_behaviors: unknown /* const array */;
  old_flavors: unknown /* const array */;
}

declare class vm_info_region {
  constructor(init?: vm_info_region);
  vir_start: number;
  vir_end: number;
  vir_object: number;
  vir_offset: number;
  vir_needs_copy: number;
  vir_protection: number;
  vir_max_protection: number;
  vir_inheritance: number;
  vir_wired_count: number;
  vir_user_wired_count: number;
}

declare class nd_router_advert {
  constructor(init?: nd_router_advert);
  nd_ra_hdr: icmp6_hdr;
  nd_ra_reachable: number;
  nd_ra_retransmit: number;
}

declare class __Request__processor_set_stack_usage_t {
  constructor(init?: __Request__processor_set_stack_usage_t);
  Head: mach_msg_header_t;
}

declare class mbuf {
  constructor(init?: mbuf);
}

declare class __Reply__thread_terminate_t {
  constructor(init?: __Reply__thread_terminate_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class unnamed_11810500352046755208 {
  constructor(init?: unnamed_11810500352046755208);
  NV1_opcode: number;
  NV1_xid: number;
  NV1_text: unknown /* const array */;
  NV1_null: number;
}

declare class __sockopt {
  constructor(init?: __sockopt);
}

declare class __Request__task_get_assignment_t {
  constructor(init?: __Request__task_get_assignment_t);
  Head: mach_msg_header_t;
}

declare class vend {
  constructor(init?: vend);
  v_magic: unknown /* const array */;
  v_flags: number;
  v_unused: unknown /* const array */;
}

declare class __Request__thread_suspend_t {
  constructor(init?: __Request__thread_suspend_t);
  Head: mach_msg_header_t;
}

declare class udphdr {
  constructor(init?: udphdr);
  uh_sport: number;
  uh_dport: number;
  uh_ulen: number;
  uh_sum: number;
}

declare class rt_msghdr_prelude {
  constructor(init?: rt_msghdr_prelude);
  rtm_msglen: number;
}

declare class dyld_chained_ptr_64_rebase {
  constructor(init?: dyld_chained_ptr_64_rebase);
  target: number;
  high8: number;
  reserved: number;
  next: number;
  bind: number;
}

declare class sel {
  constructor(init?: sel);
  rpl: number;
  ti: number;
  index: number;
}

declare class _hist_entry {
  constructor(init?: _hist_entry);
  line: string | null;
  data: interop.Pointer;
}

declare class sadb_x_kmprivate {
  constructor(init?: sadb_x_kmprivate);
  sadb_x_kmprivate_len: number;
  sadb_x_kmprivate_exttype: number;
  sadb_x_kmprivate_reserved: number;
}

declare class sadb_spirange {
  constructor(init?: sadb_spirange);
  sadb_spirange_len: number;
  sadb_spirange_exttype: number;
  sadb_spirange_min: number;
  sadb_spirange_max: number;
  sadb_spirange_reserved: number;
}

declare class gzFile_s {
  constructor(init?: gzFile_s);
  have: number;
  next: interop.Pointer;
  pos: number;
}

declare class cups_job_s {
  constructor(init?: cups_job_s);
  id: number;
  dest: string | null;
  title: string | null;
  user: string | null;
  format: string | null;
  state: interop.Enum<typeof ipp_jstate_e>;
  size: number;
  priority: number;
  completed_time: number;
  creation_time: number;
  processing_time: number;
}

declare class sgttyb {
  constructor(init?: sgttyb);
  sg_ispeed: number;
  sg_ospeed: number;
  sg_erase: number;
  sg_kill: number;
  sg_flags: number;
}

declare class if_clonereq {
  constructor(init?: if_clonereq);
  ifcr_total: number;
  ifcr_count: number;
  ifcr_buffer: string | null;
}

declare class sadb_ident {
  constructor(init?: sadb_ident);
  sadb_ident_len: number;
  sadb_ident_exttype: number;
  sadb_ident_type: number;
  sadb_ident_reserved: number;
  sadb_ident_id: number;
}

declare class sadb_address {
  constructor(init?: sadb_address);
  sadb_address_len: number;
  sadb_address_exttype: number;
  sadb_address_proto: number;
  sadb_address_prefixlen: number;
  sadb_address_reserved: number;
}

declare class __Request__task_resume2_t {
  constructor(init?: __Request__task_resume2_t);
  Head: mach_msg_header_t;
}

declare class __Request__host_processor_set_priv_t {
  constructor(init?: __Request__host_processor_set_priv_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  set_name: mach_msg_port_descriptor_t;
}

declare class sadb_ext {
  constructor(init?: sadb_ext);
  sadb_ext_len: number;
  sadb_ext_type: number;
}

declare class ndrv_protocol_desc {
  constructor(init?: ndrv_protocol_desc);
  version: number;
  protocol_family: number;
  demux_count: number;
  demux_list: interop.Pointer;
}

declare class mach_port_guard_info {
  constructor(init?: mach_port_guard_info);
  mpgi_guard: number;
}

declare class ifnet_traffic_descriptor_inet {
  constructor(init?: ifnet_traffic_descriptor_inet);
  inet_common: ifnet_traffic_descriptor_common;
  inet_mask: number;
  inet_ipver: number;
  inet_proto: number;
  _reserved: number;
  inet_laddr: ifnet_ip_addr;
  inet_raddr: ifnet_ip_addr;
  inet_lport: number;
  inet_rport: number;
}

declare class ifnet_traffic_descriptor_eth {
  constructor(init?: ifnet_traffic_descriptor_eth);
  eth_common: ifnet_traffic_descriptor_common;
  eth_raddr: ether_addr;
  eth_type: number;
  eth_mask: number;
}

declare class gss_ctx_id_struct {
  constructor(init?: gss_ctx_id_struct);
}

declare class ifnet_interface_advisory_cell_context {
  constructor(init?: ifnet_interface_advisory_cell_context);
  radio_access_technology: number;
  reference_signal_level: number;
  signal_level: number;
  signal_quality: number;
  uplink_bler: number;
  downlink_bler: number;
  bandwidth_limitation_indication: number;
  cdrx_state: number;
  cdrx_cycle: number;
  estimated_outage_period: number;
  outage_state: number;
  __pad: number;
}

declare class __Request__thread_get_exception_ports_t {
  constructor(init?: __Request__thread_get_exception_ports_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  exception_mask: number;
}

declare class __darwin_ucontext64 {
  constructor(init?: __darwin_ucontext64);
  uc_onstack: number;
  uc_sigmask: number;
  uc_stack: __darwin_sigaltstack;
  uc_link: interop.Pointer;
  uc_mcsize: number;
  uc_mcontext64: interop.Pointer;
}

declare class ifnet_interface_advisory_capacity {
  constructor(init?: ifnet_interface_advisory_capacity);
  rate_trend_suggestion: interop.Enum<typeof ifnet_interface_advisory_rate_trend>;
  timestamp: number;
  max_bandwidth: number;
  total_byte_count: number;
  average_throughput: number;
  flushable_queue_size: number;
  non_flushable_queue_size: number;
  average_delay: number;
}

declare class ifnet_interface_advisory_header {
  constructor(init?: ifnet_interface_advisory_header);
  version: interop.Enum<typeof ifnet_interface_advisory_version>;
  direction: interop.Enum<typeof ifnet_interface_advisory_direction>;
  interface_type: interop.Enum<typeof ifnet_interface_advisory_interface_type>;
  notification_type: ifnet_interface_advisory_notification_type_t;
}

declare class in6_ifreq {
  constructor(init?: in6_ifreq);
  ifr_name: unknown /* const array */;
  ifr_ifru: unnamed_14588102091958030739;
}

declare class rpc_subsystem {
  constructor(init?: rpc_subsystem);
  reserved: interop.Pointer;
  start: number;
  end: number;
  maxsize: number;
  base_addr: number;
  routine: unknown /* const array */;
  arg_descriptor: unknown /* const array */;
}

declare class if_wifi_status {
  constructor(init?: if_wifi_status);
  if_wifi_u: unnamed_8068058173877573354;
}

declare class so_np_extensions {
  constructor(init?: so_np_extensions);
  npx_flags: number;
  npx_mask: number;
}

declare class if_cellular_status_v1 {
  constructor(init?: if_cellular_status_v1);
  valid_bitmask: number;
  link_quality_metric: number;
  ul_effective_bandwidth: number;
  ul_max_bandwidth: number;
  ul_min_latency: number;
  ul_effective_latency: number;
  ul_max_latency: number;
  ul_retxt_level: number;
  ul_bytes_lost: number;
  ul_min_queue_size: number;
  ul_avg_queue_size: number;
  ul_max_queue_size: number;
  dl_effective_bandwidth: number;
  dl_max_bandwidth: number;
  config_inactivity_time: number;
  config_backoff_time: number;
  mss_recommended: number;
  reserved_1: number;
  reserved_2: number;
  reserved_3: number;
  reserved_4: number;
  reserved_5: number;
  reserved_6: number;
}

declare class __Reply__vm_copy_t {
  constructor(init?: __Reply__vm_copy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__processor_set_create_t {
  constructor(init?: __Reply__processor_set_create_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  new_set: mach_msg_port_descriptor_t;
  new_name: mach_msg_port_descriptor_t;
}

declare class ifs_iso_8802_3 {
  constructor(init?: ifs_iso_8802_3);
  dot3StatsAlignmentErrors: number;
  dot3StatsFCSErrors: number;
  dot3StatsSingleCollisionFrames: number;
  dot3StatsMultipleCollisionFrames: number;
  dot3StatsSQETestErrors: number;
  dot3StatsDeferredTransmissions: number;
  dot3StatsLateCollisions: number;
  dot3StatsExcessiveCollisions: number;
  dot3StatsInternalMacTransmitErrors: number;
  dot3StatsCarrierSenseErrors: number;
  dot3StatsFrameTooLongs: number;
  dot3StatsInternalMacReceiveErrors: number;
  dot3StatsEtherChipSet: number;
  dot3StatsMissedFrames: number;
  dot3StatsCollFrequencies: unknown /* const array */;
  dot3Compliance: number;
}

declare class sadb_msg {
  constructor(init?: sadb_msg);
  sadb_msg_version: number;
  sadb_msg_type: number;
  sadb_msg_errno: number;
  sadb_msg_satype: number;
  sadb_msg_len: number;
  sadb_msg_reserved: number;
  sadb_msg_seq: number;
  sadb_msg_pid: number;
}

declare class ifmedia_description {
  constructor(init?: ifmedia_description);
  ifmt_word: number;
  ifmt_string: string | null;
}

declare class _krb5_ap_req {
  constructor(init?: _krb5_ap_req);
  magic: number;
  ap_options: number;
  ticket: interop.Pointer;
  authenticator: _krb5_enc_data;
}

declare class rlimit {
  constructor(init?: rlimit);
  rlim_cur: number;
  rlim_max: number;
}

declare class unnamed_8484498633780266126 {
  constructor(init?: unnamed_8484498633780266126);
  control: number;
  control_ext: number;
}

declare class unnamed_5031467857764340464 {
  constructor(init?: unnamed_5031467857764340464);
  control: number;
  org_code: unknown /* const array */;
  ether_type: number;
}

declare class unnamed_6607071774793166897 {
  constructor(init?: unnamed_6607071774793166897);
  control: number;
  format_id: number;
  class_id: number;
  window_x2: number;
}

declare class __Request__task_test_async_upcall_propagation_t {
  constructor(init?: __Request__task_test_async_upcall_propagation_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  port: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  qos: number;
  iotier: number;
}

declare class bpf_dltlist {
  constructor(init?: bpf_dltlist);
  bfl_len: number;
  bfl_u: unnamed_17575650201846781845;
}

declare class bpf_stat {
  constructor(init?: bpf_stat);
  bs_recv: number;
  bs_drop: number;
}

declare class DBM {
  constructor(init?: DBM);
  __opaque: unknown /* const array */;
}

declare class mach_header_64 {
  constructor(init?: mach_header_64);
  magic: number;
  cputype: number;
  cpusubtype: number;
  filetype: number;
  ncmds: number;
  sizeofcmds: number;
  flags: number;
  reserved: number;
}

declare class ldap_syntax {
  constructor(init?: ldap_syntax);
  syn_oid: string | null;
  syn_names: interop.Pointer;
  syn_desc: string | null;
  syn_extensions: interop.Pointer;
}

declare class datum {
  constructor(init?: datum);
  dptr: interop.Pointer;
  dsize: number;
}

declare class __Request__vm_allocate_cpm_t {
  constructor(init?: __Request__vm_allocate_cpm_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  task: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  flags: number;
}

declare class __darwin_arm_sve_z_state {
  constructor(init?: __darwin_arm_sve_z_state);
  __z: unknown /* const array */;
}

declare class UIDNAInfo {
  constructor(init?: UIDNAInfo);
  size: number;
  isTransitionalDifferent: number;
  reservedB3: number;
  errors: number;
  reservedI2: number;
  reservedI3: number;
}

declare class sadb_x_policy {
  constructor(init?: sadb_x_policy);
  sadb_x_policy_len: number;
  sadb_x_policy_exttype: number;
  sadb_x_policy_type: number;
  sadb_x_policy_dir: number;
  sadb_x_policy_reserved: number;
  sadb_x_policy_id: number;
  sadb_x_policy_reserved2: number;
}

declare class history {
  constructor(init?: history);
}

declare class iconv_fallbacks {
  constructor(init?: iconv_fallbacks);
  mb_to_uc_fallback: (p1: string, p2: number, p3: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, p4: interop.PointerConvertible, p5: interop.PointerConvertible) => void | null;
  uc_to_mb_fallback: (p1: number, p2: (p1: string, p2: number, p3: interop.PointerConvertible) => void, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => void | null;
  mb_to_wc_fallback: (p1: string, p2: number, p3: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, p4: interop.PointerConvertible, p5: interop.PointerConvertible) => void | null;
  wc_to_mb_fallback: (p1: number, p2: (p1: string, p2: number, p3: interop.PointerConvertible) => void, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => void | null;
  data: interop.Pointer;
}

declare class __Request__mach_port_get_service_port_info_t {
  constructor(init?: __Request__mach_port_get_service_port_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
}

declare class mach_msg_type_descriptor_t {
  constructor(init?: mach_msg_type_descriptor_t);
  pad1: number;
  pad2: number;
  pad3: number;
  type: number;
}

declare class DIR {
  constructor(init?: DIR);
  __dd_fd: number;
  __dd_loc: number;
  __dd_size: number;
  __dd_buf: string | null;
  __dd_len: number;
  __dd_seek: number;
  __padding: number;
  __dd_flags: number;
  __dd_lock: _opaque_pthread_mutex_t;
  __dd_td: interop.Pointer;
}

declare class __Reply__mach_port_dnrequest_info_t {
  constructor(init?: __Reply__mach_port_dnrequest_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  dnr_total: number;
  dnr_used: number;
}

declare class dirent {
  constructor(init?: dirent);
  d_ino: number;
  d_seekoff: number;
  d_reclen: number;
  d_namlen: number;
  d_type: number;
  d_name: unknown /* const array */;
}

declare class rt_addrinfo {
  constructor(init?: rt_addrinfo);
  rti_addrs: number;
  rti_info: unknown /* const array */;
}

declare class task_ipc_space_policy_info {
  constructor(init?: task_ipc_space_policy_info);
  space_policy: number;
}

declare class __Request__host_statistics_t {
  constructor(init?: __Request__host_statistics_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  host_info_outCnt: number;
}

declare class ifconf {
  constructor(init?: ifconf);
  ifc_len: number;
  ifc_ifcu: unnamed_15315128086020544945;
}

declare class aiocb {
  constructor(init?: aiocb);
  aio_fildes: number;
  aio_offset: number;
  aio_buf: interop.Pointer;
  aio_nbytes: number;
  aio_reqprio: number;
  aio_sigevent: sigevent;
  aio_lio_opcode: number;
}

declare class vm_info_object {
  constructor(init?: vm_info_object);
  vio_object: number;
  vio_size: number;
  vio_ref_count: number;
  vio_resident_page_count: number;
  vio_absent_count: number;
  vio_copy: number;
  vio_shadow: number;
  vio_shadow_offset: number;
  vio_paging_offset: number;
  vio_copy_strategy: number;
  vio_last_alloc: number;
  vio_paging_in_progress: number;
  vio_pager_created: number;
  vio_pager_initialized: number;
  vio_pager_ready: number;
  vio_can_persist: number;
  vio_internal: number;
  vio_temporary: number;
  vio_alive: number;
  vio_purgable: number;
  vio_purgable_volatile: number;
}

declare class stackshot_cpu_architecture {
  constructor(init?: stackshot_cpu_architecture);
  cputype: number;
  cpusubtype: number;
}

declare class utmp {
  constructor(init?: utmp);
  ut_line: unknown /* const array */;
  ut_name: unknown /* const array */;
  ut_host: unknown /* const array */;
  ut_time: number;
}

declare class passwd {
  constructor(init?: passwd);
  pw_name: string | null;
  pw_passwd: string | null;
  pw_uid: number;
  pw_gid: number;
  pw_change: number;
  pw_class: string | null;
  pw_gecos: string | null;
  pw_dir: string | null;
  pw_shell: string | null;
  pw_expire: number;
}

declare class unw_addr_space {
  constructor(init?: unw_addr_space);
}

declare class au_sdev_handle {
  constructor(init?: au_sdev_handle);
  ash_fp: interop.Pointer;
  ash_buf: interop.Pointer;
  ash_reclen: number;
  ash_bytesread: number;
}

declare class __arm_pagein_state {
  constructor(init?: __arm_pagein_state);
  __pagein_error: number;
}

declare class _copyfile_state {
  constructor(init?: _copyfile_state);
}

declare class malloc_statistics_t {
  constructor(init?: malloc_statistics_t);
  blocks_in_use: number;
  size_in_use: number;
  max_size_in_use: number;
  size_allocated: number;
}

declare class au_tid64 {
  constructor(init?: au_tid64);
  port: number;
  addr: number;
}

declare class vm_range_t {
  constructor(init?: vm_range_t);
  address: number;
  size: number;
}

declare class pshm_fdinfo {
  constructor(init?: pshm_fdinfo);
  pfi: proc_fileinfo;
  pshminfo: pshm_info;
}

declare class unnamed_19794695260905054 {
  constructor(init?: unnamed_19794695260905054);
  hash: number;
  summary: malloc_type_summary_v0_t;
}

declare class malloc_type_summary_v0_t {
  constructor(init?: malloc_type_summary_v0_t);
  version: number;
  reserved_0: number;
  callsite_flags: interop.Enum<typeof malloc_type_callsite_flags_v0_t>;
  type_kind: interop.Enum<typeof malloc_type_kind_v0_t>;
  reserved_1: number;
  layout_semantics: malloc_type_layout_semantics_v0_t;
}

declare class unnamed_10345764527954279368 {
  constructor(init?: unnamed_10345764527954279368);
  opaque1: interop.Pointer;
  opaque2: interop.Pointer;
  opaque3: number;
}

declare class objc_super {
  constructor(init?: objc_super);
  receiver: interop.Object | null;
  super_class: interop.Object | null;
}

declare class __Reply__mach_port_request_notification_t {
  constructor(init?: __Reply__mach_port_request_notification_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  previous: mach_msg_port_descriptor_t;
}

declare class objc_method_list {
  constructor(init?: objc_method_list);
}

declare class __Reply__clock_alarm_reply_t {
  constructor(init?: __Reply__clock_alarm_reply_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class encryption_info_command_64 {
  constructor(init?: encryption_info_command_64);
  cmd: number;
  cmdsize: number;
  cryptoff: number;
  cryptsize: number;
  cryptid: number;
  pad: number;
}

declare class ipt_ta {
  constructor(init?: ipt_ta);
  ipt_addr: in_addr;
  ipt_time: number;
}

declare class objc_method {
  constructor(init?: objc_method);
}

declare class os_unfair_lock_s {
  constructor(init?: os_unfair_lock_s);
  _os_unfair_lock_opaque: number;
}

declare class os_log_s {
  constructor(init?: os_log_s);
}

declare class _profile_t {
  constructor(init?: _profile_t);
}

declare class os_activity_s {
  constructor(init?: os_activity_s);
}

declare class __Request__task_set_emulation_t {
  constructor(init?: __Request__task_set_emulation_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  routine_entry_pt: number;
  routine_number: number;
}

declare class processor_set_load_info {
  constructor(init?: processor_set_load_info);
  task_count: number;
  thread_count: number;
  load_average: number;
  mach_factor: number;
}

declare class unnamed_9663503115628685357 {
  constructor(init?: unnamed_9663503115628685357);
  start: number;
  length: number;
}

declare class __Request__processor_set_tasks_with_flavor_t {
  constructor(init?: __Request__processor_set_tasks_with_flavor_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
}

declare class dyld_aot_image_info {
  constructor(init?: dyld_aot_image_info);
  x86LoadAddress: interop.Pointer;
  aotLoadAddress: interop.Pointer;
  aotImageSize: number;
  aotImageKey: unknown /* const array */;
}

declare class dyld_image_info {
  constructor(init?: dyld_image_info);
  imageLoadAddress: interop.Pointer;
  imageFilePath: string | null;
  imageFileModDate: number;
}

declare class __Request__task_wire_t {
  constructor(init?: __Request__task_wire_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  must_wire: number;
}

declare class __NSSymbol {
  constructor(init?: __NSSymbol);
}

declare class iconv_allocation_t {
  constructor(init?: iconv_allocation_t);
  spaceholder: unknown /* const array */;
}

declare class scattered_relocation_info {
  constructor(init?: scattered_relocation_info);
  r_address: number;
  r_type: number;
  r_length: number;
  r_pcrel: number;
  r_scattered: number;
  r_value: number;
}

declare class __Request__thread_get_state_t {
  constructor(init?: __Request__thread_get_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  old_stateCnt: number;
}

declare class relocation_info {
  constructor(init?: relocation_info);
  r_address: number;
  r_symbolnum: number;
  r_pcrel: number;
  r_length: number;
  r_extern: number;
  r_type: number;
}

declare class nlist_64 {
  constructor(init?: nlist_64);
  n_un: unnamed_996628347941081396;
  n_type: number;
  n_sect: number;
  n_desc: number;
  n_value: number;
}

declare class __Request__mach_vm_range_create_t {
  constructor(init?: __Request__mach_vm_range_create_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: interop.Enum<typeof mach_vm_range_flavor_t>;
  recipesCnt: number;
  recipes: unknown /* const array */;
}

declare class nlist {
  constructor(init?: nlist);
  n_un: unnamed_9415269503247588239;
  n_type: number;
  n_sect: number;
  n_desc: number;
  n_value: number;
}

declare class __Request__mach_port_guard_t {
  constructor(init?: __Request__mach_port_guard_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  guard: number;
  strict: number;
}

declare class editline {
  constructor(init?: editline);
}

declare class encryption_info_command {
  constructor(init?: encryption_info_command);
  cmd: number;
  cmdsize: number;
  cryptoff: number;
  cryptsize: number;
  cryptid: number;
}

declare class dyld_chained_import_addend64 {
  constructor(init?: dyld_chained_import_addend64);
  lib_ordinal: number;
  weak_import: number;
  reserved: number;
  name_offset: number;
  addend: number;
}

declare class persona_token {
  constructor(init?: persona_token);
  originator: proc_persona_info;
  proximate: proc_persona_info;
}

declare class dyld_chained_ptr_32_firmware_rebase {
  constructor(init?: dyld_chained_ptr_32_firmware_rebase);
  target: number;
  next: number;
}

declare class mymsg {
  constructor(init?: mymsg);
  mtype: number;
  mtext: unknown /* const array */;
}

declare class __NSObjectFileImage {
  constructor(init?: __NSObjectFileImage);
}

declare class simd_half3x2 {
  constructor(init?: simd_half3x2);
  columns: unknown /* const array */;
}

declare class netfs_status {
  constructor(init?: netfs_status);
  ns_status: number;
  ns_mountopts: unknown /* const array */;
  ns_waittime: number;
  ns_threadcount: number;
  ns_threadids: unknown /* const array */;
}

declare class __msfilterreq {
  constructor(init?: __msfilterreq);
  msfr_ifindex: number;
  msfr_fmode: number;
  msfr_nsrcs: number;
  __msfr_align: number;
  msfr_group: sockaddr_storage;
  msfr_srcs: interop.Pointer;
}

declare class __Reply__processor_set_default_t {
  constructor(init?: __Reply__processor_set_default_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  default_set: mach_msg_port_descriptor_t;
}

declare class dyld_chained_ptr_32_bind {
  constructor(init?: dyld_chained_ptr_32_bind);
  ordinal: number;
  addend: number;
  next: number;
  bind: number;
}

declare class unnamed_6774222680078317929 {
  constructor(init?: unnamed_6774222680078317929);
  __p_forw: interop.Pointer;
  __p_back: interop.Pointer;
}

declare class dyld_chained_ptr_64_bind {
  constructor(init?: dyld_chained_ptr_64_bind);
  ordinal: number;
  addend: number;
  reserved: number;
  next: number;
  bind: number;
}

declare class extern_proc {
  constructor(init?: extern_proc);
  p_un: unnamed_15062008226319036936;
  p_vmspace: interop.Pointer;
  p_sigacts: interop.Pointer;
  p_flag: number;
  p_stat: number;
  p_pid: number;
  p_oppid: number;
  p_dupfd: number;
  user_stack: string | null;
  exit_thread: interop.Pointer;
  p_debugger: number;
  sigwait: number;
  p_estcpu: number;
  p_cpticks: number;
  p_pctcpu: number;
  p_wchan: interop.Pointer;
  p_wmesg: string | null;
  p_swtime: number;
  p_slptime: number;
  p_realtimer: itimerval;
  p_rtime: timeval;
  p_uticks: number;
  p_sticks: number;
  p_iticks: number;
  p_traceflag: number;
  p_tracep: interop.Pointer;
  p_siglist: number;
  p_textvp: interop.Pointer;
  p_holdcnt: number;
  p_sigmask: number;
  p_sigignore: number;
  p_sigcatch: number;
  p_priority: number;
  p_usrpri: number;
  p_nice: number;
  p_comm: unknown /* const array */;
  p_pgrp: interop.Pointer;
  p_addr: interop.Pointer;
  p_xstat: number;
  p_acflag: number;
  p_ru: interop.Pointer;
}

declare class itimerval {
  constructor(init?: itimerval);
  it_interval: timeval;
  it_value: timeval;
}

declare class dyld_chained_ptr_arm64e_bind24 {
  constructor(init?: dyld_chained_ptr_arm64e_bind24);
  ordinal: number;
  zero: number;
  addend: number;
  next: number;
  bind: number;
  auth: number;
}

declare class glob_t {
  constructor(init?: glob_t);
  gl_pathc: number;
  gl_matchc: number;
  gl_offs: number;
  gl_flags: number;
  gl_pathv: interop.Pointer;
  gl_closedir: (p1: interop.PointerConvertible) => void | null;
  gl_readdir: (p1: interop.PointerConvertible) => interop.Pointer | null;
  gl_opendir: (p1: string) => interop.Pointer | null;
  gl_lstat: (p1: string, p2: interop.PointerConvertible) => number | null;
  gl_stat: (p1: string, p2: interop.PointerConvertible) => number | null;
}

declare class mach_port_options {
  constructor(init?: mach_port_options);
  flags: number;
  mpl: mach_port_limits;
}

declare class dyld_chained_ptr_arm64e_bind {
  constructor(init?: dyld_chained_ptr_arm64e_bind);
  ordinal: number;
  zero: number;
  addend: number;
  next: number;
  bind: number;
  auth: number;
}

declare class xsw_usage {
  constructor(init?: xsw_usage);
  xsu_total: number;
  xsu_avail: number;
  xsu_used: number;
  xsu_pagesize: number;
  xsu_encrypted: number;
}

declare class dyld_chained_import_addend {
  constructor(init?: dyld_chained_import_addend);
  lib_ordinal: number;
  weak_import: number;
  name_offset: number;
  addend: number;
}

declare class dyld_chained_fixups_header {
  constructor(init?: dyld_chained_fixups_header);
  fixups_version: number;
  starts_offset: number;
  imports_offset: number;
  symbols_offset: number;
  imports_count: number;
  imports_format: number;
  symbols_format: number;
}

declare class uuid_command {
  constructor(init?: uuid_command);
  cmd: number;
  cmdsize: number;
  uuid: unknown /* const array */;
}

declare class data_in_code_entry {
  constructor(init?: data_in_code_entry);
  offset: number;
  length: number;
  kind: number;
}

declare class _krb5_verify_init_creds_opt {
  constructor(init?: _krb5_verify_init_creds_opt);
  flags: number;
  ap_req_nofail: number;
}

declare class lldiv_t {
  constructor(init?: lldiv_t);
  quot: number;
  rem: number;
}

declare class symseg_command {
  constructor(init?: symseg_command);
  cmd: number;
  cmdsize: number;
  offset: number;
  size: number;
}

declare class proc_threadinfo {
  constructor(init?: proc_threadinfo);
  pth_user_time: number;
  pth_system_time: number;
  pth_cpu_usage: number;
  pth_policy: number;
  pth_run_state: number;
  pth_flags: number;
  pth_sleep_time: number;
  pth_curpri: number;
  pth_priority: number;
  pth_maxpriority: number;
  pth_name: unknown /* const array */;
}

declare class ether_arp {
  constructor(init?: ether_arp);
  ea_hdr: arphdr;
  arp_sha: unknown /* const array */;
  arp_spa: unknown /* const array */;
  arp_tha: unknown /* const array */;
  arp_tpa: unknown /* const array */;
}

declare class sadb_x_ipsecrequest {
  constructor(init?: sadb_x_ipsecrequest);
  sadb_x_ipsecrequest_len: number;
  sadb_x_ipsecrequest_proto: number;
  sadb_x_ipsecrequest_mode: number;
  sadb_x_ipsecrequest_level: number;
  sadb_x_ipsecrequest_reqid: number;
}

declare class build_tool_version {
  constructor(init?: build_tool_version);
  tool: number;
  version: number;
}

declare class tsegqe_head {
  constructor(init?: tsegqe_head);
  lh_first: number;
}

declare class dyld_chained_ptr_arm64e_auth_bind24 {
  constructor(init?: dyld_chained_ptr_arm64e_auth_bind24);
  ordinal: number;
  zero: number;
  diversity: number;
  addrDiv: number;
  key: number;
  next: number;
  bind: number;
  auth: number;
}

declare class build_version_command {
  constructor(init?: build_version_command);
  cmd: number;
  cmdsize: number;
  platform: number;
  minos: number;
  sdk: number;
  ntools: number;
}

declare class __Reply__mach_port_move_member_t {
  constructor(init?: __Reply__mach_port_move_member_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class au_token {
  constructor(init?: au_token);
  t_data: interop.Pointer;
  len: number;
  tokens: unnamed_18415285912629137323;
}

declare class linkedit_data_command {
  constructor(init?: linkedit_data_command);
  cmd: number;
  cmdsize: number;
  dataoff: number;
  datasize: number;
}

declare class prebind_cksum_command {
  constructor(init?: prebind_cksum_command);
  cmd: number;
  cmdsize: number;
  cksum: number;
}

declare class dylib_module_64 {
  constructor(init?: dylib_module_64);
  module_name: number;
  iextdefsym: number;
  nextdefsym: number;
  irefsym: number;
  nrefsym: number;
  ilocalsym: number;
  nlocalsym: number;
  iextrel: number;
  nextrel: number;
  iinit_iterm: number;
  ninit_nterm: number;
  objc_module_info_size: number;
  objc_module_info_addr: number;
}

declare class ifkpi {
  constructor(init?: ifkpi);
  ifk_module_id: number;
  ifk_type: number;
  ifk_data: unnamed_12046250409009717709;
}

declare class mach_zone_name {
  constructor(init?: mach_zone_name);
  mzn_name: unknown /* const array */;
}

declare class twolevel_hint {
  constructor(init?: twolevel_hint);
  isub_image: number;
  itoc: number;
}

declare class in6_addr {
  constructor(init?: in6_addr);
  __u6_addr: unnamed_13006139579446832142;
}

declare class wordexp_t {
  constructor(init?: wordexp_t);
  we_wordc: number;
  we_wordv: interop.Pointer;
  we_offs: number;
}

declare class routines_command {
  constructor(init?: routines_command);
  cmd: number;
  cmdsize: number;
  init_address: number;
  init_module: number;
  reserved1: number;
  reserved2: number;
  reserved3: number;
  reserved4: number;
  reserved5: number;
  reserved6: number;
}

declare class dylinker_command {
  constructor(init?: dylinker_command);
  cmd: number;
  cmdsize: number;
  name: lc_str;
}

declare class HistEvent {
  constructor(init?: HistEvent);
  num: number;
  str: string | null;
}

declare class gss_krb5_lucid_key {
  constructor(init?: gss_krb5_lucid_key);
  type: number;
  length: number;
  data: interop.Pointer;
}

declare class __Reply__mach_memory_entry_ownership_t {
  constructor(init?: __Reply__mach_memory_entry_ownership_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class sub_client_command {
  constructor(init?: sub_client_command);
  cmd: number;
  cmdsize: number;
  client: lc_str;
}

declare class prf_rr {
  constructor(init?: prf_rr);
  decrvalid: number;
  decrprefd: number;
  reserved: number;
}

declare class dylib_use_command {
  constructor(init?: dylib_use_command);
  cmd: number;
  cmdsize: number;
  nameoff: number;
  marker: number;
  current_version: number;
  compat_version: number;
  flags: number;
}

declare class dylib {
  constructor(init?: dylib);
  name: lc_str;
  timestamp: number;
  current_version: number;
  compatibility_version: number;
}

declare class fvmlib {
  constructor(init?: fvmlib);
  name: lc_str;
  minor_version: number;
  header_addr: number;
}

declare class task_flags_info {
  constructor(init?: task_flags_info);
  flags: number;
}

declare class __sockaddr_header {
  constructor(init?: __sockaddr_header);
  sa_len: number;
  sa_family: number;
}

declare class tcphdr {
  constructor(init?: tcphdr);
  th_sport: number;
  th_dport: number;
  th_seq: number;
  th_ack: number;
  th_x2: number;
  th_off: number;
  th_flags: number;
  th_win: number;
  th_sum: number;
  th_urp: number;
}

declare class __Reply__host_get_exception_ports_t {
  constructor(init?: __Reply__host_get_exception_ports_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  old_handlers: unknown /* const array */;
  NDR: NDR_record_t;
  masksCnt: number;
  masks: unknown /* const array */;
  old_behaviors: unknown /* const array */;
  old_flavors: unknown /* const array */;
}

declare class vm_region_basic_info {
  constructor(init?: vm_region_basic_info);
  protection: number;
  max_protection: number;
  inheritance: number;
  shared: number;
  reserved: number;
  offset: number;
  behavior: number;
  user_wired_count: number;
}

declare class mach_zone_info_data {
  constructor(init?: mach_zone_info_data);
  mzi_count: number;
  mzi_cur_size: number;
  mzi_max_size: number;
  mzi_elem_size: number;
  mzi_alloc_size: number;
  mzi_sum_size: number;
  mzi_exhaustible: number;
  mzi_collectable: number;
}

declare class utun_stats_param {
  constructor(init?: utun_stats_param);
  utsp_packets: number;
  utsp_bytes: number;
  utsp_errors: number;
}

declare class section {
  constructor(init?: section);
  sectname: unknown /* const array */;
  segname: unknown /* const array */;
  addr: number;
  size: number;
  offset: number;
  align: number;
  reloff: number;
  nreloc: number;
  flags: number;
  reserved1: number;
  reserved2: number;
}

declare class os_workgroup_interval_data_opaque_s {
  constructor(init?: os_workgroup_interval_data_opaque_s);
  sig: number;
  opaque: unknown /* const array */;
}

declare class __Request__mach_vm_page_info_t {
  constructor(init?: __Request__mach_vm_page_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  flavor: number;
  infoCnt: number;
}

declare class segment_command_64 {
  constructor(init?: segment_command_64);
  cmd: number;
  cmdsize: number;
  segname: unknown /* const array */;
  vmaddr: number;
  vmsize: number;
  fileoff: number;
  filesize: number;
  maxprot: number;
  initprot: number;
  nsects: number;
  flags: number;
}

declare class stackshot_thread_turnstileinfo_v2 {
  constructor(init?: stackshot_thread_turnstileinfo_v2);
  waiter: number;
  turnstile_context: number;
  turnstile_priority: number;
  number_of_hops: number;
  turnstile_flags: number;
  portlabel_id: number;
}

declare class kcdata_iter {
  constructor(init?: kcdata_iter);
  item: interop.Pointer;
  end: interop.Pointer;
}

declare class codesigning_exit_reason_info {
  constructor(init?: codesigning_exit_reason_info);
  ceri_virt_addr: number;
  ceri_file_offset: number;
  ceri_pathname: unknown /* const array */;
  ceri_filename: unknown /* const array */;
  ceri_codesig_modtime_secs: number;
  ceri_codesig_modtime_nsecs: number;
  ceri_page_modtime_secs: number;
  ceri_page_modtime_nsecs: number;
  ceri_path_truncated: number;
  ceri_object_codesigned: number;
  ceri_page_codesig_validated: number;
  ceri_page_codesig_tainted: number;
  ceri_page_codesig_nx: number;
  ceri_page_wpmapped: number;
  ceri_page_slid: number;
  ceri_page_dirty: number;
  ceri_page_shadow_depth: number;
}

declare class rpath_command {
  constructor(init?: rpath_command);
  cmd: number;
  cmdsize: number;
  path: lc_str;
}

declare class __Request__processor_set_tasks_t {
  constructor(init?: __Request__processor_set_tasks_t);
  Head: mach_msg_header_t;
}

declare class __Reply__task_resume2_t {
  constructor(init?: __Reply__task_resume2_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class _krb5_db_entry_new {
  constructor(init?: _krb5_db_entry_new);
}

declare class ppd_cparam_s {
  constructor(init?: ppd_cparam_s);
  name: unknown /* const array */;
  text: unknown /* const array */;
  order: number;
  type: interop.Enum<typeof ppd_cptype_e>;
  minimum: ppd_cplimit_u;
  maximum: ppd_cplimit_u;
  current: ppd_cpvalue_u;
}

declare class ldap_apifeature_info {
  constructor(init?: ldap_apifeature_info);
  ldapaif_info_version: number;
  ldapaif_name: string | null;
  ldapaif_version: number;
}

declare class gss_OID_desc_struct {
  constructor(init?: gss_OID_desc_struct);
  length: number;
  elements: interop.Pointer;
}

declare class crashinfo_task_security_config {
  constructor(init?: crashinfo_task_security_config);
  task_security_config: number;
}

declare class crashinfo_mb {
  constructor(init?: crashinfo_mb);
  start_address: number;
  data: unknown /* const array */;
}

declare class gss_OID_set_desc_struct {
  constructor(init?: gss_OID_set_desc_struct);
  count: number;
  elements: interop.Pointer;
}

declare class _krb5_tkt_authent {
  constructor(init?: _krb5_tkt_authent);
  magic: number;
  ticket: interop.Pointer;
  authenticator: interop.Pointer;
  ap_options: number;
}

declare class xucred {
  constructor(init?: xucred);
  cr_version: number;
  cr_uid: number;
  cr_ngroups: number;
  cr_groups: unknown /* const array */;
}

declare class NXHashTablePrototype {
  constructor(init?: NXHashTablePrototype);
  hash: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  isEqual: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  free: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void | null;
  style: number;
}

declare class exclave_textlayout_info {
  constructor(init?: exclave_textlayout_info);
  layout_id: number;
  etl_flags: number;
  sharedcache_index: number;
}

declare class socket_info {
  constructor(init?: socket_info);
  soi_stat: vinfo_stat;
  soi_so: number;
  soi_pcb: number;
  soi_type: number;
  soi_protocol: number;
  soi_family: number;
  soi_options: number;
  soi_linger: number;
  soi_state: number;
  soi_qlen: number;
  soi_incqlen: number;
  soi_qlimit: number;
  soi_timeo: number;
  soi_error: number;
  soi_oobmark: number;
  soi_rcv: sockbuf_info;
  soi_snd: sockbuf_info;
  soi_kind: number;
  rfu_1: number;
  soi_proto: unnamed_3933339760615492547;
}

declare class ip6_hdrctl {
  constructor(init?: ip6_hdrctl);
  ip6_un1_flow: number;
  ip6_un1_plen: number;
  ip6_un1_nxt: number;
  ip6_un1_hlim: number;
}

declare class task_vm_info {
  constructor(init?: task_vm_info);
  virtual_size: number;
  region_count: number;
  page_size: number;
  resident_size: number;
  resident_size_peak: number;
  device: number;
  device_peak: number;
  internal: number;
  internal_peak: number;
  external: number;
  external_peak: number;
  reusable: number;
  reusable_peak: number;
  purgeable_volatile_pmap: number;
  purgeable_volatile_resident: number;
  purgeable_volatile_virtual: number;
  compressed: number;
  compressed_peak: number;
  compressed_lifetime: number;
  phys_footprint: number;
  min_address: number;
  max_address: number;
  ledger_phys_footprint_peak: number;
  ledger_purgeable_nonvolatile: number;
  ledger_purgeable_novolatile_compressed: number;
  ledger_purgeable_volatile: number;
  ledger_purgeable_volatile_compressed: number;
  ledger_tag_network_nonvolatile: number;
  ledger_tag_network_nonvolatile_compressed: number;
  ledger_tag_network_volatile: number;
  ledger_tag_network_volatile_compressed: number;
  ledger_tag_media_footprint: number;
  ledger_tag_media_footprint_compressed: number;
  ledger_tag_media_nofootprint: number;
  ledger_tag_media_nofootprint_compressed: number;
  ledger_tag_graphics_footprint: number;
  ledger_tag_graphics_footprint_compressed: number;
  ledger_tag_graphics_nofootprint: number;
  ledger_tag_graphics_nofootprint_compressed: number;
  ledger_tag_neural_footprint: number;
  ledger_tag_neural_footprint_compressed: number;
  ledger_tag_neural_nofootprint: number;
  ledger_tag_neural_nofootprint_compressed: number;
  limit_bytes_remaining: number;
  decompressions: number;
  ledger_swapins: number;
  ledger_tag_neural_nofootprint_total: number;
  ledger_tag_neural_nofootprint_peak: number;
}

declare class host_cpu_load_info {
  constructor(init?: host_cpu_load_info);
  cpu_ticks: unknown /* const array */;
}

declare class __Request__host_request_notification_t {
  constructor(init?: __Request__host_request_notification_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  notify_port: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  notify_type: number;
}

declare class exclave_addressspace_info {
  constructor(init?: exclave_addressspace_info);
  eas_id: number;
  eas_flags: number;
  eas_layoutid: number;
  eas_slide: number;
  eas_asroot: number;
}

declare class __Reply__mach_port_get_srights_t {
  constructor(init?: __Reply__mach_port_get_srights_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  srights: number;
}

declare class exclave_ipcstackentry_info {
  constructor(init?: exclave_ipcstackentry_info);
  eise_asid: number;
  eise_tnid: number;
  eise_invocationid: number;
  eise_flags: number;
}

declare class policy_rr_info {
  constructor(init?: policy_rr_info);
  max_priority: number;
  base_priority: number;
  quantum: number;
  depressed: number;
  depress_priority: number;
}

declare class thread_exclaves_info {
  constructor(init?: thread_exclaves_info);
  tei_scid: number;
  tei_thread_offset: number;
  tei_flags: number;
}

declare class stat {
  constructor(init?: stat);
  st_dev: number;
  st_mode: number;
  st_nlink: number;
  st_ino: number;
  st_uid: number;
  st_gid: number;
  st_rdev: number;
  st_atimespec: timespec;
  st_mtimespec: timespec;
  st_ctimespec: timespec;
  st_birthtimespec: timespec;
  st_size: number;
  st_blocks: number;
  st_blksize: number;
  st_flags: number;
  st_gen: number;
  st_lspare: number;
  st_qspare: unknown /* const array */;
}

declare class unnamed_11037506293861388547 {
  constructor(init?: unnamed_11037506293861388547);
  num_snd_x2: number;
  num_rcv_x2: number;
}

declare class __darwin_mcontext32 {
  constructor(init?: __darwin_mcontext32);
  __es: __darwin_arm_exception_state;
  __ss: __darwin_arm_thread_state;
  __fs: __darwin_arm_vfp_state;
}

declare class stackshot_suspension_info {
  constructor(init?: stackshot_suspension_info);
  tss_last_start: number;
  tss_last_end: number;
  tss_count: number;
  tss_duration: number;
}

declare class __Request__vm_region_t {
  constructor(init?: __Request__vm_region_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  flavor: number;
  infoCnt: number;
}

declare class addrinfo {
  constructor(init?: addrinfo);
  ai_flags: number;
  ai_family: number;
  ai_socktype: number;
  ai_protocol: number;
  ai_addrlen: number;
  ai_canonname: string | null;
  ai_addr: interop.Pointer;
  ai_next: interop.Pointer;
}

declare class JournalInfoBlock {
  constructor(init?: JournalInfoBlock);
  flags: number;
  device_signature: unknown /* const array */;
  offset: number;
  size: number;
  ext_jnl_uuid: unknown /* const array */;
  machine_serial_num: unknown /* const array */;
  reserved: unknown /* const array */;
}

declare class stackshot_latency_task {
  constructor(init?: stackshot_latency_task);
  task_uniqueid: number;
  setup_latency: number;
  task_thread_count_loop_latency: number;
  task_thread_data_loop_latency: number;
  cur_tsnap_latency: number;
  pmap_latency: number;
  bsd_proc_ids_latency: number;
  misc_latency: number;
  misc2_latency: number;
  end_latency: number;
}

declare class stackshot_latency_buffer {
  constructor(init?: stackshot_latency_buffer);
  cluster_type: number;
  size: number;
  used: number;
  overhead: number;
}

declare class proc_workqueueinfo {
  constructor(init?: proc_workqueueinfo);
  pwq_nthreads: number;
  pwq_runthreads: number;
  pwq_blockedthreads: number;
  pwq_state: number;
}

declare class sembuf {
  constructor(init?: sembuf);
  sem_num: number;
  sem_op: number;
  sem_flg: number;
}

declare class task_qos_policy {
  constructor(init?: task_qos_policy);
  task_latency_qos_tier: number;
  task_throughput_qos_tier: number;
}

declare class stackshot_latency_collection_v2 {
  constructor(init?: stackshot_latency_collection_v2);
  latency_version: number;
  setup_latency_mt: number;
  total_task_iteration_latency_mt: number;
  total_terminated_task_iteration_latency_mt: number;
  task_queue_building_latency_mt: number;
  terminated_task_queue_building_latency_mt: number;
  cpu_wait_latency_mt: number;
  main_cpu_number: number;
  calling_cpu_number: number;
  buffer_size: number;
  buffer_used: number;
  buffer_overhead: number;
  buffer_count: number;
}

declare class kmod_info {
  constructor(init?: kmod_info);
  next: interop.Pointer;
  info_version: number;
  id: number;
  name: unknown /* const array */;
  version: unknown /* const array */;
  reference_count: number;
  reference_list: interop.Pointer;
  address: number;
  size: number;
  hdr_size: number;
  start: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  stop: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
}

declare class stack_snapshot_stacktop {
  constructor(init?: stack_snapshot_stacktop);
  sp: number;
  stack_contents: unknown /* const array */;
}

declare class __Reply__task_set_info_t {
  constructor(init?: __Reply__task_set_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class proc_ident {
  constructor(init?: proc_ident);
}

declare class rt_msghdr2 {
  constructor(init?: rt_msghdr2);
  rtm_msglen: number;
  rtm_version: number;
  rtm_type: number;
  rtm_index: number;
  rtm_flags: number;
  rtm_addrs: number;
  rtm_refcnt: number;
  rtm_parentflags: number;
  rtm_reserved: number;
  rtm_use: number;
  rtm_inits: number;
  rtm_rmx: rt_metrics;
}

declare class newah {
  constructor(init?: newah);
  ah_nxt: number;
  ah_len: number;
  ah_reserve: number;
  ah_spi: number;
  ah_seq: number;
}

declare class stackshot_thread_turnstileinfo {
  constructor(init?: stackshot_thread_turnstileinfo);
  waiter: number;
  turnstile_context: number;
  turnstile_priority: number;
  number_of_hops: number;
  turnstile_flags: number;
}

declare class stackshot_thread_waitinfo_v2 {
  constructor(init?: stackshot_thread_waitinfo_v2);
  owner: number;
  waiter: number;
  context: number;
  wait_type: number;
  portlabel_id: number;
  wait_flags: number;
}

declare class stackshot_thread_waitinfo {
  constructor(init?: stackshot_thread_waitinfo);
  owner: number;
  waiter: number;
  context: number;
  wait_type: number;
}

declare class icmp6_namelookup {
  constructor(init?: icmp6_namelookup);
  icmp6_nl_hdr: icmp6_hdr;
  icmp6_nl_nonce: unknown /* const array */;
  icmp6_nl_ttl: number;
}

declare class __Request__mach_vm_msync_t {
  constructor(init?: __Request__mach_vm_msync_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  sync_flags: number;
}

declare class stackshot_duration {
  constructor(init?: stackshot_duration);
  stackshot_duration: number;
  stackshot_duration_outer: number;
}

declare class __Reply__processor_set_policy_disable_t {
  constructor(init?: __Reply__processor_set_policy_disable_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class task_memorystatus_snapshot {
  constructor(init?: task_memorystatus_snapshot);
  tms_current_memlimit: number;
  tms_effectivepriority: number;
  tms_requestedpriority: number;
  tms_assertionpriority: number;
}

declare class tlv_descriptor {
  constructor(init?: tlv_descriptor);
  thunk: (p1: interop.PointerConvertible) => interop.Pointer | null;
  key: number;
  offset: number;
}

declare class task_delta_snapshot_v2 {
  constructor(init?: task_delta_snapshot_v2);
  tds_unique_pid: number;
  tds_ss_flags: number;
  tds_user_time_in_terminated_threads: number;
  tds_system_time_in_terminated_threads: number;
  tds_task_size: number;
  tds_max_resident_size: number;
  tds_suspend_count: number;
  tds_faults: number;
  tds_pageins: number;
  tds_cow_faults: number;
  tds_was_throttled: number;
  tds_did_throttle: number;
  tds_latency_qos: number;
}

declare class gz_header_s {
  constructor(init?: gz_header_s);
  text: number;
  time: number;
  xflags: number;
  os: number;
  extra: interop.Pointer;
  extra_len: number;
  extra_max: number;
  name: interop.Pointer;
  name_max: number;
  comment: interop.Pointer;
  comm_max: number;
  hcrc: number;
  done: number;
}

declare class dyld_chained_ptr_arm64e_segmented_rebase {
  constructor(init?: dyld_chained_ptr_arm64e_segmented_rebase);
  targetSegOffset: number;
  targetSegIndex: number;
  padding: number;
  next: number;
  auth: number;
}

declare class kqueue_info {
  constructor(init?: kqueue_info);
  kq_stat: vinfo_stat;
  kq_state: number;
  rfu_1: number;
}

declare class instrs_cycles_snapshot_v2 {
  constructor(init?: instrs_cycles_snapshot_v2);
  ics_instructions: number;
  ics_cycles: number;
  ics_p_instructions: number;
  ics_p_cycles: number;
}

declare class prdb_ent {
  constructor(init?: prdb_ent);
  pe_name: interop.Pointer;
  pe_nprops: number;
  pe_prop: interop.Pointer;
}

declare class crashinfo_proc_uniqidentifierinfo {
  constructor(init?: crashinfo_proc_uniqidentifierinfo);
  p_uuid: unknown /* const array */;
  p_uniqueid: number;
  p_puniqueid: number;
  p_reserve2: number;
  p_reserve3: number;
  p_reserve4: number;
}

declare class port_obj_tentry {
  constructor(init?: port_obj_tentry);
  pos_value: interop.Pointer;
  pos_type: number;
}

declare class instrs_cycles_snapshot {
  constructor(init?: instrs_cycles_snapshot);
  ics_instructions: number;
  ics_cycles: number;
}

declare class jetsam_coalition_snapshot {
  constructor(init?: jetsam_coalition_snapshot);
  jcs_id: number;
  jcs_flags: number;
  jcs_thread_group: number;
  jcs_leader_task_uniqueid: number;
}

declare class stackshot_latency_thread {
  constructor(init?: stackshot_latency_thread);
  thread_id: number;
  cur_thsnap1_latency: number;
  dispatch_serial_latency: number;
  dispatch_label_latency: number;
  cur_thsnap2_latency: number;
  thread_name_latency: number;
  sur_times_latency: number;
  user_stack_latency: number;
  kernel_stack_latency: number;
  misc_latency: number;
}

declare class thread_group_snapshot_v3 {
  constructor(init?: thread_group_snapshot_v3);
  tgs_id: number;
  tgs_name: unknown /* const array */;
  tgs_flags: number;
  tgs_name_cont: unknown /* const array */;
}

declare class at_block_buffer_t {
  constructor(init?: at_block_buffer_t);
  blocks: interop.Pointer;
  rowBytes: number;
  sliceBytes: number;
}

declare class simd_float2x3 {
  constructor(init?: simd_float2x3);
  columns: unknown /* const array */;
}

declare class kinfo_proc {
  constructor(init?: kinfo_proc);
  kp_proc: extern_proc;
  kp_eproc: eproc;
}

declare class thread_group_snapshot {
  constructor(init?: thread_group_snapshot);
  tgs_id: number;
  tgs_name: unknown /* const array */;
}

declare class thread_snapshot_v4 {
  constructor(init?: thread_snapshot_v4);
  ths_thread_id: number;
  ths_wait_event: number;
  ths_continuation: number;
  ths_total_syscalls: number;
  ths_voucher_identifier: number;
  ths_dqserialnum: number;
  ths_user_time: number;
  ths_sys_time: number;
  ths_ss_flags: number;
  ths_last_run_time: number;
  ths_last_made_runnable_time: number;
  ths_state: number;
  ths_sched_flags: number;
  ths_base_priority: number;
  ths_sched_priority: number;
  ths_eqos: number;
  ths_rqos: number;
  ths_rqos_override: number;
  ths_io_tier: number;
  ths_thread_t: number;
  ths_requested_policy: number;
  ths_effective_policy: number;
}

declare class objc_property_attribute_t {
  constructor(init?: objc_property_attribute_t);
  name: string | null;
  value: string | null;
}

declare class thread_snapshot_v3 {
  constructor(init?: thread_snapshot_v3);
  ths_thread_id: number;
  ths_wait_event: number;
  ths_continuation: number;
  ths_total_syscalls: number;
  ths_voucher_identifier: number;
  ths_dqserialnum: number;
  ths_user_time: number;
  ths_sys_time: number;
  ths_ss_flags: number;
  ths_last_run_time: number;
  ths_last_made_runnable_time: number;
  ths_state: number;
  ths_sched_flags: number;
  ths_base_priority: number;
  ths_sched_priority: number;
  ths_eqos: number;
  ths_rqos: number;
  ths_rqos_override: number;
  ths_io_tier: number;
  ths_thread_t: number;
}

declare class user64_dyld_aot_info {
  constructor(init?: user64_dyld_aot_info);
  x86LoadAddress: number;
  aotLoadAddress: number;
  aotImageSize: number;
  aotImageKey: unknown /* const array */;
}

declare class policy_timeshare_info {
  constructor(init?: policy_timeshare_info);
  max_priority: number;
  base_priority: number;
  cur_priority: number;
  depressed: number;
  depress_priority: number;
}

declare class user64_dyld_uuid_info {
  constructor(init?: user64_dyld_uuid_info);
  imageLoadAddress: number;
  imageUUID: unknown /* const array */;
}

declare class __Reply__task_zone_info_t {
  constructor(init?: __Reply__task_zone_info_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  names: mach_msg_ool_descriptor_t;
  info: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  namesCnt: number;
  infoCnt: number;
}

declare class __Reply__mach_vm_page_info_t {
  constructor(init?: __Reply__mach_vm_page_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  infoCnt: number;
  info: unknown /* const array */;
}

declare class user32_dyld_uuid_info {
  constructor(init?: user32_dyld_uuid_info);
  imageLoadAddress: number;
  imageUUID: unknown /* const array */;
}

declare class ip6_opt {
  constructor(init?: ip6_opt);
  ip6o_type: number;
  ip6o_len: number;
}

declare class dyld_aot_cache_uuid_info {
  constructor(init?: dyld_aot_cache_uuid_info);
  x86SlidBaseAddress: number;
  x86UUID: unknown /* const array */;
  aotSlidBaseAddress: number;
  aotUUID: unknown /* const array */;
}

declare class dyld_uuid_info_64 {
  constructor(init?: dyld_uuid_info_64);
  imageLoadAddress: number;
  imageUUID: unknown /* const array */;
}

declare class simd_double4x3 {
  constructor(init?: simd_double4x3);
  columns: unknown /* const array */;
}

declare class sched_param {
  constructor(init?: sched_param);
  sched_priority: number;
  __opaque: unknown /* const array */;
}

declare class _xpc_type_s {
  constructor(init?: _xpc_type_s);
}

declare class cmsghdr {
  constructor(init?: cmsghdr);
  cmsg_len: number;
  cmsg_level: number;
  cmsg_type: number;
}

declare class __sigaction {
  constructor(init?: __sigaction);
  __sigaction_u: __sigaction_u;
  sa_tramp: (p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible) => void | null;
  sa_mask: number;
  sa_flags: number;
}

declare class portlabel_info {
  constructor(init?: portlabel_info);
  portlabel_id: number;
  portlabel_flags: number;
  portlabel_domain: number;
}

declare class exception {
  constructor(init?: exception);
  type: number;
  name: string | null;
  arg1: number;
  arg2: number;
  retval: number;
}

declare class audit_stat {
  constructor(init?: audit_stat);
  as_version: number;
  as_numevent: number;
  as_generated: number;
  as_nonattrib: number;
  as_kernel: number;
  as_audit: number;
  as_auditctl: number;
  as_enqueue: number;
  as_written: number;
  as_wblocked: number;
  as_rblocked: number;
  as_dropped: number;
  as_totalsize: number;
  as_memused: number;
}

declare class mach_msg_ool_ports_descriptor64_t {
  constructor(init?: mach_msg_ool_ports_descriptor64_t);
  address: number;
  deallocate: number;
  copy: number;
  disposition: number;
  type: number;
  count: number;
}

declare class http_credential_s {
  constructor(init?: http_credential_s);
  data: interop.Pointer;
  datalen: number;
}

declare class __Reply__thread_get_exception_ports_t {
  constructor(init?: __Reply__thread_get_exception_ports_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  old_handlers: unknown /* const array */;
  NDR: NDR_record_t;
  masksCnt: number;
  masks: unknown /* const array */;
  old_behaviors: unknown /* const array */;
  old_flavors: unknown /* const array */;
}

declare class au_session {
  constructor(init?: au_session);
  as_aia_p: interop.Pointer;
  as_mask: au_mask;
}

declare class _RuneCharClass {
  constructor(init?: _RuneCharClass);
  __name: unknown /* const array */;
  __mask: number;
}

declare class __Request__mach_port_mod_refs_t {
  constructor(init?: __Request__mach_port_mod_refs_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  right: number;
  delta: number;
}

declare class auditinfo_addr {
  constructor(init?: auditinfo_addr);
  ai_auid: number;
  ai_mask: au_mask;
  ai_termid: au_tid_addr;
  ai_asid: number;
  ai_flags: number;
}

declare class simd_float2x2 {
  constructor(init?: simd_float2x2);
  columns: unknown /* const array */;
}

declare class simd_float3x4 {
  constructor(init?: simd_float3x4);
  columns: unknown /* const array */;
}

declare class sqlite3_vtab {
  constructor(init?: sqlite3_vtab);
  pModule: interop.Pointer;
  nRef: number;
  zErrMsg: string | null;
}

declare class malloc_introspection_t {
  constructor(init?: malloc_introspection_t);
  enumerator: (p1: number, p2: interop.PointerConvertible, p3: number, p4: number, p5: (p1: number, p2: number, p3: number, p4: interop.PointerConvertible) => number, p6: (p1: number, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible, p5: number) => void) => number | null;
  good_size: (p1: interop.PointerConvertible, p2: number) => number | null;
  check: (p1: interop.PointerConvertible) => number | null;
  print: (p1: interop.PointerConvertible, p2: number) => void | null;
  log: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void | null;
  force_lock: (p1: interop.PointerConvertible) => void | null;
  force_unlock: (p1: interop.PointerConvertible) => void | null;
  statistics: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void | null;
  zone_locked: (p1: interop.PointerConvertible) => number | null;
  enable_discharge_checking: (p1: interop.PointerConvertible) => number | null;
  disable_discharge_checking: (p1: interop.PointerConvertible) => void | null;
  discharge: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void | null;
  enumerate_discharged_pointers: (p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void) => void | null;
  reinit_lock: (p1: interop.PointerConvertible) => void | null;
  print_task: (p1: number, p2: number, p3: number, p4: (p1: number, p2: number, p3: number, p4: interop.PointerConvertible) => number, p5: (p1: string) => void) => void | null;
  task_statistics: (p1: number, p2: number, p3: (p1: number, p2: number, p3: number, p4: interop.PointerConvertible) => number, p4: interop.PointerConvertible) => void | null;
  zone_type: number;
}

declare class vproc_s {
  constructor(init?: vproc_s);
}

declare class timezone {
  constructor(init?: timezone);
  tz_minuteswest: number;
  tz_dsttime: number;
}

declare class __Reply__mach_zone_info_for_zone_t {
  constructor(init?: __Reply__mach_zone_info_for_zone_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  info: mach_zone_info_data;
}

declare class objc_ivar {
  constructor(init?: objc_ivar);
}

declare class ppd_attr_s {
  constructor(init?: ppd_attr_s);
  name: unknown /* const array */;
  spec: unknown /* const array */;
  text: unknown /* const array */;
  value: string | null;
}

declare class __Reply__host_check_multiuser_mode_t {
  constructor(init?: __Reply__host_check_multiuser_mode_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  multiuser_mode: number;
}

declare class __Reply__mach_memory_info_t {
  constructor(init?: __Reply__mach_memory_info_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  names: mach_msg_ool_descriptor_t;
  info: mach_msg_ool_descriptor_t;
  memory_info: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  namesCnt: number;
  infoCnt: number;
  memory_infoCnt: number;
}

declare class __Reply__host_get_atm_diagnostic_flag_t {
  constructor(init?: __Reply__host_get_atm_diagnostic_flag_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  diagnostic_flag: number;
}

declare class _krb5_authdata {
  constructor(init?: _krb5_authdata);
  magic: number;
  ad_type: number;
  length: number;
  contents: interop.Pointer;
}

declare class __Reply__host_register_mach_voucher_attr_manager_t {
  constructor(init?: __Reply__host_register_mach_voucher_attr_manager_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  new_attr_control: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  new_key: number;
}

declare class attribute_set {
  constructor(init?: attribute_set);
  commonattr: number;
  volattr: number;
  dirattr: number;
  fileattr: number;
  forkattr: number;
}

declare class __Request__mach_make_memory_entry_64_t {
  constructor(init?: __Request__mach_make_memory_entry_64_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  parent_entry: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  size: number;
  offset: number;
  permission: number;
}

declare class __Reply__host_create_mach_voucher_t {
  constructor(init?: __Reply__host_create_mach_voucher_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  voucher: mach_msg_port_descriptor_t;
}

declare class __Reply__task_policy_t {
  constructor(init?: __Reply__task_policy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__host_lockgroup_info_t {
  constructor(init?: __Reply__host_lockgroup_info_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  lockgroup_info: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  lockgroup_infoCnt: number;
}

declare class objc_class {
  constructor(init?: objc_class);
}

declare class __Reply__act_get_state_t {
  constructor(init?: __Reply__act_get_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  old_stateCnt: number;
  old_state: unknown /* const array */;
}

declare class __Reply__mach_make_memory_entry_64_t {
  constructor(init?: __Reply__mach_make_memory_entry_64_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  object_handle: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  size: number;
}

declare class stackshot_cpu_times_v2 {
  constructor(init?: stackshot_cpu_times_v2);
  user_usec: number;
  system_usec: number;
  runnable_usec: number;
}

declare class ip6_dest {
  constructor(init?: ip6_dest);
  ip6d_nxt: number;
  ip6d_len: number;
}

declare class __Reply__kmod_get_info_t {
  constructor(init?: __Reply__kmod_get_info_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  modules: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  modulesCnt: number;
}

declare class __Reply___host_page_size_t {
  constructor(init?: __Reply___host_page_size_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  out_page_size: number;
}

declare class __Reply__host_info_t {
  constructor(init?: __Reply__host_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  host_info_outCnt: number;
  host_info_out: unknown /* const array */;
}

declare class __Request__mach_zone_info_for_zone_t {
  constructor(init?: __Request__mach_zone_info_for_zone_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: mach_zone_name;
}

declare class section_64 {
  constructor(init?: section_64);
  sectname: unknown /* const array */;
  segname: unknown /* const array */;
  addr: number;
  size: number;
  offset: number;
  align: number;
  reloff: number;
  nreloc: number;
  flags: number;
  reserved1: number;
  reserved2: number;
  reserved3: number;
}

declare class __Request__host_check_multiuser_mode_t {
  constructor(init?: __Request__host_check_multiuser_mode_t);
  Head: mach_msg_header_t;
}

declare class __Request__vm_machine_attribute_t {
  constructor(init?: __Request__vm_machine_attribute_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  attribute: number;
  value: number;
}

declare class __Request__mach_port_space_info_t {
  constructor(init?: __Request__mach_port_space_info_t);
  Head: mach_msg_header_t;
}

declare class __Reply__mach_vm_behavior_set_t {
  constructor(init?: __Reply__mach_vm_behavior_set_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class udpiphdr {
  constructor(init?: udpiphdr);
  ui_i: ipovly;
  ui_u: udphdr;
}

declare class __Request__host_set_multiuser_config_flags_t {
  constructor(init?: __Request__host_set_multiuser_config_flags_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  multiuser_flags: number;
}

declare class thread_extended_info {
  constructor(init?: thread_extended_info);
  pth_user_time: number;
  pth_system_time: number;
  pth_cpu_usage: number;
  pth_policy: number;
  pth_run_state: number;
  pth_flags: number;
  pth_sleep_time: number;
  pth_curpri: number;
  pth_priority: number;
  pth_maxpriority: number;
  pth_name: unknown /* const array */;
}

declare class __Request__mach_memory_info_t {
  constructor(init?: __Request__mach_memory_info_t);
  Head: mach_msg_header_t;
}

declare class _opaque_pthread_mutex_t {
  constructor(init?: _opaque_pthread_mutex_t);
  __sig: number;
  __opaque: unknown /* const array */;
}

declare class __Request__host_get_atm_diagnostic_flag_t {
  constructor(init?: __Request__host_get_atm_diagnostic_flag_t);
  Head: mach_msg_header_t;
}

declare class __Request__host_register_well_known_mach_voucher_attr_manager_t {
  constructor(init?: __Request__host_register_well_known_mach_voucher_attr_manager_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  attr_manager: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  default_value: number;
  key: number;
}

declare class __Request__host_create_mach_voucher_t {
  constructor(init?: __Request__host_create_mach_voucher_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  recipesCnt: number;
  recipes: unknown /* const array */;
}

declare class __Request__mach_zone_info_t {
  constructor(init?: __Request__mach_zone_info_t);
  Head: mach_msg_header_t;
}

declare class rr_pco_use {
  constructor(init?: rr_pco_use);
  rpu_uselen: number;
  rpu_keeplen: number;
  rpu_ramask: number;
  rpu_raflags: number;
  rpu_vltime: number;
  rpu_pltime: number;
  rpu_flags: number;
  rpu_prefix: in6_addr;
}

declare class __Request__host_statistics64_t {
  constructor(init?: __Request__host_statistics64_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  host_info64_outCnt: number;
}

declare class __Reply__mach_vm_remap_t {
  constructor(init?: __Reply__mach_vm_remap_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  target_address: number;
  cur_protection: number;
  max_protection: number;
}

declare class dyld_info_command {
  constructor(init?: dyld_info_command);
  cmd: number;
  cmdsize: number;
  rebase_off: number;
  rebase_size: number;
  bind_off: number;
  bind_size: number;
  weak_bind_off: number;
  weak_bind_size: number;
  lazy_bind_off: number;
  lazy_bind_size: number;
  export_off: number;
  export_size: number;
}

declare class __Request__mach_memory_object_memory_entry_64_t {
  constructor(init?: __Request__mach_memory_object_memory_entry_64_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  pager: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  internal: number;
  size: number;
  permission: number;
}

declare class __Request__processor_set_create_t {
  constructor(init?: __Request__processor_set_create_t);
  Head: mach_msg_header_t;
}

declare class __Request__host_virtual_physical_table_info_t {
  constructor(init?: __Request__host_virtual_physical_table_info_t);
  Head: mach_msg_header_t;
}

declare class __Reply__vm_allocate_t {
  constructor(init?: __Reply__vm_allocate_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  address: number;
}

declare class __Request__mach_ports_lookup_t {
  constructor(init?: __Request__mach_ports_lookup_t);
  Head: mach_msg_header_t;
}

declare class __Request__mach_memory_object_memory_entry_t {
  constructor(init?: __Request__mach_memory_object_memory_entry_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  pager: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  internal: number;
  size: number;
  permission: number;
}

declare class rawarc_order {
  constructor(init?: rawarc_order);
  raw_frompc: number;
  raw_selfpc: number;
  raw_count: number;
  raw_order: number;
}

declare class unnamed_5798418872761254777 {
  constructor(init?: unnamed_5798418872761254777);
  inp6_hlim: number;
  inp6_cksum: number;
  inp6_ifindex: number;
  inp6_hops: number;
}

declare class _launch_data {
  constructor(init?: _launch_data);
}

declare class __Request__host_info_t {
  constructor(init?: __Request__host_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  host_info_outCnt: number;
}

declare class __Reply__mach_port_is_connection_for_service_t {
  constructor(init?: __Reply__mach_port_is_connection_for_service_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  filter_policy_id: number;
}

declare class __Reply__mach_port_unguard_t {
  constructor(init?: __Reply__mach_port_unguard_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__mach_port_guard_t {
  constructor(init?: __Reply__mach_port_guard_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class unnamed_7401283081960241141 {
  constructor(init?: unnamed_7401283081960241141);
  v: number;
  h: number;
}

declare class if_wifi_status_v1 {
  constructor(init?: if_wifi_status_v1);
  valid_bitmask: number;
  link_quality_metric: number;
  ul_effective_bandwidth: number;
  ul_max_bandwidth: number;
  ul_min_latency: number;
  ul_effective_latency: number;
  ul_max_latency: number;
  ul_retxt_level: number;
  ul_bytes_lost: number;
  ul_error_rate: number;
  dl_effective_bandwidth: number;
  dl_max_bandwidth: number;
  dl_min_latency: number;
  dl_effective_latency: number;
  dl_max_latency: number;
  dl_error_rate: number;
  config_frequency: number;
  config_multicast_rate: number;
  scan_count: number;
  scan_duration: number;
  reserved_1: number;
  reserved_2: number;
  reserved_3: number;
  reserved_4: number;
}

declare class sockaddr_dl {
  constructor(init?: sockaddr_dl);
  sdl_len: number;
  sdl_family: number;
  sdl_index: number;
  sdl_type: number;
  sdl_nlen: number;
  sdl_alen: number;
  sdl_slen: number;
  sdl_data: unknown /* const array */;
}

declare class policy_fifo_limit {
  constructor(init?: policy_fifo_limit);
  max_priority: number;
}

declare class __Reply__mach_port_destruct_t {
  constructor(init?: __Reply__mach_port_destruct_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class in6_addrlifetime {
  constructor(init?: in6_addrlifetime);
  ia6t_expire: number;
  ia6t_preferred: number;
  ia6t_vltime: number;
  ia6t_pltime: number;
}

declare class __Reply__mach_port_insert_member_t {
  constructor(init?: __Reply__mach_port_insert_member_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__mach_port_kernel_object_t {
  constructor(init?: __Reply__mach_port_kernel_object_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  object_type: number;
  object_addr: number;
}

declare class unnamed_11104031724170527042 {
  constructor(init?: unnamed_11104031724170527042);
  fnstart: number;
  ehtp: interop.Pointer;
  additional: number;
  reserved1: number;
}

declare class __Reply__task_set_port_space_t {
  constructor(init?: __Reply__task_set_port_space_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class au_subject32ex_t {
  constructor(init?: au_subject32ex_t);
  auid: number;
  euid: number;
  egid: number;
  ruid: number;
  rgid: number;
  pid: number;
  sid: number;
  tid: au_tidaddr32;
}

declare class __Request__task_set_corpse_forking_behavior_t {
  constructor(init?: __Request__task_set_corpse_forking_behavior_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  behavior: number;
}

declare class __Reply__mach_port_set_attributes_t {
  constructor(init?: __Reply__mach_port_set_attributes_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__mach_port_get_attributes_t {
  constructor(init?: __Reply__mach_port_get_attributes_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  port_info_outCnt: number;
  port_info_out: unknown /* const array */;
}

declare class __Reply__mach_port_set_seqno_t {
  constructor(init?: __Reply__mach_port_set_seqno_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__mach_port_set_mscount_t {
  constructor(init?: __Reply__mach_port_set_mscount_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__mach_port_peek_t {
  constructor(init?: __Reply__mach_port_peek_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  request_seqnop: number;
  msg_sizep: number;
  msg_idp: number;
  trailer_infopCnt: number;
  trailer_infop: unknown /* const array */;
}

declare class mach_timebase_info {
  constructor(init?: mach_timebase_info);
  numer: number;
  denom: number;
}

declare class __Reply__mach_port_mod_refs_t {
  constructor(init?: __Reply__mach_port_mod_refs_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class unnamed_16467482743495324948 {
  constructor(init?: unnamed_16467482743495324948);
  in6_hlim: number;
  in6_cksum: number;
  in6_ifindex: number;
  in6_hops: number;
}

declare class __Request__mach_vm_purgable_control_t {
  constructor(init?: __Request__mach_vm_purgable_control_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  control: number;
  state: number;
}

declare class __Reply__mach_voucher_attr_command_t {
  constructor(init?: __Reply__mach_voucher_attr_command_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  out_contentCnt: number;
  out_content: unknown /* const array */;
}

declare class __Reply__mach_port_get_refs_t {
  constructor(init?: __Reply__mach_port_get_refs_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  refs: number;
}

declare class __ifmultiaddr {
  constructor(init?: __ifmultiaddr);
}

declare class memory_object_attr_info {
  constructor(init?: memory_object_attr_info);
  copy_strategy: number;
  cluster_size: number;
  may_cache_object: number;
  temporary: number;
}

declare class __Reply__mach_port_deallocate_t {
  constructor(init?: __Reply__mach_port_deallocate_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__mach_port_type_t {
  constructor(init?: __Reply__mach_port_type_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  ptype: number;
}

declare class __Request__mach_port_is_connection_for_service_t {
  constructor(init?: __Request__mach_port_is_connection_for_service_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  connection_port: number;
  service_port: number;
}

declare class __Request__mach_port_guard_with_flags_t {
  constructor(init?: __Request__mach_port_guard_with_flags_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  guard: number;
  flags: number;
}

declare class ftrimactivefile {
  constructor(init?: ftrimactivefile);
  fta_offset: number;
  fta_length: number;
}

declare class __Reply__vm_deallocate_t {
  constructor(init?: __Reply__vm_deallocate_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__mach_port_unguard_t {
  constructor(init?: __Request__mach_port_unguard_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  guard: number;
}

declare class histeventW {
  constructor(init?: histeventW);
  num: number;
  str: interop.Pointer;
}

declare class __ifaddr {
  constructor(init?: __ifaddr);
}

declare class __Request__mach_port_kobject_t {
  constructor(init?: __Request__mach_port_kobject_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
}

declare class proc_persona_info {
  constructor(init?: proc_persona_info);
  unique_pid: number;
  pid: number;
  flags: number;
  pidversion: number;
  persona_id: number;
  uid: number;
  gid: number;
  macho_uuid: unknown /* const array */;
}

declare class __Request__mach_port_extract_member_t {
  constructor(init?: __Request__mach_port_extract_member_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  pset: number;
}

declare class _krb5_enc_tkt_part {
  constructor(init?: _krb5_enc_tkt_part);
  magic: number;
  flags: number;
  session: interop.Pointer;
  client: interop.Pointer;
  transited: _krb5_transited;
  times: _krb5_ticket_times;
  caddrs: interop.Pointer;
  authorization_data: interop.Pointer;
}

declare class __Request__mach_port_insert_member_t {
  constructor(init?: __Request__mach_port_insert_member_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  pset: number;
}

declare class __Request__mach_port_allocate_full_t {
  constructor(init?: __Request__mach_port_allocate_full_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  proto: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  right: number;
  qos: mach_port_qos;
  name: number;
}

declare class kauth_filesec {
  constructor(init?: kauth_filesec);
  fsec_magic: number;
  fsec_owner: guid_t;
  fsec_group: guid_t;
  fsec_acl: kauth_acl;
}

declare class _krb5_cred {
  constructor(init?: _krb5_cred);
  magic: number;
  tickets: interop.Pointer;
  enc_part: _krb5_enc_data;
  enc_part2: interop.Pointer;
}

declare class __Request__vm_read_overwrite_t {
  constructor(init?: __Request__vm_read_overwrite_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  data: number;
}

declare class __Request__mach_port_allocate_qos_t {
  constructor(init?: __Request__mach_port_allocate_qos_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  right: number;
  qos: mach_port_qos;
}

declare class __Request__mach_port_set_attributes_t {
  constructor(init?: __Request__mach_port_set_attributes_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  flavor: number;
  port_infoCnt: number;
  port_info: unknown /* const array */;
}

declare class __Reply__clock_set_attributes_t {
  constructor(init?: __Reply__clock_set_attributes_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__mach_port_extract_right_t {
  constructor(init?: __Request__mach_port_extract_right_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  msgt_name: number;
}

declare class nd_opt_pvd {
  constructor(init?: nd_opt_pvd);
  nd_opt_pvd_type: number;
  nd_opt_pvd_len: number;
  nd_opt_flags_delay: unknown /* const array */;
  nd_opt_pvd_seq: number;
  nd_opt_pvd_id: unknown /* const array */;
}

declare class load_command {
  constructor(init?: load_command);
  cmd: number;
  cmdsize: number;
}

declare class __Reply__task_assign_default_t {
  constructor(init?: __Reply__task_assign_default_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__mach_port_request_notification_t {
  constructor(init?: __Request__mach_port_request_notification_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  notify: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  name: number;
  msgid: number;
  sync: number;
}

declare class sockaddr_storage {
  constructor(init?: sockaddr_storage);
  ss_len: number;
  ss_family: number;
  __ss_pad1: unknown /* const array */;
  __ss_align: number;
  __ss_pad2: unknown /* const array */;
}

declare class krb5_rc_st {
  constructor(init?: krb5_rc_st);
}

declare class dylib_module {
  constructor(init?: dylib_module);
  module_name: number;
  iextdefsym: number;
  nextdefsym: number;
  irefsym: number;
  nrefsym: number;
  ilocalsym: number;
  nlocalsym: number;
  iextrel: number;
  nextrel: number;
  iinit_iterm: number;
  ninit_nterm: number;
  objc_module_info_addr: number;
  objc_module_info_size: number;
}

declare class __Request__mach_port_get_set_status_t {
  constructor(init?: __Request__mach_port_get_set_status_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
}

declare class __Request__mach_port_peek_t {
  constructor(init?: __Request__mach_port_peek_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  trailer_type: number;
  request_seqnop: number;
  trailer_infopCnt: number;
}

declare class host_preferred_user_arch {
  constructor(init?: host_preferred_user_arch);
  cpu_type: number;
  cpu_subtype: number;
}

declare class __Request__mach_port_deallocate_t {
  constructor(init?: __Request__mach_port_deallocate_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
}

declare class __Reply__task_get_exc_guard_behavior_t {
  constructor(init?: __Reply__task_get_exc_guard_behavior_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  behavior: number;
}

declare class __Request__mach_port_rename_t {
  constructor(init?: __Request__mach_port_rename_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  old_name: number;
  new_name: number;
}

declare class NSLinkEditErrorHandlers {
  constructor(init?: NSLinkEditErrorHandlers);
  undefined: (p1: string) => void | null;
  multiple: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => interop.Pointer | null;
  linkEdit: (p1: interop.Enum<typeof NSLinkEditErrors>, p2: number, p3: string, p4: string) => void | null;
}

declare class Rect {
  constructor(init?: Rect);
  top: number;
  left: number;
  bottom: number;
  right: number;
}

declare class dyld_uuid_info_64_v2 {
  constructor(init?: dyld_uuid_info_64_v2);
  imageLoadAddress: number;
  imageUUID: unknown /* const array */;
  imageSlidBaseAddress: number;
}

declare class __Request__mach_port_names_t {
  constructor(init?: __Request__mach_port_names_t);
  Head: mach_msg_header_t;
}

declare class __Request__vm_map_page_query_t {
  constructor(init?: __Request__vm_map_page_query_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  offset: number;
}

declare class __Reply__thread_suspend_t {
  constructor(init?: __Reply__thread_suspend_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class nd_neighbor_advert {
  constructor(init?: nd_neighbor_advert);
  nd_na_hdr: icmp6_hdr;
  nd_na_target: in6_addr;
}

declare class vol_attributes_attr {
  constructor(init?: vol_attributes_attr);
  validattr: attribute_set;
  nativeattr: attribute_set;
}

declare class __Reply__vm_map_64_t {
  constructor(init?: __Reply__vm_map_64_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  address: number;
}

declare class dyld_chained_ptr_arm64e_shared_cache_auth_rebase {
  constructor(init?: dyld_chained_ptr_arm64e_shared_cache_auth_rebase);
  runtimeOffset: number;
  diversity: number;
  addrDiv: number;
  keyIsData: number;
  next: number;
  auth: number;
}

declare class __Reply__vm_map_page_query_t {
  constructor(init?: __Reply__vm_map_page_query_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  disposition: number;
  ref_count: number;
}

declare class __Reply__task_wire_t {
  constructor(init?: __Reply__task_wire_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__vm_map_t {
  constructor(init?: __Reply__vm_map_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  address: number;
}

declare class __Reply__vm_read_overwrite_t {
  constructor(init?: __Reply__vm_read_overwrite_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  outsize: number;
}

declare class _opaque_pthread_rwlock_t {
  constructor(init?: _opaque_pthread_rwlock_t);
  __sig: number;
  __opaque: unknown /* const array */;
}

declare class mach_core_fileheader {
  constructor(init?: mach_core_fileheader);
  signature: number;
  log_offset: number;
  log_length: number;
  num_files: number;
  files: unknown /* const array */;
}

declare class stack_snapshot_frame32 {
  constructor(init?: stack_snapshot_frame32);
  lr: number;
  sp: number;
}

declare class UTextFuncs {
  constructor(init?: UTextFuncs);
  tableSize: number;
  reserved1: number;
  reserved2: number;
  reserved3: number;
  clone: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible) => interop.Pointer | null;
  nativeLength: (p1: interop.PointerConvertible) => number | null;
  access: (p1: interop.PointerConvertible, p2: number, p3: number) => number | null;
  extract: (p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible, p5: number, p6: interop.PointerConvertible) => number | null;
  replace: (p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible, p5: number, p6: interop.PointerConvertible) => number | null;
  copy: (p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number, p6: interop.PointerConvertible) => void | null;
  mapOffsetToNative: (p1: interop.PointerConvertible) => number | null;
  mapNativeIndexToUTF16: (p1: interop.PointerConvertible, p2: number) => number | null;
  close: (p1: interop.PointerConvertible) => void | null;
  spare1: (p1: interop.PointerConvertible) => void | null;
  spare2: (p1: interop.PointerConvertible) => void | null;
  spare3: (p1: interop.PointerConvertible) => void | null;
}

declare class _cups_raster_s {
  constructor(init?: _cups_raster_s);
}

declare class __Reply__task_swap_exception_ports_t {
  constructor(init?: __Reply__task_swap_exception_ports_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  old_handlers: unknown /* const array */;
  NDR: NDR_record_t;
  masksCnt: number;
  masks: unknown /* const array */;
  old_behaviors: unknown /* const array */;
  old_flavors: unknown /* const array */;
}

declare class __Reply__vm_inherit_t {
  constructor(init?: __Reply__vm_inherit_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class HFSExtentKey {
  constructor(init?: HFSExtentKey);
  keyLength: number;
  forkType: number;
  fileID: number;
  startBlock: number;
}

declare class task_extmod_info {
  constructor(init?: task_extmod_info);
  task_uuid: unknown /* const array */;
  extmod_statistics: vm_extmod_statistics;
}

declare class __Request__vm_remap_new_t {
  constructor(init?: __Request__vm_remap_new_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  src_task: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  target_address: number;
  size: number;
  mask: number;
  flags: number;
  src_address: number;
  copy: number;
  cur_protection: number;
  max_protection: number;
  inheritance: number;
}

declare class UParseError {
  constructor(init?: UParseError);
  line: number;
  offset: number;
  preContext: unknown /* const array */;
  postContext: unknown /* const array */;
}

declare class __Request__vm_purgable_control_t {
  constructor(init?: __Request__vm_purgable_control_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  control: number;
  state: number;
}

declare class vm_region_submap_info {
  constructor(init?: vm_region_submap_info);
  protection: number;
  max_protection: number;
  inheritance: number;
  offset: number;
  user_tag: number;
  pages_resident: number;
  pages_shared_now_private: number;
  pages_swapped_out: number;
  pages_dirtied: number;
  ref_count: number;
  shadow_depth: number;
  external_pager: number;
  share_mode: number;
  is_submap: number;
  behavior: number;
  object_id: number;
  user_wired_count: number;
}

declare class sadb_sastat {
  constructor(init?: sadb_sastat);
  sadb_sastat_len: number;
  sadb_sastat_exttype: number;
  sadb_sastat_dir: number;
  sadb_sastat_reserved: number;
  sadb_sastat_list_len: number;
}

declare class __Request__vm_map_64_t {
  constructor(init?: __Request__vm_map_64_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  object: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  mask: number;
  flags: number;
  offset: number;
  copy: number;
  cur_protection: number;
  max_protection: number;
  inheritance: number;
}

declare class pwg_size_s {
  constructor(init?: pwg_size_s);
  map: pwg_map_s;
  width: number;
  length: number;
  left: number;
  bottom: number;
  right: number;
  top: number;
}

declare class mach_vm_info_region {
  constructor(init?: mach_vm_info_region);
  vir_start: number;
  vir_end: number;
  vir_object: number;
  vir_offset: number;
  vir_needs_copy: number;
  vir_protection: number;
  vir_max_protection: number;
  vir_inheritance: number;
  vir_wired_count: number;
  vir_user_wired_count: number;
}

declare class exclave_textlayout_segment {
  constructor(init?: exclave_textlayout_segment);
  layoutSegment_uuid: unknown /* const array */;
  layoutSegment_loadAddress: number;
}

declare class __Request__vm_region_64_t {
  constructor(init?: __Request__vm_region_64_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  flavor: number;
  infoCnt: number;
}

declare class sqlite3_vtab_cursor {
  constructor(init?: sqlite3_vtab_cursor);
  pVtab: interop.Pointer;
}

declare class __Request__clock_get_attributes_t {
  constructor(init?: __Request__clock_get_attributes_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  clock_attrCnt: number;
}

declare class __Request__mach_vm_region_info_64_t {
  constructor(init?: __Request__mach_vm_region_info_64_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
}

declare class __Request__vm_region_recurse_64_t {
  constructor(init?: __Request__vm_region_recurse_64_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  nesting_depth: number;
  infoCnt: number;
}

declare class cups_page_header2_s {
  constructor(init?: cups_page_header2_s);
  MediaClass: unknown /* const array */;
  MediaColor: unknown /* const array */;
  MediaType: unknown /* const array */;
  OutputType: unknown /* const array */;
  AdvanceDistance: number;
  AdvanceMedia: interop.Enum<typeof cups_adv_e>;
  Collate: interop.Enum<typeof cups_bool_e>;
  CutMedia: interop.Enum<typeof cups_cut_e>;
  Duplex: interop.Enum<typeof cups_bool_e>;
  HWResolution: unknown /* const array */;
  ImagingBoundingBox: unknown /* const array */;
  InsertSheet: interop.Enum<typeof cups_bool_e>;
  Jog: interop.Enum<typeof cups_jog_e>;
  LeadingEdge: interop.Enum<typeof cups_edge_e>;
  Margins: unknown /* const array */;
  ManualFeed: interop.Enum<typeof cups_bool_e>;
  MediaPosition: number;
  MediaWeight: number;
  MirrorPrint: interop.Enum<typeof cups_bool_e>;
  NegativePrint: interop.Enum<typeof cups_bool_e>;
  NumCopies: number;
  Orientation: interop.Enum<typeof cups_orient_e>;
  OutputFaceUp: interop.Enum<typeof cups_bool_e>;
  PageSize: unknown /* const array */;
  Separations: interop.Enum<typeof cups_bool_e>;
  TraySwitch: interop.Enum<typeof cups_bool_e>;
  Tumble: interop.Enum<typeof cups_bool_e>;
  cupsWidth: number;
  cupsHeight: number;
  cupsMediaType: number;
  cupsBitsPerColor: number;
  cupsBitsPerPixel: number;
  cupsBytesPerLine: number;
  cupsColorOrder: interop.Enum<typeof cups_order_e>;
  cupsColorSpace: interop.Enum<typeof cups_cspace_e>;
  cupsCompression: number;
  cupsRowCount: number;
  cupsRowFeed: number;
  cupsRowStep: number;
  cupsNumColors: number;
  cupsBorderlessScalingFactor: number;
  cupsPageSize: unknown /* const array */;
  cupsImagingBBox: unknown /* const array */;
  cupsInteger: unknown /* const array */;
  cupsReal: unknown /* const array */;
  cupsString: unknown /* const array */;
  cupsMarkerType: unknown /* const array */;
  cupsRenderingIntent: unknown /* const array */;
  cupsPageSizeName: unknown /* const array */;
}

declare class __Reply__vm_map_exec_lockdown_t {
  constructor(init?: __Reply__vm_map_exec_lockdown_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__mach_vm_region_info_64_t {
  constructor(init?: __Reply__mach_vm_region_info_64_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  objects: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  region: vm_info_region_64;
  objectsCnt: number;
}

declare class bootparamsent {
  constructor(init?: bootparamsent);
  bp_name: string | null;
  bp_bootparams: interop.Pointer;
}

declare class __Request__vm_mapped_pages_info_t {
  constructor(init?: __Request__vm_mapped_pages_info_t);
  Head: mach_msg_header_t;
}

declare class CompileTimeAssertionChecks_DNS_SD {
  constructor(init?: CompileTimeAssertionChecks_DNS_SD);
  assert0: unknown /* const array */;
}

declare class __Request__mach_vm_region_info_t {
  constructor(init?: __Request__mach_vm_region_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
}

declare class FTS {
  constructor(init?: FTS);
  fts_cur: interop.Pointer;
  fts_child: interop.Pointer;
  fts_array: interop.Pointer;
  fts_dev: number;
  fts_path: string | null;
  fts_rfd: number;
  fts_pathlen: number;
  fts_nitems: number;
  fts_options: number;
}

declare class mach_msg_empty_rcv_t {
  constructor(init?: mach_msg_empty_rcv_t);
  header: mach_msg_header_t;
  trailer: mach_msg_trailer_t;
}

declare class __Request__clock_alarm_t {
  constructor(init?: __Request__clock_alarm_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  alarm_port: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  alarm_type: number;
  alarm_time: mach_timespec;
}

declare class ifnet_traffic_rule_action {
  constructor(init?: ifnet_traffic_rule_action);
  ra_type: number;
  _reserved: number;
  ra_len: number;
}

declare class __Request__thread_get_exception_ports_info_t {
  constructor(init?: __Request__thread_get_exception_ports_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  exception_mask: number;
}

declare class __Request__vm_remap_t {
  constructor(init?: __Request__vm_remap_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  src_task: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  target_address: number;
  size: number;
  mask: number;
  flags: number;
  src_address: number;
  copy: number;
  inheritance: number;
}

declare class HFSCatalogThread {
  constructor(init?: HFSCatalogThread);
  recordType: number;
  reserved: unknown /* const array */;
  parentID: number;
  nodeName: unknown /* const array */;
}

declare class __Request__vm_map_t {
  constructor(init?: __Request__vm_map_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  object: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  mask: number;
  flags: number;
  offset: number;
  copy: number;
  cur_protection: number;
  max_protection: number;
  inheritance: number;
}

declare class __Request__vm_msync_t {
  constructor(init?: __Request__vm_msync_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  sync_flags: number;
}

declare class bpf_hdr {
  constructor(init?: bpf_hdr);
  bh_tstamp: timeval32;
  bh_caplen: number;
  bh_datalen: number;
  bh_hdrlen: number;
}

declare class __Request__vm_copy_t {
  constructor(init?: __Request__vm_copy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  source_address: number;
  size: number;
  dest_address: number;
}

declare class lber_memory_fns {
  constructor(init?: lber_memory_fns);
  bmf_malloc: (p1: number, p2: interop.PointerConvertible) => interop.Pointer | null;
  bmf_calloc: (p1: number, p2: number, p3: interop.PointerConvertible) => interop.Pointer | null;
  bmf_realloc: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => interop.Pointer | null;
  bmf_free: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void | null;
}

declare class __Reply__task_unregister_dyld_image_infos_t {
  constructor(init?: __Reply__task_unregister_dyld_image_infos_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__vm_read_list_t {
  constructor(init?: __Request__vm_read_list_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  data_list: unknown /* const array */;
  count: number;
}

declare class in_pktinfo {
  constructor(init?: in_pktinfo);
  ipi_ifindex: number;
  ipi_spec_dst: in_addr;
  ipi_addr: in_addr;
}

declare class __Request__vm_read_t {
  constructor(init?: __Request__vm_read_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
}

declare class statvfs {
  constructor(init?: statvfs);
  f_bsize: number;
  f_frsize: number;
  f_blocks: number;
  f_bfree: number;
  f_bavail: number;
  f_files: number;
  f_ffree: number;
  f_favail: number;
  f_fsid: number;
  f_flag: number;
  f_namemax: number;
}

declare class _krb5_ccache {
  constructor(init?: _krb5_ccache);
}

declare class __Request__vm_inherit_t {
  constructor(init?: __Request__vm_inherit_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  new_inheritance: number;
}

declare class __Request__task_register_dyld_shared_cache_image_info_t {
  constructor(init?: __Request__task_register_dyld_shared_cache_image_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  dyld_cache_image: dyld_kernel_image_info;
  no_cache: number;
  private_cache: number;
}

declare class network_port_t {
  constructor(init?: network_port_t);
  np_receiver: number;
  np_owner: number;
  np_puid: np_uid_t;
  np_sid: np_uid_t;
}

declare class __Request__task_swap_mach_voucher_t {
  constructor(init?: __Request__task_swap_mach_voucher_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  new_voucher: mach_msg_port_descriptor_t;
  old_voucher: mach_msg_port_descriptor_t;
}

declare class mach_msg_empty_send_t {
  constructor(init?: mach_msg_empty_send_t);
  header: mach_msg_header_t;
}

declare class __Request__vm_deallocate_t {
  constructor(init?: __Request__vm_deallocate_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
}

declare class fat_header {
  constructor(init?: fat_header);
  magic: number;
  nfat_arch: number;
}

declare class __Reply__thread_adopt_exception_handler_t {
  constructor(init?: __Reply__thread_adopt_exception_handler_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__thread_get_mach_voucher_t {
  constructor(init?: __Reply__thread_get_mach_voucher_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  voucher: mach_msg_port_descriptor_t;
}

declare class simd_double2x3 {
  constructor(init?: simd_double2x3);
  columns: unknown /* const array */;
}

declare class __Reply__thread_set_policy_t {
  constructor(init?: __Reply__thread_set_policy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__thread_get_assignment_t {
  constructor(init?: __Reply__thread_get_assignment_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  assigned_set: mach_msg_port_descriptor_t;
}

declare class __Request__task_sample_t {
  constructor(init?: __Request__task_sample_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  reply: mach_msg_port_descriptor_t;
}

declare class auditpinfo {
  constructor(init?: auditpinfo);
  ap_pid: number;
  ap_auid: number;
  ap_mask: au_mask;
  ap_termid: au_tid;
  ap_asid: number;
}

declare class _krb5_gic_opt_pa_data {
  constructor(init?: _krb5_gic_opt_pa_data);
  attr: string | null;
  value: string | null;
}

declare class __Reply__thread_assign_default_t {
  constructor(init?: __Reply__thread_assign_default_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__thread_assign_t {
  constructor(init?: __Reply__thread_assign_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__task_suspend_t {
  constructor(init?: __Request__task_suspend_t);
  Head: mach_msg_header_t;
}

declare class __Reply__etap_trace_thread_t {
  constructor(init?: __Reply__etap_trace_thread_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request___mach_make_memory_entry_t {
  constructor(init?: __Request___mach_make_memory_entry_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  parent_handle: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  size: number;
  offset: number;
  permission: number;
}

declare class __Reply__clock_get_time_t {
  constructor(init?: __Reply__clock_get_time_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  cur_time: mach_timespec;
}

declare class kauth_cache_sizes {
  constructor(init?: kauth_cache_sizes);
  kcs_group_size: number;
  kcs_id_size: number;
}

declare class __Reply__thread_set_exception_ports_t {
  constructor(init?: __Reply__thread_set_exception_ports_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__thread_info_t {
  constructor(init?: __Reply__thread_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  thread_info_outCnt: number;
  thread_info_out: unknown /* const array */;
}

declare class __Request__mach_port_space_basic_info_t {
  constructor(init?: __Request__mach_port_space_basic_info_t);
  Head: mach_msg_header_t;
}

declare class __Reply__thread_set_special_port_t {
  constructor(init?: __Reply__thread_set_special_port_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__thread_get_special_port_t {
  constructor(init?: __Reply__thread_get_special_port_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  special_port: mach_msg_port_descriptor_t;
}

declare class __Reply__thread_depress_abort_t {
  constructor(init?: __Reply__thread_depress_abort_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class unw_context_t {
  constructor(init?: unw_context_t);
  data: unknown /* const array */;
}

declare class __bufattr {
  constructor(init?: __bufattr);
}

declare class __Reply__thread_resume_t {
  constructor(init?: __Reply__thread_resume_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__thread_set_state_t {
  constructor(init?: __Reply__thread_set_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__thread_adopt_exception_handler_t {
  constructor(init?: __Request__thread_adopt_exception_handler_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  exc_port: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  exc_mask: number;
  behavior_mask: number;
  flavor_mask: number;
}

declare class ndrv_info {
  constructor(init?: ndrv_info);
  ndrvsi_if_family: number;
  ndrvsi_if_unit: number;
  ndrvsi_if_name: unknown /* const array */;
}

declare class if_link_status {
  constructor(init?: if_link_status);
  ifsr_version: number;
  ifsr_len: number;
  ifsr_u: unnamed_6655533433688948231;
}

declare class ldapvlvinfo {
  constructor(init?: ldapvlvinfo);
  ldvlv_version: number;
  ldvlv_before_count: number;
  ldvlv_after_count: number;
  ldvlv_offset: number;
  ldvlv_count: number;
  ldvlv_attrvalue: interop.Pointer;
  ldvlv_context: interop.Pointer;
  ldvlv_extradata: interop.Pointer;
}

declare class objc_property {
  constructor(init?: objc_property);
}

declare class __Request__thread_convert_thread_state_t {
  constructor(init?: __Request__thread_convert_thread_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  direction: number;
  flavor: number;
  in_stateCnt: number;
  in_state: unknown /* const array */;
  out_stateCnt: number;
}

declare class __Reply__exception_raise_state_t {
  constructor(init?: __Reply__exception_raise_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  flavor: number;
  new_stateCnt: number;
  new_state: unknown /* const array */;
}

declare class __arm_legacy_debug_state {
  constructor(init?: __arm_legacy_debug_state);
  __bvr: unknown /* const array */;
  __bcr: unknown /* const array */;
  __wvr: unknown /* const array */;
  __wcr: unknown /* const array */;
}

declare class dk_error_description_t {
  constructor(init?: dk_error_description_t);
  options: number;
  reserved: number;
  description_size: number;
  description: string | null;
}

declare class _acl_entry {
  constructor(init?: _acl_entry);
}

declare class thread_affinity_policy {
  constructor(init?: thread_affinity_policy);
  affinity_tag: number;
}

declare class ppd_profile_s {
  constructor(init?: ppd_profile_s);
  resolution: unknown /* const array */;
  media_type: unknown /* const array */;
  density: number;
  gamma: number;
  matrix: unknown /* const array */;
}

declare class simd_quatd {
  constructor(init?: simd_quatd);
  vector: unknown /* ext vector */;
}

declare class __Request__thread_get_mach_voucher_t {
  constructor(init?: __Request__thread_get_mach_voucher_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  which: number;
}

declare class __Reply__processor_set_statistics_t {
  constructor(init?: __Reply__processor_set_statistics_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  info_outCnt: number;
  info_out: unknown /* const array */;
}

declare class arpreq {
  constructor(init?: arpreq);
  arp_pa: sockaddr;
  arp_ha: sockaddr;
  arp_flags: number;
}

declare class __Request__thread_set_policy_t {
  constructor(init?: __Request__thread_set_policy_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  pset: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  policy: number;
  baseCnt: number;
  base: unknown /* const array */;
  limitCnt: number;
  limit: unknown /* const array */;
}

declare class __Request__thread_assign_default_t {
  constructor(init?: __Request__thread_assign_default_t);
  Head: mach_msg_header_t;
}

declare class __Reply__mach_memory_object_memory_entry_64_t {
  constructor(init?: __Reply__mach_memory_object_memory_entry_64_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  entry_handle: mach_msg_port_descriptor_t;
}

declare class __Request__thread_assign_t {
  constructor(init?: __Request__thread_assign_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  new_set: mach_msg_port_descriptor_t;
}

declare class __Request__etap_trace_thread_t {
  constructor(init?: __Request__etap_trace_thread_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  trace_status: number;
}

declare class __Request__thread_sample_t {
  constructor(init?: __Request__thread_sample_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  reply: mach_msg_port_descriptor_t;
}

declare class timeval64 {
  constructor(init?: timeval64);
  tv_sec: number;
  tv_usec: number;
}

declare class __Request__thread_policy_get_t {
  constructor(init?: __Request__thread_policy_get_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  policy_infoCnt: number;
  get_default: number;
}

declare class in6_rrenumreq {
  constructor(init?: in6_rrenumreq);
  irr_name: unknown /* const array */;
  irr_origin: number;
  irr_m_len: number;
  irr_m_minlen: number;
  irr_m_maxlen: number;
  irr_u_uselen: number;
  irr_u_keeplen: number;
  irr_raflagmask: irr_raflagmask;
  irr_vltime: number;
  irr_pltime: number;
  irr_flags: in6_prflags;
  irr_matchprefix: sockaddr_in6;
  irr_useprefix: sockaddr_in6;
}

declare class __Request__thread_policy_t {
  constructor(init?: __Request__thread_policy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  policy: number;
  baseCnt: number;
  base: unknown /* const array */;
  set_limit: number;
}

declare class __darwin_arm_debug_state64 {
  constructor(init?: __darwin_arm_debug_state64);
  __bvr: unknown /* const array */;
  __bcr: unknown /* const array */;
  __wvr: unknown /* const array */;
  __wcr: unknown /* const array */;
  __mdscr_el1: number;
}

declare class fspecread {
  constructor(init?: fspecread);
  fsr_flags: number;
  reserved: number;
  fsr_offset: number;
  fsr_length: number;
}

declare class user {
  constructor(init?: user);
}

declare class __Reply__mach_make_memory_entry_t {
  constructor(init?: __Reply__mach_make_memory_entry_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  object_handle: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  size: number;
}

declare class dyld_shared_cache_loadinfo_v2 {
  constructor(init?: dyld_shared_cache_loadinfo_v2);
  sharedCacheSlide: number;
  sharedCacheUUID: unknown /* const array */;
  sharedCacheUnreliableSlidBaseAddress: number;
  sharedCacheSlidFirstMapping: number;
  sharedCacheID: number;
  sharedCacheFlags: number;
}

declare class __Reply__semaphore_destroy_t {
  constructor(init?: __Reply__semaphore_destroy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__thread_depress_abort_t {
  constructor(init?: __Request__thread_depress_abort_t);
  Head: mach_msg_header_t;
}

declare class __Request__thread_abort_safely_t {
  constructor(init?: __Request__thread_abort_safely_t);
  Head: mach_msg_header_t;
}

declare class __Request__act_set_state_t {
  constructor(init?: __Request__act_set_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  new_stateCnt: number;
  new_state: unknown /* const array */;
}

declare class __Request__act_get_state_t {
  constructor(init?: __Request__act_get_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  old_stateCnt: number;
}

declare class thread_delta_snapshot_v3 {
  constructor(init?: thread_delta_snapshot_v3);
  tds_thread_id: number;
  tds_voucher_identifier: number;
  tds_ss_flags: number;
  tds_last_made_runnable_time: number;
  tds_state: number;
  tds_sched_flags: number;
  tds_base_priority: number;
  tds_sched_priority: number;
  tds_eqos: number;
  tds_rqos: number;
  tds_rqos_override: number;
  tds_io_tier: number;
  tds_requested_policy: number;
  tds_effective_policy: number;
}

declare class __Request__clock_get_time_t {
  constructor(init?: __Request__clock_get_time_t);
  Head: mach_msg_header_t;
}

declare class __Reply__task_map_kcdata_object_64_t {
  constructor(init?: __Reply__task_map_kcdata_object_64_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  kcd_addr_begin: number;
  kcd_size: number;
}

declare class __Request__kmod_get_info_t {
  constructor(init?: __Request__kmod_get_info_t);
  Head: mach_msg_header_t;
}

declare class __Reply__thread_wire_t {
  constructor(init?: __Reply__thread_wire_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class slapi_componentid {
  constructor(init?: slapi_componentid);
}

declare class __Reply__vm_wire_t {
  constructor(init?: __Reply__vm_wire_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class fstore {
  constructor(init?: fstore);
  fst_flags: number;
  fst_posmode: number;
  fst_offset: number;
  fst_length: number;
  fst_bytesalloc: number;
}

declare class __Reply__act_set_state_t {
  constructor(init?: __Reply__act_set_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__processor_set_destroy_t {
  constructor(init?: __Reply__processor_set_destroy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__task_set_corpse_forking_behavior_t {
  constructor(init?: __Reply__task_set_corpse_forking_behavior_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__task_create_identity_token_t {
  constructor(init?: __Reply__task_create_identity_token_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  token: mach_msg_port_descriptor_t;
}

declare class prf_ra {
  constructor(init?: prf_ra);
  onlink: number;
  autonomous: number;
  reserved: number;
}

declare class __Reply__task_register_dyld_get_process_state_t {
  constructor(init?: __Reply__task_register_dyld_get_process_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  dyld_process_state: dyld_kernel_process_info;
}

declare class __Request__task_get_state_t {
  constructor(init?: __Request__task_get_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  old_stateCnt: number;
}

declare class regmatch_t {
  constructor(init?: regmatch_t);
  rm_so: number;
  rm_eo: number;
}

declare class vol_capabilities_attr {
  constructor(init?: vol_capabilities_attr);
  capabilities: unknown /* const array */;
  valid: unknown /* const array */;
}

declare class __Reply__task_generate_corpse_t {
  constructor(init?: __Reply__task_generate_corpse_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  corpse_task_port: mach_msg_port_descriptor_t;
}

declare class vm_read_entry {
  constructor(init?: vm_read_entry);
  address: number;
  size: number;
}

declare class _krb5_keyblock {
  constructor(init?: _krb5_keyblock);
  magic: number;
  enctype: number;
  length: number;
  contents: interop.Pointer;
}

declare class simd_half2x4 {
  constructor(init?: simd_half2x4);
  columns: unknown /* const array */;
}

declare class sadb_supported {
  constructor(init?: sadb_supported);
  sadb_supported_len: number;
  sadb_supported_exttype: number;
  sadb_supported_reserved: number;
}

declare class slapi_attr {
  constructor(init?: slapi_attr);
}

declare class mach_core_details {
  constructor(init?: mach_core_details);
  gzip_offset: number;
  gzip_length: number;
  core_name: unknown /* const array */;
}

declare class __semid_ds_new {
  constructor(init?: __semid_ds_new);
  sem_perm: ipc_perm;
  sem_base: number;
  sem_nsems: number;
  sem_otime: number;
  sem_pad1: number;
  sem_ctime: number;
  sem_pad2: number;
  sem_pad3: unknown /* const array */;
}

declare class __Reply__mach_port_allocate_full_t {
  constructor(init?: __Reply__mach_port_allocate_full_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  qos: mach_port_qos;
  name: number;
}

declare class proc_rlimit_control_wakeupmon {
  constructor(init?: proc_rlimit_control_wakeupmon);
  wm_flags: number;
  wm_rate: number;
}

declare class dyld_chained_starts_in_image {
  constructor(init?: dyld_chained_starts_in_image);
  seg_count: number;
  seg_info_offset: unknown /* const array */;
}

declare class __Reply__task_terminate_t {
  constructor(init?: __Reply__task_terminate_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__task_dyld_process_info_notify_register_t {
  constructor(init?: __Reply__task_dyld_process_info_notify_register_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__task_suspend2_t {
  constructor(init?: __Reply__task_suspend2_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  suspend_token: mach_msg_port_descriptor_t;
}

declare class NumVersion {
  constructor(init?: NumVersion);
  nonRelRev: number;
  stage: number;
  minorAndBugRev: number;
  majorRev: number;
}

declare class sockaddr_ndrv {
  constructor(init?: sockaddr_ndrv);
  snd_len: number;
  snd_family: number;
  snd_name: unknown /* const array */;
}

declare class __Reply__mach_port_get_set_status_t {
  constructor(init?: __Reply__mach_port_get_set_status_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  members: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  membersCnt: number;
}

declare class Connection {
  constructor(init?: Connection);
}

declare class __Reply__mach_memory_object_memory_entry_t {
  constructor(init?: __Reply__mach_memory_object_memory_entry_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  entry_handle: mach_msg_port_descriptor_t;
}

declare class lockgroup_info {
  constructor(init?: lockgroup_info);
  lockgroup_name: unknown /* const array */;
  lockgroup_attr: number;
  lock_spin_cnt: number;
  lock_spin_util_cnt: number;
  lock_spin_held_cnt: number;
  lock_spin_miss_cnt: number;
  lock_spin_held_max: number;
  lock_spin_held_cum: number;
  lock_mtx_cnt: number;
  lock_mtx_util_cnt: number;
  lock_mtx_held_cnt: number;
  lock_mtx_miss_cnt: number;
  lock_mtx_wait_cnt: number;
  lock_mtx_held_max: number;
  lock_mtx_held_cum: number;
  lock_mtx_wait_max: number;
  lock_mtx_wait_cum: number;
  lock_rw_cnt: number;
  lock_rw_util_cnt: number;
  lock_rw_held_cnt: number;
  lock_rw_miss_cnt: number;
  lock_rw_wait_cnt: number;
  lock_rw_held_max: number;
  lock_rw_held_cum: number;
  lock_rw_wait_max: number;
  lock_rw_wait_cum: number;
}

declare class __Reply__task_set_phys_footprint_limit_t {
  constructor(init?: __Reply__task_set_phys_footprint_limit_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  old_limit: number;
}

declare class mld_hdr {
  constructor(init?: mld_hdr);
  mld_icmp6_hdr: icmp6_hdr;
  mld_addr: in6_addr;
}

declare class version_min_command {
  constructor(init?: version_min_command);
  cmd: number;
  cmdsize: number;
  version: number;
  sdk: number;
}

declare class __Reply__task_set_policy_t {
  constructor(init?: __Reply__task_set_policy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__task_register_hardened_exception_handler_t {
  constructor(init?: __Request__task_register_hardened_exception_handler_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  new_exception_port: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  signed_pc_key: number;
  exceptions_allowed: number;
  behaviors_allowed: number;
  flavors_allowed: number;
}

declare class __Reply__task_get_assignment_t {
  constructor(init?: __Reply__task_get_assignment_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  assigned_set: mach_msg_port_descriptor_t;
}

declare class ifnet_traffic_descriptor_common {
  constructor(init?: ifnet_traffic_descriptor_common);
  itd_type: number;
  _reserved: number;
  itd_len: number;
  itd_flags: number;
}

declare class __Request__mach_port_allocate_t {
  constructor(init?: __Request__mach_port_allocate_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  right: number;
}

declare class clockinfo {
  constructor(init?: clockinfo);
  hz: number;
  tick: number;
  tickadj: number;
  stathz: number;
  profhz: number;
}

declare class ip_mreqn {
  constructor(init?: ip_mreqn);
  imr_multiaddr: in_addr;
  imr_address: in_addr;
  imr_ifindex: number;
}

declare class stackshot_task_codesigning_info {
  constructor(init?: stackshot_task_codesigning_info);
  csflags: number;
  cs_trust_level: number;
}

declare class unwind_info_regular_second_level_entry {
  constructor(init?: unwind_info_regular_second_level_entry);
  functionOffset: number;
  encoding: number;
}

declare class _telldir {
  constructor(init?: _telldir);
}

declare class simd_half3x4 {
  constructor(init?: simd_half3x4);
  columns: unknown /* const array */;
}

declare class __Request__thread_info_t {
  constructor(init?: __Request__thread_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  thread_info_outCnt: number;
}

declare class dyld_uuid_info {
  constructor(init?: dyld_uuid_info);
  imageLoadAddress: interop.Pointer;
  imageUUID: unknown /* const array */;
}

declare class _krb5_kt {
  constructor(init?: _krb5_kt);
}

declare class __Reply__task_set_emulation_t {
  constructor(init?: __Reply__task_set_emulation_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class re_guts {
  constructor(init?: re_guts);
}

declare class __Reply__task_sample_t {
  constructor(init?: __Reply__task_sample_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __darwin_arm_neon_state {
  constructor(init?: __darwin_arm_neon_state);
  __v: unknown /* const array */;
  __fpsr: number;
  __fpcr: number;
}

declare class LDIFFP {
  constructor(init?: LDIFFP);
  fp: interop.Pointer;
  prev: interop.Pointer;
}

declare class kauth_acl {
  constructor(init?: kauth_acl);
  acl_entrycount: number;
  acl_flags: number;
  acl_ace: unknown /* const array */;
}

declare class __Reply__semaphore_create_t {
  constructor(init?: __Reply__semaphore_create_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  semaphore: mach_msg_port_descriptor_t;
}

declare class dyld_kernel_image_info {
  constructor(init?: dyld_kernel_image_info);
  uuid: unknown /* const array */;
  fsobjid: fsobj_id;
  fsid: fsid;
  load_addr: number;
}

declare class __Reply__mach_ports_register_t {
  constructor(init?: __Reply__mach_ports_register_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__task_set_exception_ports_t {
  constructor(init?: __Reply__task_set_exception_ports_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__host_get_special_port_t {
  constructor(init?: __Reply__host_get_special_port_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  port: mach_msg_port_descriptor_t;
}

declare class __Reply__thread_create_running_t {
  constructor(init?: __Reply__thread_create_running_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  child_act: mach_msg_port_descriptor_t;
}

declare class __darwin_arm_sve_p_state {
  constructor(init?: __darwin_arm_sve_p_state);
  __p: unknown /* const array */;
}

declare class pollfd {
  constructor(init?: pollfd);
  fd: number;
  events: number;
  revents: number;
}

declare class ih_idseq {
  constructor(init?: ih_idseq);
  icd_id: number;
  icd_seq: number;
}

declare class __Request__kmod_control_t {
  constructor(init?: __Request__kmod_control_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  data: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  module: number;
  flavor: number;
  dataCnt: number;
}

declare class nd_opt_rdnss {
  constructor(init?: nd_opt_rdnss);
  nd_opt_rdnss_type: number;
  nd_opt_rdnss_len: number;
  nd_opt_rdnss_reserved: number;
  nd_opt_rdnss_lifetime: number;
  nd_opt_rdnss_addr: unknown /* const array */;
}

declare class __Reply__thread_create_t {
  constructor(init?: __Reply__thread_create_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  child_act: mach_msg_port_descriptor_t;
}

declare class _krb5_enc_data {
  constructor(init?: _krb5_enc_data);
  magic: number;
  enctype: number;
  kvno: number;
  ciphertext: _krb5_data;
}

declare class __Reply__host_set_UNDServer_t {
  constructor(init?: __Reply__host_set_UNDServer_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__task_get_exception_ports_t {
  constructor(init?: __Request__task_get_exception_ports_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  exception_mask: number;
}

declare class udpstat {
  constructor(init?: udpstat);
  udps_ipackets: number;
  udps_hdrops: number;
  udps_badsum: number;
  udps_badlen: number;
  udps_noport: number;
  udps_noportbcast: number;
  udps_fullsock: number;
  udpps_pcbcachemiss: number;
  udpps_pcbhashmiss: number;
  udps_opackets: number;
  udps_fastout: number;
  udps_nosum: number;
  udps_noportmcast: number;
  udps_filtermcast: number;
  udps_rcv_swcsum: number;
  udps_rcv_swcsum_bytes: number;
  udps_rcv6_swcsum: number;
  udps_rcv6_swcsum_bytes: number;
  udps_snd_swcsum: number;
  udps_snd_swcsum_bytes: number;
  udps_snd6_swcsum: number;
  udps_snd6_swcsum_bytes: number;
}

declare class __Reply__task_suspend_t {
  constructor(init?: __Reply__task_suspend_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class TimeRecord {
  constructor(init?: TimeRecord);
  value: wide;
  scale: number;
  base: interop.Pointer;
}

declare class ifqueue {
  constructor(init?: ifqueue);
  ifq_head: interop.Pointer;
  ifq_tail: interop.Pointer;
  ifq_len: number;
  ifq_maxlen: number;
  ifq_drops: number;
}

declare class tokenizerW {
  constructor(init?: tokenizerW);
}

declare class __Request__task_map_kcdata_object_64_t {
  constructor(init?: __Request__task_map_kcdata_object_64_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  kcdata_object: mach_msg_port_descriptor_t;
}

declare class __Request__task_set_emulation_vector_t {
  constructor(init?: __Request__task_set_emulation_vector_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  emulation_vector: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  vector_start: number;
  emulation_vectorCnt: number;
}

declare class __Request__task_dyld_process_info_notify_deregister_t {
  constructor(init?: __Request__task_dyld_process_info_notify_deregister_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  notify: number;
}

declare class __Request__task_set_ras_pc_t {
  constructor(init?: __Request__task_set_ras_pc_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  basepc: number;
  boundspc: number;
}

declare class mach_msg_ool_descriptor64_t {
  constructor(init?: mach_msg_ool_descriptor64_t);
  address: number;
  deallocate: number;
  copy: number;
  pad1: number;
  type: number;
  size: number;
}

declare class __Request__task_dyld_process_info_notify_register_t {
  constructor(init?: __Request__task_dyld_process_info_notify_register_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  notify: mach_msg_port_descriptor_t;
}

declare class div_t {
  constructor(init?: div_t);
  quot: number;
  rem: number;
}

declare class __Request__task_set_exc_guard_behavior_t {
  constructor(init?: __Request__task_set_exc_guard_behavior_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  behavior: number;
}

declare class fsupplement {
  constructor(init?: fsupplement);
  fs_file_start: number;
  fs_blob_start: number;
  fs_blob_size: number;
  fs_orig_fd: number;
}

declare class rusage_info_v5 {
  constructor(init?: rusage_info_v5);
  ri_uuid: unknown /* const array */;
  ri_user_time: number;
  ri_system_time: number;
  ri_pkg_idle_wkups: number;
  ri_interrupt_wkups: number;
  ri_pageins: number;
  ri_wired_size: number;
  ri_resident_size: number;
  ri_phys_footprint: number;
  ri_proc_start_abstime: number;
  ri_proc_exit_abstime: number;
  ri_child_user_time: number;
  ri_child_system_time: number;
  ri_child_pkg_idle_wkups: number;
  ri_child_interrupt_wkups: number;
  ri_child_pageins: number;
  ri_child_elapsed_abstime: number;
  ri_diskio_bytesread: number;
  ri_diskio_byteswritten: number;
  ri_cpu_time_qos_default: number;
  ri_cpu_time_qos_maintenance: number;
  ri_cpu_time_qos_background: number;
  ri_cpu_time_qos_utility: number;
  ri_cpu_time_qos_legacy: number;
  ri_cpu_time_qos_user_initiated: number;
  ri_cpu_time_qos_user_interactive: number;
  ri_billed_system_time: number;
  ri_serviced_system_time: number;
  ri_logical_writes: number;
  ri_lifetime_max_phys_footprint: number;
  ri_instructions: number;
  ri_cycles: number;
  ri_billed_energy: number;
  ri_serviced_energy: number;
  ri_interval_max_phys_footprint: number;
  ri_runnable_time: number;
  ri_flags: number;
}

declare class __Request__task_purgable_info_t {
  constructor(init?: __Request__task_purgable_info_t);
  Head: mach_msg_header_t;
}

declare class __Request__task_inspect_t {
  constructor(init?: __Request__task_inspect_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  info_outCnt: number;
}

declare class __Request__task_get_dyld_image_infos_t {
  constructor(init?: __Request__task_get_dyld_image_infos_t);
  Head: mach_msg_header_t;
}

declare class rusage_info_v1 {
  constructor(init?: rusage_info_v1);
  ri_uuid: unknown /* const array */;
  ri_user_time: number;
  ri_system_time: number;
  ri_pkg_idle_wkups: number;
  ri_interrupt_wkups: number;
  ri_pageins: number;
  ri_wired_size: number;
  ri_resident_size: number;
  ri_phys_footprint: number;
  ri_proc_start_abstime: number;
  ri_proc_exit_abstime: number;
  ri_child_user_time: number;
  ri_child_system_time: number;
  ri_child_pkg_idle_wkups: number;
  ri_child_interrupt_wkups: number;
  ri_child_pageins: number;
  ri_child_elapsed_abstime: number;
}

declare class __Request__task_unregister_dyld_image_infos_t {
  constructor(init?: __Request__task_unregister_dyld_image_infos_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  dyld_images: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  dyld_imagesCnt: number;
}

declare class au_arg64_t {
  constructor(init?: au_arg64_t);
  no: number;
  val: number;
  len: number;
  text: string | null;
}

declare class gss_cred_id_struct {
  constructor(init?: gss_cred_id_struct);
}

declare class unnamed_13382323419751933956 {
  constructor(init?: unnamed_13382323419751933956);
  control: number;
  num_rcv_x2: number;
}

declare class __Request__task_register_dyld_image_infos_t {
  constructor(init?: __Request__task_register_dyld_image_infos_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  dyld_images: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  dyld_imagesCnt: number;
}

declare class __Request__task_get_mach_voucher_t {
  constructor(init?: __Request__task_get_mach_voucher_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  which: number;
}

declare class __Request__task_get_emulation_vector_t {
  constructor(init?: __Request__task_get_emulation_vector_t);
  Head: mach_msg_header_t;
}

declare class mach_msg_base_t {
  constructor(init?: mach_msg_base_t);
  header: mach_msg_header_t;
  body: mach_msg_body_t;
}

declare class _krb5_prompt {
  constructor(init?: _krb5_prompt);
  prompt: string | null;
  hidden: number;
  reply: interop.Pointer;
}

declare class __Request__lock_set_destroy_t {
  constructor(init?: __Request__lock_set_destroy_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  lock_set: mach_msg_port_descriptor_t;
}

declare class sigaction {
  constructor(init?: sigaction);
  __sigaction_u: __sigaction_u;
  sa_mask: number;
  sa_flags: number;
}

declare class proc_regionpath {
  constructor(init?: proc_regionpath);
  prpo_addr: number;
  prpo_regionlength: number;
  prpo_path: unknown /* const array */;
}

declare class ppd_size_s {
  constructor(init?: ppd_size_s);
  marked: number;
  name: unknown /* const array */;
  width: number;
  length: number;
  left: number;
  bottom: number;
  right: number;
  top: number;
}

declare class nd_redirect {
  constructor(init?: nd_redirect);
  nd_rd_hdr: icmp6_hdr;
  nd_rd_target: in6_addr;
  nd_rd_dst: in6_addr;
}

declare class MEVENT {
  constructor(init?: MEVENT);
  id: number;
  x: number;
  y: number;
  z: number;
  bstate: number;
}

declare class pwg_map_s {
  constructor(init?: pwg_map_s);
  pwg: string | null;
  ppd: string | null;
}

declare class igmp {
  constructor(init?: igmp);
  igmp_type: number;
  igmp_code: number;
  igmp_cksum: number;
  igmp_group: in_addr;
}

declare class __Request__task_swap_exception_ports_t {
  constructor(init?: __Request__task_swap_exception_ports_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  new_port: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  exception_mask: number;
  behavior: number;
  new_flavor: number;
}

declare class pgrp {
  constructor(init?: pgrp);
}

declare class __Request__task_set_exception_ports_t {
  constructor(init?: __Request__task_set_exception_ports_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  new_port: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  exception_mask: number;
  behavior: number;
  new_flavor: number;
}

declare class __Request__thread_create_t {
  constructor(init?: __Request__thread_create_t);
  Head: mach_msg_header_t;
}

declare class sqlite3 {
  constructor(init?: sqlite3);
}

declare class kevent64_s {
  constructor(init?: kevent64_s);
  ident: number;
  filter: number;
  flags: number;
  fflags: number;
  data: number;
  udata: number;
  ext: unknown /* const array */;
}

declare class __Reply__task_purgable_info_t {
  constructor(init?: __Reply__task_purgable_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  stats: vm_purgeable_info;
}

declare class rusage_info_v0 {
  constructor(init?: rusage_info_v0);
  ri_uuid: unknown /* const array */;
  ri_user_time: number;
  ri_system_time: number;
  ri_pkg_idle_wkups: number;
  ri_interrupt_wkups: number;
  ri_pageins: number;
  ri_wired_size: number;
  ri_resident_size: number;
  ri_phys_footprint: number;
  ri_proc_start_abstime: number;
  ri_proc_exit_abstime: number;
}

declare class dyld_chained_ptr_arm64e_auth_segmented_rebase {
  constructor(init?: dyld_chained_ptr_arm64e_auth_segmented_rebase);
  targetSegOffset: number;
  targetSegIndex: number;
  diversity: number;
  addrDiv: number;
  key: number;
  next: number;
  auth: number;
}

declare class __Request__task_resume_t {
  constructor(init?: __Request__task_resume_t);
  Head: mach_msg_header_t;
}

declare class memory_object_behave_info {
  constructor(init?: memory_object_behave_info);
  copy_strategy: number;
  temporary: number;
  invalidate: number;
  silent_overwrite: number;
  advisory_pageout: number;
}

declare class __Request__task_threads_t {
  constructor(init?: __Request__task_threads_t);
  Head: mach_msg_header_t;
}

declare class sa_endpoints {
  constructor(init?: sa_endpoints);
  sae_srcif: number;
  sae_srcaddr: interop.Pointer;
  sae_srcaddrlen: number;
  sae_dstaddr: interop.Pointer;
  sae_dstaddrlen: number;
}

declare class stackshot_duration_v2 {
  constructor(init?: stackshot_duration_v2);
  stackshot_duration: number;
  stackshot_duration_outer: number;
  stackshot_duration_prior: number;
}

declare class __Request__task_terminate_t {
  constructor(init?: __Request__task_terminate_t);
  Head: mach_msg_header_t;
}

declare class __Reply__processor_set_tasks_with_flavor_t {
  constructor(init?: __Reply__processor_set_tasks_with_flavor_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  task_list: mach_msg_ool_ports_descriptor_t;
  NDR: NDR_record_t;
  task_listCnt: number;
}

declare class __Reply__processor_set_info_t {
  constructor(init?: __Reply__processor_set_info_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  host: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  info_outCnt: number;
  info_out: unknown /* const array */;
}

declare class sastat {
  constructor(init?: sastat);
  spi: number;
  created: number;
  lft_c: sadb_lifetime;
}

declare class __Request__host_get_exception_ports_t {
  constructor(init?: __Request__host_get_exception_ports_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  exception_mask: number;
}

declare class __Request__task_create_t {
  constructor(init?: __Request__task_create_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  ledgers: mach_msg_ool_ports_descriptor_t;
  NDR: NDR_record_t;
  ledgersCnt: number;
  inherit_memory: number;
}

declare class __Reply__processor_set_stack_usage_t {
  constructor(init?: __Reply__processor_set_stack_usage_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  ltotal: number;
  space: number;
  resident: number;
  maxusage: number;
  maxstack: number;
}

declare class HFSCatalogFile {
  constructor(init?: HFSCatalogFile);
  recordType: number;
  flags: number;
  fileType: number;
  userInfo: FndrFileInfo;
  fileID: number;
  dataStartBlock: number;
  dataLogicalSize: number;
  dataPhysicalSize: number;
  rsrcStartBlock: number;
  rsrcLogicalSize: number;
  rsrcPhysicalSize: number;
  createDate: number;
  modifyDate: number;
  backupDate: number;
  finderInfo: FndrOpaqueInfo;
  clumpSize: number;
  dataExtents: unknown /* const array */;
  rsrcExtents: unknown /* const array */;
  reserved: number;
}

declare class PE_Video {
  constructor(init?: PE_Video);
  v_baseAddr: number;
  v_rowBytes: number;
  v_width: number;
  v_height: number;
  v_depth: number;
  v_display: number;
  v_pixelFormat: unknown /* const array */;
  v_offset: number;
  v_length: number;
  v_rotate: number;
  v_scale: number;
  reserved1: unknown /* const array */;
  reserved2: number;
}

declare class timeval {
  constructor(init?: timeval);
  tv_sec: number;
  tv_usec: number;
}

declare class __Reply__task_test_sync_upcall_t {
  constructor(init?: __Reply__task_test_sync_upcall_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class simd_float3x3 {
  constructor(init?: simd_float3x3);
  columns: unknown /* const array */;
}

declare class ifmibdata {
  constructor(init?: ifmibdata);
  ifmd_name: unknown /* const array */;
  ifmd_pcount: number;
  ifmd_flags: number;
  ifmd_snd_len: number;
  ifmd_snd_maxlen: number;
  ifmd_snd_drops: number;
  ifmd_filler: unknown /* const array */;
  ifmd_data: if_data64;
}

declare class __Reply__processor_set_max_priority_t {
  constructor(init?: __Reply__processor_set_max_priority_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__clock_set_attributes_t {
  constructor(init?: __Request__clock_set_attributes_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  clock_attrCnt: number;
  clock_attr: unknown /* const array */;
}

declare class __Request__host_register_mach_voucher_attr_manager_t {
  constructor(init?: __Request__host_register_mach_voucher_attr_manager_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  attr_manager: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  default_value: number;
}

declare class krb5_principal_data {
  constructor(init?: krb5_principal_data);
  magic: number;
  realm: _krb5_data;
  data: interop.Pointer;
  length: number;
  type: number;
}

declare class rt_metrics {
  constructor(init?: rt_metrics);
  rmx_locks: number;
  rmx_mtu: number;
  rmx_hopcount: number;
  rmx_expire: number;
  rmx_recvpipe: number;
  rmx_sendpipe: number;
  rmx_ssthresh: number;
  rmx_rtt: number;
  rmx_rttvar: number;
  rmx_pksent: number;
  rmx_filler: unknown /* const array */;
}

declare class ip_mreq {
  constructor(init?: ip_mreq);
  imr_multiaddr: in_addr;
  imr_interface: in_addr;
}

declare class __Request__processor_set_info_t {
  constructor(init?: __Request__processor_set_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  info_outCnt: number;
}

declare class __Reply__mach_memory_entry_purgable_control_t {
  constructor(init?: __Reply__mach_memory_entry_purgable_control_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  state: number;
}

declare class z_stream_s {
  constructor(init?: z_stream_s);
  next_in: interop.Pointer;
  avail_in: number;
  total_in: number;
  next_out: interop.Pointer;
  avail_out: number;
  total_out: number;
  msg: string | null;
  state: interop.Pointer;
  zalloc: (p1: interop.PointerConvertible, p2: number, p3: number) => interop.Pointer | null;
  zfree: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void | null;
  opaque: interop.Pointer;
  data_type: number;
  adler: number;
  reserved: number;
}

declare class __Request__task_create_identity_token_t {
  constructor(init?: __Request__task_create_identity_token_t);
  Head: mach_msg_header_t;
}

declare class au_proc64ex_t {
  constructor(init?: au_proc64ex_t);
  auid: number;
  euid: number;
  egid: number;
  ruid: number;
  rgid: number;
  pid: number;
  sid: number;
  tid: au_tidaddr64;
}

declare class mach_msg_ool_descriptor32_t {
  constructor(init?: mach_msg_ool_descriptor32_t);
  address: number;
  size: number;
  deallocate: number;
  copy: number;
  pad1: number;
  type: number;
}

declare class __Reply__task_inspect_t {
  constructor(init?: __Reply__task_inspect_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  info_outCnt: number;
  info_out: unknown /* const array */;
}

declare class __Request__processor_set_policy_control_t {
  constructor(init?: __Request__processor_set_policy_control_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  policy_infoCnt: number;
  policy_info: unknown /* const array */;
  change: number;
}

declare class __Reply__processor_control_t {
  constructor(init?: __Reply__processor_control_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__mach_vm_allocate_t {
  constructor(init?: __Reply__mach_vm_allocate_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  address: number;
}

declare class __Reply__processor_exit_t {
  constructor(init?: __Reply__processor_exit_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__processor_get_assignment_t {
  constructor(init?: __Request__processor_get_assignment_t);
  Head: mach_msg_header_t;
}

declare class xsockbuf {
  constructor(init?: xsockbuf);
  sb_cc: number;
  sb_hiwat: number;
  sb_mbcnt: number;
  sb_mbmax: number;
  sb_lowat: number;
  sb_flags: number;
  sb_timeo: number;
}

declare class __Request__processor_assign_t {
  constructor(init?: __Request__processor_assign_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  new_set: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  wait: number;
}

declare class __Request__processor_exit_t {
  constructor(init?: __Request__processor_exit_t);
  Head: mach_msg_header_t;
}

declare class au_ip_t {
  constructor(init?: au_ip_t);
  version: number;
  tos: number;
  len: number;
  id: number;
  offset: number;
  ttl: number;
  prot: number;
  chksm: number;
  src: number;
  dest: number;
}

declare class __Request__processor_start_t {
  constructor(init?: __Request__processor_start_t);
  Head: mach_msg_header_t;
}

declare class __Reply__host_security_set_task_token_t {
  constructor(init?: __Reply__host_security_set_task_token_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class os_workgroup_max_parallel_threads_attr_s {
  constructor(init?: os_workgroup_max_parallel_threads_attr_s);
}

declare class __Request__host_security_set_task_token_t {
  constructor(init?: __Request__host_security_set_task_token_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  target_task: mach_msg_port_descriptor_t;
  host: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  sec_token: security_token_t;
  audit_token: audit_token_t;
}

declare class sadb_x_sa2 {
  constructor(init?: sadb_x_sa2);
  sadb_x_sa2_len: number;
  sadb_x_sa2_exttype: number;
  sadb_x_sa2_mode: number;
  sadb_x_sa2_sequence: number;
  sadb_x_sa2_reqid: number;
}

declare class vm_statistics {
  constructor(init?: vm_statistics);
  free_count: number;
  active_count: number;
  inactive_count: number;
  wire_count: number;
  zero_fill_count: number;
  reactivations: number;
  pageins: number;
  pageouts: number;
  faults: number;
  cow_faults: number;
  lookups: number;
  hits: number;
  purgeable_count: number;
  purges: number;
  speculative_count: number;
}

declare class mach_msg_header_t {
  constructor(init?: mach_msg_header_t);
  msgh_bits: number;
  msgh_size: number;
  msgh_remote_port: number;
  msgh_local_port: number;
  msgh_voucher_port: number;
  msgh_id: number;
}

declare class __Reply__kmod_control_t {
  constructor(init?: __Reply__kmod_control_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  data: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  dataCnt: number;
}

declare class dyld_aot_shared_cache_info {
  constructor(init?: dyld_aot_shared_cache_info);
  cacheBaseAddress: number;
  cacheUUID: unknown /* const array */;
}

declare class mach_msg_security_trailer_t {
  constructor(init?: mach_msg_security_trailer_t);
  msgh_trailer_type: number;
  msgh_trailer_size: number;
  msgh_seqno: number;
  msgh_sender: security_token_t;
}

declare class __Reply__lock_set_destroy_t {
  constructor(init?: __Reply__lock_set_destroy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__host_get_boot_info_t {
  constructor(init?: __Reply__host_get_boot_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  boot_infoOffset: number;
  boot_infoCnt: number;
  boot_info: unknown /* const array */;
}

declare class thread_delta_snapshot_v2 {
  constructor(init?: thread_delta_snapshot_v2);
  tds_thread_id: number;
  tds_voucher_identifier: number;
  tds_ss_flags: number;
  tds_last_made_runnable_time: number;
  tds_state: number;
  tds_sched_flags: number;
  tds_base_priority: number;
  tds_sched_priority: number;
  tds_eqos: number;
  tds_rqos: number;
  tds_rqos_override: number;
  tds_io_tier: number;
}

declare class __Request__host_swap_exception_ports_t {
  constructor(init?: __Request__host_swap_exception_ports_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  new_port: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  exception_mask: number;
  behavior: number;
  new_flavor: number;
}

declare class rpc_signature {
  constructor(init?: rpc_signature);
  rd: rpc_routine_descriptor;
  rad: unknown /* const array */;
}

declare class __Request__host_get_clock_control_t {
  constructor(init?: __Request__host_get_clock_control_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  clock_id: number;
}

declare class _krb5_ticket {
  constructor(init?: _krb5_ticket);
  magic: number;
  server: interop.Pointer;
  enc_part: _krb5_enc_data;
  enc_part2: interop.Pointer;
}

declare class unnamed_11107668213163414474 {
  constructor(init?: unnamed_11107668213163414474);
  limit00: number;
  base00: number;
  base16: number;
  type: number;
  dpl: number;
  present: number;
  limit16: number;
  : number;
  opsz: number;
  granular: number;
  base24: number;
}

declare class ar_hdr {
  constructor(init?: ar_hdr);
  ar_name: unknown /* const array */;
  ar_date: unknown /* const array */;
  ar_uid: unknown /* const array */;
  ar_gid: unknown /* const array */;
  ar_mode: unknown /* const array */;
  ar_size: unknown /* const array */;
  ar_fmag: unknown /* const array */;
}

declare class ip6_mtuinfo {
  constructor(init?: ip6_mtuinfo);
  ip6m_addr: sockaddr_in6;
  ip6m_mtu: number;
}

declare class __Request__host_default_memory_manager_t {
  constructor(init?: __Request__host_default_memory_manager_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  default_manager: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  cluster_size: number;
}

declare class __Request__host_priv_statistics_t {
  constructor(init?: __Request__host_priv_statistics_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  host_info_outCnt: number;
}

declare class simd_half3x3 {
  constructor(init?: simd_half3x3);
  columns: unknown /* const array */;
}

declare class __Request__host_get_boot_info_t {
  constructor(init?: __Request__host_get_boot_info_t);
  Head: mach_msg_header_t;
}

declare class simd_float4x2 {
  constructor(init?: simd_float4x2);
  columns: unknown /* const array */;
}

declare class thread_snapshot_v2 {
  constructor(init?: thread_snapshot_v2);
  ths_thread_id: number;
  ths_wait_event: number;
  ths_continuation: number;
  ths_total_syscalls: number;
  ths_voucher_identifier: number;
  ths_dqserialnum: number;
  ths_user_time: number;
  ths_sys_time: number;
  ths_ss_flags: number;
  ths_last_run_time: number;
  ths_last_made_runnable_time: number;
  ths_state: number;
  ths_sched_flags: number;
  ths_base_priority: number;
  ths_sched_priority: number;
  ths_eqos: number;
  ths_rqos: number;
  ths_rqos_override: number;
  ths_io_tier: number;
}

declare class zone_btrecord {
  constructor(init?: zone_btrecord);
  ref_count: number;
  operation_type: number;
  bt: unknown /* const array */;
}

declare class NXHashTable {
  constructor(init?: NXHashTable);
  prototype: interop.Pointer;
  count: number;
  nbBuckets: number;
  buckets: interop.Pointer;
  info: interop.Pointer;
}

declare class NXArchInfo {
  constructor(init?: NXArchInfo);
  name: string | null;
  cputype: number;
  cpusubtype: number;
  byteorder: interop.Enum<typeof NXByteOrder>;
  description: string | null;
}

declare class kernel_triage_info_v1 {
  constructor(init?: kernel_triage_info_v1);
  triage_string1: unknown /* const array */;
  triage_string2: unknown /* const array */;
  triage_string3: unknown /* const array */;
  triage_string4: unknown /* const array */;
  triage_string5: unknown /* const array */;
}

declare class _cups_dir_s {
  constructor(init?: _cups_dir_s);
}

declare class __Reply__vm_region_t {
  constructor(init?: __Reply__vm_region_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  object_name: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  infoCnt: number;
  info: unknown /* const array */;
}

declare class mach_msg_ool_ports_descriptor_t {
  constructor(init?: mach_msg_ool_ports_descriptor_t);
  address: interop.Pointer;
  deallocate: number;
  copy: number;
  disposition: number;
  type: number;
  count: number;
}

declare class UCPMap {
  constructor(init?: UCPMap);
}

declare class kevent {
  constructor(init?: kevent);
  ident: number;
  filter: number;
  flags: number;
  fflags: number;
  data: number;
  udata: interop.Pointer;
}

declare class HFSPlusExtentKey {
  constructor(init?: HFSPlusExtentKey);
  keyLength: number;
  forkType: number;
  pad: number;
  fileID: number;
  startBlock: number;
}

declare class mach_msg_seqno_trailer_t {
  constructor(init?: mach_msg_seqno_trailer_t);
  msgh_trailer_type: number;
  msgh_trailer_size: number;
  msgh_seqno: number;
}

declare class ndrv_demux_desc {
  constructor(init?: ndrv_demux_desc);
  type: number;
  length: number;
  data: unnamed_11206538674155518421;
}

declare class __Reply__mach_port_get_context_t {
  constructor(init?: __Reply__mach_port_get_context_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  context: number;
}

declare class __Reply__vm_remap_t {
  constructor(init?: __Reply__vm_remap_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  target_address: number;
  cur_protection: number;
  max_protection: number;
}

declare class mach_msg_guarded_port_descriptor64_t {
  constructor(init?: mach_msg_guarded_port_descriptor64_t);
  context: number;
  flags: number;
  disposition: number;
  type: number;
  name: number;
}

declare class mach_core_details_v2 {
  constructor(init?: mach_core_details_v2);
  flags: number;
  offset: number;
  length: number;
  core_name: unknown /* const array */;
}

declare class task_zone_info_data {
  constructor(init?: task_zone_info_data);
  tzi_count: number;
  tzi_cur_size: number;
  tzi_max_size: number;
  tzi_elem_size: number;
  tzi_alloc_size: number;
  tzi_sum_size: number;
  tzi_exhaustible: number;
  tzi_collectable: number;
  tzi_caller_acct: number;
  tzi_task_alloc: number;
  tzi_task_free: number;
}

declare class __Request__kmod_destroy_t {
  constructor(init?: __Request__kmod_destroy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  module: number;
}

declare class proc_bsdinfo {
  constructor(init?: proc_bsdinfo);
  pbi_flags: number;
  pbi_status: number;
  pbi_xstatus: number;
  pbi_pid: number;
  pbi_ppid: number;
  pbi_uid: number;
  pbi_gid: number;
  pbi_ruid: number;
  pbi_rgid: number;
  pbi_svuid: number;
  pbi_svgid: number;
  rfu_1: number;
  pbi_comm: unknown /* const array */;
  pbi_name: unknown /* const array */;
  pbi_nfiles: number;
  pbi_pgid: number;
  pbi_pjobc: number;
  e_tdev: number;
  e_tpgid: number;
  pbi_nice: number;
  pbi_start_tvsec: number;
  pbi_start_tvusec: number;
}

declare class zone_info {
  constructor(init?: zone_info);
  zi_count: number;
  zi_cur_size: number;
  zi_max_size: number;
  zi_elem_size: number;
  zi_alloc_size: number;
  zi_pageable: number;
  zi_sleepable: number;
  zi_exhaustible: number;
  zi_collectable: number;
}

declare class __Reply__thread_policy_get_t {
  constructor(init?: __Reply__thread_policy_get_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  policy_infoCnt: number;
  policy_info: unknown /* const array */;
  get_default: number;
}

declare class UnsignedWide {
  constructor(init?: UnsignedWide);
  lo: number;
  hi: number;
}

declare class task_dyld_info {
  constructor(init?: task_dyld_info);
  all_image_info_addr: number;
  all_image_info_size: number;
  all_image_info_format: number;
}

declare class __Reply__mach_port_kobject_description_t {
  constructor(init?: __Reply__mach_port_kobject_description_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  object_type: interop.Enum<typeof ipc_info_object_type_t>;
  object_addr: number;
  descriptionOffset: number;
  descriptionCnt: number;
  description: unknown /* const array */;
}

declare class __Reply__mach_ports_lookup_t {
  constructor(init?: __Reply__mach_ports_lookup_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  init_port_set: mach_msg_ool_ports_descriptor_t;
  NDR: NDR_record_t;
  init_port_setCnt: number;
}

declare class __Request__clock_set_time_t {
  constructor(init?: __Request__clock_set_time_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  new_time: mach_timespec;
}

declare class mig_subsystem {
  constructor(init?: mig_subsystem);
  server: (p1: interop.PointerConvertible) => (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void | null;
  start: number;
  end: number;
  maxsize: number;
  reserved: number;
  routine: unknown /* const array */;
}

declare class fasttrap_machtp {
  constructor(init?: fasttrap_machtp);
  ftmt_instr: fasttrap_instr_t;
  ftmt_fntype: number;
  ftmt_thumb: number;
  ftmt_type: number;
  ftmt_installed: number;
  ftmt_retired: number;
}

declare class slapi_pblock {
  constructor(init?: slapi_pblock);
}

declare class mach_port_destroyed_notification_t {
  constructor(init?: mach_port_destroyed_notification_t);
  not_header: mach_msg_header_t;
  not_body: mach_msg_body_t;
  not_port: mach_msg_port_descriptor_t;
  trailer: mach_msg_security_trailer_t;
}

declare class dyld_shared_cache_ranges {
  constructor(init?: dyld_shared_cache_ranges);
  sharedRegionsCount: number;
  ranges: unknown /* const array */;
}

declare class __Reply__mach_vm_update_pointers_with_remote_tags_t {
  constructor(init?: __Reply__mach_vm_update_pointers_with_remote_tags_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  out_pointer_listCnt: number;
  out_pointer_list: unknown /* const array */;
}

declare class mach_service_port_info {
  constructor(init?: mach_service_port_info);
  mspi_string_name: unknown /* const array */;
  mspi_domain_type: number;
}

declare class NXHashState {
  constructor(init?: NXHashState);
  i: number;
  j: number;
}

declare class __Request__processor_set_max_priority_t {
  constructor(init?: __Request__processor_set_max_priority_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  max_priority: number;
  change_threads: number;
}

declare class igmpstat_v3 {
  constructor(init?: igmpstat_v3);
  igps_version: number;
  igps_len: number;
  igps_rcv_total: number;
  igps_rcv_tooshort: number;
  igps_rcv_badttl: number;
  igps_rcv_badsum: number;
  igps_rcv_v1v2_queries: number;
  igps_rcv_v3_queries: number;
  igps_rcv_badqueries: number;
  igps_rcv_gen_queries: number;
  igps_rcv_group_queries: number;
  igps_rcv_gsr_queries: number;
  igps_drop_gsr_queries: number;
  igps_rcv_reports: number;
  igps_rcv_badreports: number;
  igps_rcv_ourreports: number;
  igps_rcv_nora: number;
  igps_snd_reports: number;
  __igps_pad: unknown /* const array */;
}

declare class __darwin_arm_exception_state64_v2 {
  constructor(init?: __darwin_arm_exception_state64_v2);
  __far: number;
  __esr: number;
}

declare class ppd_coption_s {
  constructor(init?: ppd_coption_s);
  keyword: unknown /* const array */;
  option: interop.Pointer;
  marked: number;
  params: interop.Pointer;
}

declare class fsobj_id {
  constructor(init?: fsobj_id);
  fid_objno: number;
  fid_generation: number;
}

declare class sqlite3_value {
  constructor(init?: sqlite3_value);
}

declare class fsid {
  constructor(init?: fsid);
  val: unknown /* const array */;
}

declare class thread_command {
  constructor(init?: thread_command);
  cmd: number;
  cmdsize: number;
}

declare class mach_no_senders_notification_t {
  constructor(init?: mach_no_senders_notification_t);
  not_header: mach_msg_header_t;
  NDR: NDR_record_t;
  not_count: number;
  trailer: mach_msg_security_trailer_t;
}

declare class kmod_info_64_v1 {
  constructor(init?: kmod_info_64_v1);
  next_addr: number;
  info_version: number;
  id: number;
  name: unknown /* const array */;
  version: unknown /* const array */;
  reference_count: number;
  reference_list_addr: number;
  address: number;
  size: number;
  hdr_size: number;
  start_addr: number;
  stop_addr: number;
}

declare class kmod_reference {
  constructor(init?: kmod_reference);
  next: interop.Pointer;
  info: interop.Pointer;
}

declare class vm_region_extended_info {
  constructor(init?: vm_region_extended_info);
  protection: number;
  user_tag: number;
  pages_resident: number;
  pages_shared_now_private: number;
  pages_swapped_out: number;
  pages_dirtied: number;
  ref_count: number;
  shadow_depth: number;
  external_pager: number;
  share_mode: number;
  pages_reusable: number;
}

declare class sigstack {
  constructor(init?: sigstack);
  ss_sp: string | null;
  ss_onstack: number;
}

declare class slapi_mod {
  constructor(init?: slapi_mod);
}

declare class error_table {
  constructor(init?: error_table);
  messages: interop.Pointer;
  base: number;
  count: number;
}

declare class kcdata_subtype_descriptor {
  constructor(init?: kcdata_subtype_descriptor);
  kcs_flags: number;
  kcs_elem_type: number;
  kcs_elem_offset: number;
  kcs_elem_size: number;
  kcs_name: unknown /* const array */;
}

declare class thread_throughput_qos_policy {
  constructor(init?: thread_throughput_qos_policy);
  thread_throughput_qos_tier: number;
}

declare class __Reply__host_get_clock_control_t {
  constructor(init?: __Reply__host_get_clock_control_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  clock_ctrl: mach_msg_port_descriptor_t;
}

declare class sockaddr_inarp {
  constructor(init?: sockaddr_inarp);
  sin_len: number;
  sin_family: number;
  sin_port: number;
  sin_addr: in_addr;
  sin_srcaddr: in_addr;
  sin_tos: number;
  sin_other: number;
}

declare class dyld_chained_ptr_arm64e_auth_rebase {
  constructor(init?: dyld_chained_ptr_arm64e_auth_rebase);
  target: number;
  diversity: number;
  addrDiv: number;
  key: number;
  next: number;
  bind: number;
  auth: number;
}

declare class thread_background_policy {
  constructor(init?: thread_background_policy);
  priority: number;
}

declare class __Reply__task_test_async_upcall_propagation_t {
  constructor(init?: __Reply__task_test_async_upcall_propagation_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class fd_set {
  constructor(init?: fd_set);
  fds_bits: unknown /* const array */;
}

declare class __Request__task_register_dyld_get_process_state_t {
  constructor(init?: __Request__task_register_dyld_get_process_state_t);
  Head: mach_msg_header_t;
}

declare class __darwin_arm_exception_state64 {
  constructor(init?: __darwin_arm_exception_state64);
  __far: number;
  __esr: number;
  __exception: number;
}

declare class FixedRect {
  constructor(init?: FixedRect);
  left: number;
  top: number;
  right: number;
  bottom: number;
}

declare class __darwin_arm_thread_state {
  constructor(init?: __darwin_arm_thread_state);
  __r: unknown /* const array */;
  __sp: number;
  __lr: number;
  __pc: number;
  __cpsr: number;
}

declare class __Request__task_set_policy_t {
  constructor(init?: __Request__task_set_policy_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  pset: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  policy: number;
  baseCnt: number;
  base: unknown /* const array */;
  limitCnt: number;
  limit: unknown /* const array */;
  change: number;
}

declare class io_stat_entry {
  constructor(init?: io_stat_entry);
  count: number;
  size: number;
}

declare class ident_command {
  constructor(init?: ident_command);
  cmd: number;
  cmdsize: number;
}

declare class ipstat {
  constructor(init?: ipstat);
  ips_total: number;
  ips_badsum: number;
  ips_tooshort: number;
  ips_toosmall: number;
  ips_badhlen: number;
  ips_badlen: number;
  ips_fragments: number;
  ips_fragdropped: number;
  ips_fragtimeout: number;
  ips_forward: number;
  ips_fastforward: number;
  ips_cantforward: number;
  ips_redirectsent: number;
  ips_noproto: number;
  ips_delivered: number;
  ips_localout: number;
  ips_odropped: number;
  ips_reassembled: number;
  ips_fragmented: number;
  ips_ofragments: number;
  ips_cantfrag: number;
  ips_badoptions: number;
  ips_noroute: number;
  ips_badvers: number;
  ips_rawout: number;
  ips_toolong: number;
  ips_notmember: number;
  ips_nogif: number;
  ips_badaddr: number;
  ips_pktdropcntrl: number;
  ips_rcv_swcsum: number;
  ips_rcv_swcsum_bytes: number;
  ips_snd_swcsum: number;
  ips_snd_swcsum_bytes: number;
  ips_adj: number;
  ips_adj_hwcsum_clr: number;
  ips_rxc_collisions: number;
  ips_rxc_chained: number;
  ips_rxc_notchain: number;
  ips_rxc_chainsz_gt2: number;
  ips_rxc_chainsz_gt4: number;
  ips_rxc_notlist: number;
  ips_raw_sappend_fail: number;
  ips_necp_policy_drop: number;
  ips_rcv_if_weak_match: number;
  ips_rcv_if_no_match: number;
  ips_input_ipf_drop: number;
  ips_input_no_proto: number;
  ips_src_addr_not_avail: number;
}

declare class __Reply__thread_get_state_t {
  constructor(init?: __Reply__thread_get_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  old_stateCnt: number;
  old_state: unknown /* const array */;
}

declare class thread_identifier_info {
  constructor(init?: thread_identifier_info);
  thread_id: number;
  thread_handle: number;
  dispatch_qaddr: number;
}

declare class __Request__vm_behavior_set_t {
  constructor(init?: __Request__vm_behavior_set_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  new_behavior: number;
}

declare class __darwin_arm_sme2_state {
  constructor(init?: __darwin_arm_sme2_state);
  __zt0: unknown /* const array */;
}

declare class icmpstat {
  constructor(init?: icmpstat);
  icps_error: number;
  icps_oldshort: number;
  icps_oldicmp: number;
  icps_outhist: unknown /* const array */;
  icps_badcode: number;
  icps_tooshort: number;
  icps_checksum: number;
  icps_badlen: number;
  icps_reflect: number;
  icps_inhist: unknown /* const array */;
  icps_bmcastecho: number;
  icps_bmcasttstamp: number;
}

declare class attrlist {
  constructor(init?: attrlist);
  bitmapcount: number;
  reserved: number;
  commonattr: number;
  volattr: number;
  dirattr: number;
  fileattr: number;
  forkattr: number;
}

declare class thread_basic_info {
  constructor(init?: thread_basic_info);
  user_time: time_value;
  system_time: time_value;
  cpu_usage: number;
  policy: number;
  run_state: number;
  flags: number;
  suspend_count: number;
  sleep_time: number;
}

declare class target_triple_command {
  constructor(init?: target_triple_command);
  cmd: number;
  cmdsize: number;
  triple: lc_str;
}

declare class __Request__host_set_UNDServer_t {
  constructor(init?: __Request__host_set_UNDServer_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  server: mach_msg_port_descriptor_t;
}

declare class Fts5ExtensionApi {
  constructor(init?: Fts5ExtensionApi);
  iVersion: number;
  xUserData: (p1: interop.PointerConvertible) => interop.Pointer | null;
  xColumnCount: (p1: interop.PointerConvertible) => number | null;
  xRowCount: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  xColumnTotalSize: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number | null;
  xTokenize: (p1: interop.PointerConvertible, p2: string, p3: number, p4: interop.PointerConvertible, p5: (p1: interop.PointerConvertible, p2: number, p3: string, p4: number, p5: number, p6: number) => number) => number | null;
  xPhraseCount: (p1: interop.PointerConvertible) => number | null;
  xPhraseSize: (p1: interop.PointerConvertible, p2: number) => number | null;
  xInstCount: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  xInst: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible) => number | null;
  xRowid: (p1: interop.PointerConvertible) => number | null;
  xColumnText: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number | null;
  xColumnSize: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number | null;
  xQueryPhrase: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number) => number | null;
  xSetAuxdata: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: (p1: interop.PointerConvertible) => void) => number | null;
  xGetAuxdata: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  xPhraseFirst: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible) => number | null;
  xPhraseNext: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => void | null;
  xPhraseFirstColumn: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number | null;
  xPhraseNextColumn: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => void | null;
  xQueryToken: (p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible) => number | null;
  xInstToken: (p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible) => number | null;
  xColumnLocale: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number | null;
  xTokenize_v2: (p1: interop.PointerConvertible, p2: string, p3: number, p4: string, p5: number, p6: interop.PointerConvertible, p7: (p1: interop.PointerConvertible, p2: number, p3: string, p4: number, p5: number, p6: number) => number) => number | null;
}

declare class in6_prflags {
  constructor(init?: in6_prflags);
  prf_ra: prf_ra;
  prf_reserved1: number;
  prf_reserved2: number;
  prf_rr: prf_rr;
  prf_reserved3: number;
  prf_reserved4: number;
}

declare class mach_port_info_ext {
  constructor(init?: mach_port_info_ext);
  mpie_status: mach_port_status;
  mpie_boost_cnt: number;
  reserved: unknown /* const array */;
}

declare class unnamed_4086398859282741099 {
  constructor(init?: unnamed_4086398859282741099);
  control: number;
  frmr_rej_pdu0: number;
  frmr_rej_pdu1: number;
  frmr_control: number;
  frmr_control_ext: number;
  frmr_cause: number;
}

declare class vfstable {
  constructor(init?: vfstable);
}

declare class __Reply__mach_port_allocate_name_t {
  constructor(init?: __Reply__mach_port_allocate_name_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class ip6_pktopts {
  constructor(init?: ip6_pktopts);
}

declare class ombstat {
  constructor(init?: ombstat);
  m_mbufs: number;
  m_clusters: number;
  m_spare: number;
  m_clfree: number;
  m_drops: number;
  m_wait: number;
  m_drain: number;
  m_mtypes: unknown /* const array */;
  m_mcfail: number;
  m_mpfail: number;
  m_msize: number;
  m_mclbytes: number;
  m_minclsize: number;
  m_mlen: number;
  m_mhlen: number;
}

declare class __Request__task_suspend2_t {
  constructor(init?: __Request__task_suspend2_t);
  Head: mach_msg_header_t;
}

declare class task_wait_state_info {
  constructor(init?: task_wait_state_info);
  total_wait_state_time: number;
  total_wait_sfi_state_time: number;
  _reserved: unknown /* const array */;
}

declare class policy_limits {
  constructor(init?: policy_limits);
  ts: policy_timeshare_limit;
  rr: policy_rr_limit;
  fifo: policy_fifo_limit;
}

declare class task_trace_memory_info {
  constructor(init?: task_trace_memory_info);
  user_memory_address: number;
  buffer_size: number;
  mailbox_array_size: number;
}

declare class sockproto {
  constructor(init?: sockproto);
  sp_family: number;
  sp_protocol: number;
}

declare class __Request__host_set_atm_diagnostic_flag_t {
  constructor(init?: __Request__host_set_atm_diagnostic_flag_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  diagnostic_flag: number;
}

declare class task_basic_info_64_2 {
  constructor(init?: task_basic_info_64_2);
  suspend_count: number;
  virtual_size: number;
  resident_size: number;
  user_time: time_value;
  system_time: time_value;
  policy: number;
}

declare class __Request__mach_vm_map_t {
  constructor(init?: __Request__mach_vm_map_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  object: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  mask: number;
  flags: number;
  offset: number;
  copy: number;
  cur_protection: number;
  max_protection: number;
  inheritance: number;
}

declare class persona_modify_info {
  constructor(init?: persona_modify_info);
  persona_id: number;
  unique_pid: number;
}

declare class task_thread_times_info {
  constructor(init?: task_thread_times_info);
  user_time: time_value;
  system_time: time_value;
}

declare class task_events_info {
  constructor(init?: task_events_info);
  faults: number;
  pageins: number;
  cow_faults: number;
  messages_sent: number;
  messages_received: number;
  syscalls_mach: number;
  syscalls_unix: number;
  csw: number;
}

declare class task_basic_info_64 {
  constructor(init?: task_basic_info_64);
  suspend_count: number;
  virtual_size: number;
  resident_size: number;
  user_time: time_value;
  system_time: time_value;
  policy: number;
}

declare class policy_bases {
  constructor(init?: policy_bases);
  ts: policy_timeshare_base;
  rr: policy_rr_base;
  fifo: policy_fifo_base;
}

declare class in_addr {
  constructor(init?: in_addr);
  s_addr: number;
}

declare class ifmediareq {
  constructor(init?: ifmediareq);
  ifm_name: unknown /* const array */;
  ifm_current: number;
  ifm_mask: number;
  ifm_status: number;
  ifm_active: number;
  ifm_count: number;
  ifm_ulist: interop.Pointer;
}

declare class sqlite3_module {
  constructor(init?: sqlite3_module);
  iVersion: number;
  xCreate: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible) => number | null;
  xConnect: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible) => number | null;
  xBestIndex: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  xDisconnect: (p1: interop.PointerConvertible) => number | null;
  xDestroy: (p1: interop.PointerConvertible) => number | null;
  xOpen: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  xClose: (p1: interop.PointerConvertible) => number | null;
  xFilter: (p1: interop.PointerConvertible, p2: number, p3: string, p4: number, p5: interop.PointerConvertible) => number | null;
  xNext: (p1: interop.PointerConvertible) => number | null;
  xEof: (p1: interop.PointerConvertible) => number | null;
  xColumn: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number) => number | null;
  xRowid: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  xUpdate: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number | null;
  xBegin: (p1: interop.PointerConvertible) => number | null;
  xSync: (p1: interop.PointerConvertible) => number | null;
  xCommit: (p1: interop.PointerConvertible) => number | null;
  xRollback: (p1: interop.PointerConvertible) => number | null;
  xFindFunction: (p1: interop.PointerConvertible, p2: number, p3: string, p4: interop.PointerConvertible, p5: interop.PointerConvertible) => number | null;
  xRename: (p1: interop.PointerConvertible, p2: string) => number | null;
  xSavepoint: (p1: interop.PointerConvertible, p2: number) => number | null;
  xRelease: (p1: interop.PointerConvertible, p2: number) => number | null;
  xRollbackTo: (p1: interop.PointerConvertible, p2: number) => number | null;
  xShadowName: (p1: string) => number | null;
  xIntegrity: (p1: interop.PointerConvertible, p2: string, p3: string, p4: number, p5: interop.PointerConvertible) => number | null;
}

declare class esptail {
  constructor(init?: esptail);
  esp_padlen: number;
  esp_nxt: number;
}

declare class policy_rr_base {
  constructor(init?: policy_rr_base);
  base_priority: number;
  quantum: number;
}

declare class __Request__mach_vm_allocate_t {
  constructor(init?: __Request__mach_vm_allocate_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  flags: number;
}

declare class __Request__mach_memory_entry_ownership_t {
  constructor(init?: __Request__mach_memory_entry_ownership_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  owner: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  ledger_tag: number;
  ledger_flags: number;
}

declare class policy_timeshare_base {
  constructor(init?: policy_timeshare_base);
  base_priority: number;
}

declare class __Request__processor_info_t {
  constructor(init?: __Request__processor_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  processor_info_outCnt: number;
}

declare class __Request__task_zone_info_t {
  constructor(init?: __Request__task_zone_info_t);
  Head: mach_msg_header_t;
}

declare class __Reply__host_get_clock_service_t {
  constructor(init?: __Reply__host_get_clock_service_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  clock_serv: mach_msg_port_descriptor_t;
}

declare class URegularExpression {
  constructor(init?: URegularExpression);
}

declare class processor_cpu_stat {
  constructor(init?: processor_cpu_stat);
  irq_ex_cnt: number;
  ipi_cnt: number;
  timer_cnt: number;
  undef_ex_cnt: number;
  unaligned_cnt: number;
  vfp_cnt: number;
  vfp_shortv_cnt: number;
  data_ex_cnt: number;
  instr_ex_cnt: number;
}

declare class __Reply__task_get_exception_ports_t {
  constructor(init?: __Reply__task_get_exception_ports_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  old_handlers: unknown /* const array */;
  NDR: NDR_record_t;
  masksCnt: number;
  masks: unknown /* const array */;
  old_behaviors: unknown /* const array */;
  old_flavors: unknown /* const array */;
}

declare class vnode {
  constructor(init?: vnode);
}

declare class ipc_info_port {
  constructor(init?: ipc_info_port);
  iip_port_object: number;
  iip_receiver_object: number;
}

declare class protoent {
  constructor(init?: protoent);
  p_name: string | null;
  p_aliases: interop.Pointer;
  p_proto: number;
}

declare class radvisory {
  constructor(init?: radvisory);
  ra_offset: number;
  ra_count: number;
}

declare class ipc_info_name {
  constructor(init?: ipc_info_name);
  iin_name: number;
  iin_collision: number;
  iin_type: number;
  iin_urefs: number;
  iin_object: number;
  iin_next: number;
  iin_hash: number;
}

declare class __Request__mach_vm_update_pointers_with_remote_tags_t {
  constructor(init?: __Request__mach_vm_update_pointers_with_remote_tags_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  in_pointer_listCnt: number;
  in_pointer_list: unknown /* const array */;
  out_pointer_listCnt: number;
}

declare class unwind_info_compressed_second_level_page_header {
  constructor(init?: unwind_info_compressed_second_level_page_header);
  kind: number;
  entryPageOffset: number;
  entryCount: number;
  encodingsPageOffset: number;
  encodingsCount: number;
}

declare class host_load_info {
  constructor(init?: host_load_info);
  avenrun: unknown /* const array */;
  mach_factor: unknown /* const array */;
}

declare class _xpc_bool_s {
  constructor(init?: _xpc_bool_s);
}

declare class au_zonename_t {
  constructor(init?: au_zonename_t);
  len: number;
  zonename: string | null;
}

declare class ldapapiinfo {
  constructor(init?: ldapapiinfo);
  ldapai_info_version: number;
  ldapai_api_version: number;
  ldapai_protocol_version: number;
  ldapai_extensions: interop.Pointer;
  ldapai_vendor_name: string | null;
  ldapai_vendor_version: number;
}

declare class gss_channel_bindings_struct {
  constructor(init?: gss_channel_bindings_struct);
  initiator_addrtype: number;
  initiator_address: gss_buffer_desc_struct;
  acceptor_addrtype: number;
  acceptor_address: gss_buffer_desc_struct;
  application_data: gss_buffer_desc_struct;
}

declare class host_sched_info {
  constructor(init?: host_sched_info);
  min_timeout: number;
  min_quantum: number;
}

declare class objc_category {
  constructor(init?: objc_category);
}

declare class __NSModule {
  constructor(init?: __NSModule);
}

declare class vm_purgeable_stat {
  constructor(init?: vm_purgeable_stat);
  count: number;
  size: number;
}

declare class host_can_has_debugger_info {
  constructor(init?: host_can_has_debugger_info);
  can_has_debugger: number;
}

declare class __Request__mach_ports_register_t {
  constructor(init?: __Request__mach_ports_register_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  init_port_set: mach_msg_ool_ports_descriptor_t;
  NDR: NDR_record_t;
  init_port_setCnt: number;
}

declare class vm_extmod_statistics {
  constructor(init?: vm_extmod_statistics);
  task_for_pid_count: number;
  task_for_pid_caller_count: number;
  thread_creation_count: number;
  thread_creation_caller_count: number;
  thread_set_state_count: number;
  thread_set_state_caller_count: number;
}

declare class __Reply__host_default_memory_manager_t {
  constructor(init?: __Reply__host_default_memory_manager_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  default_manager: mach_msg_port_descriptor_t;
}

declare class vm_statistics64 {
  constructor(init?: vm_statistics64);
  free_count: number;
  active_count: number;
  inactive_count: number;
  wire_count: number;
  zero_fill_count: number;
  reactivations: number;
  pageins: number;
  pageouts: number;
  faults: number;
  cow_faults: number;
  lookups: number;
  hits: number;
  purges: number;
  purgeable_count: number;
  speculative_count: number;
  decompressions: number;
  compressions: number;
  swapins: number;
  swapouts: number;
  compressor_page_count: number;
  throttled_count: number;
  external_page_count: number;
  internal_page_count: number;
  total_uncompressed_pages_in_compressor: number;
  swapped_count: number;
}

declare class __Request__mach_port_get_context_t {
  constructor(init?: __Request__mach_port_get_context_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
}

declare class gss_krb5_cfx_keydata {
  constructor(init?: gss_krb5_cfx_keydata);
  have_acceptor_subkey: number;
  ctx_key: gss_krb5_lucid_key;
  acceptor_subkey: gss_krb5_lucid_key;
}

declare class sqlite3_index_orderby {
  constructor(init?: sqlite3_index_orderby);
  iColumn: number;
  desc: number;
}

declare class ipc_perm {
  constructor(init?: ipc_perm);
  uid: number;
  gid: number;
  cuid: number;
  cgid: number;
  mode: number;
  _seq: number;
  _key: number;
}

declare class __Request__thread_abort_t {
  constructor(init?: __Request__thread_abort_t);
  Head: mach_msg_header_t;
}

declare class __Reply__processor_set_policy_enable_t {
  constructor(init?: __Reply__processor_set_policy_enable_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__mach_port_assert_attributes_t {
  constructor(init?: __Reply__mach_port_assert_attributes_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class VersRec {
  constructor(init?: VersRec);
  numericVersion: NumVersion;
  countryCode: number;
  shortVersion: unknown /* const array */;
  reserved: unknown /* const array */;
}

declare class thread_latency_qos_policy {
  constructor(init?: thread_latency_qos_policy);
  thread_latency_qos_tier: number;
}

declare class Float32Point {
  constructor(init?: Float32Point);
  x: number;
  y: number;
}

declare class routine_descriptor {
  constructor(init?: routine_descriptor);
  impl_routine: () => number | null;
  stub_routine: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void | null;
  argc: number;
  descr_count: number;
  arg_descr: interop.Pointer;
  max_reply_msg: number;
}

declare class fattributiontag {
  constructor(init?: fattributiontag);
  ft_flags: number;
  ft_hash: number;
  ft_attribution_name: unknown /* const array */;
}

declare class wide {
  constructor(init?: wide);
  lo: number;
  hi: number;
}

declare class __Reply__thread_set_mach_voucher_t {
  constructor(init?: __Reply__thread_set_mach_voucher_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class ldap_ava {
  constructor(init?: ldap_ava);
  la_attr: berval;
  la_value: berval;
  la_flags: number;
  la_private: interop.Pointer;
}

declare class fts5_tokenizer {
  constructor(init?: fts5_tokenizer);
  xCreate: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible) => number | null;
  xDelete: (p1: interop.PointerConvertible) => void | null;
  xTokenize: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: string, p5: number, p6: (p1: interop.PointerConvertible, p2: number, p3: string, p4: number, p5: number, p6: number) => number) => number | null;
}

declare class fts5_tokenizer_v2 {
  constructor(init?: fts5_tokenizer_v2);
  iVersion: number;
  xCreate: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible) => number | null;
  xDelete: (p1: interop.PointerConvertible) => void | null;
  xTokenize: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: string, p5: number, p6: string, p7: number, p8: (p1: interop.PointerConvertible, p2: number, p3: string, p4: number, p5: number, p6: number) => number) => number | null;
}

declare class ipc_info_space_basic {
  constructor(init?: ipc_info_space_basic);
  iisb_genno_mask: number;
  iisb_table_size: number;
  iisb_table_next: number;
  iisb_table_inuse: number;
  iisb_reserved: unknown /* const array */;
}

declare class __Request__task_info_t {
  constructor(init?: __Request__task_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  task_info_outCnt: number;
}

declare class krb5plugin_service_locate_ftable {
  constructor(init?: krb5plugin_service_locate_ftable);
  minor_version: number;
  init: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  fini: (p1: interop.PointerConvertible) => void | null;
  lookup: (p1: interop.PointerConvertible, p2: interop.Enum<typeof locate_service_type>, p3: string, p4: number, p5: number, p6: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number, p7: interop.PointerConvertible) => number | null;
}

declare class __Request__mach_port_swap_guard_t {
  constructor(init?: __Request__mach_port_swap_guard_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  old_guard: number;
  new_guard: number;
}

declare class __Request__clock_alarm_reply_t {
  constructor(init?: __Request__clock_alarm_reply_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  alarm_code: number;
  alarm_type: number;
  alarm_time: mach_timespec;
}

declare class _krb5_pwd_data {
  constructor(init?: _krb5_pwd_data);
  magic: number;
  sequence_count: number;
  element: interop.Pointer;
}

declare class sqlite3_pcache_methods {
  constructor(init?: sqlite3_pcache_methods);
  pArg: interop.Pointer;
  xInit: (p1: interop.PointerConvertible) => number | null;
  xShutdown: (p1: interop.PointerConvertible) => void | null;
  xCreate: (p1: number, p2: number) => interop.Pointer | null;
  xCachesize: (p1: interop.PointerConvertible, p2: number) => void | null;
  xPagecount: (p1: interop.PointerConvertible) => number | null;
  xFetch: (p1: interop.PointerConvertible, p2: number, p3: number) => interop.Pointer | null;
  xUnpin: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number) => void | null;
  xRekey: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number) => void | null;
  xTruncate: (p1: interop.PointerConvertible, p2: number) => void | null;
  xDestroy: (p1: interop.PointerConvertible) => void | null;
}

declare class kernel_resource_sizes {
  constructor(init?: kernel_resource_sizes);
  task: number;
  thread: number;
  port: number;
  memory_region: number;
  memory_object: number;
}

declare class _krb5_cryptosystem_entry {
  constructor(init?: _krb5_cryptosystem_entry);
}

declare class __Request__task_identity_token_get_task_port_t {
  constructor(init?: __Request__task_identity_token_get_task_port_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
}

declare class in6_aliasreq {
  constructor(init?: in6_aliasreq);
  ifra_name: unknown /* const array */;
  ifra_addr: sockaddr_in6;
  ifra_broadaddr: sockaddr_in6;
  ifra_prefixmask: sockaddr_in6;
  ifra_flags: number;
  ifra_lifetime: in6_addrlifetime;
}

declare class __Request__host_get_io_main_t {
  constructor(init?: __Request__host_get_io_main_t);
  Head: mach_msg_header_t;
}

declare class gss_name_struct {
  constructor(init?: gss_name_struct);
}

declare class sqlite3_snapshot {
  constructor(init?: sqlite3_snapshot);
  hidden: unknown /* const array */;
}

declare class compression_stream {
  constructor(init?: compression_stream);
  dst_ptr: interop.Pointer;
  dst_size: number;
  src_ptr: interop.Pointer;
  src_size: number;
  state: interop.Pointer;
}

declare class arphdr {
  constructor(init?: arphdr);
  ar_hrd: number;
  ar_pro: number;
  ar_hln: number;
  ar_pln: number;
  ar_op: number;
}

declare class slapi_value {
  constructor(init?: slapi_value);
}

declare class __Reply__task_assign_t {
  constructor(init?: __Reply__task_assign_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class sqlite3_pcache_page {
  constructor(init?: sqlite3_pcache_page);
  pBuf: interop.Pointer;
  pExtra: interop.Pointer;
}

declare class cups_page_header_s {
  constructor(init?: cups_page_header_s);
  MediaClass: unknown /* const array */;
  MediaColor: unknown /* const array */;
  MediaType: unknown /* const array */;
  OutputType: unknown /* const array */;
  AdvanceDistance: number;
  AdvanceMedia: interop.Enum<typeof cups_adv_e>;
  Collate: interop.Enum<typeof cups_bool_e>;
  CutMedia: interop.Enum<typeof cups_cut_e>;
  Duplex: interop.Enum<typeof cups_bool_e>;
  HWResolution: unknown /* const array */;
  ImagingBoundingBox: unknown /* const array */;
  InsertSheet: interop.Enum<typeof cups_bool_e>;
  Jog: interop.Enum<typeof cups_jog_e>;
  LeadingEdge: interop.Enum<typeof cups_edge_e>;
  Margins: unknown /* const array */;
  ManualFeed: interop.Enum<typeof cups_bool_e>;
  MediaPosition: number;
  MediaWeight: number;
  MirrorPrint: interop.Enum<typeof cups_bool_e>;
  NegativePrint: interop.Enum<typeof cups_bool_e>;
  NumCopies: number;
  Orientation: interop.Enum<typeof cups_orient_e>;
  OutputFaceUp: interop.Enum<typeof cups_bool_e>;
  PageSize: unknown /* const array */;
  Separations: interop.Enum<typeof cups_bool_e>;
  TraySwitch: interop.Enum<typeof cups_bool_e>;
  Tumble: interop.Enum<typeof cups_bool_e>;
  cupsWidth: number;
  cupsHeight: number;
  cupsMediaType: number;
  cupsBitsPerColor: number;
  cupsBitsPerPixel: number;
  cupsBytesPerLine: number;
  cupsColorOrder: interop.Enum<typeof cups_order_e>;
  cupsColorSpace: interop.Enum<typeof cups_cspace_e>;
  cupsCompression: number;
  cupsRowCount: number;
  cupsRowFeed: number;
  cupsRowStep: number;
}

declare class au_tid_addr {
  constructor(init?: au_tid_addr);
  at_port: number;
  at_type: number;
  at_addr: unknown /* const array */;
}

declare class au_attr64_t {
  constructor(init?: au_attr64_t);
  mode: number;
  uid: number;
  gid: number;
  fsid: number;
  nid: number;
  dev: number;
}

declare class sqlite3_blob {
  constructor(init?: sqlite3_blob);
}

declare class sqlite3_context {
  constructor(init?: sqlite3_context);
}

declare class utimbuf {
  constructor(init?: utimbuf);
  actime: number;
  modtime: number;
}

declare class krb5_replay_data {
  constructor(init?: krb5_replay_data);
  timestamp: number;
  usec: number;
  seq: number;
}

declare class __Request__host_get_UNDServer_t {
  constructor(init?: __Request__host_get_UNDServer_t);
  Head: mach_msg_header_t;
}

declare class exclave_textlayout_info_v1 {
  constructor(init?: exclave_textlayout_info_v1);
  layout_id: number;
  etl_flags: number;
}

declare class stackshot_suspension_source {
  constructor(init?: stackshot_suspension_source);
  tss_time: number;
  tss_tid: number;
  tss_pid: number;
  tss_procname: unknown /* const array */;
}

declare class rtstat {
  constructor(init?: rtstat);
  rts_badredirect: number;
  rts_dynamic: number;
  rts_newgateway: number;
  rts_unreach: number;
  rts_wildcard: number;
  rts_badrtgwroute: number;
}

declare class __Reply__vm_region_recurse_t {
  constructor(init?: __Reply__vm_region_recurse_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  address: number;
  size: number;
  nesting_depth: number;
  infoCnt: number;
  info: unknown /* const array */;
}

declare class sqlite3_api_routines {
  constructor(init?: sqlite3_api_routines);
  aggregate_context: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  aggregate_count: (p1: interop.PointerConvertible) => number | null;
  bind_blob: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: number, p5: (p1: interop.PointerConvertible) => void) => number | null;
  bind_double: (p1: interop.PointerConvertible, p2: number, p3: number) => number | null;
  bind_int: (p1: interop.PointerConvertible, p2: number, p3: number) => number | null;
  bind_int64: (p1: interop.PointerConvertible, p2: number, p3: number) => number | null;
  bind_null: (p1: interop.PointerConvertible, p2: number) => number | null;
  bind_parameter_count: (p1: interop.PointerConvertible) => number | null;
  bind_parameter_index: (p1: interop.PointerConvertible, p2: string) => number | null;
  bind_parameter_name: (p1: interop.PointerConvertible, p2: number) => string | null;
  bind_text: (p1: interop.PointerConvertible, p2: number, p3: string, p4: number, p5: (p1: interop.PointerConvertible) => void) => number | null;
  bind_text16: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: number, p5: (p1: interop.PointerConvertible) => void) => number | null;
  bind_value: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number | null;
  busy_handler: (p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: number) => number, p3: interop.PointerConvertible) => number | null;
  busy_timeout: (p1: interop.PointerConvertible, p2: number) => number | null;
  changes: (p1: interop.PointerConvertible) => number | null;
  close: (p1: interop.PointerConvertible) => number | null;
  collation_needed: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: string) => void) => number | null;
  collation_needed16: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible) => void) => number | null;
  column_blob: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  column_bytes: (p1: interop.PointerConvertible, p2: number) => number | null;
  column_bytes16: (p1: interop.PointerConvertible, p2: number) => number | null;
  column_count: (p1: interop.PointerConvertible) => number | null;
  column_database_name: (p1: interop.PointerConvertible, p2: number) => string | null;
  column_database_name16: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  column_decltype: (p1: interop.PointerConvertible, p2: number) => string | null;
  column_decltype16: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  column_double: (p1: interop.PointerConvertible, p2: number) => number | null;
  column_int: (p1: interop.PointerConvertible, p2: number) => number | null;
  column_int64: (p1: interop.PointerConvertible, p2: number) => number | null;
  column_name: (p1: interop.PointerConvertible, p2: number) => string | null;
  column_name16: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  column_origin_name: (p1: interop.PointerConvertible, p2: number) => string | null;
  column_origin_name16: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  column_table_name: (p1: interop.PointerConvertible, p2: number) => string | null;
  column_table_name16: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  column_text: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  column_text16: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  column_type: (p1: interop.PointerConvertible, p2: number) => number | null;
  column_value: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  commit_hook: (p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible) => number, p3: interop.PointerConvertible) => interop.Pointer | null;
  complete: (p1: string) => number | null;
  complete16: (p1: interop.PointerConvertible) => number | null;
  create_collation: (p1: interop.PointerConvertible, p2: string, p3: number, p4: interop.PointerConvertible, p5: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: number, p5: interop.PointerConvertible) => number) => number | null;
  create_collation16: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible, p5: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: number, p5: interop.PointerConvertible) => number) => number | null;
  create_function: (p1: interop.PointerConvertible, p2: string, p3: number, p4: number, p5: interop.PointerConvertible, p6: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, p7: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, p8: (p1: interop.PointerConvertible) => void) => number | null;
  create_function16: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number, p5: interop.PointerConvertible, p6: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, p7: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, p8: (p1: interop.PointerConvertible) => void) => number | null;
  create_module: (p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number | null;
  data_count: (p1: interop.PointerConvertible) => number | null;
  db_handle: (p1: interop.PointerConvertible) => interop.Pointer | null;
  declare_vtab: (p1: interop.PointerConvertible, p2: string) => number | null;
  enable_shared_cache: (p1: number) => number | null;
  errcode: (p1: interop.PointerConvertible) => number | null;
  errmsg: (p1: interop.PointerConvertible) => string | null;
  errmsg16: (p1: interop.PointerConvertible) => interop.Pointer | null;
  exec: (p1: interop.PointerConvertible, p2: string, p3: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number, p4: interop.PointerConvertible, p5: interop.PointerConvertible) => number | null;
  expired: (p1: interop.PointerConvertible) => number | null;
  finalize: (p1: interop.PointerConvertible) => number | null;
  free: (p1: interop.PointerConvertible) => void | null;
  free_table: (p1: interop.PointerConvertible) => void | null;
  get_autocommit: (p1: interop.PointerConvertible) => number | null;
  get_auxdata: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  get_table: (p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible) => number | null;
  global_recover: () => number | null;
  interruptx: (p1: interop.PointerConvertible) => void | null;
  last_insert_rowid: (p1: interop.PointerConvertible) => number | null;
  libversion: () => string | null;
  libversion_number: () => number | null;
  malloc: (p1: number) => interop.Pointer | null;
  mprintf: (p1: string) => string | null;
  open: (p1: string, p2: interop.PointerConvertible) => number | null;
  open16: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  prepare: (p1: interop.PointerConvertible, p2: string, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible) => number | null;
  prepare16: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible) => number | null;
  profile: (p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: string, p3: number) => void, p3: interop.PointerConvertible) => interop.Pointer | null;
  progress_handler: (p1: interop.PointerConvertible, p2: number, p3: (p1: interop.PointerConvertible) => number, p4: interop.PointerConvertible) => void | null;
  realloc: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  reset: (p1: interop.PointerConvertible) => number | null;
  result_blob: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: (p1: interop.PointerConvertible) => void) => void | null;
  result_double: (p1: interop.PointerConvertible, p2: number) => void | null;
  result_error: (p1: interop.PointerConvertible, p2: string, p3: number) => void | null;
  result_error16: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number) => void | null;
  result_int: (p1: interop.PointerConvertible, p2: number) => void | null;
  result_int64: (p1: interop.PointerConvertible, p2: number) => void | null;
  result_null: (p1: interop.PointerConvertible) => void | null;
  result_text: (p1: interop.PointerConvertible, p2: string, p3: number, p4: (p1: interop.PointerConvertible) => void) => void | null;
  result_text16: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: (p1: interop.PointerConvertible) => void) => void | null;
  result_text16be: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: (p1: interop.PointerConvertible) => void) => void | null;
  result_text16le: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: (p1: interop.PointerConvertible) => void) => void | null;
  result_value: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void | null;
  rollback_hook: (p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible) => void, p3: interop.PointerConvertible) => interop.Pointer | null;
  set_authorizer: (p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: number, p3: string, p4: string, p5: string, p6: string) => number, p3: interop.PointerConvertible) => number | null;
  set_auxdata: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: (p1: interop.PointerConvertible) => void) => void | null;
  xsnprintf: (p1: number, p2: string, p3: string) => string | null;
  step: (p1: interop.PointerConvertible) => number | null;
  table_column_metadata: (p1: interop.PointerConvertible, p2: string, p3: string, p4: string, p5: interop.PointerConvertible, p6: interop.PointerConvertible, p7: interop.PointerConvertible, p8: interop.PointerConvertible, p9: interop.PointerConvertible) => number | null;
  thread_cleanup: () => void | null;
  total_changes: (p1: interop.PointerConvertible) => number | null;
  trace: (p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: string) => void, p3: interop.PointerConvertible) => interop.Pointer | null;
  transfer_bindings: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  update_hook: (p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: number, p3: string, p4: string, p5: number) => void, p3: interop.PointerConvertible) => interop.Pointer | null;
  user_data: (p1: interop.PointerConvertible) => interop.Pointer | null;
  value_blob: (p1: interop.PointerConvertible) => interop.Pointer | null;
  value_bytes: (p1: interop.PointerConvertible) => number | null;
  value_bytes16: (p1: interop.PointerConvertible) => number | null;
  value_double: (p1: interop.PointerConvertible) => number | null;
  value_int: (p1: interop.PointerConvertible) => number | null;
  value_int64: (p1: interop.PointerConvertible) => number | null;
  value_numeric_type: (p1: interop.PointerConvertible) => number | null;
  value_text: (p1: interop.PointerConvertible) => interop.Pointer | null;
  value_text16: (p1: interop.PointerConvertible) => interop.Pointer | null;
  value_text16be: (p1: interop.PointerConvertible) => interop.Pointer | null;
  value_text16le: (p1: interop.PointerConvertible) => interop.Pointer | null;
  value_type: (p1: interop.PointerConvertible) => number | null;
  vmprintf: (p1: string, p2: string) => string | null;
  overload_function: (p1: interop.PointerConvertible, p2: string, p3: number) => number | null;
  prepare_v2: (p1: interop.PointerConvertible, p2: string, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible) => number | null;
  prepare16_v2: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible) => number | null;
  clear_bindings: (p1: interop.PointerConvertible) => number | null;
  create_module_v2: (p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: (p1: interop.PointerConvertible) => void) => number | null;
  bind_zeroblob: (p1: interop.PointerConvertible, p2: number, p3: number) => number | null;
  blob_bytes: (p1: interop.PointerConvertible) => number | null;
  blob_close: (p1: interop.PointerConvertible) => number | null;
  blob_open: (p1: interop.PointerConvertible, p2: string, p3: string, p4: string, p5: number, p6: number, p7: interop.PointerConvertible) => number | null;
  blob_read: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number) => number | null;
  blob_write: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number) => number | null;
  create_collation_v2: (p1: interop.PointerConvertible, p2: string, p3: number, p4: interop.PointerConvertible, p5: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: number, p5: interop.PointerConvertible) => number, p6: (p1: interop.PointerConvertible) => void) => number | null;
  file_control: (p1: interop.PointerConvertible, p2: string, p3: number, p4: interop.PointerConvertible) => number | null;
  memory_highwater: (p1: number) => number | null;
  memory_used: () => number | null;
  mutex_alloc: (p1: number) => interop.Pointer | null;
  mutex_enter: (p1: interop.PointerConvertible) => void | null;
  mutex_free: (p1: interop.PointerConvertible) => void | null;
  mutex_leave: (p1: interop.PointerConvertible) => void | null;
  mutex_try: (p1: interop.PointerConvertible) => number | null;
  open_v2: (p1: string, p2: interop.PointerConvertible, p3: number, p4: string) => number | null;
  release_memory: (p1: number) => number | null;
  result_error_nomem: (p1: interop.PointerConvertible) => void | null;
  result_error_toobig: (p1: interop.PointerConvertible) => void | null;
  sleep: (p1: number) => number | null;
  soft_heap_limit: (p1: number) => void | null;
  vfs_find: (p1: string) => interop.Pointer | null;
  vfs_register: (p1: interop.PointerConvertible, p2: number) => number | null;
  vfs_unregister: (p1: interop.PointerConvertible) => number | null;
  xthreadsafe: () => number | null;
  result_zeroblob: (p1: interop.PointerConvertible, p2: number) => void | null;
  result_error_code: (p1: interop.PointerConvertible, p2: number) => void | null;
  test_control: (p1: number) => number | null;
  randomness: (p1: number, p2: interop.PointerConvertible) => void | null;
  context_db_handle: (p1: interop.PointerConvertible) => interop.Pointer | null;
  extended_result_codes: (p1: interop.PointerConvertible, p2: number) => number | null;
  limit: (p1: interop.PointerConvertible, p2: number, p3: number) => number | null;
  next_stmt: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => interop.Pointer | null;
  sql: (p1: interop.PointerConvertible) => string | null;
  status: (p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: number) => number | null;
  backup_finish: (p1: interop.PointerConvertible) => number | null;
  backup_init: (p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: string) => interop.Pointer | null;
  backup_pagecount: (p1: interop.PointerConvertible) => number | null;
  backup_remaining: (p1: interop.PointerConvertible) => number | null;
  backup_step: (p1: interop.PointerConvertible, p2: number) => number | null;
  compileoption_get: (p1: number) => string | null;
  compileoption_used: (p1: string) => number | null;
  create_function_v2: (p1: interop.PointerConvertible, p2: string, p3: number, p4: number, p5: interop.PointerConvertible, p6: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, p7: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, p8: (p1: interop.PointerConvertible) => void, p9: (p1: interop.PointerConvertible) => void) => number | null;
  db_config: (p1: interop.PointerConvertible, p2: number) => number | null;
  db_mutex: (p1: interop.PointerConvertible) => interop.Pointer | null;
  db_status: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: number) => number | null;
  extended_errcode: (p1: interop.PointerConvertible) => number | null;
  log: (p1: number, p2: string) => void | null;
  soft_heap_limit64: (p1: number) => number | null;
  sourceid: () => string | null;
  stmt_status: (p1: interop.PointerConvertible, p2: number, p3: number) => number | null;
  strnicmp: (p1: string, p2: string, p3: number) => number | null;
  unlock_notify: (p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: number) => void, p3: interop.PointerConvertible) => number | null;
  wal_autocheckpoint: (p1: interop.PointerConvertible, p2: number) => number | null;
  wal_checkpoint: (p1: interop.PointerConvertible, p2: string) => number | null;
  wal_hook: (p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string, p4: number) => number, p3: interop.PointerConvertible) => interop.Pointer | null;
  blob_reopen: (p1: interop.PointerConvertible, p2: number) => number | null;
  vtab_config: (p1: interop.PointerConvertible, p2: number) => number | null;
  vtab_on_conflict: (p1: interop.PointerConvertible) => number | null;
  close_v2: (p1: interop.PointerConvertible) => number | null;
  db_filename: (p1: interop.PointerConvertible, p2: string) => string | null;
  db_readonly: (p1: interop.PointerConvertible, p2: string) => number | null;
  db_release_memory: (p1: interop.PointerConvertible) => number | null;
  errstr: (p1: number) => string | null;
  stmt_busy: (p1: interop.PointerConvertible) => number | null;
  stmt_readonly: (p1: interop.PointerConvertible) => number | null;
  stricmp: (p1: string, p2: string) => number | null;
  uri_boolean: (p1: string, p2: string, p3: number) => number | null;
  uri_int64: (p1: string, p2: string, p3: number) => number | null;
  uri_parameter: (p1: string, p2: string) => string | null;
  xvsnprintf: (p1: number, p2: string, p3: string, p4: string) => string | null;
  wal_checkpoint_v2: (p1: interop.PointerConvertible, p2: string, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible) => number | null;
  auto_extension: (p1: () => void) => number | null;
  bind_blob64: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: number, p5: (p1: interop.PointerConvertible) => void) => number | null;
  bind_text64: (p1: interop.PointerConvertible, p2: number, p3: string, p4: number, p5: (p1: interop.PointerConvertible) => void, p6: number) => number | null;
  cancel_auto_extension: (p1: () => void) => number | null;
  load_extension: (p1: interop.PointerConvertible, p2: string, p3: string, p4: interop.PointerConvertible) => number | null;
  malloc64: (p1: number) => interop.Pointer | null;
  msize: (p1: interop.PointerConvertible) => number | null;
  realloc64: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  reset_auto_extension: () => void | null;
  result_blob64: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: (p1: interop.PointerConvertible) => void) => void | null;
  result_text64: (p1: interop.PointerConvertible, p2: string, p3: number, p4: (p1: interop.PointerConvertible) => void, p5: number) => void | null;
  strglob: (p1: string, p2: string) => number | null;
  value_dup: (p1: interop.PointerConvertible) => interop.Pointer | null;
  value_free: (p1: interop.PointerConvertible) => void | null;
  result_zeroblob64: (p1: interop.PointerConvertible, p2: number) => number | null;
  bind_zeroblob64: (p1: interop.PointerConvertible, p2: number, p3: number) => number | null;
  value_subtype: (p1: interop.PointerConvertible) => number | null;
  result_subtype: (p1: interop.PointerConvertible, p2: number) => void | null;
  status64: (p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: number) => number | null;
  strlike: (p1: string, p2: string, p3: number) => number | null;
  db_cacheflush: (p1: interop.PointerConvertible) => number | null;
  system_errno: (p1: interop.PointerConvertible) => number | null;
  trace_v2: (p1: interop.PointerConvertible, p2: number, p3: (p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number, p4: interop.PointerConvertible) => number | null;
  expanded_sql: (p1: interop.PointerConvertible) => string | null;
  set_last_insert_rowid: (p1: interop.PointerConvertible, p2: number) => void | null;
  prepare_v3: (p1: interop.PointerConvertible, p2: string, p3: number, p4: number, p5: interop.PointerConvertible, p6: interop.PointerConvertible) => number | null;
  prepare16_v3: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number, p5: interop.PointerConvertible, p6: interop.PointerConvertible) => number | null;
  bind_pointer: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: string, p5: (p1: interop.PointerConvertible) => void) => number | null;
  result_pointer: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string, p4: (p1: interop.PointerConvertible) => void) => void | null;
  value_pointer: (p1: interop.PointerConvertible, p2: string) => interop.Pointer | null;
  vtab_nochange: (p1: interop.PointerConvertible) => number | null;
  value_nochange: (p1: interop.PointerConvertible) => number | null;
  vtab_collation: (p1: interop.PointerConvertible, p2: number) => string | null;
  keyword_count: () => number | null;
  keyword_name: (p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number | null;
  keyword_check: (p1: string, p2: number) => number | null;
  str_new: (p1: interop.PointerConvertible) => interop.Pointer | null;
  str_finish: (p1: interop.PointerConvertible) => string | null;
  str_appendf: (p1: interop.PointerConvertible, p2: string) => void | null;
  str_vappendf: (p1: interop.PointerConvertible, p2: string, p3: string) => void | null;
  str_append: (p1: interop.PointerConvertible, p2: string, p3: number) => void | null;
  str_appendall: (p1: interop.PointerConvertible, p2: string) => void | null;
  str_appendchar: (p1: interop.PointerConvertible, p2: number, p3: number) => void | null;
  str_reset: (p1: interop.PointerConvertible) => void | null;
  str_errcode: (p1: interop.PointerConvertible) => number | null;
  str_length: (p1: interop.PointerConvertible) => number | null;
  str_value: (p1: interop.PointerConvertible) => string | null;
  create_window_function: (p1: interop.PointerConvertible, p2: string, p3: number, p4: number, p5: interop.PointerConvertible, p6: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, p7: (p1: interop.PointerConvertible) => void, p8: (p1: interop.PointerConvertible) => void, p9: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, p10: (p1: interop.PointerConvertible) => void) => number | null;
  normalized_sql: (p1: interop.PointerConvertible) => string | null;
  stmt_isexplain: (p1: interop.PointerConvertible) => number | null;
  value_frombind: (p1: interop.PointerConvertible) => number | null;
  drop_modules: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  hard_heap_limit64: (p1: number) => number | null;
  uri_key: (p1: string, p2: number) => string | null;
  filename_database: (p1: string) => string | null;
  filename_journal: (p1: string) => string | null;
  filename_wal: (p1: string) => string | null;
  create_filename: (p1: string, p2: string, p3: string, p4: number, p5: interop.PointerConvertible) => string | null;
  free_filename: (p1: string) => void | null;
  database_file_object: (p1: string) => interop.Pointer | null;
  txn_state: (p1: interop.PointerConvertible, p2: string) => number | null;
  changes64: (p1: interop.PointerConvertible) => number | null;
  total_changes64: (p1: interop.PointerConvertible) => number | null;
  autovacuum_pages: (p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: string, p3: number, p4: number, p5: number) => number, p3: interop.PointerConvertible, p4: (p1: interop.PointerConvertible) => void) => number | null;
  error_offset: (p1: interop.PointerConvertible) => number | null;
  vtab_rhs_value: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number | null;
  vtab_distinct: (p1: interop.PointerConvertible) => number | null;
  vtab_in: (p1: interop.PointerConvertible, p2: number, p3: number) => number | null;
  vtab_in_first: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  vtab_in_next: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  deserialize: (p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: number, p5: number, p6: number) => number | null;
  serialize: (p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: number) => interop.Pointer | null;
  db_name: (p1: interop.PointerConvertible, p2: number) => string | null;
  value_encoding: (p1: interop.PointerConvertible) => number | null;
  is_interrupted: (p1: interop.PointerConvertible) => number | null;
  stmt_explain: (p1: interop.PointerConvertible, p2: number) => number | null;
  get_clientdata: (p1: interop.PointerConvertible, p2: string) => interop.Pointer | null;
  set_clientdata: (p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: (p1: interop.PointerConvertible) => void) => number | null;
  setlk_timeout: (p1: interop.PointerConvertible, p2: number, p3: number) => number | null;
}

declare class __Reply__host_get_UNDServer_t {
  constructor(init?: __Reply__host_get_UNDServer_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  server: mach_msg_port_descriptor_t;
}

declare class ppd_choice_s {
  constructor(init?: ppd_choice_s);
  marked: number;
  choice: unknown /* const array */;
  text: unknown /* const array */;
  code: string | null;
  option: interop.Pointer;
}

declare class mach_dead_name_notification_t {
  constructor(init?: mach_dead_name_notification_t);
  not_header: mach_msg_header_t;
  NDR: NDR_record_t;
  not_port: number;
  trailer: mach_msg_security_trailer_t;
}

declare class ProcessSerialNumber {
  constructor(init?: ProcessSerialNumber);
  highLongOfPSN: number;
  lowLongOfPSN: number;
}

declare class __siginfo {
  constructor(init?: __siginfo);
  si_signo: number;
  si_errno: number;
  si_code: number;
  si_pid: number;
  si_uid: number;
  si_status: number;
  si_addr: interop.Pointer;
  si_value: sigval;
  si_band: number;
  __pad: unknown /* const array */;
}

declare class _krb5_get_init_creds_opt {
  constructor(init?: _krb5_get_init_creds_opt);
  flags: number;
  tkt_life: number;
  renew_life: number;
  forwardable: number;
  proxiable: number;
  etype_list: interop.Pointer;
  etype_list_length: number;
  address_list: interop.Pointer;
  preauth_list: interop.Pointer;
  preauth_list_length: number;
  salt: interop.Pointer;
}

declare class _krb5_transited {
  constructor(init?: _krb5_transited);
  magic: number;
  tr_type: number;
  tr_contents: _krb5_data;
}

declare class task_basic_info_32 {
  constructor(init?: task_basic_info_32);
  suspend_count: number;
  virtual_size: number;
  resident_size: number;
  user_time: time_value;
  system_time: time_value;
  policy: number;
}

declare class berval {
  constructor(init?: berval);
  bv_len: number;
  bv_val: string | null;
}

declare class __Request__kmod_create_t {
  constructor(init?: __Request__kmod_create_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  info: number;
}

declare class pthread_override_s {
  constructor(init?: pthread_override_s);
}

declare class slapi_plugindesc {
  constructor(init?: slapi_plugindesc);
  spd_id: string | null;
  spd_vendor: string | null;
  spd_version: string | null;
  spd_description: string | null;
}

declare class slapi_condvar {
  constructor(init?: slapi_condvar);
}

declare class ip {
  constructor(init?: ip);
  ip_hl: number;
  ip_v: number;
  ip_tos: number;
  ip_len: number;
  ip_id: number;
  ip_off: number;
  ip_ttl: number;
  ip_p: number;
  ip_sum: number;
  ip_src: in_addr;
  ip_dst: in_addr;
}

declare class au_subject32_t {
  constructor(init?: au_subject32_t);
  auid: number;
  euid: number;
  egid: number;
  ruid: number;
  rgid: number;
  pid: number;
  sid: number;
  tid: au_tid32;
}

declare class sub_framework_command {
  constructor(init?: sub_framework_command);
  cmd: number;
  cmdsize: number;
  umbrella: lc_str;
}

declare class slapi_rdn {
  constructor(init?: slapi_rdn);
}

declare class krb5_keytab_entry_st {
  constructor(init?: krb5_keytab_entry_st);
  magic: number;
  principal: interop.Pointer;
  timestamp: number;
  vno: number;
  key: _krb5_keyblock;
}

declare class _RuneRange {
  constructor(init?: _RuneRange);
  __nranges: number;
  __ranges: interop.Pointer;
}

declare class ldap_structurerule {
  constructor(init?: ldap_structurerule);
  sr_ruleid: number;
  sr_names: interop.Pointer;
  sr_desc: string | null;
  sr_obsolete: number;
  sr_nameform: string | null;
  sr_nsup_ruleids: number;
  sr_sup_ruleids: interop.Pointer;
  sr_extensions: interop.Pointer;
}

declare class ppd_option_s {
  constructor(init?: ppd_option_s);
  conflicted: number;
  keyword: unknown /* const array */;
  defchoice: unknown /* const array */;
  text: unknown /* const array */;
  ui: interop.Enum<typeof ppd_ui_e>;
  section: interop.Enum<typeof ppd_section_e>;
  order: number;
  num_choices: number;
  choices: interop.Pointer;
}

declare class so_nke {
  constructor(init?: so_nke);
  nke_handle: number;
  nke_where: number;
  nke_flags: number;
  reserved: unknown /* const array */;
}

declare class flock {
  constructor(init?: flock);
  l_start: number;
  l_len: number;
  l_pid: number;
  l_type: number;
  l_whence: number;
}

declare class task_exec_meta {
  constructor(init?: task_exec_meta);
  tem_flags: number;
}

declare class _krb5_preauth_client_rock {
  constructor(init?: _krb5_preauth_client_rock);
}

declare class au_ipcperm_t {
  constructor(init?: au_ipcperm_t);
  uid: number;
  gid: number;
  puid: number;
  pgid: number;
  mode: number;
  seq: number;
  key: number;
}

declare class ldap_contentrule {
  constructor(init?: ldap_contentrule);
  cr_oid: string | null;
  cr_names: interop.Pointer;
  cr_desc: string | null;
  cr_sup_oids: interop.Pointer;
  cr_obsolete: number;
  cr_oc_oids_aux: interop.Pointer;
  cr_at_oids_must: interop.Pointer;
  cr_at_oids_may: interop.Pointer;
  cr_at_oids_not: interop.Pointer;
  cr_extensions: interop.Pointer;
}

declare class kev_in6_addrlifetime {
  constructor(init?: kev_in6_addrlifetime);
  ia6t_expire: number;
  ia6t_preferred: number;
  ia6t_vltime: number;
  ia6t_pltime: number;
}

declare class __Request__thread_swap_exception_ports_t {
  constructor(init?: __Request__thread_swap_exception_ports_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  new_port: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  exception_mask: number;
  behavior: number;
  new_flavor: number;
}

declare class ldap_attributetype {
  constructor(init?: ldap_attributetype);
  at_oid: string | null;
  at_names: interop.Pointer;
  at_desc: string | null;
  at_obsolete: number;
  at_sup_oid: string | null;
  at_equality_oid: string | null;
  at_ordering_oid: string | null;
  at_substr_oid: string | null;
  at_syntax_oid: string | null;
  at_syntax_len: number;
  at_single_value: number;
  at_collective: number;
  at_no_user_mod: number;
  at_usage: number;
  at_extensions: interop.Pointer;
}

declare class audit_fstat {
  constructor(init?: audit_fstat);
  af_filesz: number;
  af_currsz: number;
}

declare class LDAPDerefRes {
  constructor(init?: LDAPDerefRes);
  derefAttr: string | null;
  derefVal: berval;
  attrVals: interop.Pointer;
  next: interop.Pointer;
}

declare class __Request__mach_port_get_srights_t {
  constructor(init?: __Request__mach_port_get_srights_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
}

declare class in6_ifstat {
  constructor(init?: in6_ifstat);
  ifs6_in_receive: number;
  ifs6_in_hdrerr: number;
  ifs6_in_toobig: number;
  ifs6_in_noroute: number;
  ifs6_in_addrerr: number;
  ifs6_in_protounknown: number;
  ifs6_in_truncated: number;
  ifs6_in_discard: number;
  ifs6_in_deliver: number;
  ifs6_out_forward: number;
  ifs6_out_request: number;
  ifs6_out_discard: number;
  ifs6_out_fragok: number;
  ifs6_out_fragfail: number;
  ifs6_out_fragcreat: number;
  ifs6_reass_reqd: number;
  ifs6_reass_ok: number;
  ifs6_atmfrag_rcvd: number;
  ifs6_reass_fail: number;
  ifs6_in_mcast: number;
  ifs6_out_mcast: number;
  ifs6_cantfoward_icmp6: number;
  ifs6_addr_expiry_cnt: number;
  ifs6_pfx_expiry_cnt: number;
  ifs6_defrtr_expiry_cnt: number;
}

declare class kev_in_arpfailure {
  constructor(init?: kev_in_arpfailure);
  link_data: net_event_data;
}

declare class __Request__task_policy_set_t {
  constructor(init?: __Request__task_policy_set_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  policy_infoCnt: number;
  policy_info: unknown /* const array */;
}

declare class LDAPDerefSpec {
  constructor(init?: LDAPDerefSpec);
  derefAttr: string | null;
  attributes: interop.Pointer;
}

declare class __Request__exception_raise_t {
  constructor(init?: __Request__exception_raise_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  thread: mach_msg_port_descriptor_t;
  task: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  exception: number;
  codeCnt: number;
  code: unknown /* const array */;
}

declare class mach_msg_guarded_port_descriptor_t {
  constructor(init?: mach_msg_guarded_port_descriptor_t);
  context: number;
  flags: number;
  disposition: number;
  type: number;
  name: number;
}

declare class dyld_chained_ptr_32_rebase {
  constructor(init?: dyld_chained_ptr_32_rebase);
  target: number;
  next: number;
  bind: number;
}

declare class __Reply__task_identity_token_get_task_port_t {
  constructor(init?: __Reply__task_identity_token_get_task_port_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  task_port: mach_msg_port_descriptor_t;
}

declare class ldapsortkey {
  constructor(init?: ldapsortkey);
  attributeType: string | null;
  orderingRule: string | null;
  reverseOrder: number;
}

declare class task_inspect_basic_counts {
  constructor(init?: task_inspect_basic_counts);
  instructions: number;
  cycles: number;
}

declare class ldap_sync_t {
  constructor(init?: ldap_sync_t);
  ls_base: string | null;
  ls_scope: number;
  ls_filter: string | null;
  ls_attrs: interop.Pointer;
  ls_timelimit: number;
  ls_sizelimit: number;
  ls_timeout: number;
  ls_search_entry: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.Enum<typeof ldap_sync_refresh_t>) => number | null;
  ls_search_reference: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  ls_intermediate: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.Enum<typeof ldap_sync_refresh_t>) => number | null;
  ls_search_result: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number) => number | null;
  ls_private: interop.Pointer;
  ls_ld: interop.Pointer;
  ls_msgid: number;
  ls_reloadHint: number;
  ls_cookie: berval;
  ls_refreshPhase: interop.Enum<typeof ldap_sync_refresh_t>;
}

declare class au_qctrl {
  constructor(init?: au_qctrl);
  aq_hiwater: number;
  aq_lowater: number;
  aq_bufsz: number;
  aq_delay: number;
  aq_minfree: number;
}

declare class __Reply__task_set_exc_guard_behavior_t {
  constructor(init?: __Reply__task_set_exc_guard_behavior_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class ip_opts {
  constructor(init?: ip_opts);
  ip_dst: in_addr;
  ip_opts: unknown /* const array */;
}

declare class lineinfow {
  constructor(init?: lineinfow);
  buffer: interop.Pointer;
  cursor: interop.Pointer;
  lastchar: interop.Pointer;
}

declare class __sFILEX {
  constructor(init?: __sFILEX);
}

declare class __Request__task_policy_get_t {
  constructor(init?: __Request__task_policy_get_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  policy_infoCnt: number;
  get_default: number;
}

declare class lineinfo {
  constructor(init?: lineinfo);
  buffer: string | null;
  cursor: string | null;
  lastchar: string | null;
}

declare class __Reply__kmod_create_t {
  constructor(init?: __Reply__kmod_create_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  module: number;
}

declare class mig_reply_error_t {
  constructor(init?: mig_reply_error_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class ldap_objectclass {
  constructor(init?: ldap_objectclass);
  oc_oid: string | null;
  oc_names: interop.Pointer;
  oc_desc: string | null;
  oc_obsolete: number;
  oc_sup_oids: interop.Pointer;
  oc_kind: number;
  oc_at_oids_must: interop.Pointer;
  oc_at_oids_may: interop.Pointer;
  oc_extensions: interop.Pointer;
}

declare class ldapmod {
  constructor(init?: ldapmod);
  mod_op: number;
  mod_type: string | null;
  mod_vals: mod_vals_u;
}

declare class __Reply__processor_get_assignment_t {
  constructor(init?: __Reply__processor_get_assignment_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  assigned_set: mach_msg_port_descriptor_t;
}

declare class msginfo {
  constructor(init?: msginfo);
  msgmax: number;
  msgmni: number;
  msgmnb: number;
  msgtql: number;
  msgssz: number;
  msgseg: number;
}

declare class sadb_comb {
  constructor(init?: sadb_comb);
  sadb_comb_auth: number;
  sadb_comb_encrypt: number;
  sadb_comb_flags: number;
  sadb_comb_auth_minbits: number;
  sadb_comb_auth_maxbits: number;
  sadb_comb_encrypt_minbits: number;
  sadb_comb_encrypt_maxbits: number;
  sadb_comb_reserved: number;
  sadb_comb_soft_allocations: number;
  sadb_comb_hard_allocations: number;
  sadb_comb_soft_bytes: number;
  sadb_comb_hard_bytes: number;
  sadb_comb_soft_addtime: number;
  sadb_comb_hard_addtime: number;
  sadb_comb_soft_usetime: number;
  sadb_comb_hard_usetime: number;
}

declare class rpcent {
  constructor(init?: rpcent);
  r_name: string | null;
  r_aliases: interop.Pointer;
  r_number: number;
}

declare class krb5plugin_preauth_client_ftable_v1 {
  constructor(init?: krb5plugin_preauth_client_ftable_v1);
  name: string | null;
  pa_type_list: interop.Pointer;
  enctype_list: interop.Pointer;
  init: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  fini: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void | null;
  flags: (p1: interop.PointerConvertible, p2: number) => number | null;
  request_init: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => void | null;
  request_fini: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => void | null;
  process: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible) => number, p6: interop.PointerConvertible, p7: interop.PointerConvertible, p8: interop.PointerConvertible, p9: interop.PointerConvertible, p10: interop.PointerConvertible, p11: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string, p4: string, p5: number, p6: interop.PointerConvertible) => number, p12: interop.PointerConvertible, p13: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string, p4: string, p5: number, p6: interop.PointerConvertible) => number, p5: interop.PointerConvertible, p6: interop.PointerConvertible, p7: interop.PointerConvertible, p8: interop.PointerConvertible, p9: interop.PointerConvertible) => number, p14: interop.PointerConvertible, p15: interop.PointerConvertible, p16: interop.PointerConvertible, p17: interop.PointerConvertible, p18: interop.PointerConvertible) => number | null;
  tryagain: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible) => number, p6: interop.PointerConvertible, p7: interop.PointerConvertible, p8: interop.PointerConvertible, p9: interop.PointerConvertible, p10: interop.PointerConvertible, p11: interop.PointerConvertible, p12: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string, p4: string, p5: number, p6: interop.PointerConvertible) => number, p13: interop.PointerConvertible, p14: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string, p4: string, p5: number, p6: interop.PointerConvertible) => number, p5: interop.PointerConvertible, p6: interop.PointerConvertible, p7: interop.PointerConvertible, p8: interop.PointerConvertible, p9: interop.PointerConvertible) => number, p15: interop.PointerConvertible, p16: interop.PointerConvertible, p17: interop.PointerConvertible, p18: interop.PointerConvertible, p19: interop.PointerConvertible) => number | null;
  gic_opts: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: string, p5: string) => number | null;
}

declare class task_security_config_info {
  constructor(init?: task_security_config_info);
  config: number;
}

declare class clist {
  constructor(init?: clist);
}

declare class pshminfo {
  constructor(init?: pshminfo);
  pshm_flags: number;
  pshm_usecount: number;
  pshm_length: number;
  pshm_mode: number;
  pshm_uid: number;
  pshm_gid: number;
  pshm_name: unknown /* const array */;
  pshm_memobject: interop.Pointer;
  pshm_label: interop.Pointer;
}

declare class __Reply__vm_mapped_pages_info_t {
  constructor(init?: __Reply__vm_mapped_pages_info_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  pages: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  pagesCnt: number;
}

declare class __darwin_arm_vfp_state {
  constructor(init?: __darwin_arm_vfp_state);
  __r: unknown /* const array */;
  __fpscr: number;
}

declare class UIDNA {
  constructor(init?: UIDNA);
}

declare class __Reply__mach_vm_wire_t {
  constructor(init?: __Reply__mach_vm_wire_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__vm_allocate_cpm_t {
  constructor(init?: __Reply__vm_allocate_cpm_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  address: number;
}

declare class gss_krb5_rfc1964_keydata {
  constructor(init?: gss_krb5_rfc1964_keydata);
  sign_alg: number;
  seal_alg: number;
  ctx_key: gss_krb5_lucid_key;
}

declare class ih_rtradv {
  constructor(init?: ih_rtradv);
  irt_num_addrs: number;
  irt_wpa: number;
  irt_lifetime: number;
}

declare class au_ret32_t {
  constructor(init?: au_ret32_t);
  status: number;
  ret: number;
}

declare class __Request__mach_port_set_seqno_t {
  constructor(init?: __Request__mach_port_set_seqno_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  seqno: number;
}

declare class __Request__host_get_special_port_t {
  constructor(init?: __Request__host_get_special_port_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  node: number;
  which: number;
}

declare class fssearchblock {
  constructor(init?: fssearchblock);
  returnattrs: interop.Pointer;
  returnbuffer: interop.Pointer;
  returnbuffersize: number;
  maxmatches: number;
  timelimit: timeval;
  searchparams1: interop.Pointer;
  sizeofsearchparams1: number;
  searchparams2: interop.Pointer;
  sizeofsearchparams2: number;
  searchattrs: attrlist;
}

declare class mb_stat {
  constructor(init?: mb_stat);
  mbs_cnt: number;
  mbs_pad: number;
  mbs_class: unknown /* const array */;
}

declare class _passwd_phrase_element {
  constructor(init?: _passwd_phrase_element);
  magic: number;
  passwd: interop.Pointer;
  phrase: interop.Pointer;
}

declare class fgetsigsinfo {
  constructor(init?: fgetsigsinfo);
  fg_file_start: number;
  fg_info_request: number;
  fg_sig_is_platform: number;
}

declare class io_stat_info {
  constructor(init?: io_stat_info);
  disk_reads: io_stat_entry;
  io_priority: unknown /* const array */;
  paging: io_stat_entry;
  metadata: io_stat_entry;
  total_io: io_stat_entry;
}

declare class _krb5_error {
  constructor(init?: _krb5_error);
  magic: number;
  ctime: number;
  cusec: number;
  susec: number;
  stime: number;
  error: number;
  client: interop.Pointer;
  server: interop.Pointer;
  text: _krb5_data;
  e_data: _krb5_data;
}

declare class _krb5_cred_info {
  constructor(init?: _krb5_cred_info);
  magic: number;
  session: interop.Pointer;
  client: interop.Pointer;
  server: interop.Pointer;
  flags: number;
  times: _krb5_ticket_times;
  caddrs: interop.Pointer;
}

declare class _krb5_response {
  constructor(init?: _krb5_response);
  magic: number;
  message_type: number;
  response: _krb5_data;
  expected_nonce: number;
  request_time: number;
}

declare class _opaque_pthread_attr_t {
  constructor(init?: _opaque_pthread_attr_t);
  __sig: number;
  __opaque: unknown /* const array */;
}

declare class dysymtab_command {
  constructor(init?: dysymtab_command);
  cmd: number;
  cmdsize: number;
  ilocalsym: number;
  nlocalsym: number;
  iextdefsym: number;
  nextdefsym: number;
  iundefsym: number;
  nundefsym: number;
  tocoff: number;
  ntoc: number;
  modtaboff: number;
  nmodtab: number;
  extrefsymoff: number;
  nextrefsyms: number;
  indirectsymoff: number;
  nindirectsyms: number;
  extreloff: number;
  nextrel: number;
  locreloff: number;
  nlocrel: number;
}

declare class _krb5_ap_rep_enc_part {
  constructor(init?: _krb5_ap_rep_enc_part);
  magic: number;
  ctime: number;
  cusec: number;
  subkey: interop.Pointer;
  seq_number: number;
}

declare class timespec {
  constructor(init?: timespec);
  tv_sec: number;
  tv_nsec: number;
}

declare class sqlite3_index_info {
  constructor(init?: sqlite3_index_info);
  nConstraint: number;
  aConstraint: interop.Pointer;
  nOrderBy: number;
  aOrderBy: interop.Pointer;
  aConstraintUsage: interop.Pointer;
  idxNum: number;
  idxStr: string | null;
  needToFreeIdxStr: number;
  orderByConsumed: number;
  estimatedCost: number;
  estimatedRows: number;
  idxFlags: number;
  colUsed: number;
}

declare class btinfo_sc_load_info64 {
  constructor(init?: btinfo_sc_load_info64);
  sharedCacheSlide: number;
  sharedCacheUUID: unknown /* const array */;
  sharedCacheBaseAddress: number;
}

declare class _krb5_kdc_rep {
  constructor(init?: _krb5_kdc_rep);
  magic: number;
  msg_type: number;
  padata: interop.Pointer;
  client: interop.Pointer;
  ticket: interop.Pointer;
  enc_part: _krb5_enc_data;
  enc_part2: interop.Pointer;
}

declare class __Request__task_register_dyld_set_dyld_state_t {
  constructor(init?: __Request__task_register_dyld_set_dyld_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  dyld_state: number;
  dyld_statePad: unknown /* const array */;
}

declare class voucher_mach_msg_state_s {
  constructor(init?: voucher_mach_msg_state_s);
}

declare class arm_state_hdr {
  constructor(init?: arm_state_hdr);
  flavor: number;
  count: number;
}

declare class __Request__mach_voucher_extract_attr_content_t {
  constructor(init?: __Request__mach_voucher_extract_attr_content_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  key: number;
  contentCnt: number;
}

declare class mig_symtab {
  constructor(init?: mig_symtab);
  ms_routine_name: string | null;
  ms_routine_number: number;
  ms_routine: () => void | null;
}

declare class sqlite3_mutex {
  constructor(init?: sqlite3_mutex);
}

declare class unnamed_11871612988508585010 {
  constructor(init?: unnamed_11871612988508585010);
  limit00: number;
  base00: number;
  base16: number;
  type: number;
  : number;
  present: number;
  limit16: number;
  : number;
  granular: number;
  base24: number;
}

declare class _krb5_kdc_req {
  constructor(init?: _krb5_kdc_req);
  magic: number;
  msg_type: number;
  padata: interop.Pointer;
  kdc_options: number;
  client: interop.Pointer;
  server: interop.Pointer;
  from: number;
  till: number;
  rtime: number;
  nonce: number;
  nktypes: number;
  ktype: interop.Pointer;
  addresses: interop.Pointer;
  authorization_data: _krb5_enc_data;
  unenc_authdata: interop.Pointer;
  second_ticket: interop.Pointer;
}

declare class _krb5_last_req_entry {
  constructor(init?: _krb5_last_req_entry);
  magic: number;
  lr_type: number;
  value: number;
}

declare class __Request__thread_set_special_port_t {
  constructor(init?: __Request__thread_set_special_port_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  special_port: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  which_port: number;
}

declare class pseminfo {
  constructor(init?: pseminfo);
  psem_flags: number;
  psem_usecount: number;
  psem_mode: number;
  psem_uid: number;
  psem_gid: number;
  psem_name: unknown /* const array */;
  psem_semobject: interop.Pointer;
  psem_label: interop.Pointer;
  psem_creator_pid: number;
  psem_creator_uniqueid: number;
}

declare class sockaddr_un {
  constructor(init?: sockaddr_un);
  sun_len: number;
  sun_family: number;
  sun_path: unknown /* const array */;
}

declare class __Reply__host_register_well_known_mach_voucher_attr_manager_t {
  constructor(init?: __Reply__host_register_well_known_mach_voucher_attr_manager_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  new_attr_control: mach_msg_port_descriptor_t;
}

declare class vm_region_basic_info_64 {
  constructor(init?: vm_region_basic_info_64);
  protection: number;
  max_protection: number;
  inheritance: number;
  shared: number;
  reserved: number;
  offset: number;
  behavior: number;
  user_wired_count: number;
}

declare class fchecklv {
  constructor(init?: fchecklv);
  lv_file_start: number;
  lv_error_message_size: number;
  lv_error_message: interop.Pointer;
}

declare class xvsockpgen {
  constructor(init?: xvsockpgen);
  xvg_len: number;
  xvg_count: number;
  xvg_gen: number;
  xvg_sogen: number;
}

declare class __tag_iconv_t {
  constructor(init?: __tag_iconv_t);
}

declare class unnamed_15232987227899653205 {
  constructor(init?: unnamed_15232987227899653205);
  opaque1: interop.Pointer;
  opaque2: number;
}

declare class _krb5_authenticator {
  constructor(init?: _krb5_authenticator);
  magic: number;
  client: interop.Pointer;
  checksum: interop.Pointer;
  cusec: number;
  ctime: number;
  subkey: interop.Pointer;
  seq_number: number;
  authorization_data: interop.Pointer;
}

declare class ldapmsg {
  constructor(init?: ldapmsg);
}

declare class task_absolutetime_info {
  constructor(init?: task_absolutetime_info);
  total_user: number;
  total_system: number;
  threads_user: number;
  threads_system: number;
}

declare class _krb5_ticket_times {
  constructor(init?: _krb5_ticket_times);
  authtime: number;
  starttime: number;
  endtime: number;
  renew_till: number;
}

declare class ttysize {
  constructor(init?: ttysize);
  ts_lines: number;
  ts_cols: number;
  ts_xxx: number;
  ts_yyy: number;
}

declare class llc {
  constructor(init?: llc);
  llc_dsap: number;
  llc_ssap: number;
  llc_un: unnamed_3396947394523107438;
}

declare class _krb5_checksum {
  constructor(init?: _krb5_checksum);
  magic: number;
  checksum_type: number;
  length: number;
  contents: interop.Pointer;
}

declare class ppd_const_s {
  constructor(init?: ppd_const_s);
  option1: unknown /* const array */;
  choice1: unknown /* const array */;
  option2: unknown /* const array */;
  choice2: unknown /* const array */;
}

declare class __Request__thread_policy_set_t {
  constructor(init?: __Request__thread_policy_set_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  policy_infoCnt: number;
  policy_info: unknown /* const array */;
}

declare class __Reply__vm_machine_attribute_t {
  constructor(init?: __Reply__vm_machine_attribute_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  value: number;
}

declare class _krb5_auth_context {
  constructor(init?: _krb5_auth_context);
}

declare class _krb5_address {
  constructor(init?: _krb5_address);
  magic: number;
  addrtype: number;
  length: number;
  contents: interop.Pointer;
}

declare class __Request__thread_wire_t {
  constructor(init?: __Request__thread_wire_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  thread: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  wired: number;
}

declare class _krb5_data {
  constructor(init?: _krb5_data);
  magic: number;
  length: number;
  data: string | null;
}

declare class gss_buffer_desc_struct {
  constructor(init?: gss_buffer_desc_struct);
  length: number;
  value: interop.Pointer;
}

declare class __Reply__processor_info_t {
  constructor(init?: __Reply__processor_info_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  host: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  processor_info_outCnt: number;
  processor_info_out: unknown /* const array */;
}

declare class __Request__task_assign_t {
  constructor(init?: __Request__task_assign_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  new_set: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  assign_threads: number;
}

declare class dyld_shared_cache_loadinfo {
  constructor(init?: dyld_shared_cache_loadinfo);
  sharedCacheSlide: number;
  sharedCacheUUID: unknown /* const array */;
  sharedCacheUnreliableSlidBaseAddress: number;
  sharedCacheSlidFirstMapping: number;
}

declare class simd_double4x4 {
  constructor(init?: simd_double4x4);
  columns: unknown /* const array */;
}

declare class __Reply__task_set_special_port_t {
  constructor(init?: __Reply__task_set_special_port_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class _http_s {
  constructor(init?: _http_s);
}

declare class dispatch_queue_attr_s {
  constructor(init?: dispatch_queue_attr_s);
}

declare class __Request__vm_map_exec_lockdown_t {
  constructor(init?: __Request__vm_map_exec_lockdown_t);
  Head: mach_msg_header_t;
}

declare class dyld_chained_ptr_arm64e_rebase {
  constructor(init?: dyld_chained_ptr_arm64e_rebase);
  target: number;
  high8: number;
  next: number;
  bind: number;
  auth: number;
}

declare class bootp {
  constructor(init?: bootp);
  bp_op: number;
  bp_htype: number;
  bp_hlen: number;
  bp_hops: number;
  bp_xid: number;
  bp_secs: number;
  bp_unused: number;
  bp_ciaddr: in_addr;
  bp_yiaddr: in_addr;
  bp_siaddr: in_addr;
  bp_giaddr: in_addr;
  bp_chaddr: unknown /* const array */;
  bp_sname: unknown /* const array */;
  bp_file: unknown /* const array */;
  bp_vend: unknown /* const array */;
}

declare class rslvmulti_req {
  constructor(init?: rslvmulti_req);
  sa: interop.Pointer;
  llsa: interop.Pointer;
}

declare class timeval32 {
  constructor(init?: timeval32);
  tv_sec: number;
  tv_usec: number;
}

declare class ifaliasreq {
  constructor(init?: ifaliasreq);
  ifra_name: unknown /* const array */;
  ifra_addr: sockaddr;
  ifra_broadaddr: sockaddr;
  ifra_mask: sockaddr;
}

declare class __Reply__host_reboot_t {
  constructor(init?: __Reply__host_reboot_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class msg_labels_t {
  constructor(init?: msg_labels_t);
  sender: number;
}

declare class nd_router_solicit {
  constructor(init?: nd_router_solicit);
  nd_rs_hdr: icmp6_hdr;
}

declare class if_data64 {
  constructor(init?: if_data64);
  ifi_type: number;
  ifi_typelen: number;
  ifi_physical: number;
  ifi_addrlen: number;
  ifi_hdrlen: number;
  ifi_recvquota: number;
  ifi_xmitquota: number;
  ifi_unused1: number;
  ifi_mtu: number;
  ifi_metric: number;
  ifi_baudrate: number;
  ifi_ipackets: number;
  ifi_ierrors: number;
  ifi_opackets: number;
  ifi_oerrors: number;
  ifi_collisions: number;
  ifi_ibytes: number;
  ifi_obytes: number;
  ifi_imcasts: number;
  ifi_omcasts: number;
  ifi_iqdrops: number;
  ifi_noproto: number;
  ifi_recvtiming: number;
  ifi_xmittiming: number;
  ifi_lastchange: timeval32;
}

declare class __Reply__task_register_dyld_image_infos_t {
  constructor(init?: __Reply__task_register_dyld_image_infos_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class if_data {
  constructor(init?: if_data);
  ifi_type: number;
  ifi_typelen: number;
  ifi_physical: number;
  ifi_addrlen: number;
  ifi_hdrlen: number;
  ifi_recvquota: number;
  ifi_xmitquota: number;
  ifi_unused1: number;
  ifi_mtu: number;
  ifi_metric: number;
  ifi_baudrate: number;
  ifi_ipackets: number;
  ifi_ierrors: number;
  ifi_opackets: number;
  ifi_oerrors: number;
  ifi_collisions: number;
  ifi_ibytes: number;
  ifi_obytes: number;
  ifi_imcasts: number;
  ifi_omcasts: number;
  ifi_iqdrops: number;
  ifi_noproto: number;
  ifi_recvtiming: number;
  ifi_xmittiming: number;
  ifi_lastchange: timeval32;
  ifi_unused2: number;
  ifi_hwassist: number;
  ifi_reserved1: number;
  ifi_reserved2: number;
}

declare class winsize {
  constructor(init?: winsize);
  ws_row: number;
  ws_col: number;
  ws_xpixel: number;
  ws_ypixel: number;
}

declare class __Request__task_map_corpse_info_64_t {
  constructor(init?: __Request__task_map_corpse_info_64_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  corspe_task: mach_msg_port_descriptor_t;
}

declare class __Reply__mach_vm_read_overwrite_t {
  constructor(init?: __Reply__mach_vm_read_overwrite_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  outsize: number;
}

declare class linger {
  constructor(init?: linger);
  l_onoff: number;
  l_linger: number;
}

declare class __Request__thread_set_exception_ports_t {
  constructor(init?: __Request__thread_set_exception_ports_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  new_port: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  exception_mask: number;
  behavior: number;
  new_flavor: number;
}

declare class __Request__task_test_sync_upcall_t {
  constructor(init?: __Request__task_test_sync_upcall_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  port: mach_msg_port_descriptor_t;
}

declare class __Reply__task_policy_set_t {
  constructor(init?: __Reply__task_policy_set_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Reply__vm_read_list_t {
  constructor(init?: __Reply__vm_read_list_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  data_list: unknown /* const array */;
}

declare class __Reply__host_set_multiuser_config_flags_t {
  constructor(init?: __Reply__host_set_multiuser_config_flags_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class _RuneEntry {
  constructor(init?: _RuneEntry);
  __min: number;
  __max: number;
  __map: number;
  __types: interop.Pointer;
}

declare class at_size_t {
  constructor(init?: at_size_t);
  x: number;
  y: number;
  z: number;
}

declare class ppd_file_s {
  constructor(init?: ppd_file_s);
  language_level: number;
  color_device: number;
  variable_sizes: number;
  accurate_screens: number;
  contone_only: number;
  landscape: number;
  model_number: number;
  manual_copies: number;
  throughput: number;
  colorspace: interop.Enum<typeof ppd_cs_e>;
  patches: string | null;
  num_emulations: number;
  emulations: interop.Pointer;
  jcl_begin: string | null;
  jcl_ps: string | null;
  jcl_end: string | null;
  lang_encoding: string | null;
  lang_version: string | null;
  modelname: string | null;
  ttrasterizer: string | null;
  manufacturer: string | null;
  product: string | null;
  nickname: string | null;
  shortnickname: string | null;
  num_groups: number;
  groups: interop.Pointer;
  num_sizes: number;
  sizes: interop.Pointer;
  custom_min: unknown /* const array */;
  custom_max: unknown /* const array */;
  custom_margins: unknown /* const array */;
  num_consts: number;
  consts: interop.Pointer;
  num_fonts: number;
  fonts: interop.Pointer;
  num_profiles: number;
  profiles: interop.Pointer;
  num_filters: number;
  filters: interop.Pointer;
  flip_duplex: number;
  protocols: string | null;
  pcfilename: string | null;
  num_attrs: number;
  cur_attr: number;
  attrs: interop.Pointer;
  sorted_attrs: interop.Pointer;
  options: interop.Pointer;
  coptions: interop.Pointer;
  marked: interop.Pointer;
  cups_uiconstraints: interop.Pointer;
  cache: interop.Pointer;
}

declare class tokenizer {
  constructor(init?: tokenizer);
}

declare class unwind_info_section_header {
  constructor(init?: unwind_info_section_header);
  version: number;
  commonEncodingsArraySectionOffset: number;
  commonEncodingsArrayCount: number;
  personalityArraySectionOffset: number;
  personalityArrayCount: number;
  indexSectionOffset: number;
  indexCount: number;
}

declare class __Reply__mach_zone_info_t {
  constructor(init?: __Reply__mach_zone_info_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  names: mach_msg_ool_descriptor_t;
  info: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  namesCnt: number;
  infoCnt: number;
}

declare class __Reply__vm_msync_t {
  constructor(init?: __Reply__vm_msync_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__mach_port_kobject_description_t {
  constructor(init?: __Request__mach_port_kobject_description_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
}

declare class _computed_attr_context {
  constructor(init?: _computed_attr_context);
}

declare class _krb5_creds {
  constructor(init?: _krb5_creds);
  magic: number;
  client: interop.Pointer;
  server: interop.Pointer;
  keyblock: _krb5_keyblock;
  times: _krb5_ticket_times;
  is_skey: number;
  ticket_flags: number;
  addresses: interop.Pointer;
  ticket: _krb5_data;
  second_ticket: _krb5_data;
  authdata: interop.Pointer;
}

declare class time_value {
  constructor(init?: time_value);
  seconds: number;
  microseconds: number;
}

declare class ifdrv {
  constructor(init?: ifdrv);
  ifd_name: unknown /* const array */;
  ifd_cmd: number;
  ifd_len: number;
  ifd_data: interop.Pointer;
}

declare class inpcb {
  constructor(init?: inpcb);
  inp_hash: _inpcb_list_entry;
  reserved1: in_addr;
  reserved2: in_addr;
  inp_fport: number;
  inp_lport: number;
  inp_list: _inpcb_list_entry;
  inp_ppcb: number;
  inp_pcbinfo: number;
  inp_socket: number;
  nat_owner: number;
  nat_cookie: number;
  inp_portlist: _inpcb_list_entry;
  inp_phd: number;
  inp_gencnt: number;
  inp_flags: number;
  inp_flow: number;
  inp_vflag: number;
  inp_ip_ttl: number;
  inp_ip_p: number;
  inp_dependfaddr: unnamed_9497288941881539350;
  inp_dependladdr: unnamed_4946263752583527807;
  inp_dependroute: unnamed_8047590349428456375;
  inp_depend4: unnamed_12889346842302587936;
  inp_depend6: unnamed_13329315681689226472;
  hash_element: number;
  inp_saved_ppcb: number;
  inp_sp: number;
  reserved: unknown /* const array */;
}

declare class DNSServiceAttribute_s {
  constructor(init?: DNSServiceAttribute_s);
}

declare class _DNSServiceRef_t {
  constructor(init?: _DNSServiceRef_t);
}

declare class dispatch_data_s {
  constructor(init?: dispatch_data_s);
}

declare class unnamed_18415285912629137323 {
  constructor(init?: unnamed_18415285912629137323);
  tqe_next: interop.Pointer;
  tqe_prev: interop.Pointer;
}

declare class __Request__mach_vm_page_query_t {
  constructor(init?: __Request__mach_vm_page_query_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  offset: number;
}

declare class _krb5_cccol_cursor {
  constructor(init?: _krb5_cccol_cursor);
}

declare class proc_fileportinfo {
  constructor(init?: proc_fileportinfo);
  proc_fileport: number;
  proc_fdtype: number;
}

declare class __Reply__task_policy_get_t {
  constructor(init?: __Reply__task_policy_get_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  policy_infoCnt: number;
  policy_info: unknown /* const array */;
  get_default: number;
}

declare class __Reply__thread_get_exception_ports_info_t {
  constructor(init?: __Reply__thread_get_exception_ports_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  masksCnt: number;
  masks: unknown /* const array */;
  old_handlers_info: unknown /* const array */;
  old_behaviors: unknown /* const array */;
  old_flavors: unknown /* const array */;
}

declare class arm_unified_thread_state {
  constructor(init?: arm_unified_thread_state);
  ash: arm_state_hdr;
  uts: unnamed_12048718452629231441;
}

declare class ip_timestamp {
  constructor(init?: ip_timestamp);
  ipt_code: number;
  ipt_len: number;
  ipt_ptr: number;
  ipt_flg: number;
  ipt_oflw: number;
  ipt_timestamp: ipt_timestamp;
}

declare class mach_port_status {
  constructor(init?: mach_port_status);
  mps_pset: number;
  mps_seqno: number;
  mps_mscount: number;
  mps_qlimit: number;
  mps_msgcount: number;
  mps_sorights: number;
  mps_srights: number;
  mps_pdrequest: number;
  mps_nsrequest: number;
  mps_flags: number;
}

declare class sockbuf_io_desc {
  constructor(init?: sockbuf_io_desc);
  sbiod_level: number;
  sbiod_sb: interop.Pointer;
  sbiod_io: interop.Pointer;
  sbiod_pvt: interop.Pointer;
  sbiod_next: interop.Pointer;
}

declare class dispatch_source_type_s {
  constructor(init?: dispatch_source_type_s);
}

declare class __Request__processor_control_t {
  constructor(init?: __Request__processor_control_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  processor_cmdCnt: number;
  processor_cmd: unknown /* const array */;
}

declare class sadb_session_id {
  constructor(init?: sadb_session_id);
  sadb_session_id_len: number;
  sadb_session_id_exttype: number;
  sadb_session_id_v: unknown /* const array */;
}

declare class unnamed_13329315681689226472 {
  constructor(init?: unnamed_13329315681689226472);
  inp6_options: number;
  inp6_hlim: number;
  unused_uint8_1: number;
  unused_uint16_1: number;
  inp6_outputopts: number;
  inp6_moptions: number;
  inp6_icmp6filt: number;
  inp6_cksum: number;
  inp6_ifindex: number;
  inp6_hops: number;
}

declare class ifnet_interface_advisory {
  constructor(init?: ifnet_interface_advisory);
}

declare class __Request__host_processors_t {
  constructor(init?: __Request__host_processors_t);
  Head: mach_msg_header_t;
}

declare class au_exit_t {
  constructor(init?: au_exit_t);
  status: number;
  ret: number;
}

declare class __Request__processor_set_threads_t {
  constructor(init?: __Request__processor_set_threads_t);
  Head: mach_msg_header_t;
}

declare class mem_and_io_snapshot {
  constructor(init?: mem_and_io_snapshot);
  snapshot_magic: number;
  free_pages: number;
  active_pages: number;
  inactive_pages: number;
  purgeable_pages: number;
  wired_pages: number;
  speculative_pages: number;
  throttled_pages: number;
  filebacked_pages: number;
  compressions: number;
  decompressions: number;
  compressor_size: number;
  busy_buffer_count: number;
  pages_wanted: number;
  pages_reclaimed: number;
  pages_wanted_reclaimed_valid: number;
}

declare class NDR_record_t {
  constructor(init?: NDR_record_t);
  mig_vers: number;
  if_vers: number;
  reserved1: number;
  mig_encoding: number;
  int_rep: number;
  char_rep: number;
  float_rep: number;
  reserved2: number;
}

declare class __Reply__mach_vm_write_t {
  constructor(init?: __Reply__mach_vm_write_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__mach_vm_region_recurse_t {
  constructor(init?: __Request__mach_vm_region_recurse_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  nesting_depth: number;
  infoCnt: number;
}

declare class bootp_packet {
  constructor(init?: bootp_packet);
  bp_ip: ip;
  bp_udp: udphdr;
  bp_bootp: bootp;
}

declare class if_msghdr2 {
  constructor(init?: if_msghdr2);
  ifm_msglen: number;
  ifm_version: number;
  ifm_type: number;
  ifm_addrs: number;
  ifm_flags: number;
  ifm_index: number;
  ifm_snd_len: number;
  ifm_snd_maxlen: number;
  ifm_snd_drops: number;
  ifm_timer: number;
  ifm_data: if_data64;
}

declare class __Reply__thread_swap_mach_voucher_t {
  constructor(init?: __Reply__thread_swap_mach_voucher_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  old_voucher: mach_msg_port_descriptor_t;
}

declare class policy_rr_limit {
  constructor(init?: policy_rr_limit);
  max_priority: number;
}

declare class group_source_req {
  constructor(init?: group_source_req);
  gsr_interface: number;
  gsr_group: sockaddr_storage;
  gsr_source: sockaddr_storage;
}

declare class _Unwind_Exception {
  constructor(init?: _Unwind_Exception);
  exception_class: number;
  exception_cleanup: (p1: interop.Enum<typeof _Unwind_Reason_Code>, p2: interop.PointerConvertible) => void | null;
  private_1: number;
  private_2: number;
}

declare class __Reply__task_register_hardened_exception_handler_t {
  constructor(init?: __Reply__task_register_hardened_exception_handler_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class sqlite3_backup {
  constructor(init?: sqlite3_backup);
}

declare class __Reply__mach_port_space_info_t {
  constructor(init?: __Reply__mach_port_space_info_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  table_info: mach_msg_ool_descriptor_t;
  tree_info: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  space_info: ipc_info_space;
  table_infoCnt: number;
  tree_infoCnt: number;
}

declare class fvmlib_command {
  constructor(init?: fvmlib_command);
  cmd: number;
  cmdsize: number;
  fvmlib: fvmlib;
}

declare class net_event_data {
  constructor(init?: net_event_data);
  if_family: number;
  if_unit: number;
  if_name: unknown /* const array */;
}

declare class mach_task_basic_info {
  constructor(init?: mach_task_basic_info);
  virtual_size: number;
  resident_size: number;
  resident_size_max: number;
  user_time: time_value;
  system_time: time_value;
  policy: number;
  suspend_count: number;
}

declare class __Request__mach_vm_copy_t {
  constructor(init?: __Request__mach_vm_copy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  source_address: number;
  size: number;
  dest_address: number;
}

declare class entry_point_command {
  constructor(init?: entry_point_command);
  cmd: number;
  cmdsize: number;
  entryoff: number;
  stacksize: number;
}

declare class __if_clone {
  constructor(init?: __if_clone);
}

declare class apple_gss_krb5_authdata_if_relevant_key {
  constructor(init?: apple_gss_krb5_authdata_if_relevant_key);
  type: number;
  length: number;
  data: interop.Pointer;
}

declare class Fts5PhraseIter {
  constructor(init?: Fts5PhraseIter);
  a: interop.Pointer;
  b: interop.Pointer;
}

declare class Fts5Context {
  constructor(init?: Fts5Context);
}

declare class note_command {
  constructor(init?: note_command);
  cmd: number;
  cmdsize: number;
  data_owner: unknown /* const array */;
  offset: number;
  size: number;
}

declare class __Request__processor_set_statistics_t {
  constructor(init?: __Request__processor_set_statistics_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  info_outCnt: number;
}

declare class __darwin_arm_thread_state64 {
  constructor(init?: __darwin_arm_thread_state64);
  __x: unknown /* const array */;
  __fp: number;
  __lr: number;
  __sp: number;
  __pc: number;
  __cpsr: number;
  __pad: number;
}

declare class mach_msg_ool_ports_descriptor32_t {
  constructor(init?: mach_msg_ool_ports_descriptor32_t);
  address: number;
  count: number;
  deallocate: number;
  copy: number;
  disposition: number;
  type: number;
}

declare class _krb5_cred_enc_part {
  constructor(init?: _krb5_cred_enc_part);
  magic: number;
  nonce: number;
  timestamp: number;
  usec: number;
  s_address: interop.Pointer;
  r_address: interop.Pointer;
  ticket_info: interop.Pointer;
}

declare class __Request__thread_resume_t {
  constructor(init?: __Request__thread_resume_t);
  Head: mach_msg_header_t;
}

declare class sigevent {
  constructor(init?: sigevent);
  sigev_notify: number;
  sigev_signo: number;
  sigev_value: sigval;
  sigev_notify_function: (p1: sigval) => void | null;
  sigev_notify_attributes: interop.Pointer;
}

declare class BackendDB {
  constructor(init?: BackendDB);
}

declare class kev_in_arpalive {
  constructor(init?: kev_in_arpalive);
  link_data: net_event_data;
}

declare class searchstate {
  constructor(init?: searchstate);
  ss_union_flags: number;
  ss_union_layer: number;
  ss_fsstate: unknown /* const array */;
}

declare class sockaddr {
  constructor(init?: sockaddr);
  sa_len: number;
  sa_family: number;
  sa_data: unknown /* const array */;
}

declare class __Request__task_generate_corpse_t {
  constructor(init?: __Request__task_generate_corpse_t);
  Head: mach_msg_header_t;
}

declare class fpunchhole {
  constructor(init?: fpunchhole);
  fp_flags: number;
  reserved: number;
  fp_offset: number;
  fp_length: number;
}

declare class __darwin_pthread_handler_rec {
  constructor(init?: __darwin_pthread_handler_rec);
  __routine: (p1: interop.PointerConvertible) => void | null;
  __arg: interop.Pointer;
  __next: interop.Pointer;
}

declare class ppd_emul_s {
  constructor(init?: ppd_emul_s);
  name: unknown /* const array */;
  start: string | null;
  stop: string | null;
}

declare class flocktimeout {
  constructor(init?: flocktimeout);
  fl: flock;
  timeout: timespec;
}

declare class kern_event_msg {
  constructor(init?: kern_event_msg);
  total_size: number;
  vendor_code: number;
  kev_class: number;
  kev_subclass: number;
  id: number;
  event_code: number;
  event_data: unknown /* const array */;
}

declare class __Reply__mach_port_allocate_qos_t {
  constructor(init?: __Reply__mach_port_allocate_qos_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  qos: mach_port_qos;
  name: number;
}

declare class ipc_info_tree_name {
  constructor(init?: ipc_info_tree_name);
  iitn_name: ipc_info_name;
  iitn_lchild: number;
  iitn_rchild: number;
}

declare class _ppd_cache_s {
  constructor(init?: _ppd_cache_s);
}

declare class __Request__thread_create_running_t {
  constructor(init?: __Request__thread_create_running_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  flavor: number;
  new_stateCnt: number;
  new_state: unknown /* const array */;
}

declare class __Request__mach_port_move_member_t {
  constructor(init?: __Request__mach_port_move_member_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  member: number;
  after: number;
}

declare class au_record {
  constructor(init?: au_record);
  used: number;
  desc: number;
  token_q: unnamed_17222040562567524509;
  data: interop.Pointer;
  len: number;
  au_rec_q: unnamed_8096331331514043626;
}

declare class au_expire_after {
  constructor(init?: au_expire_after);
  age: number;
  size: number;
  op_type: number;
}

declare class ldap_schema_extension_item {
  constructor(init?: ldap_schema_extension_item);
  lsei_name: string | null;
  lsei_values: interop.Pointer;
}

declare class _malloc_zone_t {
  constructor(init?: _malloc_zone_t);
  reserved1: interop.Pointer;
  reserved2: interop.Pointer;
  size: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  malloc: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  calloc: (p1: interop.PointerConvertible, p2: number, p3: number) => interop.Pointer | null;
  valloc: (p1: interop.PointerConvertible, p2: number) => interop.Pointer | null;
  free: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void | null;
  realloc: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number) => interop.Pointer | null;
  destroy: (p1: interop.PointerConvertible) => void | null;
  zone_name: string | null;
  batch_malloc: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: number) => number | null;
  batch_free: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number) => void | null;
  introspect: interop.Pointer;
  version: number;
  memalign: (p1: interop.PointerConvertible, p2: number, p3: number) => interop.Pointer | null;
  free_definite_size: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number) => void | null;
  pressure_relief: (p1: interop.PointerConvertible, p2: number) => number | null;
  claimed_address: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  try_free_default: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void | null;
  malloc_with_options: (p1: interop.PointerConvertible, p2: number, p3: number, p4: number) => interop.Pointer | null;
  malloc_type_malloc: (p1: interop.PointerConvertible, p2: number, p3: number) => interop.Pointer | null;
  malloc_type_calloc: (p1: interop.PointerConvertible, p2: number, p3: number, p4: number) => interop.Pointer | null;
  malloc_type_realloc: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number) => interop.Pointer | null;
  malloc_type_memalign: (p1: interop.PointerConvertible, p2: number, p3: number, p4: number) => interop.Pointer | null;
  malloc_type_malloc_with_options: (p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number) => interop.Pointer | null;
}

declare class regex_t {
  constructor(init?: regex_t);
  re_magic: number;
  re_nsub: number;
  re_endp: string | null;
  re_g: interop.Pointer;
}

declare class dyld_uuid_info_32 {
  constructor(init?: dyld_uuid_info_32);
  imageLoadAddress: number;
  imageUUID: unknown /* const array */;
}

declare class __Request__mach_memory_entry_purgable_control_t {
  constructor(init?: __Request__mach_memory_entry_purgable_control_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  control: number;
  state: number;
}

declare class ppd_group_s {
  constructor(init?: ppd_group_s);
  text: unknown /* const array */;
  name: unknown /* const array */;
  num_options: number;
  options: interop.Pointer;
  num_subgroups: number;
  subgroups: interop.Pointer;
}

declare class __Reply__mach_vm_protect_t {
  constructor(init?: __Reply__mach_vm_protect_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class ipsec_wake_pkt_event_data {
  constructor(init?: ipsec_wake_pkt_event_data);
  wake_uuid: unknown /* const array */;
}

declare class socket_fdinfo {
  constructor(init?: socket_fdinfo);
  pfi: proc_fileinfo;
  psi: socket_info;
}

declare class __Request__task_set_mach_voucher_t {
  constructor(init?: __Request__task_set_mach_voucher_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  voucher: mach_msg_port_descriptor_t;
}

declare class symtab_command {
  constructor(init?: symtab_command);
  cmd: number;
  cmdsize: number;
  symoff: number;
  nsyms: number;
  stroff: number;
  strsize: number;
}

declare class _cups_dinfo_s {
  constructor(init?: _cups_dinfo_s);
}

declare class dk_synchronize_t {
  constructor(init?: dk_synchronize_t);
  offset: number;
  length: number;
  options: number;
  reserved0160: unknown /* const array */;
}

declare class berelement {
  constructor(init?: berelement);
}

declare class __darwin_ucontext {
  constructor(init?: __darwin_ucontext);
  uc_onstack: number;
  uc_sigmask: number;
  uc_stack: __darwin_sigaltstack;
  uc_link: interop.Pointer;
  uc_mcsize: number;
  uc_mcontext: interop.Pointer;
}

declare class DERItem {
  constructor(init?: DERItem);
  data: interop.Pointer;
  length: number;
}

declare class task_power_info_v2 {
  constructor(init?: task_power_info_v2);
  cpu_energy: task_power_info;
  gpu_energy: gpu_energy_data;
  task_energy: number;
  task_ptime: number;
  task_pset_switches: number;
}

declare class rusage_info_v2 {
  constructor(init?: rusage_info_v2);
  ri_uuid: unknown /* const array */;
  ri_user_time: number;
  ri_system_time: number;
  ri_pkg_idle_wkups: number;
  ri_interrupt_wkups: number;
  ri_pageins: number;
  ri_wired_size: number;
  ri_resident_size: number;
  ri_phys_footprint: number;
  ri_proc_start_abstime: number;
  ri_proc_exit_abstime: number;
  ri_child_user_time: number;
  ri_child_system_time: number;
  ri_child_pkg_idle_wkups: number;
  ri_child_interrupt_wkups: number;
  ri_child_pageins: number;
  ri_child_elapsed_abstime: number;
  ri_diskio_bytesread: number;
  ri_diskio_byteswritten: number;
}

declare class gpu_energy_data {
  constructor(init?: gpu_energy_data);
  task_gpu_utilisation: number;
  task_gpu_stat_reserved0: number;
  task_gpu_stat_reserved1: number;
  task_gpu_stat_reserved2: number;
}

declare class routines_command_64 {
  constructor(init?: routines_command_64);
  cmd: number;
  cmdsize: number;
  init_address: number;
  init_module: number;
  reserved1: number;
  reserved2: number;
  reserved3: number;
  reserved4: number;
  reserved5: number;
  reserved6: number;
}

declare class __Reply__mach_vm_map_t {
  constructor(init?: __Reply__mach_vm_map_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  address: number;
}

declare class __Reply__vm_region_recurse_64_t {
  constructor(init?: __Reply__vm_region_recurse_64_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  address: number;
  size: number;
  nesting_depth: number;
  infoCnt: number;
  info: unknown /* const array */;
}

declare class __Reply__mach_port_allocate_t {
  constructor(init?: __Reply__mach_port_allocate_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  name: number;
}

declare class cups_dentry_s {
  constructor(init?: cups_dentry_s);
  filename: unknown /* const array */;
  fileinfo: stat;
}

declare class gss_krb5_lucid_context_v1 {
  constructor(init?: gss_krb5_lucid_context_v1);
  version: number;
  initiate: number;
  endtime: number;
  send_seq: number;
  recv_seq: number;
  protocol: number;
  rfc1964_kd: gss_krb5_rfc1964_keydata;
  cfx_kd: gss_krb5_cfx_keydata;
}

declare class __Reply__mach_vm_read_list_t {
  constructor(init?: __Reply__mach_vm_read_list_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  data_list: unknown /* const array */;
}

declare class __darwin_arm_sme_za_state {
  constructor(init?: __darwin_arm_sme_za_state);
  __za: unknown /* const array */;
}

declare class _DNSRecordRef_t {
  constructor(init?: _DNSRecordRef_t);
}

declare class tokenstr {
  constructor(init?: tokenstr);
  id: number;
  data: interop.Pointer;
  len: number;
  tt: unnamed_11293842726292155158;
}

declare class _krb5_encrypt_block {
  constructor(init?: _krb5_encrypt_block);
  magic: number;
  crypto_entry: number;
  key: interop.Pointer;
}

declare class gss_krb5_lucid_context_version {
  constructor(init?: gss_krb5_lucid_context_version);
  version: number;
}

declare class task_snapshot_v3 {
  constructor(init?: task_snapshot_v3);
  ts_unique_pid: number;
  ts_ss_flags: number;
  ts_user_time_in_terminated_threads: number;
  ts_system_time_in_terminated_threads: number;
  ts_p_start_sec: number;
  ts_task_size: number;
  ts_max_resident_size: number;
  ts_suspend_count: number;
  ts_faults: number;
  ts_pageins: number;
  ts_cow_faults: number;
  ts_was_throttled: number;
  ts_did_throttle: number;
  ts_latency_qos: number;
  ts_pid: number;
  ts_p_comm: unknown /* const array */;
  ts_uid: number;
  ts_gid: number;
}

declare class au_arb_t {
  constructor(init?: au_arb_t);
  howtopr: number;
  bu: number;
  uc: number;
  data: interop.Pointer;
}

declare class ip_mreq_source {
  constructor(init?: ip_mreq_source);
  imr_multiaddr: in_addr;
  imr_sourceaddr: in_addr;
  imr_interface: in_addr;
}

declare class dqfilehdr {
  constructor(init?: dqfilehdr);
  dqh_magic: number;
  dqh_version: number;
  dqh_maxentries: number;
  dqh_entrycnt: number;
  dqh_flags: number;
  dqh_chktime: number;
  dqh_btime: number;
  dqh_itime: number;
  dqh_string: unknown /* const array */;
  dqh_spare: unknown /* const array */;
}

declare class __Reply__vm_read_t {
  constructor(init?: __Reply__vm_read_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  data: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  dataCnt: number;
}

declare class slapi_valueset {
  constructor(init?: slapi_valueset);
}

declare class pwg_media_s {
  constructor(init?: pwg_media_s);
  pwg: string | null;
  legacy: string | null;
  ppd: string | null;
  width: number;
  length: number;
}

declare class __Reply__thread_abort_safely_t {
  constructor(init?: __Reply__thread_abort_safely_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__host_processor_sets_t {
  constructor(init?: __Request__host_processor_sets_t);
  Head: mach_msg_header_t;
}

declare class lastlog {
  constructor(init?: lastlog);
  ll_time: number;
  ll_line: unknown /* const array */;
  ll_host: unknown /* const array */;
}

declare class ifreq {
  constructor(init?: ifreq);
  ifr_name: unknown /* const array */;
  ifr_ifru: unnamed_4991142208153925470;
}

declare class __Reply__processor_start_t {
  constructor(init?: __Reply__processor_start_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class igmp_report {
  constructor(init?: igmp_report);
  ir_type: number;
  ir_rsv1: number;
  ir_cksum: number;
  ir_rsv2: number;
  ir_numgrps: number;
}

declare class pipebuf {
  constructor(init?: pipebuf);
  cnt: number;
  in: number;
  out: number;
  size: number;
  buffer: string | null;
}

declare class _opaque_pthread_rwlockattr_t {
  constructor(init?: _opaque_pthread_rwlockattr_t);
  __sig: number;
  __opaque: unknown /* const array */;
}

declare class tcp_connection_info {
  constructor(init?: tcp_connection_info);
  tcpi_state: number;
  tcpi_snd_wscale: number;
  tcpi_rcv_wscale: number;
  __pad1: number;
  tcpi_options: number;
  tcpi_flags: number;
  tcpi_rto: number;
  tcpi_maxseg: number;
  tcpi_snd_ssthresh: number;
  tcpi_snd_cwnd: number;
  tcpi_snd_wnd: number;
  tcpi_snd_sbbytes: number;
  tcpi_rcv_wnd: number;
  tcpi_rttcur: number;
  tcpi_srtt: number;
  tcpi_rttvar: number;
  tcpi_tfo_cookie_req: number;
  tcpi_tfo_cookie_rcv: number;
  tcpi_tfo_syn_loss: number;
  tcpi_tfo_syn_data_sent: number;
  tcpi_tfo_syn_data_acked: number;
  tcpi_tfo_syn_data_rcv: number;
  tcpi_tfo_cookie_req_rcv: number;
  tcpi_tfo_cookie_sent: number;
  tcpi_tfo_cookie_invalid: number;
  tcpi_tfo_cookie_wrong: number;
  tcpi_tfo_no_cookie_rcv: number;
  tcpi_tfo_heuristics_disable: number;
  tcpi_tfo_send_blackhole: number;
  tcpi_tfo_recv_blackhole: number;
  tcpi_tfo_onebyte_proxy: number;
  __pad2: number;
  tcpi_txpackets: number;
  tcpi_txbytes: number;
  tcpi_txretransmitbytes: number;
  tcpi_rxpackets: number;
  tcpi_rxbytes: number;
  tcpi_rxoutoforderbytes: number;
  tcpi_txretransmitpackets: number;
}

declare class FTW {
  constructor(init?: FTW);
  base: number;
  level: number;
}

declare class hash_info_bucket {
  constructor(init?: hash_info_bucket);
  hib_count: number;
}

declare class lconv {
  constructor(init?: lconv);
  decimal_point: string | null;
  thousands_sep: string | null;
  grouping: string | null;
  int_curr_symbol: string | null;
  currency_symbol: string | null;
  mon_decimal_point: string | null;
  mon_thousands_sep: string | null;
  mon_grouping: string | null;
  positive_sign: string | null;
  negative_sign: string | null;
  int_frac_digits: number;
  frac_digits: number;
  p_cs_precedes: number;
  p_sep_by_space: number;
  n_cs_precedes: number;
  n_sep_by_space: number;
  p_sign_posn: number;
  n_sign_posn: number;
  int_p_cs_precedes: number;
  int_n_cs_precedes: number;
  int_p_sep_by_space: number;
  int_n_sep_by_space: number;
  int_p_sign_posn: number;
  int_n_sign_posn: number;
}

declare class __Reply__mach_vm_copy_t {
  constructor(init?: __Reply__mach_vm_copy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class ldap_matchingruleuse {
  constructor(init?: ldap_matchingruleuse);
  mru_oid: string | null;
  mru_names: interop.Pointer;
  mru_desc: string | null;
  mru_obsolete: number;
  mru_applies_oids: interop.Pointer;
  mru_extensions: interop.Pointer;
}

declare class ifmaddrs {
  constructor(init?: ifmaddrs);
  ifma_next: interop.Pointer;
  ifma_name: interop.Pointer;
  ifma_addr: interop.Pointer;
  ifma_lladdr: interop.Pointer;
}

declare class dylib_reference {
  constructor(init?: dylib_reference);
  isym: number;
  flags: number;
}

declare class rt_msghdr {
  constructor(init?: rt_msghdr);
  rtm_msglen: number;
  rtm_version: number;
  rtm_type: number;
  rtm_index: number;
  rtm_flags: number;
  rtm_addrs: number;
  rtm_pid: number;
  rtm_seq: number;
  rtm_errno: number;
  rtm_use: number;
  rtm_inits: number;
  rtm_rmx: rt_metrics;
}

declare class __Reply__thread_swap_exception_ports_t {
  constructor(init?: __Reply__thread_swap_exception_ports_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  old_handlers: unknown /* const array */;
  NDR: NDR_record_t;
  masksCnt: number;
  masks: unknown /* const array */;
  old_behaviors: unknown /* const array */;
  old_flavors: unknown /* const array */;
}

declare class ldap_conncb {
  constructor(init?: ldap_conncb);
  lc_add: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible) => number | null;
  lc_del: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => void | null;
  lc_arg: interop.Pointer;
}

declare class dyld_chained_import {
  constructor(init?: dyld_chained_import);
  lib_ordinal: number;
  weak_import: number;
  name_offset: number;
}

declare class Fts5Tokenizer {
  constructor(init?: Fts5Tokenizer);
}

declare class os_workgroup_attr_opaque_s {
  constructor(init?: os_workgroup_attr_opaque_s);
  sig: number;
  opaque: unknown /* const array */;
}

declare class ifa_msghdr {
  constructor(init?: ifa_msghdr);
  ifam_msglen: number;
  ifam_version: number;
  ifam_type: number;
  ifam_addrs: number;
  ifam_flags: number;
  ifam_index: number;
  ifam_metric: number;
}

declare class sockaddr_in6 {
  constructor(init?: sockaddr_in6);
  sin6_len: number;
  sin6_family: number;
  sin6_port: number;
  sin6_flowinfo: number;
  sin6_addr: in6_addr;
  sin6_scope_id: number;
}

declare class mach_port_deleted_notification_t {
  constructor(init?: mach_port_deleted_notification_t);
  not_header: mach_msg_header_t;
  NDR: NDR_record_t;
  not_port: number;
  trailer: mach_msg_security_trailer_t;
}

declare class slapi_entry {
  constructor(init?: slapi_entry);
}

declare class ldap_nameform {
  constructor(init?: ldap_nameform);
  nf_oid: string | null;
  nf_names: interop.Pointer;
  nf_desc: string | null;
  nf_obsolete: number;
  nf_objectclass: string | null;
  nf_at_oids_must: interop.Pointer;
  nf_at_oids_may: interop.Pointer;
  nf_extensions: interop.Pointer;
}

declare class __Request__host_kernel_version_t {
  constructor(init?: __Request__host_kernel_version_t);
  Head: mach_msg_header_t;
}

declare class fsignatures {
  constructor(init?: fsignatures);
  fs_file_start: number;
  fs_blob_start: interop.Pointer;
  fs_blob_size: number;
  fs_fsignatures_size: number;
  fs_cdhash: unknown /* const array */;
  fs_hash_type: number;
}

declare class processor_cpu_load_info {
  constructor(init?: processor_cpu_load_info);
  cpu_ticks: unknown /* const array */;
}

declare class stackshot_fault_stats {
  constructor(init?: stackshot_fault_stats);
  sfs_pages_faulted_in: number;
  sfs_time_spent_faulting: number;
  sfs_system_max_fault_time: number;
  sfs_stopped_faulting: number;
}

declare class task_category_policy {
  constructor(init?: task_category_policy);
  role: interop.Enum<typeof task_role>;
}

declare class kmod_info_32_v1 {
  constructor(init?: kmod_info_32_v1);
  next_addr: number;
  info_version: number;
  id: number;
  name: unknown /* const array */;
  version: unknown /* const array */;
  reference_count: number;
  reference_list_addr: number;
  address: number;
  size: number;
  hdr_size: number;
  start_addr: number;
  stop_addr: number;
}

declare class TimeBaseRecord {
  constructor(init?: TimeBaseRecord);
}

declare class __Reply__mach_port_kobject_t {
  constructor(init?: __Reply__mach_port_kobject_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  object_type: interop.Enum<typeof ipc_info_object_type_t>;
  object_addr: number;
}

declare class __Reply__host_processor_set_priv_t {
  constructor(init?: __Reply__host_processor_set_priv_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  set: mach_msg_port_descriptor_t;
}

declare class __Reply__mach_port_space_basic_info_t {
  constructor(init?: __Reply__mach_port_space_basic_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  basic_info: ipc_info_space_basic;
}

declare class _ipp_s {
  constructor(init?: _ipp_s);
}

declare class __Reply__kmod_destroy_t {
  constructor(init?: __Reply__kmod_destroy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class kev_dl_proto_data {
  constructor(init?: kev_dl_proto_data);
  link_data: net_event_data;
  proto_family: number;
  proto_remaining_count: number;
}

declare class processor_set_basic_info {
  constructor(init?: processor_set_basic_info);
  processor_count: number;
  default_policy: number;
}

declare class __Reply__mach_port_rename_t {
  constructor(init?: __Reply__mach_port_rename_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class accessx_descriptor {
  constructor(init?: accessx_descriptor);
  ad_name_offset: number;
  ad_flags: number;
  ad_pad: unknown /* const array */;
}

declare class __Reply__task_set_state_t {
  constructor(init?: __Reply__task_set_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class __Request__mach_vm_write_t {
  constructor(init?: __Request__mach_vm_write_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  data: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  address: number;
  dataCnt: number;
}

declare class vm_purgeable_info {
  constructor(init?: vm_purgeable_info);
  fifo_data: unknown /* const array */;
  obsolete_data: vm_purgeable_stat;
  lifo_data: unknown /* const array */;
}

declare class unnamed_7329341945251432344 {
  constructor(init?: unnamed_7329341945251432344);
  offset00: number;
  seg: sel;
  : number;
  type: number;
  dpl: number;
  present: number;
  offset16: number;
}

declare class __Reply__lock_set_create_t {
  constructor(init?: __Reply__lock_set_create_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  new_lock_set: mach_msg_port_descriptor_t;
}

declare class __Request__vm_wire_t {
  constructor(init?: __Request__vm_wire_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  task: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  address: number;
  size: number;
  desired_access: number;
}

declare class __asl_object_s {
  constructor(init?: __asl_object_s);
}

declare class io_stats_snapshot {
  constructor(init?: io_stats_snapshot);
  ss_disk_reads_count: number;
  ss_disk_reads_size: number;
  ss_disk_writes_count: number;
  ss_disk_writes_size: number;
  ss_io_priority_count: unknown /* const array */;
  ss_io_priority_size: unknown /* const array */;
  ss_paging_count: number;
  ss_paging_size: number;
  ss_non_paging_count: number;
  ss_non_paging_size: number;
  ss_data_count: number;
  ss_data_size: number;
  ss_metadata_count: number;
  ss_metadata_size: number;
}

declare class __Reply__host_security_create_task_token_t {
  constructor(init?: __Reply__host_security_create_task_token_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  child_task: mach_msg_port_descriptor_t;
}

declare class _NSZone {
  constructor(init?: _NSZone);
}

declare class objc_object {
  constructor(init?: objc_object);
  isa: interop.Object | null;
}

declare class __darwin_sigaltstack {
  constructor(init?: __darwin_sigaltstack);
  ss_sp: interop.Pointer;
  ss_size: number;
  ss_flags: number;
}

declare class __sFILE {
  constructor(init?: __sFILE);
  _p: interop.Pointer;
  _r: number;
  _w: number;
  _flags: number;
  _file: number;
  _bf: __sbuf;
  _lbfsize: number;
  _cookie: interop.Pointer;
  _close: (p1: interop.PointerConvertible) => number | null;
  _read: (p1: interop.PointerConvertible, p2: string, p3: number) => number | null;
  _seek: (p1: interop.PointerConvertible, p2: number, p3: number) => number | null;
  _write: (p1: interop.PointerConvertible, p2: string, p3: number) => number | null;
  _ub: __sbuf;
  _extra: interop.Pointer;
  _ur: number;
  _ubuf: unknown /* const array */;
  _nbuf: unknown /* const array */;
  _lb: __sbuf;
  _blksize: number;
  _offset: number;
}

declare class au_mask {
  constructor(init?: au_mask);
  am_success: number;
  am_failure: number;
}

declare class eventreq {
  constructor(init?: eventreq);
  er_type: number;
  er_handle: number;
  er_data: interop.Pointer;
  er_rcnt: number;
  er_wcnt: number;
  er_ecnt: number;
  er_eventbits: number;
}

declare class __Request__task_set_special_port_t {
  constructor(init?: __Request__task_set_special_port_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  special_port: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  which_port: number;
}

declare class unnamed_10068016770113449566 {
  constructor(init?: unnamed_10068016770113449566);
  numColorChannels: number;
  log2BlockBytes: number;
  blockWidth: number;
  blockHeight: number;
  isHDR: number;
  hasAlpha: number;
  _reserved: number;
}

declare class _ipp_attribute_s {
  constructor(init?: _ipp_attribute_s);
}

declare class __Reply__thread_policy_t {
  constructor(init?: __Reply__thread_policy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
}

declare class mach_port_limits {
  constructor(init?: mach_port_limits);
  mpl_qlimit: number;
}

declare class http_addrlist_s {
  constructor(init?: http_addrlist_s);
  next: interop.Pointer;
  addr: _http_addr_u;
}

declare class ip6_rthdr {
  constructor(init?: ip6_rthdr);
  ip6r_nxt: number;
  ip6r_len: number;
  ip6r_type: number;
  ip6r_segleft: number;
}

declare class _RuneLocale {
  constructor(init?: _RuneLocale);
  __magic: unknown /* const array */;
  __encoding: unknown /* const array */;
  __sgetrune: (p1: string, p2: number, p3: interop.PointerConvertible) => number | null;
  __sputrune: (p1: number, p2: string, p3: number, p4: interop.PointerConvertible) => number | null;
  __invalid_rune: number;
  __runetype: unknown /* const array */;
  __maplower: unknown /* const array */;
  __mapupper: unknown /* const array */;
  __runetype_ext: _RuneRange;
  __maplower_ext: _RuneRange;
  __mapupper_ext: _RuneRange;
  __variable: interop.Pointer;
  __variable_len: number;
  __ncharclasses: number;
  __charclasses: interop.Pointer;
}

declare class HISTORY_STATE {
  constructor(init?: HISTORY_STATE);
  length: number;
}

declare class __darwin_arm_sme_state {
  constructor(init?: __darwin_arm_sme_state);
  __svcr: number;
  __tpidr2_el0: number;
  __svl_b: number;
}

declare class kcdata_item {
  constructor(init?: kcdata_item);
  type: number;
  size: number;
  flags: number;
  data: interop.Pointer;
}

declare class dqblk {
  constructor(init?: dqblk);
  dqb_bhardlimit: number;
  dqb_bsoftlimit: number;
  dqb_curbytes: number;
  dqb_ihardlimit: number;
  dqb_isoftlimit: number;
  dqb_curinodes: number;
  dqb_btime: number;
  dqb_itime: number;
  dqb_id: number;
  dqb_spare: unknown /* const array */;
}

declare class __Reply__host_processor_sets_t {
  constructor(init?: __Reply__host_processor_sets_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  processor_sets: mach_msg_ool_ports_descriptor_t;
  NDR: NDR_record_t;
  processor_setsCnt: number;
}

declare class dispatch_queue_s {
  constructor(init?: dispatch_queue_s);
}

declare class esp {
  constructor(init?: esp);
  esp_spi: number;
}

declare class __Reply__task_get_exception_ports_info_t {
  constructor(init?: __Reply__task_get_exception_ports_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  masksCnt: number;
  masks: unknown /* const array */;
  old_handlers_info: unknown /* const array */;
  old_behaviors: unknown /* const array */;
  old_flavors: unknown /* const array */;
}

declare class ifaddrs {
  constructor(init?: ifaddrs);
  ifa_next: interop.Pointer;
  ifa_name: string | null;
  ifa_flags: number;
  ifa_addr: interop.Pointer;
  ifa_netmask: interop.Pointer;
  ifa_dstaddr: interop.Pointer;
  ifa_data: interop.Pointer;
}

declare class _opaque_pthread_once_t {
  constructor(init?: _opaque_pthread_once_t);
  __sig: number;
  __opaque: unknown /* const array */;
}

declare class unwind_info_section_header_index_entry {
  constructor(init?: unwind_info_section_header_index_entry);
  functionOffset: number;
  secondLevelPagesSectionOffset: number;
  lsdaIndexArraySectionOffset: number;
}

declare class _opaque_pthread_condattr_t {
  constructor(init?: _opaque_pthread_condattr_t);
  __sig: number;
  __opaque: unknown /* const array */;
}

declare class ifma_msghdr2 {
  constructor(init?: ifma_msghdr2);
  ifmam_msglen: number;
  ifmam_version: number;
  ifmam_type: number;
  ifmam_addrs: number;
  ifmam_flags: number;
  ifmam_index: number;
  ifmam_refcount: number;
}

declare class __darwin_arm_exception_state {
  constructor(init?: __darwin_arm_exception_state);
  __exception: number;
  __fsr: number;
  __far: number;
}

declare class mach_vm_read_entry {
  constructor(init?: mach_vm_read_entry);
  address: number;
  size: number;
}

declare class __Request__task_policy_t {
  constructor(init?: __Request__task_policy_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  policy: number;
  baseCnt: number;
  base: unknown /* const array */;
  set_limit: number;
  change: number;
}

declare class mach_msg_context_trailer_t {
  constructor(init?: mach_msg_context_trailer_t);
  msgh_trailer_type: number;
  msgh_trailer_size: number;
  msgh_seqno: number;
  msgh_sender: security_token_t;
  msgh_audit: audit_token_t;
  msgh_context: number;
}

declare class _krb5_ap_rep {
  constructor(init?: _krb5_ap_rep);
  magic: number;
  enc_part: _krb5_enc_data;
}

declare class inpcb64_list_entry {
  constructor(init?: inpcb64_list_entry);
  le_next: number;
  le_prev: number;
}

declare class slapi_mutex {
  constructor(init?: slapi_mutex);
}

declare class __Reply__mach_vm_region_info_t {
  constructor(init?: __Reply__mach_vm_region_info_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  objects: mach_msg_ool_descriptor_t;
  NDR: NDR_record_t;
  region: vm_info_region;
  objectsCnt: number;
}

declare class rpc_routine_descriptor {
  constructor(init?: rpc_routine_descriptor);
  impl_routine: () => number | null;
  stub_routine: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void | null;
  argc: number;
  descr_count: number;
  arg_descr: interop.Pointer;
  max_reply_msg: number;
}

declare class mach_header {
  constructor(init?: mach_header);
  magic: number;
  cputype: number;
  cpusubtype: number;
  filetype: number;
  ncmds: number;
  sizeofcmds: number;
  flags: number;
}

declare class __Request__mach_port_get_refs_t {
  constructor(init?: __Request__mach_port_get_refs_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  name: number;
  right: number;
}

declare class __darwin_mcontext64 {
  constructor(init?: __darwin_mcontext64);
  __es: __darwin_arm_exception_state64;
  __ss: __darwin_arm_thread_state64;
  __ns: __darwin_arm_neon_state64;
}

declare class aliasent {
  constructor(init?: aliasent);
  alias_name: string | null;
  alias_members_len: number;
  alias_members: interop.Pointer;
  alias_local: number;
}

declare class __Request__processor_set_destroy_t {
  constructor(init?: __Request__processor_set_destroy_t);
  Head: mach_msg_header_t;
}

declare class mach_msg_audit_trailer_t {
  constructor(init?: mach_msg_audit_trailer_t);
  msgh_trailer_type: number;
  msgh_trailer_size: number;
  msgh_seqno: number;
  msgh_sender: security_token_t;
  msgh_audit: audit_token_t;
}

declare class dylib_command {
  constructor(init?: dylib_command);
  cmd: number;
  cmdsize: number;
  dylib: dylib;
}

declare class __Request__host_get_clock_service_t {
  constructor(init?: __Request__host_get_clock_service_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  clock_id: number;
}

declare class sockbuf_io {
  constructor(init?: sockbuf_io);
  sbi_setup: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number | null;
  sbi_remove: (p1: interop.PointerConvertible) => number | null;
  sbi_ctrl: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number | null;
  sbi_read: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number) => number | null;
  sbi_write: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number) => number | null;
  sbi_close: (p1: interop.PointerConvertible) => number | null;
}

declare class iovec {
  constructor(init?: iovec);
  iov_base: interop.Pointer;
  iov_len: number;
}

declare class simd_float4x3 {
  constructor(init?: simd_float4x3);
  columns: unknown /* const array */;
}

declare class _cups_file_s {
  constructor(init?: _cups_file_s);
}

declare class __Request__mach_make_memory_entry_t {
  constructor(init?: __Request__mach_make_memory_entry_t);
  Head: mach_msg_header_t;
  msgh_body: mach_msg_body_t;
  parent_entry: mach_msg_port_descriptor_t;
  NDR: NDR_record_t;
  size: number;
  offset: number;
  permission: number;
}

declare class imaxdiv_t {
  constructor(init?: imaxdiv_t);
  quot: number;
  rem: number;
}

declare class __Reply__task_info_t {
  constructor(init?: __Reply__task_info_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  task_info_outCnt: number;
  task_info_out: unknown /* const array */;
}

declare class mach_vm_range_recipe_v1_t {
  constructor(init?: mach_vm_range_recipe_v1_t);
  flags: interop.Enum<typeof mach_vm_range_flags_t>;
  range_tag: interop.Enum<typeof mach_vm_range_tag_t>;
  vm_tag: number;
  range: mach_vm_range;
}

declare class proc_taskallinfo {
  constructor(init?: proc_taskallinfo);
  pbsd: proc_bsdinfo;
  ptinfo: proc_taskinfo;
}

declare class __Reply__host_priv_statistics_t {
  constructor(init?: __Reply__host_priv_statistics_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  host_info_outCnt: number;
  host_info_out: unknown /* const array */;
}

declare class gmon_data {
  constructor(init?: gmon_data);
  type: number;
  size: number;
}

declare class __Request__mach_vm_region_t {
  constructor(init?: __Request__mach_vm_region_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  address: number;
  flavor: number;
  infoCnt: number;
}

declare class igmp_grouprec {
  constructor(init?: igmp_grouprec);
  ig_type: number;
  ig_datalen: number;
  ig_numsrc: number;
  ig_group: in_addr;
}

declare class nd_opt_route_info {
  constructor(init?: nd_opt_route_info);
  nd_opt_rti_type: number;
  nd_opt_rti_len: number;
  nd_opt_rti_prefixlen: number;
  nd_opt_rti_flags: number;
  nd_opt_rti_lifetime: number;
}

declare class _OSUnalignedU64 {
  constructor(init?: _OSUnalignedU64);
  __val: number;
}

declare class servent {
  constructor(init?: servent);
  s_name: string | null;
  s_aliases: interop.Pointer;
  s_port: number;
  s_proto: string | null;
}

declare class au_evclass_map {
  constructor(init?: au_evclass_map);
  ec_number: number;
  ec_class: number;
}

declare class __Reply__task_get_state_t {
  constructor(init?: __Reply__task_get_state_t);
  Head: mach_msg_header_t;
  NDR: NDR_record_t;
  RetCode: number;
  old_stateCnt: number;
  old_state: unknown /* const array */;
}

declare class group {
  constructor(init?: group);
  gr_name: string | null;
  gr_passwd: string | null;
  gr_gid: number;
  gr_mem: interop.Pointer;
}

declare class cups_size_s {
  constructor(init?: cups_size_s);
  media: unknown /* const array */;
  width: number;
  length: number;
  bottom: number;
  left: number;
  right: number;
  top: number;
}

declare class mach_vm_range {
  constructor(init?: mach_vm_range);
  min_address: number;
  max_address: number;
}

declare class USet {
  constructor(init?: USet);
}

declare class _opaque_pthread_cond_t {
  constructor(init?: _opaque_pthread_cond_t);
  __sig: number;
  __opaque: unknown /* const array */;
}

type __RequestUnion__mach_vm_subsystemDescriptor = 
  | { Request_mach_vm_allocate: __Request__mach_vm_allocate_t }
  | { Request_mach_vm_deallocate: __Request__mach_vm_deallocate_t }
  | { Request_mach_vm_protect: __Request__mach_vm_protect_t }
  | { Request_mach_vm_inherit: __Request__mach_vm_inherit_t }
  | { Request_mach_vm_read: __Request__mach_vm_read_t }
  | { Request_mach_vm_read_list: __Request__mach_vm_read_list_t }
  | { Request_mach_vm_write: __Request__mach_vm_write_t }
  | { Request_mach_vm_copy: __Request__mach_vm_copy_t }
  | { Request_mach_vm_read_overwrite: __Request__mach_vm_read_overwrite_t }
  | { Request_mach_vm_msync: __Request__mach_vm_msync_t }
  | { Request_mach_vm_behavior_set: __Request__mach_vm_behavior_set_t }
  | { Request_mach_vm_map: __Request__mach_vm_map_t }
  | { Request_mach_vm_machine_attribute: __Request__mach_vm_machine_attribute_t }
  | { Request_mach_vm_remap: __Request__mach_vm_remap_t }
  | { Request_mach_vm_page_query: __Request__mach_vm_page_query_t }
  | { Request_mach_vm_region_recurse: __Request__mach_vm_region_recurse_t }
  | { Request_mach_vm_region: __Request__mach_vm_region_t }
  | { Request__mach_make_memory_entry: __Request___mach_make_memory_entry_t }
  | { Request_mach_vm_purgable_control: __Request__mach_vm_purgable_control_t }
  | { Request_mach_vm_page_info: __Request__mach_vm_page_info_t }
  | { Request_mach_vm_page_range_query: __Request__mach_vm_page_range_query_t }
  | { Request_mach_vm_remap_new: __Request__mach_vm_remap_new_t }
  | { Request_mach_vm_range_create: __Request__mach_vm_range_create_t }
  | { Request_mach_vm_update_pointers_with_remote_tags: __Request__mach_vm_update_pointers_with_remote_tags_t };

declare class __RequestUnion__mach_vm_subsystem {
  constructor(init?: __RequestUnion__mach_vm_subsystemDescriptor);
  Request_mach_vm_allocate: __Request__mach_vm_allocate_t;
  Request_mach_vm_deallocate: __Request__mach_vm_deallocate_t;
  Request_mach_vm_protect: __Request__mach_vm_protect_t;
  Request_mach_vm_inherit: __Request__mach_vm_inherit_t;
  Request_mach_vm_read: __Request__mach_vm_read_t;
  Request_mach_vm_read_list: __Request__mach_vm_read_list_t;
  Request_mach_vm_write: __Request__mach_vm_write_t;
  Request_mach_vm_copy: __Request__mach_vm_copy_t;
  Request_mach_vm_read_overwrite: __Request__mach_vm_read_overwrite_t;
  Request_mach_vm_msync: __Request__mach_vm_msync_t;
  Request_mach_vm_behavior_set: __Request__mach_vm_behavior_set_t;
  Request_mach_vm_map: __Request__mach_vm_map_t;
  Request_mach_vm_machine_attribute: __Request__mach_vm_machine_attribute_t;
  Request_mach_vm_remap: __Request__mach_vm_remap_t;
  Request_mach_vm_page_query: __Request__mach_vm_page_query_t;
  Request_mach_vm_region_recurse: __Request__mach_vm_region_recurse_t;
  Request_mach_vm_region: __Request__mach_vm_region_t;
  Request__mach_make_memory_entry: __Request___mach_make_memory_entry_t;
  Request_mach_vm_purgable_control: __Request__mach_vm_purgable_control_t;
  Request_mach_vm_page_info: __Request__mach_vm_page_info_t;
  Request_mach_vm_page_range_query: __Request__mach_vm_page_range_query_t;
  Request_mach_vm_remap_new: __Request__mach_vm_remap_new_t;
  Request_mach_vm_range_create: __Request__mach_vm_range_create_t;
  Request_mach_vm_update_pointers_with_remote_tags: __Request__mach_vm_update_pointers_with_remote_tags_t;
}

type __RequestUnion__mach_port_subsystemDescriptor = 
  | { Request_mach_port_names: __Request__mach_port_names_t }
  | { Request_mach_port_type: __Request__mach_port_type_t }
  | { Request_mach_port_rename: __Request__mach_port_rename_t }
  | { Request_mach_port_allocate_name: __Request__mach_port_allocate_name_t }
  | { Request_mach_port_allocate: __Request__mach_port_allocate_t }
  | { Request_mach_port_destroy: __Request__mach_port_destroy_t }
  | { Request_mach_port_deallocate: __Request__mach_port_deallocate_t }
  | { Request_mach_port_get_refs: __Request__mach_port_get_refs_t }
  | { Request_mach_port_mod_refs: __Request__mach_port_mod_refs_t }
  | { Request_mach_port_peek: __Request__mach_port_peek_t }
  | { Request_mach_port_set_mscount: __Request__mach_port_set_mscount_t }
  | { Request_mach_port_get_set_status: __Request__mach_port_get_set_status_t }
  | { Request_mach_port_move_member: __Request__mach_port_move_member_t }
  | { Request_mach_port_request_notification: __Request__mach_port_request_notification_t }
  | { Request_mach_port_insert_right: __Request__mach_port_insert_right_t }
  | { Request_mach_port_extract_right: __Request__mach_port_extract_right_t }
  | { Request_mach_port_set_seqno: __Request__mach_port_set_seqno_t }
  | { Request_mach_port_get_attributes: __Request__mach_port_get_attributes_t }
  | { Request_mach_port_set_attributes: __Request__mach_port_set_attributes_t }
  | { Request_mach_port_allocate_qos: __Request__mach_port_allocate_qos_t }
  | { Request_mach_port_allocate_full: __Request__mach_port_allocate_full_t }
  | { Request_task_set_port_space: __Request__task_set_port_space_t }
  | { Request_mach_port_get_srights: __Request__mach_port_get_srights_t }
  | { Request_mach_port_space_info: __Request__mach_port_space_info_t }
  | { Request_mach_port_dnrequest_info: __Request__mach_port_dnrequest_info_t }
  | { Request_mach_port_kernel_object: __Request__mach_port_kernel_object_t }
  | { Request_mach_port_insert_member: __Request__mach_port_insert_member_t }
  | { Request_mach_port_extract_member: __Request__mach_port_extract_member_t }
  | { Request_mach_port_get_context: __Request__mach_port_get_context_t }
  | { Request_mach_port_set_context: __Request__mach_port_set_context_t }
  | { Request_mach_port_kobject: __Request__mach_port_kobject_t }
  | { Request_mach_port_construct: __Request__mach_port_construct_t }
  | { Request_mach_port_destruct: __Request__mach_port_destruct_t }
  | { Request_mach_port_guard: __Request__mach_port_guard_t }
  | { Request_mach_port_unguard: __Request__mach_port_unguard_t }
  | { Request_mach_port_space_basic_info: __Request__mach_port_space_basic_info_t }
  | { Request_mach_port_guard_with_flags: __Request__mach_port_guard_with_flags_t }
  | { Request_mach_port_swap_guard: __Request__mach_port_swap_guard_t }
  | { Request_mach_port_kobject_description: __Request__mach_port_kobject_description_t }
  | { Request_mach_port_is_connection_for_service: __Request__mach_port_is_connection_for_service_t }
  | { Request_mach_port_get_service_port_info: __Request__mach_port_get_service_port_info_t }
  | { Request_mach_port_assert_attributes: __Request__mach_port_assert_attributes_t };

declare class __RequestUnion__mach_port_subsystem {
  constructor(init?: __RequestUnion__mach_port_subsystemDescriptor);
  Request_mach_port_names: __Request__mach_port_names_t;
  Request_mach_port_type: __Request__mach_port_type_t;
  Request_mach_port_rename: __Request__mach_port_rename_t;
  Request_mach_port_allocate_name: __Request__mach_port_allocate_name_t;
  Request_mach_port_allocate: __Request__mach_port_allocate_t;
  Request_mach_port_destroy: __Request__mach_port_destroy_t;
  Request_mach_port_deallocate: __Request__mach_port_deallocate_t;
  Request_mach_port_get_refs: __Request__mach_port_get_refs_t;
  Request_mach_port_mod_refs: __Request__mach_port_mod_refs_t;
  Request_mach_port_peek: __Request__mach_port_peek_t;
  Request_mach_port_set_mscount: __Request__mach_port_set_mscount_t;
  Request_mach_port_get_set_status: __Request__mach_port_get_set_status_t;
  Request_mach_port_move_member: __Request__mach_port_move_member_t;
  Request_mach_port_request_notification: __Request__mach_port_request_notification_t;
  Request_mach_port_insert_right: __Request__mach_port_insert_right_t;
  Request_mach_port_extract_right: __Request__mach_port_extract_right_t;
  Request_mach_port_set_seqno: __Request__mach_port_set_seqno_t;
  Request_mach_port_get_attributes: __Request__mach_port_get_attributes_t;
  Request_mach_port_set_attributes: __Request__mach_port_set_attributes_t;
  Request_mach_port_allocate_qos: __Request__mach_port_allocate_qos_t;
  Request_mach_port_allocate_full: __Request__mach_port_allocate_full_t;
  Request_task_set_port_space: __Request__task_set_port_space_t;
  Request_mach_port_get_srights: __Request__mach_port_get_srights_t;
  Request_mach_port_space_info: __Request__mach_port_space_info_t;
  Request_mach_port_dnrequest_info: __Request__mach_port_dnrequest_info_t;
  Request_mach_port_kernel_object: __Request__mach_port_kernel_object_t;
  Request_mach_port_insert_member: __Request__mach_port_insert_member_t;
  Request_mach_port_extract_member: __Request__mach_port_extract_member_t;
  Request_mach_port_get_context: __Request__mach_port_get_context_t;
  Request_mach_port_set_context: __Request__mach_port_set_context_t;
  Request_mach_port_kobject: __Request__mach_port_kobject_t;
  Request_mach_port_construct: __Request__mach_port_construct_t;
  Request_mach_port_destruct: __Request__mach_port_destruct_t;
  Request_mach_port_guard: __Request__mach_port_guard_t;
  Request_mach_port_unguard: __Request__mach_port_unguard_t;
  Request_mach_port_space_basic_info: __Request__mach_port_space_basic_info_t;
  Request_mach_port_guard_with_flags: __Request__mach_port_guard_with_flags_t;
  Request_mach_port_swap_guard: __Request__mach_port_swap_guard_t;
  Request_mach_port_kobject_description: __Request__mach_port_kobject_description_t;
  Request_mach_port_is_connection_for_service: __Request__mach_port_is_connection_for_service_t;
  Request_mach_port_get_service_port_info: __Request__mach_port_get_service_port_info_t;
  Request_mach_port_assert_attributes: __Request__mach_port_assert_attributes_t;
}

type __ReplyUnion__mach_voucher_subsystemDescriptor = 
  | { Reply_mach_voucher_extract_attr_content: __Reply__mach_voucher_extract_attr_content_t }
  | { Reply_mach_voucher_extract_attr_recipe: __Reply__mach_voucher_extract_attr_recipe_t }
  | { Reply_mach_voucher_extract_all_attr_recipes: __Reply__mach_voucher_extract_all_attr_recipes_t }
  | { Reply_mach_voucher_attr_command: __Reply__mach_voucher_attr_command_t }
  | { Reply_mach_voucher_debug_info: __Reply__mach_voucher_debug_info_t };

declare class __ReplyUnion__mach_voucher_subsystem {
  constructor(init?: __ReplyUnion__mach_voucher_subsystemDescriptor);
  Reply_mach_voucher_extract_attr_content: __Reply__mach_voucher_extract_attr_content_t;
  Reply_mach_voucher_extract_attr_recipe: __Reply__mach_voucher_extract_attr_recipe_t;
  Reply_mach_voucher_extract_all_attr_recipes: __Reply__mach_voucher_extract_all_attr_recipes_t;
  Reply_mach_voucher_attr_command: __Reply__mach_voucher_attr_command_t;
  Reply_mach_voucher_debug_info: __Reply__mach_voucher_debug_info_t;
}

type unnamed_18439627466317917467Descriptor = 
  | { ina_46: in4in6_addr }
  | { ina_6: in6_addr };

declare class unnamed_18439627466317917467 {
  constructor(init?: unnamed_18439627466317917467Descriptor);
  ina_46: in4in6_addr;
  ina_6: in6_addr;
}

type unnamed_8068058173877573354Descriptor = 
  | { if_status_v1: if_wifi_status_v1 };

declare class unnamed_8068058173877573354 {
  constructor(init?: unnamed_8068058173877573354Descriptor);
  if_status_v1: if_wifi_status_v1;
}

type fasttrap_instr_tDescriptor = 
  | { instr32: number }
  | { instr16: unnamed_12804984068000564476 };

declare class fasttrap_instr_t {
  constructor(init?: fasttrap_instr_tDescriptor);
  instr32: number;
  instr16: unnamed_12804984068000564476;
}

type unnamed_8047590349428456375Descriptor = 
  | { inp4_route: unknown /* const array */ }
  | { inp6_route: unknown /* const array */ };

declare class unnamed_8047590349428456375 {
  constructor(init?: unnamed_8047590349428456375Descriptor);
  inp4_route: unknown /* const array */;
  inp6_route: unknown /* const array */;
}

type HFSPlusAttrRecordDescriptor = 
  | { recordType: number }
  | { inlineData: HFSPlusAttrInlineData }
  | { attrData: HFSPlusAttrData }
  | { forkData: HFSPlusAttrForkData }
  | { overflowExtents: HFSPlusAttrExtents };

declare class HFSPlusAttrRecord {
  constructor(init?: HFSPlusAttrRecordDescriptor);
  recordType: number;
  inlineData: HFSPlusAttrInlineData;
  attrData: HFSPlusAttrData;
  forkData: HFSPlusAttrForkData;
  overflowExtents: HFSPlusAttrExtents;
}

type unnamed_6913317967658464317Descriptor = 
  | { iNodeNum: number }
  | { linkCount: number }
  | { rawDevice: number };

declare class unnamed_6913317967658464317 {
  constructor(init?: unnamed_6913317967658464317Descriptor);
  iNodeNum: number;
  linkCount: number;
  rawDevice: number;
}

type unnamed_6952071012929515318Descriptor = 
  | { ua_sun: sockaddr_un }
  | { ua_dummy: unknown /* const array */ };

declare class unnamed_6952071012929515318 {
  constructor(init?: unnamed_6952071012929515318Descriptor);
  ua_sun: sockaddr_un;
  ua_dummy: unknown /* const array */;
}

type unnamed_3933339760615492547Descriptor = 
  | { pri_in: in_sockinfo }
  | { pri_tcp: tcp_sockinfo }
  | { pri_un: un_sockinfo }
  | { pri_ndrv: ndrv_info }
  | { pri_kern_event: kern_event_info }
  | { pri_kern_ctl: kern_ctl_info }
  | { pri_vsock: vsock_sockinfo };

declare class unnamed_3933339760615492547 {
  constructor(init?: unnamed_3933339760615492547Descriptor);
  pri_in: in_sockinfo;
  pri_tcp: tcp_sockinfo;
  pri_un: un_sockinfo;
  pri_ndrv: ndrv_info;
  pri_kern_event: kern_event_info;
  pri_kern_ctl: kern_ctl_info;
  pri_vsock: vsock_sockinfo;
}

type __RequestUnion__clock_reply_subsystemDescriptor = 
  | { Request_clock_alarm_reply: __Request__clock_alarm_reply_t };

declare class __RequestUnion__clock_reply_subsystem {
  constructor(init?: __RequestUnion__clock_reply_subsystemDescriptor);
  Request_clock_alarm_reply: __Request__clock_alarm_reply_t;
}

type __ReplyUnion__memory_entry_subsystemDescriptor = 
  | { Reply_mach_memory_entry_purgable_control: __Reply__mach_memory_entry_purgable_control_t }
  | { Reply_mach_memory_entry_access_tracking: __Reply__mach_memory_entry_access_tracking_t }
  | { Reply_mach_memory_entry_ownership: __Reply__mach_memory_entry_ownership_t }
  | { Reply_mach_memory_entry_get_page_counts: __Reply__mach_memory_entry_get_page_counts_t };

declare class __ReplyUnion__memory_entry_subsystem {
  constructor(init?: __ReplyUnion__memory_entry_subsystemDescriptor);
  Reply_mach_memory_entry_purgable_control: __Reply__mach_memory_entry_purgable_control_t;
  Reply_mach_memory_entry_access_tracking: __Reply__mach_memory_entry_access_tracking_t;
  Reply_mach_memory_entry_ownership: __Reply__mach_memory_entry_ownership_t;
  Reply_mach_memory_entry_get_page_counts: __Reply__mach_memory_entry_get_page_counts_t;
}

type __RequestUnion__mach_voucher_subsystemDescriptor = 
  | { Request_mach_voucher_extract_attr_content: __Request__mach_voucher_extract_attr_content_t }
  | { Request_mach_voucher_extract_attr_recipe: __Request__mach_voucher_extract_attr_recipe_t }
  | { Request_mach_voucher_extract_all_attr_recipes: __Request__mach_voucher_extract_all_attr_recipes_t }
  | { Request_mach_voucher_attr_command: __Request__mach_voucher_attr_command_t }
  | { Request_mach_voucher_debug_info: __Request__mach_voucher_debug_info_t };

declare class __RequestUnion__mach_voucher_subsystem {
  constructor(init?: __RequestUnion__mach_voucher_subsystemDescriptor);
  Request_mach_voucher_extract_attr_content: __Request__mach_voucher_extract_attr_content_t;
  Request_mach_voucher_extract_attr_recipe: __Request__mach_voucher_extract_attr_recipe_t;
  Request_mach_voucher_extract_all_attr_recipes: __Request__mach_voucher_extract_all_attr_recipes_t;
  Request_mach_voucher_attr_command: __Request__mach_voucher_attr_command_t;
  Request_mach_voucher_debug_info: __Request__mach_voucher_debug_info_t;
}

type unnamed_4946263752583527807Descriptor = 
  | { inp46_local: in_addr_4in6 }
  | { inp6_local: in6_addr };

declare class unnamed_4946263752583527807 {
  constructor(init?: unnamed_4946263752583527807Descriptor);
  inp46_local: in_addr_4in6;
  inp6_local: in6_addr;
}

type __ReplyUnion__exc_subsystemDescriptor = 
  | { Reply_exception_raise: __Reply__exception_raise_t }
  | { Reply_exception_raise_state: __Reply__exception_raise_state_t }
  | { Reply_exception_raise_state_identity: __Reply__exception_raise_state_identity_t };

declare class __ReplyUnion__exc_subsystem {
  constructor(init?: __ReplyUnion__exc_subsystemDescriptor);
  Reply_exception_raise: __Reply__exception_raise_t;
  Reply_exception_raise_state: __Reply__exception_raise_state_t;
  Reply_exception_raise_state_identity: __Reply__exception_raise_state_identity_t;
}

type unnamed_13987264378789662937Descriptor = 
  | { ran_strx: number };

declare class unnamed_13987264378789662937 {
  constructor(init?: unnamed_13987264378789662937Descriptor);
  ran_strx: number;
}

type __ReplyUnion__clock_reply_subsystemDescriptor = 
  | { Reply_clock_alarm_reply: __Reply__clock_alarm_reply_t };

declare class __ReplyUnion__clock_reply_subsystem {
  constructor(init?: __ReplyUnion__clock_reply_subsystemDescriptor);
  Reply_clock_alarm_reply: __Reply__clock_alarm_reply_t;
}

type ppd_cpvalue_uDescriptor = 
  | { custom_curve: number }
  | { custom_int: number }
  | { custom_invcurve: number }
  | { custom_passcode: string | null }
  | { custom_password: string | null }
  | { custom_points: number }
  | { custom_real: number }
  | { custom_string: string | null };

declare class ppd_cpvalue_u {
  constructor(init?: ppd_cpvalue_uDescriptor);
  custom_curve: number;
  custom_int: number;
  custom_invcurve: number;
  custom_passcode: string | null;
  custom_password: string | null;
  custom_points: number;
  custom_real: number;
  custom_string: string | null;
}

type __RequestUnion__memory_entry_subsystemDescriptor = 
  | { Request_mach_memory_entry_purgable_control: __Request__mach_memory_entry_purgable_control_t }
  | { Request_mach_memory_entry_access_tracking: __Request__mach_memory_entry_access_tracking_t }
  | { Request_mach_memory_entry_ownership: __Request__mach_memory_entry_ownership_t }
  | { Request_mach_memory_entry_get_page_counts: __Request__mach_memory_entry_get_page_counts_t };

declare class __RequestUnion__memory_entry_subsystem {
  constructor(init?: __RequestUnion__memory_entry_subsystemDescriptor);
  Request_mach_memory_entry_purgable_control: __Request__mach_memory_entry_purgable_control_t;
  Request_mach_memory_entry_access_tracking: __Request__mach_memory_entry_access_tracking_t;
  Request_mach_memory_entry_ownership: __Request__mach_memory_entry_ownership_t;
  Request_mach_memory_entry_get_page_counts: __Request__mach_memory_entry_get_page_counts_t;
}

type guid_tDescriptor = 
  | { g_guid: unknown /* const array */ }
  | { g_guid_asint: unknown /* const array */ };

declare class guid_t {
  constructor(init?: guid_tDescriptor);
  g_guid: unknown /* const array */;
  g_guid_asint: unknown /* const array */;
}

type semunDescriptor = 
  | { val: number }
  | { buf: interop.PointerConvertible }
  | { array: interop.PointerConvertible };

declare class semun {
  constructor(init?: semunDescriptor);
  val: number;
  buf: interop.Pointer;
  array: interop.Pointer;
}

type graft_argsDescriptor = 
  | { max_size: unknown /* const array */ }
  | { sbc_args: secure_boot_cryptex_args };

declare class graft_args {
  constructor(init?: graft_argsDescriptor);
  max_size: unknown /* const array */;
  sbc_args: secure_boot_cryptex_args;
}

type unnamed_10884612490709219565Descriptor = 
  | { ua_sun: sockaddr_un }
  | { ua_dummy: unknown /* const array */ };

declare class unnamed_10884612490709219565 {
  constructor(init?: unnamed_10884612490709219565Descriptor);
  ua_sun: sockaddr_un;
  ua_dummy: unknown /* const array */;
}

type unnamed_9254247380599843865Descriptor = 
  | { fts_compar: () => number | null }
  | { fts_compar_b: () => number | null };

declare class unnamed_9254247380599843865 {
  constructor(init?: unnamed_9254247380599843865Descriptor);
  fts_compar: () => number | null;
  fts_compar_b: () => number | null;
}

type unnamed_15062008226319036936Descriptor = 
  | { p_st1: unnamed_6774222680078317929 }
  | { __p_starttime: timeval };

declare class unnamed_15062008226319036936 {
  constructor(init?: unnamed_15062008226319036936Descriptor);
  p_st1: unnamed_6774222680078317929;
  __p_starttime: timeval;
}

type __ReplyUnion__mach_vm_subsystemDescriptor = 
  | { Reply_mach_vm_allocate: __Reply__mach_vm_allocate_t }
  | { Reply_mach_vm_deallocate: __Reply__mach_vm_deallocate_t }
  | { Reply_mach_vm_protect: __Reply__mach_vm_protect_t }
  | { Reply_mach_vm_inherit: __Reply__mach_vm_inherit_t }
  | { Reply_mach_vm_read: __Reply__mach_vm_read_t }
  | { Reply_mach_vm_read_list: __Reply__mach_vm_read_list_t }
  | { Reply_mach_vm_write: __Reply__mach_vm_write_t }
  | { Reply_mach_vm_copy: __Reply__mach_vm_copy_t }
  | { Reply_mach_vm_read_overwrite: __Reply__mach_vm_read_overwrite_t }
  | { Reply_mach_vm_msync: __Reply__mach_vm_msync_t }
  | { Reply_mach_vm_behavior_set: __Reply__mach_vm_behavior_set_t }
  | { Reply_mach_vm_map: __Reply__mach_vm_map_t }
  | { Reply_mach_vm_machine_attribute: __Reply__mach_vm_machine_attribute_t }
  | { Reply_mach_vm_remap: __Reply__mach_vm_remap_t }
  | { Reply_mach_vm_page_query: __Reply__mach_vm_page_query_t }
  | { Reply_mach_vm_region_recurse: __Reply__mach_vm_region_recurse_t }
  | { Reply_mach_vm_region: __Reply__mach_vm_region_t }
  | { Reply__mach_make_memory_entry: __Reply___mach_make_memory_entry_t }
  | { Reply_mach_vm_purgable_control: __Reply__mach_vm_purgable_control_t }
  | { Reply_mach_vm_page_info: __Reply__mach_vm_page_info_t }
  | { Reply_mach_vm_page_range_query: __Reply__mach_vm_page_range_query_t }
  | { Reply_mach_vm_remap_new: __Reply__mach_vm_remap_new_t }
  | { Reply_mach_vm_range_create: __Reply__mach_vm_range_create_t }
  | { Reply_mach_vm_update_pointers_with_remote_tags: __Reply__mach_vm_update_pointers_with_remote_tags_t };

declare class __ReplyUnion__mach_vm_subsystem {
  constructor(init?: __ReplyUnion__mach_vm_subsystemDescriptor);
  Reply_mach_vm_allocate: __Reply__mach_vm_allocate_t;
  Reply_mach_vm_deallocate: __Reply__mach_vm_deallocate_t;
  Reply_mach_vm_protect: __Reply__mach_vm_protect_t;
  Reply_mach_vm_inherit: __Reply__mach_vm_inherit_t;
  Reply_mach_vm_read: __Reply__mach_vm_read_t;
  Reply_mach_vm_read_list: __Reply__mach_vm_read_list_t;
  Reply_mach_vm_write: __Reply__mach_vm_write_t;
  Reply_mach_vm_copy: __Reply__mach_vm_copy_t;
  Reply_mach_vm_read_overwrite: __Reply__mach_vm_read_overwrite_t;
  Reply_mach_vm_msync: __Reply__mach_vm_msync_t;
  Reply_mach_vm_behavior_set: __Reply__mach_vm_behavior_set_t;
  Reply_mach_vm_map: __Reply__mach_vm_map_t;
  Reply_mach_vm_machine_attribute: __Reply__mach_vm_machine_attribute_t;
  Reply_mach_vm_remap: __Reply__mach_vm_remap_t;
  Reply_mach_vm_page_query: __Reply__mach_vm_page_query_t;
  Reply_mach_vm_region_recurse: __Reply__mach_vm_region_recurse_t;
  Reply_mach_vm_region: __Reply__mach_vm_region_t;
  Reply__mach_make_memory_entry: __Reply___mach_make_memory_entry_t;
  Reply_mach_vm_purgable_control: __Reply__mach_vm_purgable_control_t;
  Reply_mach_vm_page_info: __Reply__mach_vm_page_info_t;
  Reply_mach_vm_page_range_query: __Reply__mach_vm_page_range_query_t;
  Reply_mach_vm_remap_new: __Reply__mach_vm_remap_new_t;
  Reply_mach_vm_range_create: __Reply__mach_vm_range_create_t;
  Reply_mach_vm_update_pointers_with_remote_tags: __Reply__mach_vm_update_pointers_with_remote_tags_t;
}

type __ReplyUnion__vm_map_subsystemDescriptor = 
  | { Reply_vm_region: __Reply__vm_region_t }
  | { Reply_vm_allocate: __Reply__vm_allocate_t }
  | { Reply_vm_deallocate: __Reply__vm_deallocate_t }
  | { Reply_vm_protect: __Reply__vm_protect_t }
  | { Reply_vm_inherit: __Reply__vm_inherit_t }
  | { Reply_vm_read: __Reply__vm_read_t }
  | { Reply_vm_read_list: __Reply__vm_read_list_t }
  | { Reply_vm_write: __Reply__vm_write_t }
  | { Reply_vm_copy: __Reply__vm_copy_t }
  | { Reply_vm_read_overwrite: __Reply__vm_read_overwrite_t }
  | { Reply_vm_msync: __Reply__vm_msync_t }
  | { Reply_vm_behavior_set: __Reply__vm_behavior_set_t }
  | { Reply_vm_map: __Reply__vm_map_t }
  | { Reply_vm_machine_attribute: __Reply__vm_machine_attribute_t }
  | { Reply_vm_remap: __Reply__vm_remap_t }
  | { Reply_task_wire: __Reply__task_wire_t }
  | { Reply_mach_make_memory_entry: __Reply__mach_make_memory_entry_t }
  | { Reply_vm_map_page_query: __Reply__vm_map_page_query_t }
  | { Reply_mach_vm_region_info: __Reply__mach_vm_region_info_t }
  | { Reply_vm_mapped_pages_info: __Reply__vm_mapped_pages_info_t }
  | { Reply_vm_region_recurse: __Reply__vm_region_recurse_t }
  | { Reply_vm_region_recurse_64: __Reply__vm_region_recurse_64_t }
  | { Reply_mach_vm_region_info_64: __Reply__mach_vm_region_info_64_t }
  | { Reply_vm_region_64: __Reply__vm_region_64_t }
  | { Reply_mach_make_memory_entry_64: __Reply__mach_make_memory_entry_64_t }
  | { Reply_vm_map_64: __Reply__vm_map_64_t }
  | { Reply_vm_purgable_control: __Reply__vm_purgable_control_t }
  | { Reply_vm_map_exec_lockdown: __Reply__vm_map_exec_lockdown_t }
  | { Reply_vm_remap_new: __Reply__vm_remap_new_t };

declare class __ReplyUnion__vm_map_subsystem {
  constructor(init?: __ReplyUnion__vm_map_subsystemDescriptor);
  Reply_vm_region: __Reply__vm_region_t;
  Reply_vm_allocate: __Reply__vm_allocate_t;
  Reply_vm_deallocate: __Reply__vm_deallocate_t;
  Reply_vm_protect: __Reply__vm_protect_t;
  Reply_vm_inherit: __Reply__vm_inherit_t;
  Reply_vm_read: __Reply__vm_read_t;
  Reply_vm_read_list: __Reply__vm_read_list_t;
  Reply_vm_write: __Reply__vm_write_t;
  Reply_vm_copy: __Reply__vm_copy_t;
  Reply_vm_read_overwrite: __Reply__vm_read_overwrite_t;
  Reply_vm_msync: __Reply__vm_msync_t;
  Reply_vm_behavior_set: __Reply__vm_behavior_set_t;
  Reply_vm_map: __Reply__vm_map_t;
  Reply_vm_machine_attribute: __Reply__vm_machine_attribute_t;
  Reply_vm_remap: __Reply__vm_remap_t;
  Reply_task_wire: __Reply__task_wire_t;
  Reply_mach_make_memory_entry: __Reply__mach_make_memory_entry_t;
  Reply_vm_map_page_query: __Reply__vm_map_page_query_t;
  Reply_mach_vm_region_info: __Reply__mach_vm_region_info_t;
  Reply_vm_mapped_pages_info: __Reply__vm_mapped_pages_info_t;
  Reply_vm_region_recurse: __Reply__vm_region_recurse_t;
  Reply_vm_region_recurse_64: __Reply__vm_region_recurse_64_t;
  Reply_mach_vm_region_info_64: __Reply__mach_vm_region_info_64_t;
  Reply_vm_region_64: __Reply__vm_region_64_t;
  Reply_mach_make_memory_entry_64: __Reply__mach_make_memory_entry_64_t;
  Reply_vm_map_64: __Reply__vm_map_64_t;
  Reply_vm_purgable_control: __Reply__vm_purgable_control_t;
  Reply_vm_map_exec_lockdown: __Reply__vm_map_exec_lockdown_t;
  Reply_vm_remap_new: __Reply__vm_remap_new_t;
}

type unnamed_1268940931141765636Descriptor = 
  | { ip6_un1: ip6_hdrctl }
  | { ip6_un2_vfc: number };

declare class unnamed_1268940931141765636 {
  constructor(init?: unnamed_1268940931141765636Descriptor);
  ip6_un1: ip6_hdrctl;
  ip6_un2_vfc: number;
}

type unnamed_16163939891023180617Descriptor = 
  | { ih_pptr: number }
  | { ih_gwaddr: in_addr }
  | { ih_idseq: ih_idseq }
  | { ih_void: number }
  | { ih_pmtu: ih_pmtu }
  | { ih_rtradv: ih_rtradv };

declare class unnamed_16163939891023180617 {
  constructor(init?: unnamed_16163939891023180617Descriptor);
  ih_pptr: number;
  ih_gwaddr: in_addr;
  ih_idseq: ih_idseq;
  ih_void: number;
  ih_pmtu: ih_pmtu;
  ih_rtradv: ih_rtradv;
}

type unnamed_14588102091958030739Descriptor = 
  | { ifru_addr: sockaddr_in6 }
  | { ifru_dstaddr: sockaddr_in6 }
  | { ifru_flags: number }
  | { ifru_flags6: number }
  | { ifru_metric: number }
  | { ifru_intval: number }
  | { ifru_data: string | null }
  | { ifru_lifetime: in6_addrlifetime }
  | { ifru_stat: in6_ifstat }
  | { ifru_icmp6stat: icmp6_ifstat }
  | { ifru_scope_id: unknown /* const array */ };

declare class unnamed_14588102091958030739 {
  constructor(init?: unnamed_14588102091958030739Descriptor);
  ifru_addr: sockaddr_in6;
  ifru_dstaddr: sockaddr_in6;
  ifru_flags: number;
  ifru_flags6: number;
  ifru_metric: number;
  ifru_intval: number;
  ifru_data: string | null;
  ifru_lifetime: in6_addrlifetime;
  ifru_stat: in6_ifstat;
  ifru_icmp6stat: icmp6_ifstat;
  ifru_scope_id: unknown /* const array */;
}

type malloc_type_descriptor_v0_tDescriptor = 
  | { type_id: number };

declare class malloc_type_descriptor_v0_t {
  constructor(init?: malloc_type_descriptor_v0_tDescriptor);
  type_id: number;
}

type __RequestUnion__thread_act_subsystemDescriptor = 
  | { Request_thread_terminate: __Request__thread_terminate_t }
  | { Request_act_get_state: __Request__act_get_state_t }
  | { Request_act_set_state: __Request__act_set_state_t }
  | { Request_thread_get_state: __Request__thread_get_state_t }
  | { Request_thread_set_state: __Request__thread_set_state_t }
  | { Request_thread_suspend: __Request__thread_suspend_t }
  | { Request_thread_resume: __Request__thread_resume_t }
  | { Request_thread_abort: __Request__thread_abort_t }
  | { Request_thread_abort_safely: __Request__thread_abort_safely_t }
  | { Request_thread_depress_abort: __Request__thread_depress_abort_t }
  | { Request_thread_get_special_port: __Request__thread_get_special_port_t }
  | { Request_thread_set_special_port: __Request__thread_set_special_port_t }
  | { Request_thread_info: __Request__thread_info_t }
  | { Request_thread_set_exception_ports: __Request__thread_set_exception_ports_t }
  | { Request_thread_get_exception_ports: __Request__thread_get_exception_ports_t }
  | { Request_thread_swap_exception_ports: __Request__thread_swap_exception_ports_t }
  | { Request_thread_policy: __Request__thread_policy_t }
  | { Request_thread_policy_set: __Request__thread_policy_set_t }
  | { Request_thread_policy_get: __Request__thread_policy_get_t }
  | { Request_thread_sample: __Request__thread_sample_t }
  | { Request_etap_trace_thread: __Request__etap_trace_thread_t }
  | { Request_thread_assign: __Request__thread_assign_t }
  | { Request_thread_assign_default: __Request__thread_assign_default_t }
  | { Request_thread_get_assignment: __Request__thread_get_assignment_t }
  | { Request_thread_set_policy: __Request__thread_set_policy_t }
  | { Request_thread_get_mach_voucher: __Request__thread_get_mach_voucher_t }
  | { Request_thread_set_mach_voucher: __Request__thread_set_mach_voucher_t }
  | { Request_thread_swap_mach_voucher: __Request__thread_swap_mach_voucher_t }
  | { Request_thread_convert_thread_state: __Request__thread_convert_thread_state_t }
  | { Request_thread_get_exception_ports_info: __Request__thread_get_exception_ports_info_t }
  | { Request_thread_adopt_exception_handler: __Request__thread_adopt_exception_handler_t };

declare class __RequestUnion__thread_act_subsystem {
  constructor(init?: __RequestUnion__thread_act_subsystemDescriptor);
  Request_thread_terminate: __Request__thread_terminate_t;
  Request_act_get_state: __Request__act_get_state_t;
  Request_act_set_state: __Request__act_set_state_t;
  Request_thread_get_state: __Request__thread_get_state_t;
  Request_thread_set_state: __Request__thread_set_state_t;
  Request_thread_suspend: __Request__thread_suspend_t;
  Request_thread_resume: __Request__thread_resume_t;
  Request_thread_abort: __Request__thread_abort_t;
  Request_thread_abort_safely: __Request__thread_abort_safely_t;
  Request_thread_depress_abort: __Request__thread_depress_abort_t;
  Request_thread_get_special_port: __Request__thread_get_special_port_t;
  Request_thread_set_special_port: __Request__thread_set_special_port_t;
  Request_thread_info: __Request__thread_info_t;
  Request_thread_set_exception_ports: __Request__thread_set_exception_ports_t;
  Request_thread_get_exception_ports: __Request__thread_get_exception_ports_t;
  Request_thread_swap_exception_ports: __Request__thread_swap_exception_ports_t;
  Request_thread_policy: __Request__thread_policy_t;
  Request_thread_policy_set: __Request__thread_policy_set_t;
  Request_thread_policy_get: __Request__thread_policy_get_t;
  Request_thread_sample: __Request__thread_sample_t;
  Request_etap_trace_thread: __Request__etap_trace_thread_t;
  Request_thread_assign: __Request__thread_assign_t;
  Request_thread_assign_default: __Request__thread_assign_default_t;
  Request_thread_get_assignment: __Request__thread_get_assignment_t;
  Request_thread_set_policy: __Request__thread_set_policy_t;
  Request_thread_get_mach_voucher: __Request__thread_get_mach_voucher_t;
  Request_thread_set_mach_voucher: __Request__thread_set_mach_voucher_t;
  Request_thread_swap_mach_voucher: __Request__thread_swap_mach_voucher_t;
  Request_thread_convert_thread_state: __Request__thread_convert_thread_state_t;
  Request_thread_get_exception_ports_info: __Request__thread_get_exception_ports_info_t;
  Request_thread_adopt_exception_handler: __Request__thread_adopt_exception_handler_t;
}

type mach_msg_empty_tDescriptor = 
  | { send: mach_msg_empty_send_t }
  | { rcv: mach_msg_empty_rcv_t };

declare class mach_msg_empty_t {
  constructor(init?: mach_msg_empty_tDescriptor);
  send: mach_msg_empty_send_t;
  rcv: mach_msg_empty_rcv_t;
}

type unnamed_9497288941881539350Descriptor = 
  | { inp46_foreign: in_addr_4in6 }
  | { inp6_foreign: in6_addr };

declare class unnamed_9497288941881539350 {
  constructor(init?: unnamed_9497288941881539350Descriptor);
  inp46_foreign: in_addr_4in6;
  inp6_foreign: in6_addr;
}

type unnamed_11206538674155518421Descriptor = 
  | { ether_type: number }
  | { sap: unknown /* const array */ }
  | { snap: unknown /* const array */ }
  | { other: unknown /* const array */ };

declare class unnamed_11206538674155518421 {
  constructor(init?: unnamed_11206538674155518421Descriptor);
  ether_type: number;
  sap: unknown /* const array */;
  snap: unknown /* const array */;
  other: unknown /* const array */;
}

type __RequestUnion__host_priv_subsystemDescriptor = 
  | { Request_host_get_boot_info: __Request__host_get_boot_info_t }
  | { Request_host_reboot: __Request__host_reboot_t }
  | { Request_host_priv_statistics: __Request__host_priv_statistics_t }
  | { Request_host_default_memory_manager: __Request__host_default_memory_manager_t }
  | { Request_vm_wire: __Request__vm_wire_t }
  | { Request_thread_wire: __Request__thread_wire_t }
  | { Request_vm_allocate_cpm: __Request__vm_allocate_cpm_t }
  | { Request_host_processors: __Request__host_processors_t }
  | { Request_host_get_clock_control: __Request__host_get_clock_control_t }
  | { Request_kmod_create: __Request__kmod_create_t }
  | { Request_kmod_destroy: __Request__kmod_destroy_t }
  | { Request_kmod_control: __Request__kmod_control_t }
  | { Request_host_get_special_port: __Request__host_get_special_port_t }
  | { Request_host_set_special_port: __Request__host_set_special_port_t }
  | { Request_host_set_exception_ports: __Request__host_set_exception_ports_t }
  | { Request_host_get_exception_ports: __Request__host_get_exception_ports_t }
  | { Request_host_swap_exception_ports: __Request__host_swap_exception_ports_t }
  | { Request_mach_vm_wire: __Request__mach_vm_wire_t }
  | { Request_host_processor_sets: __Request__host_processor_sets_t }
  | { Request_host_processor_set_priv: __Request__host_processor_set_priv_t }
  | { Request_host_set_UNDServer: __Request__host_set_UNDServer_t }
  | { Request_host_get_UNDServer: __Request__host_get_UNDServer_t }
  | { Request_kext_request: __Request__kext_request_t };

declare class __RequestUnion__host_priv_subsystem {
  constructor(init?: __RequestUnion__host_priv_subsystemDescriptor);
  Request_host_get_boot_info: __Request__host_get_boot_info_t;
  Request_host_reboot: __Request__host_reboot_t;
  Request_host_priv_statistics: __Request__host_priv_statistics_t;
  Request_host_default_memory_manager: __Request__host_default_memory_manager_t;
  Request_vm_wire: __Request__vm_wire_t;
  Request_thread_wire: __Request__thread_wire_t;
  Request_vm_allocate_cpm: __Request__vm_allocate_cpm_t;
  Request_host_processors: __Request__host_processors_t;
  Request_host_get_clock_control: __Request__host_get_clock_control_t;
  Request_kmod_create: __Request__kmod_create_t;
  Request_kmod_destroy: __Request__kmod_destroy_t;
  Request_kmod_control: __Request__kmod_control_t;
  Request_host_get_special_port: __Request__host_get_special_port_t;
  Request_host_set_special_port: __Request__host_set_special_port_t;
  Request_host_set_exception_ports: __Request__host_set_exception_ports_t;
  Request_host_get_exception_ports: __Request__host_get_exception_ports_t;
  Request_host_swap_exception_ports: __Request__host_swap_exception_ports_t;
  Request_mach_vm_wire: __Request__mach_vm_wire_t;
  Request_host_processor_sets: __Request__host_processor_sets_t;
  Request_host_processor_set_priv: __Request__host_processor_set_priv_t;
  Request_host_set_UNDServer: __Request__host_set_UNDServer_t;
  Request_host_get_UNDServer: __Request__host_get_UNDServer_t;
  Request_kext_request: __Request__kext_request_t;
}

type unnamed_5875706616793615818Descriptor = 
  | { ina_46: in4in6_addr }
  | { ina_6: in6_addr };

declare class unnamed_5875706616793615818 {
  constructor(init?: unnamed_5875706616793615818Descriptor);
  ina_46: in4in6_addr;
  ina_6: in6_addr;
}

type unnamed_1421198579709750629Descriptor = 
  | { inp46_local: in_addr_4in6 }
  | { inp6_local: in6_addr };

declare class unnamed_1421198579709750629 {
  constructor(init?: unnamed_1421198579709750629Descriptor);
  inp46_local: in_addr_4in6;
  inp6_local: in6_addr;
}

type unnamed_5146768361021127489Descriptor = 
  | { addr8: unknown /* const array */ }
  | { addr16: unknown /* const array */ }
  | { addr32: unknown /* const array */ };

declare class unnamed_5146768361021127489 {
  constructor(init?: unnamed_5146768361021127489Descriptor);
  addr8: unknown /* const array */;
  addr16: unknown /* const array */;
  addr32: unknown /* const array */;
}

type ifnet_interface_advisory_notification_type_tDescriptor = 
  | { cell: interop.Enum<typeof ifnet_interface_advisory_notification_type_cell> }
  | { wifi: interop.Enum<typeof ifnet_interface_advisory_notification_type_wifi> };

declare class ifnet_interface_advisory_notification_type_t {
  constructor(init?: ifnet_interface_advisory_notification_type_tDescriptor);
  cell: interop.Enum<typeof ifnet_interface_advisory_notification_type_cell>;
  wifi: interop.Enum<typeof ifnet_interface_advisory_notification_type_wifi>;
}

type unnamed_15315128086020544945Descriptor = 
  | { ifcu_buf: string | null }
  | { ifcu_req: interop.PointerConvertible };

declare class unnamed_15315128086020544945 {
  constructor(init?: unnamed_15315128086020544945Descriptor);
  ifcu_buf: string | null;
  ifcu_req: interop.Pointer;
}

type unnamed_9658494857777605109Descriptor = 
  | { inp46_foreign: in_addr_4in6 }
  | { inp6_foreign: in6_addr };

declare class unnamed_9658494857777605109 {
  constructor(init?: unnamed_9658494857777605109Descriptor);
  inp46_foreign: in_addr_4in6;
  inp6_foreign: in6_addr;
}

type __mbstate_tDescriptor = 
  | { __mbstate8: unknown /* const array */ }
  | { _mbstateL: number };

declare class __mbstate_t {
  constructor(init?: __mbstate_tDescriptor);
  __mbstate8: unknown /* const array */;
  _mbstateL: number;
}

type unnamed_6655533433688948231Descriptor = 
  | { ifsr_cell: if_cellular_status }
  | { ifsr_wifi: if_wifi_status };

declare class unnamed_6655533433688948231 {
  constructor(init?: unnamed_6655533433688948231Descriptor);
  ifsr_cell: if_cellular_status;
  ifsr_wifi: if_wifi_status;
}

type unnamed_3396947394523107438Descriptor = 
  | { type_u: unnamed_6607071774793166897 }
  | { type_i: unnamed_11037506293861388547 }
  | { type_s: unnamed_13382323419751933956 }
  | { type_frmr: unnamed_4086398859282741099 }
  | { type_snap: unnamed_5031467857764340464 }
  | { type_raw: unnamed_8484498633780266126 };

declare class unnamed_3396947394523107438 {
  constructor(init?: unnamed_3396947394523107438Descriptor);
  type_u: unnamed_6607071774793166897;
  type_i: unnamed_11037506293861388547;
  type_s: unnamed_13382323419751933956;
  type_frmr: unnamed_4086398859282741099;
  type_snap: unnamed_5031467857764340464;
  type_raw: unnamed_8484498633780266126;
}

type BTreeKeyDescriptor = 
  | { length8: number }
  | { length16: number }
  | { rawData: unknown /* const array */ };

declare class BTreeKey {
  constructor(init?: BTreeKeyDescriptor);
  length8: number;
  length16: number;
  rawData: unknown /* const array */;
}

type unnamed_18274963185808352070Descriptor = 
  | { id_ts: id_ts }
  | { id_ip: id_ip }
  | { id_radv: icmp_ra_addr }
  | { id_mask: number }
  | { id_data: unknown /* const array */ };

declare class unnamed_18274963185808352070 {
  constructor(init?: unnamed_18274963185808352070Descriptor);
  id_ts: id_ts;
  id_ip: id_ip;
  id_radv: icmp_ra_addr;
  id_mask: number;
  id_data: unknown /* const array */;
}

type unnamed_15590176993070696323Descriptor = 
  | { gl_errfunc: (p1: string, p2: number) => number | null }
  | { gl_errblk: (p1: string, p2: number) => number | null };

declare class unnamed_15590176993070696323 {
  constructor(init?: unnamed_15590176993070696323Descriptor);
  gl_errfunc: (p1: string, p2: number) => number | null;
  gl_errblk: (p1: string, p2: number) => number | null;
}

type unnamed_9279470776087544183Descriptor = 
  | { NV0: unknown /* const array */ }
  | { NV1: unnamed_11810500352046755208 };

declare class unnamed_9279470776087544183 {
  constructor(init?: unnamed_9279470776087544183Descriptor);
  NV0: unknown /* const array */;
  NV1: unnamed_11810500352046755208;
}

type waitDescriptor = 
  | { w_status: number }
  | { w_T: unnamed_7192305794184816688 }
  | { w_S: unnamed_16820094213973402152 };

declare class wait {
  constructor(init?: waitDescriptor);
  w_status: number;
  w_T: unnamed_7192305794184816688;
  w_S: unnamed_16820094213973402152;
}

type unnamed_2001311095937887546Descriptor = 
  | { sadb_x_sa2_reserved2: number };

declare class unnamed_2001311095937887546 {
  constructor(init?: unnamed_2001311095937887546Descriptor);
  sadb_x_sa2_reserved2: number;
}

type _TXTRecordRef_tDescriptor = 
  | { PrivateData: unknown /* const array */ }
  | { ForceNaturalAlignment: string | null };

declare class _TXTRecordRef_t {
  constructor(init?: _TXTRecordRef_tDescriptor);
  PrivateData: unknown /* const array */;
  ForceNaturalAlignment: string | null;
}

type unnamed_996628347941081396Descriptor = 
  | { n_strx: number };

declare class unnamed_996628347941081396 {
  constructor(init?: unnamed_996628347941081396Descriptor);
  n_strx: number;
}

type unnamed_9993560228078637820Descriptor = 
  | { icmp6_un_data32: unknown /* const array */ }
  | { icmp6_un_data16: unknown /* const array */ }
  | { icmp6_un_data8: unknown /* const array */ };

declare class unnamed_9993560228078637820 {
  constructor(init?: unnamed_9993560228078637820Descriptor);
  icmp6_un_data32: unknown /* const array */;
  icmp6_un_data16: unknown /* const array */;
  icmp6_un_data8: unknown /* const array */;
}

type lc_strDescriptor = 
  | { offset: number };

declare class lc_str {
  constructor(init?: lc_strDescriptor);
  offset: number;
}

type __RequestUnion__mach_host_subsystemDescriptor = 
  | { Request_host_info: __Request__host_info_t }
  | { Request_host_kernel_version: __Request__host_kernel_version_t }
  | { Request__host_page_size: __Request___host_page_size_t }
  | { Request_mach_memory_object_memory_entry: __Request__mach_memory_object_memory_entry_t }
  | { Request_host_processor_info: __Request__host_processor_info_t }
  | { Request_host_get_io_main: __Request__host_get_io_main_t }
  | { Request_host_get_clock_service: __Request__host_get_clock_service_t }
  | { Request_kmod_get_info: __Request__kmod_get_info_t }
  | { Request_host_virtual_physical_table_info: __Request__host_virtual_physical_table_info_t }
  | { Request_processor_set_default: __Request__processor_set_default_t }
  | { Request_processor_set_create: __Request__processor_set_create_t }
  | { Request_mach_memory_object_memory_entry_64: __Request__mach_memory_object_memory_entry_64_t }
  | { Request_host_statistics: __Request__host_statistics_t }
  | { Request_host_request_notification: __Request__host_request_notification_t }
  | { Request_host_lockgroup_info: __Request__host_lockgroup_info_t }
  | { Request_host_statistics64: __Request__host_statistics64_t }
  | { Request_mach_zone_info: __Request__mach_zone_info_t }
  | { Request_host_create_mach_voucher: __Request__host_create_mach_voucher_t }
  | { Request_host_register_mach_voucher_attr_manager: __Request__host_register_mach_voucher_attr_manager_t }
  | { Request_host_register_well_known_mach_voucher_attr_manager: __Request__host_register_well_known_mach_voucher_attr_manager_t }
  | { Request_host_set_atm_diagnostic_flag: __Request__host_set_atm_diagnostic_flag_t }
  | { Request_host_get_atm_diagnostic_flag: __Request__host_get_atm_diagnostic_flag_t }
  | { Request_mach_memory_info: __Request__mach_memory_info_t }
  | { Request_host_set_multiuser_config_flags: __Request__host_set_multiuser_config_flags_t }
  | { Request_host_get_multiuser_config_flags: __Request__host_get_multiuser_config_flags_t }
  | { Request_host_check_multiuser_mode: __Request__host_check_multiuser_mode_t }
  | { Request_mach_zone_info_for_zone: __Request__mach_zone_info_for_zone_t };

declare class __RequestUnion__mach_host_subsystem {
  constructor(init?: __RequestUnion__mach_host_subsystemDescriptor);
  Request_host_info: __Request__host_info_t;
  Request_host_kernel_version: __Request__host_kernel_version_t;
  Request__host_page_size: __Request___host_page_size_t;
  Request_mach_memory_object_memory_entry: __Request__mach_memory_object_memory_entry_t;
  Request_host_processor_info: __Request__host_processor_info_t;
  Request_host_get_io_main: __Request__host_get_io_main_t;
  Request_host_get_clock_service: __Request__host_get_clock_service_t;
  Request_kmod_get_info: __Request__kmod_get_info_t;
  Request_host_virtual_physical_table_info: __Request__host_virtual_physical_table_info_t;
  Request_processor_set_default: __Request__processor_set_default_t;
  Request_processor_set_create: __Request__processor_set_create_t;
  Request_mach_memory_object_memory_entry_64: __Request__mach_memory_object_memory_entry_64_t;
  Request_host_statistics: __Request__host_statistics_t;
  Request_host_request_notification: __Request__host_request_notification_t;
  Request_host_lockgroup_info: __Request__host_lockgroup_info_t;
  Request_host_statistics64: __Request__host_statistics64_t;
  Request_mach_zone_info: __Request__mach_zone_info_t;
  Request_host_create_mach_voucher: __Request__host_create_mach_voucher_t;
  Request_host_register_mach_voucher_attr_manager: __Request__host_register_mach_voucher_attr_manager_t;
  Request_host_register_well_known_mach_voucher_attr_manager: __Request__host_register_well_known_mach_voucher_attr_manager_t;
  Request_host_set_atm_diagnostic_flag: __Request__host_set_atm_diagnostic_flag_t;
  Request_host_get_atm_diagnostic_flag: __Request__host_get_atm_diagnostic_flag_t;
  Request_mach_memory_info: __Request__mach_memory_info_t;
  Request_host_set_multiuser_config_flags: __Request__host_set_multiuser_config_flags_t;
  Request_host_get_multiuser_config_flags: __Request__host_get_multiuser_config_flags_t;
  Request_host_check_multiuser_mode: __Request__host_check_multiuser_mode_t;
  Request_mach_zone_info_for_zone: __Request__mach_zone_info_for_zone_t;
}

type __ReplyUnion__mach_port_subsystemDescriptor = 
  | { Reply_mach_port_names: __Reply__mach_port_names_t }
  | { Reply_mach_port_type: __Reply__mach_port_type_t }
  | { Reply_mach_port_rename: __Reply__mach_port_rename_t }
  | { Reply_mach_port_allocate_name: __Reply__mach_port_allocate_name_t }
  | { Reply_mach_port_allocate: __Reply__mach_port_allocate_t }
  | { Reply_mach_port_destroy: __Reply__mach_port_destroy_t }
  | { Reply_mach_port_deallocate: __Reply__mach_port_deallocate_t }
  | { Reply_mach_port_get_refs: __Reply__mach_port_get_refs_t }
  | { Reply_mach_port_mod_refs: __Reply__mach_port_mod_refs_t }
  | { Reply_mach_port_peek: __Reply__mach_port_peek_t }
  | { Reply_mach_port_set_mscount: __Reply__mach_port_set_mscount_t }
  | { Reply_mach_port_get_set_status: __Reply__mach_port_get_set_status_t }
  | { Reply_mach_port_move_member: __Reply__mach_port_move_member_t }
  | { Reply_mach_port_request_notification: __Reply__mach_port_request_notification_t }
  | { Reply_mach_port_insert_right: __Reply__mach_port_insert_right_t }
  | { Reply_mach_port_extract_right: __Reply__mach_port_extract_right_t }
  | { Reply_mach_port_set_seqno: __Reply__mach_port_set_seqno_t }
  | { Reply_mach_port_get_attributes: __Reply__mach_port_get_attributes_t }
  | { Reply_mach_port_set_attributes: __Reply__mach_port_set_attributes_t }
  | { Reply_mach_port_allocate_qos: __Reply__mach_port_allocate_qos_t }
  | { Reply_mach_port_allocate_full: __Reply__mach_port_allocate_full_t }
  | { Reply_task_set_port_space: __Reply__task_set_port_space_t }
  | { Reply_mach_port_get_srights: __Reply__mach_port_get_srights_t }
  | { Reply_mach_port_space_info: __Reply__mach_port_space_info_t }
  | { Reply_mach_port_dnrequest_info: __Reply__mach_port_dnrequest_info_t }
  | { Reply_mach_port_kernel_object: __Reply__mach_port_kernel_object_t }
  | { Reply_mach_port_insert_member: __Reply__mach_port_insert_member_t }
  | { Reply_mach_port_extract_member: __Reply__mach_port_extract_member_t }
  | { Reply_mach_port_get_context: __Reply__mach_port_get_context_t }
  | { Reply_mach_port_set_context: __Reply__mach_port_set_context_t }
  | { Reply_mach_port_kobject: __Reply__mach_port_kobject_t }
  | { Reply_mach_port_construct: __Reply__mach_port_construct_t }
  | { Reply_mach_port_destruct: __Reply__mach_port_destruct_t }
  | { Reply_mach_port_guard: __Reply__mach_port_guard_t }
  | { Reply_mach_port_unguard: __Reply__mach_port_unguard_t }
  | { Reply_mach_port_space_basic_info: __Reply__mach_port_space_basic_info_t }
  | { Reply_mach_port_guard_with_flags: __Reply__mach_port_guard_with_flags_t }
  | { Reply_mach_port_swap_guard: __Reply__mach_port_swap_guard_t }
  | { Reply_mach_port_kobject_description: __Reply__mach_port_kobject_description_t }
  | { Reply_mach_port_is_connection_for_service: __Reply__mach_port_is_connection_for_service_t }
  | { Reply_mach_port_get_service_port_info: __Reply__mach_port_get_service_port_info_t }
  | { Reply_mach_port_assert_attributes: __Reply__mach_port_assert_attributes_t };

declare class __ReplyUnion__mach_port_subsystem {
  constructor(init?: __ReplyUnion__mach_port_subsystemDescriptor);
  Reply_mach_port_names: __Reply__mach_port_names_t;
  Reply_mach_port_type: __Reply__mach_port_type_t;
  Reply_mach_port_rename: __Reply__mach_port_rename_t;
  Reply_mach_port_allocate_name: __Reply__mach_port_allocate_name_t;
  Reply_mach_port_allocate: __Reply__mach_port_allocate_t;
  Reply_mach_port_destroy: __Reply__mach_port_destroy_t;
  Reply_mach_port_deallocate: __Reply__mach_port_deallocate_t;
  Reply_mach_port_get_refs: __Reply__mach_port_get_refs_t;
  Reply_mach_port_mod_refs: __Reply__mach_port_mod_refs_t;
  Reply_mach_port_peek: __Reply__mach_port_peek_t;
  Reply_mach_port_set_mscount: __Reply__mach_port_set_mscount_t;
  Reply_mach_port_get_set_status: __Reply__mach_port_get_set_status_t;
  Reply_mach_port_move_member: __Reply__mach_port_move_member_t;
  Reply_mach_port_request_notification: __Reply__mach_port_request_notification_t;
  Reply_mach_port_insert_right: __Reply__mach_port_insert_right_t;
  Reply_mach_port_extract_right: __Reply__mach_port_extract_right_t;
  Reply_mach_port_set_seqno: __Reply__mach_port_set_seqno_t;
  Reply_mach_port_get_attributes: __Reply__mach_port_get_attributes_t;
  Reply_mach_port_set_attributes: __Reply__mach_port_set_attributes_t;
  Reply_mach_port_allocate_qos: __Reply__mach_port_allocate_qos_t;
  Reply_mach_port_allocate_full: __Reply__mach_port_allocate_full_t;
  Reply_task_set_port_space: __Reply__task_set_port_space_t;
  Reply_mach_port_get_srights: __Reply__mach_port_get_srights_t;
  Reply_mach_port_space_info: __Reply__mach_port_space_info_t;
  Reply_mach_port_dnrequest_info: __Reply__mach_port_dnrequest_info_t;
  Reply_mach_port_kernel_object: __Reply__mach_port_kernel_object_t;
  Reply_mach_port_insert_member: __Reply__mach_port_insert_member_t;
  Reply_mach_port_extract_member: __Reply__mach_port_extract_member_t;
  Reply_mach_port_get_context: __Reply__mach_port_get_context_t;
  Reply_mach_port_set_context: __Reply__mach_port_set_context_t;
  Reply_mach_port_kobject: __Reply__mach_port_kobject_t;
  Reply_mach_port_construct: __Reply__mach_port_construct_t;
  Reply_mach_port_destruct: __Reply__mach_port_destruct_t;
  Reply_mach_port_guard: __Reply__mach_port_guard_t;
  Reply_mach_port_unguard: __Reply__mach_port_unguard_t;
  Reply_mach_port_space_basic_info: __Reply__mach_port_space_basic_info_t;
  Reply_mach_port_guard_with_flags: __Reply__mach_port_guard_with_flags_t;
  Reply_mach_port_swap_guard: __Reply__mach_port_swap_guard_t;
  Reply_mach_port_kobject_description: __Reply__mach_port_kobject_description_t;
  Reply_mach_port_is_connection_for_service: __Reply__mach_port_is_connection_for_service_t;
  Reply_mach_port_get_service_port_info: __Reply__mach_port_get_service_port_info_t;
  Reply_mach_port_assert_attributes: __Reply__mach_port_assert_attributes_t;
}

type __ReplyUnion__thread_act_subsystemDescriptor = 
  | { Reply_thread_terminate: __Reply__thread_terminate_t }
  | { Reply_act_get_state: __Reply__act_get_state_t }
  | { Reply_act_set_state: __Reply__act_set_state_t }
  | { Reply_thread_get_state: __Reply__thread_get_state_t }
  | { Reply_thread_set_state: __Reply__thread_set_state_t }
  | { Reply_thread_suspend: __Reply__thread_suspend_t }
  | { Reply_thread_resume: __Reply__thread_resume_t }
  | { Reply_thread_abort: __Reply__thread_abort_t }
  | { Reply_thread_abort_safely: __Reply__thread_abort_safely_t }
  | { Reply_thread_depress_abort: __Reply__thread_depress_abort_t }
  | { Reply_thread_get_special_port: __Reply__thread_get_special_port_t }
  | { Reply_thread_set_special_port: __Reply__thread_set_special_port_t }
  | { Reply_thread_info: __Reply__thread_info_t }
  | { Reply_thread_set_exception_ports: __Reply__thread_set_exception_ports_t }
  | { Reply_thread_get_exception_ports: __Reply__thread_get_exception_ports_t }
  | { Reply_thread_swap_exception_ports: __Reply__thread_swap_exception_ports_t }
  | { Reply_thread_policy: __Reply__thread_policy_t }
  | { Reply_thread_policy_set: __Reply__thread_policy_set_t }
  | { Reply_thread_policy_get: __Reply__thread_policy_get_t }
  | { Reply_thread_sample: __Reply__thread_sample_t }
  | { Reply_etap_trace_thread: __Reply__etap_trace_thread_t }
  | { Reply_thread_assign: __Reply__thread_assign_t }
  | { Reply_thread_assign_default: __Reply__thread_assign_default_t }
  | { Reply_thread_get_assignment: __Reply__thread_get_assignment_t }
  | { Reply_thread_set_policy: __Reply__thread_set_policy_t }
  | { Reply_thread_get_mach_voucher: __Reply__thread_get_mach_voucher_t }
  | { Reply_thread_set_mach_voucher: __Reply__thread_set_mach_voucher_t }
  | { Reply_thread_swap_mach_voucher: __Reply__thread_swap_mach_voucher_t }
  | { Reply_thread_convert_thread_state: __Reply__thread_convert_thread_state_t }
  | { Reply_thread_get_exception_ports_info: __Reply__thread_get_exception_ports_info_t }
  | { Reply_thread_adopt_exception_handler: __Reply__thread_adopt_exception_handler_t };

declare class __ReplyUnion__thread_act_subsystem {
  constructor(init?: __ReplyUnion__thread_act_subsystemDescriptor);
  Reply_thread_terminate: __Reply__thread_terminate_t;
  Reply_act_get_state: __Reply__act_get_state_t;
  Reply_act_set_state: __Reply__act_set_state_t;
  Reply_thread_get_state: __Reply__thread_get_state_t;
  Reply_thread_set_state: __Reply__thread_set_state_t;
  Reply_thread_suspend: __Reply__thread_suspend_t;
  Reply_thread_resume: __Reply__thread_resume_t;
  Reply_thread_abort: __Reply__thread_abort_t;
  Reply_thread_abort_safely: __Reply__thread_abort_safely_t;
  Reply_thread_depress_abort: __Reply__thread_depress_abort_t;
  Reply_thread_get_special_port: __Reply__thread_get_special_port_t;
  Reply_thread_set_special_port: __Reply__thread_set_special_port_t;
  Reply_thread_info: __Reply__thread_info_t;
  Reply_thread_set_exception_ports: __Reply__thread_set_exception_ports_t;
  Reply_thread_get_exception_ports: __Reply__thread_get_exception_ports_t;
  Reply_thread_swap_exception_ports: __Reply__thread_swap_exception_ports_t;
  Reply_thread_policy: __Reply__thread_policy_t;
  Reply_thread_policy_set: __Reply__thread_policy_set_t;
  Reply_thread_policy_get: __Reply__thread_policy_get_t;
  Reply_thread_sample: __Reply__thread_sample_t;
  Reply_etap_trace_thread: __Reply__etap_trace_thread_t;
  Reply_thread_assign: __Reply__thread_assign_t;
  Reply_thread_assign_default: __Reply__thread_assign_default_t;
  Reply_thread_get_assignment: __Reply__thread_get_assignment_t;
  Reply_thread_set_policy: __Reply__thread_set_policy_t;
  Reply_thread_get_mach_voucher: __Reply__thread_get_mach_voucher_t;
  Reply_thread_set_mach_voucher: __Reply__thread_set_mach_voucher_t;
  Reply_thread_swap_mach_voucher: __Reply__thread_swap_mach_voucher_t;
  Reply_thread_convert_thread_state: __Reply__thread_convert_thread_state_t;
  Reply_thread_get_exception_ports_info: __Reply__thread_get_exception_ports_info_t;
  Reply_thread_adopt_exception_handler: __Reply__thread_adopt_exception_handler_t;
}

type unnamed_16399479197806178150Descriptor = 
  | { ran_strx: number };

declare class unnamed_16399479197806178150 {
  constructor(init?: unnamed_16399479197806178150Descriptor);
  ran_strx: number;
}

type __RequestUnion__processor_set_subsystemDescriptor = 
  | { Request_processor_set_statistics: __Request__processor_set_statistics_t }
  | { Request_processor_set_destroy: __Request__processor_set_destroy_t }
  | { Request_processor_set_max_priority: __Request__processor_set_max_priority_t }
  | { Request_processor_set_policy_enable: __Request__processor_set_policy_enable_t }
  | { Request_processor_set_policy_disable: __Request__processor_set_policy_disable_t }
  | { Request_processor_set_tasks: __Request__processor_set_tasks_t }
  | { Request_processor_set_threads: __Request__processor_set_threads_t }
  | { Request_processor_set_policy_control: __Request__processor_set_policy_control_t }
  | { Request_processor_set_stack_usage: __Request__processor_set_stack_usage_t }
  | { Request_processor_set_info: __Request__processor_set_info_t }
  | { Request_processor_set_tasks_with_flavor: __Request__processor_set_tasks_with_flavor_t };

declare class __RequestUnion__processor_set_subsystem {
  constructor(init?: __RequestUnion__processor_set_subsystemDescriptor);
  Request_processor_set_statistics: __Request__processor_set_statistics_t;
  Request_processor_set_destroy: __Request__processor_set_destroy_t;
  Request_processor_set_max_priority: __Request__processor_set_max_priority_t;
  Request_processor_set_policy_enable: __Request__processor_set_policy_enable_t;
  Request_processor_set_policy_disable: __Request__processor_set_policy_disable_t;
  Request_processor_set_tasks: __Request__processor_set_tasks_t;
  Request_processor_set_threads: __Request__processor_set_threads_t;
  Request_processor_set_policy_control: __Request__processor_set_policy_control_t;
  Request_processor_set_stack_usage: __Request__processor_set_stack_usage_t;
  Request_processor_set_info: __Request__processor_set_info_t;
  Request_processor_set_tasks_with_flavor: __Request__processor_set_tasks_with_flavor_t;
}

type unnamed_11293842726292155158Descriptor = 
  | { arg32: au_arg32_t }
  | { arg64: au_arg64_t }
  | { arb: au_arb_t }
  | { attr32: au_attr32_t }
  | { attr64: au_attr64_t }
  | { execarg: au_execarg_t }
  | { execenv: au_execenv_t }
  | { exit: au_exit_t }
  | { file: au_file_t }
  | { grps: au_groups_t }
  | { hdr32: au_header32_t }
  | { hdr32_ex: au_header32_ex_t }
  | { hdr64: au_header64_t }
  | { hdr64_ex: au_header64_ex_t }
  | { inaddr: au_inaddr_t }
  | { inaddr_ex: au_inaddr_ex_t }
  | { ip: au_ip_t }
  | { ipc: au_ipc_t }
  | { ipcperm: au_ipcperm_t }
  | { iport: au_iport_t }
  | { opaque: au_opaque_t }
  | { path: au_path_t }
  | { proc32: au_proc32_t }
  | { proc32_ex: au_proc32ex_t }
  | { proc64: au_proc64_t }
  | { proc64_ex: au_proc64ex_t }
  | { ret32: au_ret32_t }
  | { ret64: au_ret64_t }
  | { seq: au_seq_t }
  | { socket: au_socket_t }
  | { socket_ex32: au_socket_ex32_t }
  | { sockinet_ex32: au_socketinet_ex32_t }
  | { sockunix: au_socketunix_t }
  | { subj32: au_subject32_t }
  | { subj32_ex: au_subject32ex_t }
  | { subj64: au_subject64_t }
  | { subj64_ex: au_subject64ex_t }
  | { text: au_text_t }
  | { kevent: au_kevent_t }
  | { invalid: au_invalid_t }
  | { trail: au_trailer_t }
  | { zonename: au_zonename_t }
  | { cert_hash: au_cert_hash_t }
  | { krb5_principal: au_krb5_principal_t }
  | { identity: au_identity_t };

declare class unnamed_11293842726292155158 {
  constructor(init?: unnamed_11293842726292155158Descriptor);
  arg32: au_arg32_t;
  arg64: au_arg64_t;
  arb: au_arb_t;
  attr32: au_attr32_t;
  attr64: au_attr64_t;
  execarg: au_execarg_t;
  execenv: au_execenv_t;
  exit: au_exit_t;
  file: au_file_t;
  grps: au_groups_t;
  hdr32: au_header32_t;
  hdr32_ex: au_header32_ex_t;
  hdr64: au_header64_t;
  hdr64_ex: au_header64_ex_t;
  inaddr: au_inaddr_t;
  inaddr_ex: au_inaddr_ex_t;
  ip: au_ip_t;
  ipc: au_ipc_t;
  ipcperm: au_ipcperm_t;
  iport: au_iport_t;
  opaque: au_opaque_t;
  path: au_path_t;
  proc32: au_proc32_t;
  proc32_ex: au_proc32ex_t;
  proc64: au_proc64_t;
  proc64_ex: au_proc64ex_t;
  ret32: au_ret32_t;
  ret64: au_ret64_t;
  seq: au_seq_t;
  socket: au_socket_t;
  socket_ex32: au_socket_ex32_t;
  sockinet_ex32: au_socketinet_ex32_t;
  sockunix: au_socketunix_t;
  subj32: au_subject32_t;
  subj32_ex: au_subject32ex_t;
  subj64: au_subject64_t;
  subj64_ex: au_subject64ex_t;
  text: au_text_t;
  kevent: au_kevent_t;
  invalid: au_invalid_t;
  trail: au_trailer_t;
  zonename: au_zonename_t;
  cert_hash: au_cert_hash_t;
  krb5_principal: au_krb5_principal_t;
  identity: au_identity_t;
}

type _http_addr_uDescriptor = 
  | { addr: sockaddr }
  | { ipv4: sockaddr_in }
  | { ipv6: sockaddr_in6 }
  | { un: sockaddr_un }
  | { pad: unknown /* const array */ };

declare class _http_addr_u {
  constructor(init?: _http_addr_uDescriptor);
  addr: sockaddr;
  ipv4: sockaddr_in;
  ipv6: sockaddr_in6;
  un: sockaddr_un;
  pad: unknown /* const array */;
}

type unnamed_4991142208153925470Descriptor = 
  | { ifru_addr: sockaddr }
  | { ifru_dstaddr: sockaddr }
  | { ifru_broadaddr: sockaddr }
  | { ifru_flags: number }
  | { ifru_metric: number }
  | { ifru_mtu: number }
  | { ifru_phys: number }
  | { ifru_media: number }
  | { ifru_intval: number }
  | { ifru_data: string | null }
  | { ifru_devmtu: ifdevmtu }
  | { ifru_kpi: ifkpi }
  | { ifru_wake_flags: number }
  | { ifru_route_refcnt: number }
  | { ifru_cap: unknown /* const array */ }
  | { ifru_functional_type: number }
  | { ifru_peer_egress_functional_type: number }
  | { ifru_is_directlink: number }
  | { ifru_is_vpn: number }
  | { ifru_is_companionlink: number };

declare class unnamed_4991142208153925470 {
  constructor(init?: unnamed_4991142208153925470Descriptor);
  ifru_addr: sockaddr;
  ifru_dstaddr: sockaddr;
  ifru_broadaddr: sockaddr;
  ifru_flags: number;
  ifru_metric: number;
  ifru_mtu: number;
  ifru_phys: number;
  ifru_media: number;
  ifru_intval: number;
  ifru_data: string | null;
  ifru_devmtu: ifdevmtu;
  ifru_kpi: ifkpi;
  ifru_wake_flags: number;
  ifru_route_refcnt: number;
  ifru_cap: unknown /* const array */;
  ifru_functional_type: number;
  ifru_peer_egress_functional_type: number;
  ifru_is_directlink: number;
  ifru_is_vpn: number;
  ifru_is_companionlink: number;
}

type sigvalDescriptor = 
  | { sival_int: number }
  | { sival_ptr: interop.PointerConvertible };

declare class sigval {
  constructor(init?: sigvalDescriptor);
  sival_int: number;
  sival_ptr: interop.Pointer;
}

type __RequestUnion__processor_subsystemDescriptor = 
  | { Request_processor_start: __Request__processor_start_t }
  | { Request_processor_exit: __Request__processor_exit_t }
  | { Request_processor_info: __Request__processor_info_t }
  | { Request_processor_control: __Request__processor_control_t }
  | { Request_processor_assign: __Request__processor_assign_t }
  | { Request_processor_get_assignment: __Request__processor_get_assignment_t };

declare class __RequestUnion__processor_subsystem {
  constructor(init?: __RequestUnion__processor_subsystemDescriptor);
  Request_processor_start: __Request__processor_start_t;
  Request_processor_exit: __Request__processor_exit_t;
  Request_processor_info: __Request__processor_info_t;
  Request_processor_control: __Request__processor_control_t;
  Request_processor_assign: __Request__processor_assign_t;
  Request_processor_get_assignment: __Request__processor_get_assignment_t;
}

type __ReplyUnion__host_security_subsystemDescriptor = 
  | { Reply_host_security_create_task_token: __Reply__host_security_create_task_token_t }
  | { Reply_host_security_set_task_token: __Reply__host_security_set_task_token_t };

declare class __ReplyUnion__host_security_subsystem {
  constructor(init?: __ReplyUnion__host_security_subsystemDescriptor);
  Reply_host_security_create_task_token: __Reply__host_security_create_task_token_t;
  Reply_host_security_set_task_token: __Reply__host_security_set_task_token_t;
}

type __RequestUnion__exc_subsystemDescriptor = 
  | { Request_exception_raise: __Request__exception_raise_t }
  | { Request_exception_raise_state: __Request__exception_raise_state_t }
  | { Request_exception_raise_state_identity: __Request__exception_raise_state_identity_t };

declare class __RequestUnion__exc_subsystem {
  constructor(init?: __RequestUnion__exc_subsystemDescriptor);
  Request_exception_raise: __Request__exception_raise_t;
  Request_exception_raise_state: __Request__exception_raise_state_t;
  Request_exception_raise_state_identity: __Request__exception_raise_state_identity_t;
}

type __RequestUnion__host_security_subsystemDescriptor = 
  | { Request_host_security_create_task_token: __Request__host_security_create_task_token_t }
  | { Request_host_security_set_task_token: __Request__host_security_set_task_token_t };

declare class __RequestUnion__host_security_subsystem {
  constructor(init?: __RequestUnion__host_security_subsystemDescriptor);
  Request_host_security_create_task_token: __Request__host_security_create_task_token_t;
  Request_host_security_set_task_token: __Request__host_security_set_task_token_t;
}

type ppd_cplimit_uDescriptor = 
  | { custom_curve: number }
  | { custom_int: number }
  | { custom_invcurve: number }
  | { custom_passcode: number }
  | { custom_password: number }
  | { custom_points: number }
  | { custom_real: number }
  | { custom_string: number };

declare class ppd_cplimit_u {
  constructor(init?: ppd_cplimit_uDescriptor);
  custom_curve: number;
  custom_int: number;
  custom_invcurve: number;
  custom_passcode: number;
  custom_password: number;
  custom_points: number;
  custom_real: number;
  custom_string: number;
}

type __ReplyUnion__host_priv_subsystemDescriptor = 
  | { Reply_host_get_boot_info: __Reply__host_get_boot_info_t }
  | { Reply_host_reboot: __Reply__host_reboot_t }
  | { Reply_host_priv_statistics: __Reply__host_priv_statistics_t }
  | { Reply_host_default_memory_manager: __Reply__host_default_memory_manager_t }
  | { Reply_vm_wire: __Reply__vm_wire_t }
  | { Reply_thread_wire: __Reply__thread_wire_t }
  | { Reply_vm_allocate_cpm: __Reply__vm_allocate_cpm_t }
  | { Reply_host_processors: __Reply__host_processors_t }
  | { Reply_host_get_clock_control: __Reply__host_get_clock_control_t }
  | { Reply_kmod_create: __Reply__kmod_create_t }
  | { Reply_kmod_destroy: __Reply__kmod_destroy_t }
  | { Reply_kmod_control: __Reply__kmod_control_t }
  | { Reply_host_get_special_port: __Reply__host_get_special_port_t }
  | { Reply_host_set_special_port: __Reply__host_set_special_port_t }
  | { Reply_host_set_exception_ports: __Reply__host_set_exception_ports_t }
  | { Reply_host_get_exception_ports: __Reply__host_get_exception_ports_t }
  | { Reply_host_swap_exception_ports: __Reply__host_swap_exception_ports_t }
  | { Reply_mach_vm_wire: __Reply__mach_vm_wire_t }
  | { Reply_host_processor_sets: __Reply__host_processor_sets_t }
  | { Reply_host_processor_set_priv: __Reply__host_processor_set_priv_t }
  | { Reply_host_set_UNDServer: __Reply__host_set_UNDServer_t }
  | { Reply_host_get_UNDServer: __Reply__host_get_UNDServer_t }
  | { Reply_kext_request: __Reply__kext_request_t };

declare class __ReplyUnion__host_priv_subsystem {
  constructor(init?: __ReplyUnion__host_priv_subsystemDescriptor);
  Reply_host_get_boot_info: __Reply__host_get_boot_info_t;
  Reply_host_reboot: __Reply__host_reboot_t;
  Reply_host_priv_statistics: __Reply__host_priv_statistics_t;
  Reply_host_default_memory_manager: __Reply__host_default_memory_manager_t;
  Reply_vm_wire: __Reply__vm_wire_t;
  Reply_thread_wire: __Reply__thread_wire_t;
  Reply_vm_allocate_cpm: __Reply__vm_allocate_cpm_t;
  Reply_host_processors: __Reply__host_processors_t;
  Reply_host_get_clock_control: __Reply__host_get_clock_control_t;
  Reply_kmod_create: __Reply__kmod_create_t;
  Reply_kmod_destroy: __Reply__kmod_destroy_t;
  Reply_kmod_control: __Reply__kmod_control_t;
  Reply_host_get_special_port: __Reply__host_get_special_port_t;
  Reply_host_set_special_port: __Reply__host_set_special_port_t;
  Reply_host_set_exception_ports: __Reply__host_set_exception_ports_t;
  Reply_host_get_exception_ports: __Reply__host_get_exception_ports_t;
  Reply_host_swap_exception_ports: __Reply__host_swap_exception_ports_t;
  Reply_mach_vm_wire: __Reply__mach_vm_wire_t;
  Reply_host_processor_sets: __Reply__host_processor_sets_t;
  Reply_host_processor_set_priv: __Reply__host_processor_set_priv_t;
  Reply_host_set_UNDServer: __Reply__host_set_UNDServer_t;
  Reply_host_get_UNDServer: __Reply__host_get_UNDServer_t;
  Reply_kext_request: __Reply__kext_request_t;
}

type unnamed_13006139579446832142Descriptor = 
  | { __u6_addr8: unknown /* const array */ }
  | { __u6_addr16: unknown /* const array */ }
  | { __u6_addr32: unknown /* const array */ };

declare class unnamed_13006139579446832142 {
  constructor(init?: unnamed_13006139579446832142Descriptor);
  __u6_addr8: unknown /* const array */;
  __u6_addr16: unknown /* const array */;
  __u6_addr32: unknown /* const array */;
}

type __ReplyUnion__clock_subsystemDescriptor = 
  | { Reply_clock_get_time: __Reply__clock_get_time_t }
  | { Reply_clock_get_attributes: __Reply__clock_get_attributes_t }
  | { Reply_clock_alarm: __Reply__clock_alarm_t };

declare class __ReplyUnion__clock_subsystem {
  constructor(init?: __ReplyUnion__clock_subsystemDescriptor);
  Reply_clock_get_time: __Reply__clock_get_time_t;
  Reply_clock_get_attributes: __Reply__clock_get_attributes_t;
  Reply_clock_alarm: __Reply__clock_alarm_t;
}

type unnamed_12441087913908856964Descriptor = 
  | { is_master: number }
  | { is_main: number };

declare class unnamed_12441087913908856964 {
  constructor(init?: unnamed_12441087913908856964Descriptor);
  is_master: number;
  is_main: number;
}

type ipt_timestampDescriptor = 
  | { ipt_time: unknown /* const array */ }
  | { ipt_ta: unknown /* const array */ };

declare class ipt_timestamp {
  constructor(init?: ipt_timestampDescriptor);
  ipt_time: unknown /* const array */;
  ipt_ta: unknown /* const array */;
}

type __ReplyUnion__clock_priv_subsystemDescriptor = 
  | { Reply_clock_set_time: __Reply__clock_set_time_t }
  | { Reply_clock_set_attributes: __Reply__clock_set_attributes_t };

declare class __ReplyUnion__clock_priv_subsystem {
  constructor(init?: __ReplyUnion__clock_priv_subsystemDescriptor);
  Reply_clock_set_time: __Reply__clock_set_time_t;
  Reply_clock_set_attributes: __Reply__clock_set_attributes_t;
}

type unnamed_12048718452629231441Descriptor = 
  | { ts_32: __darwin_arm_thread_state }
  | { ts_64: __darwin_arm_thread_state64 };

declare class unnamed_12048718452629231441 {
  constructor(init?: unnamed_12048718452629231441Descriptor);
  ts_32: __darwin_arm_thread_state;
  ts_64: __darwin_arm_thread_state64;
}

type __ReplyUnion__processor_subsystemDescriptor = 
  | { Reply_processor_start: __Reply__processor_start_t }
  | { Reply_processor_exit: __Reply__processor_exit_t }
  | { Reply_processor_info: __Reply__processor_info_t }
  | { Reply_processor_control: __Reply__processor_control_t }
  | { Reply_processor_assign: __Reply__processor_assign_t }
  | { Reply_processor_get_assignment: __Reply__processor_get_assignment_t };

declare class __ReplyUnion__processor_subsystem {
  constructor(init?: __ReplyUnion__processor_subsystemDescriptor);
  Reply_processor_start: __Reply__processor_start_t;
  Reply_processor_exit: __Reply__processor_exit_t;
  Reply_processor_info: __Reply__processor_info_t;
  Reply_processor_control: __Reply__processor_control_t;
  Reply_processor_assign: __Reply__processor_assign_t;
  Reply_processor_get_assignment: __Reply__processor_get_assignment_t;
}

type __RequestUnion__clock_priv_subsystemDescriptor = 
  | { Request_clock_set_time: __Request__clock_set_time_t }
  | { Request_clock_set_attributes: __Request__clock_set_attributes_t };

declare class __RequestUnion__clock_priv_subsystem {
  constructor(init?: __RequestUnion__clock_priv_subsystemDescriptor);
  Request_clock_set_time: __Request__clock_set_time_t;
  Request_clock_set_attributes: __Request__clock_set_attributes_t;
}

type __ReplyUnion__processor_set_subsystemDescriptor = 
  | { Reply_processor_set_statistics: __Reply__processor_set_statistics_t }
  | { Reply_processor_set_destroy: __Reply__processor_set_destroy_t }
  | { Reply_processor_set_max_priority: __Reply__processor_set_max_priority_t }
  | { Reply_processor_set_policy_enable: __Reply__processor_set_policy_enable_t }
  | { Reply_processor_set_policy_disable: __Reply__processor_set_policy_disable_t }
  | { Reply_processor_set_tasks: __Reply__processor_set_tasks_t }
  | { Reply_processor_set_threads: __Reply__processor_set_threads_t }
  | { Reply_processor_set_policy_control: __Reply__processor_set_policy_control_t }
  | { Reply_processor_set_stack_usage: __Reply__processor_set_stack_usage_t }
  | { Reply_processor_set_info: __Reply__processor_set_info_t }
  | { Reply_processor_set_tasks_with_flavor: __Reply__processor_set_tasks_with_flavor_t };

declare class __ReplyUnion__processor_set_subsystem {
  constructor(init?: __ReplyUnion__processor_set_subsystemDescriptor);
  Reply_processor_set_statistics: __Reply__processor_set_statistics_t;
  Reply_processor_set_destroy: __Reply__processor_set_destroy_t;
  Reply_processor_set_max_priority: __Reply__processor_set_max_priority_t;
  Reply_processor_set_policy_enable: __Reply__processor_set_policy_enable_t;
  Reply_processor_set_policy_disable: __Reply__processor_set_policy_disable_t;
  Reply_processor_set_tasks: __Reply__processor_set_tasks_t;
  Reply_processor_set_threads: __Reply__processor_set_threads_t;
  Reply_processor_set_policy_control: __Reply__processor_set_policy_control_t;
  Reply_processor_set_stack_usage: __Reply__processor_set_stack_usage_t;
  Reply_processor_set_info: __Reply__processor_set_info_t;
  Reply_processor_set_tasks_with_flavor: __Reply__processor_set_tasks_with_flavor_t;
}

type NumVersionVariantDescriptor = 
  | { parts: NumVersion }
  | { whole: number };

declare class NumVersionVariant {
  constructor(init?: NumVersionVariantDescriptor);
  parts: NumVersion;
  whole: number;
}

type unnamed_10982442776747473916Descriptor = 
  | { if_status_v1: if_cellular_status_v1 };

declare class unnamed_10982442776747473916 {
  constructor(init?: unnamed_10982442776747473916Descriptor);
  if_status_v1: if_cellular_status_v1;
}

type mod_vals_uDescriptor = 
  | { modv_strvals: interop.PointerConvertible }
  | { modv_bvals: interop.PointerConvertible };

declare class mod_vals_u {
  constructor(init?: mod_vals_uDescriptor);
  modv_strvals: interop.Pointer;
  modv_bvals: interop.Pointer;
}

type mach_msg_descriptor_tDescriptor = 
  | { port: mach_msg_port_descriptor_t }
  | { out_of_line: mach_msg_ool_descriptor_t }
  | { ool_ports: mach_msg_ool_ports_descriptor_t }
  | { type: mach_msg_type_descriptor_t }
  | { guarded_port: mach_msg_guarded_port_descriptor_t };

declare class mach_msg_descriptor_t {
  constructor(init?: mach_msg_descriptor_tDescriptor);
  port: mach_msg_port_descriptor_t;
  out_of_line: mach_msg_ool_descriptor_t;
  ool_ports: mach_msg_ool_ports_descriptor_t;
  type: mach_msg_type_descriptor_t;
  guarded_port: mach_msg_guarded_port_descriptor_t;
}

type __ReplyUnion__mach_host_subsystemDescriptor = 
  | { Reply_host_info: __Reply__host_info_t }
  | { Reply_host_kernel_version: __Reply__host_kernel_version_t }
  | { Reply__host_page_size: __Reply___host_page_size_t }
  | { Reply_mach_memory_object_memory_entry: __Reply__mach_memory_object_memory_entry_t }
  | { Reply_host_processor_info: __Reply__host_processor_info_t }
  | { Reply_host_get_io_main: __Reply__host_get_io_main_t }
  | { Reply_host_get_clock_service: __Reply__host_get_clock_service_t }
  | { Reply_kmod_get_info: __Reply__kmod_get_info_t }
  | { Reply_host_virtual_physical_table_info: __Reply__host_virtual_physical_table_info_t }
  | { Reply_processor_set_default: __Reply__processor_set_default_t }
  | { Reply_processor_set_create: __Reply__processor_set_create_t }
  | { Reply_mach_memory_object_memory_entry_64: __Reply__mach_memory_object_memory_entry_64_t }
  | { Reply_host_statistics: __Reply__host_statistics_t }
  | { Reply_host_request_notification: __Reply__host_request_notification_t }
  | { Reply_host_lockgroup_info: __Reply__host_lockgroup_info_t }
  | { Reply_host_statistics64: __Reply__host_statistics64_t }
  | { Reply_mach_zone_info: __Reply__mach_zone_info_t }
  | { Reply_host_create_mach_voucher: __Reply__host_create_mach_voucher_t }
  | { Reply_host_register_mach_voucher_attr_manager: __Reply__host_register_mach_voucher_attr_manager_t }
  | { Reply_host_register_well_known_mach_voucher_attr_manager: __Reply__host_register_well_known_mach_voucher_attr_manager_t }
  | { Reply_host_set_atm_diagnostic_flag: __Reply__host_set_atm_diagnostic_flag_t }
  | { Reply_host_get_atm_diagnostic_flag: __Reply__host_get_atm_diagnostic_flag_t }
  | { Reply_mach_memory_info: __Reply__mach_memory_info_t }
  | { Reply_host_set_multiuser_config_flags: __Reply__host_set_multiuser_config_flags_t }
  | { Reply_host_get_multiuser_config_flags: __Reply__host_get_multiuser_config_flags_t }
  | { Reply_host_check_multiuser_mode: __Reply__host_check_multiuser_mode_t }
  | { Reply_mach_zone_info_for_zone: __Reply__mach_zone_info_for_zone_t };

declare class __ReplyUnion__mach_host_subsystem {
  constructor(init?: __ReplyUnion__mach_host_subsystemDescriptor);
  Reply_host_info: __Reply__host_info_t;
  Reply_host_kernel_version: __Reply__host_kernel_version_t;
  Reply__host_page_size: __Reply___host_page_size_t;
  Reply_mach_memory_object_memory_entry: __Reply__mach_memory_object_memory_entry_t;
  Reply_host_processor_info: __Reply__host_processor_info_t;
  Reply_host_get_io_main: __Reply__host_get_io_main_t;
  Reply_host_get_clock_service: __Reply__host_get_clock_service_t;
  Reply_kmod_get_info: __Reply__kmod_get_info_t;
  Reply_host_virtual_physical_table_info: __Reply__host_virtual_physical_table_info_t;
  Reply_processor_set_default: __Reply__processor_set_default_t;
  Reply_processor_set_create: __Reply__processor_set_create_t;
  Reply_mach_memory_object_memory_entry_64: __Reply__mach_memory_object_memory_entry_64_t;
  Reply_host_statistics: __Reply__host_statistics_t;
  Reply_host_request_notification: __Reply__host_request_notification_t;
  Reply_host_lockgroup_info: __Reply__host_lockgroup_info_t;
  Reply_host_statistics64: __Reply__host_statistics64_t;
  Reply_mach_zone_info: __Reply__mach_zone_info_t;
  Reply_host_create_mach_voucher: __Reply__host_create_mach_voucher_t;
  Reply_host_register_mach_voucher_attr_manager: __Reply__host_register_mach_voucher_attr_manager_t;
  Reply_host_register_well_known_mach_voucher_attr_manager: __Reply__host_register_well_known_mach_voucher_attr_manager_t;
  Reply_host_set_atm_diagnostic_flag: __Reply__host_set_atm_diagnostic_flag_t;
  Reply_host_get_atm_diagnostic_flag: __Reply__host_get_atm_diagnostic_flag_t;
  Reply_mach_memory_info: __Reply__mach_memory_info_t;
  Reply_host_set_multiuser_config_flags: __Reply__host_set_multiuser_config_flags_t;
  Reply_host_get_multiuser_config_flags: __Reply__host_get_multiuser_config_flags_t;
  Reply_host_check_multiuser_mode: __Reply__host_check_multiuser_mode_t;
  Reply_mach_zone_info_for_zone: __Reply__mach_zone_info_for_zone_t;
}

type unnamed_12046250409009717709Descriptor = 
  | { ifk_ptr: interop.PointerConvertible }
  | { ifk_value: number };

declare class unnamed_12046250409009717709 {
  constructor(init?: unnamed_12046250409009717709Descriptor);
  ifk_ptr: interop.Pointer;
  ifk_value: number;
}

type __RequestUnion__vm_map_subsystemDescriptor = 
  | { Request_vm_region: __Request__vm_region_t }
  | { Request_vm_allocate: __Request__vm_allocate_t }
  | { Request_vm_deallocate: __Request__vm_deallocate_t }
  | { Request_vm_protect: __Request__vm_protect_t }
  | { Request_vm_inherit: __Request__vm_inherit_t }
  | { Request_vm_read: __Request__vm_read_t }
  | { Request_vm_read_list: __Request__vm_read_list_t }
  | { Request_vm_write: __Request__vm_write_t }
  | { Request_vm_copy: __Request__vm_copy_t }
  | { Request_vm_read_overwrite: __Request__vm_read_overwrite_t }
  | { Request_vm_msync: __Request__vm_msync_t }
  | { Request_vm_behavior_set: __Request__vm_behavior_set_t }
  | { Request_vm_map: __Request__vm_map_t }
  | { Request_vm_machine_attribute: __Request__vm_machine_attribute_t }
  | { Request_vm_remap: __Request__vm_remap_t }
  | { Request_task_wire: __Request__task_wire_t }
  | { Request_mach_make_memory_entry: __Request__mach_make_memory_entry_t }
  | { Request_vm_map_page_query: __Request__vm_map_page_query_t }
  | { Request_mach_vm_region_info: __Request__mach_vm_region_info_t }
  | { Request_vm_mapped_pages_info: __Request__vm_mapped_pages_info_t }
  | { Request_vm_region_recurse: __Request__vm_region_recurse_t }
  | { Request_vm_region_recurse_64: __Request__vm_region_recurse_64_t }
  | { Request_mach_vm_region_info_64: __Request__mach_vm_region_info_64_t }
  | { Request_vm_region_64: __Request__vm_region_64_t }
  | { Request_mach_make_memory_entry_64: __Request__mach_make_memory_entry_64_t }
  | { Request_vm_map_64: __Request__vm_map_64_t }
  | { Request_vm_purgable_control: __Request__vm_purgable_control_t }
  | { Request_vm_map_exec_lockdown: __Request__vm_map_exec_lockdown_t }
  | { Request_vm_remap_new: __Request__vm_remap_new_t };

declare class __RequestUnion__vm_map_subsystem {
  constructor(init?: __RequestUnion__vm_map_subsystemDescriptor);
  Request_vm_region: __Request__vm_region_t;
  Request_vm_allocate: __Request__vm_allocate_t;
  Request_vm_deallocate: __Request__vm_deallocate_t;
  Request_vm_protect: __Request__vm_protect_t;
  Request_vm_inherit: __Request__vm_inherit_t;
  Request_vm_read: __Request__vm_read_t;
  Request_vm_read_list: __Request__vm_read_list_t;
  Request_vm_write: __Request__vm_write_t;
  Request_vm_copy: __Request__vm_copy_t;
  Request_vm_read_overwrite: __Request__vm_read_overwrite_t;
  Request_vm_msync: __Request__vm_msync_t;
  Request_vm_behavior_set: __Request__vm_behavior_set_t;
  Request_vm_map: __Request__vm_map_t;
  Request_vm_machine_attribute: __Request__vm_machine_attribute_t;
  Request_vm_remap: __Request__vm_remap_t;
  Request_task_wire: __Request__task_wire_t;
  Request_mach_make_memory_entry: __Request__mach_make_memory_entry_t;
  Request_vm_map_page_query: __Request__vm_map_page_query_t;
  Request_mach_vm_region_info: __Request__mach_vm_region_info_t;
  Request_vm_mapped_pages_info: __Request__vm_mapped_pages_info_t;
  Request_vm_region_recurse: __Request__vm_region_recurse_t;
  Request_vm_region_recurse_64: __Request__vm_region_recurse_64_t;
  Request_mach_vm_region_info_64: __Request__mach_vm_region_info_64_t;
  Request_vm_region_64: __Request__vm_region_64_t;
  Request_mach_make_memory_entry_64: __Request__mach_make_memory_entry_64_t;
  Request_vm_map_64: __Request__vm_map_64_t;
  Request_vm_purgable_control: __Request__vm_purgable_control_t;
  Request_vm_map_exec_lockdown: __Request__vm_map_exec_lockdown_t;
  Request_vm_remap_new: __Request__vm_remap_new_t;
}

type unnamed_2365868755499595526Descriptor = 
  | { reserved: unknown /* const array */ }
  | { work_interval_port: number }
  | { service_port_info: interop.PointerConvertible }
  | { service_port_name: number };

declare class unnamed_2365868755499595526 {
  constructor(init?: unnamed_2365868755499595526Descriptor);
  reserved: unknown /* const array */;
  work_interval_port: number;
  service_port_info: interop.Pointer;
  service_port_name: number;
}

type __ReplyUnion__task_subsystemDescriptor = 
  | { Reply_task_create: __Reply__task_create_t }
  | { Reply_task_terminate: __Reply__task_terminate_t }
  | { Reply_task_threads: __Reply__task_threads_t }
  | { Reply_mach_ports_register: __Reply__mach_ports_register_t }
  | { Reply_mach_ports_lookup: __Reply__mach_ports_lookup_t }
  | { Reply_task_info: __Reply__task_info_t }
  | { Reply_task_set_info: __Reply__task_set_info_t }
  | { Reply_task_suspend: __Reply__task_suspend_t }
  | { Reply_task_resume: __Reply__task_resume_t }
  | { Reply_task_get_special_port: __Reply__task_get_special_port_t }
  | { Reply_task_set_special_port: __Reply__task_set_special_port_t }
  | { Reply_thread_create: __Reply__thread_create_t }
  | { Reply_thread_create_running: __Reply__thread_create_running_t }
  | { Reply_task_set_exception_ports: __Reply__task_set_exception_ports_t }
  | { Reply_task_get_exception_ports: __Reply__task_get_exception_ports_t }
  | { Reply_task_swap_exception_ports: __Reply__task_swap_exception_ports_t }
  | { Reply_lock_set_create: __Reply__lock_set_create_t }
  | { Reply_lock_set_destroy: __Reply__lock_set_destroy_t }
  | { Reply_semaphore_create: __Reply__semaphore_create_t }
  | { Reply_semaphore_destroy: __Reply__semaphore_destroy_t }
  | { Reply_task_policy_set: __Reply__task_policy_set_t }
  | { Reply_task_policy_get: __Reply__task_policy_get_t }
  | { Reply_task_sample: __Reply__task_sample_t }
  | { Reply_task_policy: __Reply__task_policy_t }
  | { Reply_task_set_emulation: __Reply__task_set_emulation_t }
  | { Reply_task_get_emulation_vector: __Reply__task_get_emulation_vector_t }
  | { Reply_task_set_emulation_vector: __Reply__task_set_emulation_vector_t }
  | { Reply_task_set_ras_pc: __Reply__task_set_ras_pc_t }
  | { Reply_task_zone_info: __Reply__task_zone_info_t }
  | { Reply_task_assign: __Reply__task_assign_t }
  | { Reply_task_assign_default: __Reply__task_assign_default_t }
  | { Reply_task_get_assignment: __Reply__task_get_assignment_t }
  | { Reply_task_set_policy: __Reply__task_set_policy_t }
  | { Reply_task_get_state: __Reply__task_get_state_t }
  | { Reply_task_set_state: __Reply__task_set_state_t }
  | { Reply_task_set_phys_footprint_limit: __Reply__task_set_phys_footprint_limit_t }
  | { Reply_task_suspend2: __Reply__task_suspend2_t }
  | { Reply_task_resume2: __Reply__task_resume2_t }
  | { Reply_task_purgable_info: __Reply__task_purgable_info_t }
  | { Reply_task_get_mach_voucher: __Reply__task_get_mach_voucher_t }
  | { Reply_task_set_mach_voucher: __Reply__task_set_mach_voucher_t }
  | { Reply_task_swap_mach_voucher: __Reply__task_swap_mach_voucher_t }
  | { Reply_task_generate_corpse: __Reply__task_generate_corpse_t }
  | { Reply_task_map_corpse_info: __Reply__task_map_corpse_info_t }
  | { Reply_task_register_dyld_image_infos: __Reply__task_register_dyld_image_infos_t }
  | { Reply_task_unregister_dyld_image_infos: __Reply__task_unregister_dyld_image_infos_t }
  | { Reply_task_get_dyld_image_infos: __Reply__task_get_dyld_image_infos_t }
  | { Reply_task_register_dyld_shared_cache_image_info: __Reply__task_register_dyld_shared_cache_image_info_t }
  | { Reply_task_register_dyld_set_dyld_state: __Reply__task_register_dyld_set_dyld_state_t }
  | { Reply_task_register_dyld_get_process_state: __Reply__task_register_dyld_get_process_state_t }
  | { Reply_task_map_corpse_info_64: __Reply__task_map_corpse_info_64_t }
  | { Reply_task_inspect: __Reply__task_inspect_t }
  | { Reply_task_get_exc_guard_behavior: __Reply__task_get_exc_guard_behavior_t }
  | { Reply_task_set_exc_guard_behavior: __Reply__task_set_exc_guard_behavior_t }
  | { Reply_task_dyld_process_info_notify_register: __Reply__task_dyld_process_info_notify_register_t }
  | { Reply_task_create_identity_token: __Reply__task_create_identity_token_t }
  | { Reply_task_identity_token_get_task_port: __Reply__task_identity_token_get_task_port_t }
  | { Reply_task_dyld_process_info_notify_deregister: __Reply__task_dyld_process_info_notify_deregister_t }
  | { Reply_task_get_exception_ports_info: __Reply__task_get_exception_ports_info_t }
  | { Reply_task_test_sync_upcall: __Reply__task_test_sync_upcall_t }
  | { Reply_task_set_corpse_forking_behavior: __Reply__task_set_corpse_forking_behavior_t }
  | { Reply_task_test_async_upcall_propagation: __Reply__task_test_async_upcall_propagation_t }
  | { Reply_task_map_kcdata_object_64: __Reply__task_map_kcdata_object_64_t }
  | { Reply_task_register_hardened_exception_handler: __Reply__task_register_hardened_exception_handler_t };

declare class __ReplyUnion__task_subsystem {
  constructor(init?: __ReplyUnion__task_subsystemDescriptor);
  Reply_task_create: __Reply__task_create_t;
  Reply_task_terminate: __Reply__task_terminate_t;
  Reply_task_threads: __Reply__task_threads_t;
  Reply_mach_ports_register: __Reply__mach_ports_register_t;
  Reply_mach_ports_lookup: __Reply__mach_ports_lookup_t;
  Reply_task_info: __Reply__task_info_t;
  Reply_task_set_info: __Reply__task_set_info_t;
  Reply_task_suspend: __Reply__task_suspend_t;
  Reply_task_resume: __Reply__task_resume_t;
  Reply_task_get_special_port: __Reply__task_get_special_port_t;
  Reply_task_set_special_port: __Reply__task_set_special_port_t;
  Reply_thread_create: __Reply__thread_create_t;
  Reply_thread_create_running: __Reply__thread_create_running_t;
  Reply_task_set_exception_ports: __Reply__task_set_exception_ports_t;
  Reply_task_get_exception_ports: __Reply__task_get_exception_ports_t;
  Reply_task_swap_exception_ports: __Reply__task_swap_exception_ports_t;
  Reply_lock_set_create: __Reply__lock_set_create_t;
  Reply_lock_set_destroy: __Reply__lock_set_destroy_t;
  Reply_semaphore_create: __Reply__semaphore_create_t;
  Reply_semaphore_destroy: __Reply__semaphore_destroy_t;
  Reply_task_policy_set: __Reply__task_policy_set_t;
  Reply_task_policy_get: __Reply__task_policy_get_t;
  Reply_task_sample: __Reply__task_sample_t;
  Reply_task_policy: __Reply__task_policy_t;
  Reply_task_set_emulation: __Reply__task_set_emulation_t;
  Reply_task_get_emulation_vector: __Reply__task_get_emulation_vector_t;
  Reply_task_set_emulation_vector: __Reply__task_set_emulation_vector_t;
  Reply_task_set_ras_pc: __Reply__task_set_ras_pc_t;
  Reply_task_zone_info: __Reply__task_zone_info_t;
  Reply_task_assign: __Reply__task_assign_t;
  Reply_task_assign_default: __Reply__task_assign_default_t;
  Reply_task_get_assignment: __Reply__task_get_assignment_t;
  Reply_task_set_policy: __Reply__task_set_policy_t;
  Reply_task_get_state: __Reply__task_get_state_t;
  Reply_task_set_state: __Reply__task_set_state_t;
  Reply_task_set_phys_footprint_limit: __Reply__task_set_phys_footprint_limit_t;
  Reply_task_suspend2: __Reply__task_suspend2_t;
  Reply_task_resume2: __Reply__task_resume2_t;
  Reply_task_purgable_info: __Reply__task_purgable_info_t;
  Reply_task_get_mach_voucher: __Reply__task_get_mach_voucher_t;
  Reply_task_set_mach_voucher: __Reply__task_set_mach_voucher_t;
  Reply_task_swap_mach_voucher: __Reply__task_swap_mach_voucher_t;
  Reply_task_generate_corpse: __Reply__task_generate_corpse_t;
  Reply_task_map_corpse_info: __Reply__task_map_corpse_info_t;
  Reply_task_register_dyld_image_infos: __Reply__task_register_dyld_image_infos_t;
  Reply_task_unregister_dyld_image_infos: __Reply__task_unregister_dyld_image_infos_t;
  Reply_task_get_dyld_image_infos: __Reply__task_get_dyld_image_infos_t;
  Reply_task_register_dyld_shared_cache_image_info: __Reply__task_register_dyld_shared_cache_image_info_t;
  Reply_task_register_dyld_set_dyld_state: __Reply__task_register_dyld_set_dyld_state_t;
  Reply_task_register_dyld_get_process_state: __Reply__task_register_dyld_get_process_state_t;
  Reply_task_map_corpse_info_64: __Reply__task_map_corpse_info_64_t;
  Reply_task_inspect: __Reply__task_inspect_t;
  Reply_task_get_exc_guard_behavior: __Reply__task_get_exc_guard_behavior_t;
  Reply_task_set_exc_guard_behavior: __Reply__task_set_exc_guard_behavior_t;
  Reply_task_dyld_process_info_notify_register: __Reply__task_dyld_process_info_notify_register_t;
  Reply_task_create_identity_token: __Reply__task_create_identity_token_t;
  Reply_task_identity_token_get_task_port: __Reply__task_identity_token_get_task_port_t;
  Reply_task_dyld_process_info_notify_deregister: __Reply__task_dyld_process_info_notify_deregister_t;
  Reply_task_get_exception_ports_info: __Reply__task_get_exception_ports_info_t;
  Reply_task_test_sync_upcall: __Reply__task_test_sync_upcall_t;
  Reply_task_set_corpse_forking_behavior: __Reply__task_set_corpse_forking_behavior_t;
  Reply_task_test_async_upcall_propagation: __Reply__task_test_async_upcall_propagation_t;
  Reply_task_map_kcdata_object_64: __Reply__task_map_kcdata_object_64_t;
  Reply_task_register_hardened_exception_handler: __Reply__task_register_hardened_exception_handler_t;
}

type unnamed_13130266384759406209Descriptor = 
  | { sadb_x_sa2_reserved1: number };

declare class unnamed_13130266384759406209 {
  constructor(init?: unnamed_13130266384759406209Descriptor);
  sadb_x_sa2_reserved1: number;
}

type unnamed_9415269503247588239Descriptor = 
  | { n_strx: number };

declare class unnamed_9415269503247588239 {
  constructor(init?: unnamed_9415269503247588239Descriptor);
  n_strx: number;
}

type __RequestUnion__clock_subsystemDescriptor = 
  | { Request_clock_get_time: __Request__clock_get_time_t }
  | { Request_clock_get_attributes: __Request__clock_get_attributes_t }
  | { Request_clock_alarm: __Request__clock_alarm_t };

declare class __RequestUnion__clock_subsystem {
  constructor(init?: __RequestUnion__clock_subsystemDescriptor);
  Request_clock_get_time: __Request__clock_get_time_t;
  Request_clock_get_attributes: __Request__clock_get_attributes_t;
  Request_clock_alarm: __Request__clock_alarm_t;
}

type unnamed_17575650201846781845Descriptor = 
  | { bflu_list: interop.PointerConvertible }
  | { bflu_pad: number };

declare class unnamed_17575650201846781845 {
  constructor(init?: unnamed_17575650201846781845Descriptor);
  bflu_list: interop.Pointer;
  bflu_pad: number;
}

type __RequestUnion__task_subsystemDescriptor = 
  | { Request_task_create: __Request__task_create_t }
  | { Request_task_terminate: __Request__task_terminate_t }
  | { Request_task_threads: __Request__task_threads_t }
  | { Request_mach_ports_register: __Request__mach_ports_register_t }
  | { Request_mach_ports_lookup: __Request__mach_ports_lookup_t }
  | { Request_task_info: __Request__task_info_t }
  | { Request_task_set_info: __Request__task_set_info_t }
  | { Request_task_suspend: __Request__task_suspend_t }
  | { Request_task_resume: __Request__task_resume_t }
  | { Request_task_get_special_port: __Request__task_get_special_port_t }
  | { Request_task_set_special_port: __Request__task_set_special_port_t }
  | { Request_thread_create: __Request__thread_create_t }
  | { Request_thread_create_running: __Request__thread_create_running_t }
  | { Request_task_set_exception_ports: __Request__task_set_exception_ports_t }
  | { Request_task_get_exception_ports: __Request__task_get_exception_ports_t }
  | { Request_task_swap_exception_ports: __Request__task_swap_exception_ports_t }
  | { Request_lock_set_create: __Request__lock_set_create_t }
  | { Request_lock_set_destroy: __Request__lock_set_destroy_t }
  | { Request_semaphore_create: __Request__semaphore_create_t }
  | { Request_semaphore_destroy: __Request__semaphore_destroy_t }
  | { Request_task_policy_set: __Request__task_policy_set_t }
  | { Request_task_policy_get: __Request__task_policy_get_t }
  | { Request_task_sample: __Request__task_sample_t }
  | { Request_task_policy: __Request__task_policy_t }
  | { Request_task_set_emulation: __Request__task_set_emulation_t }
  | { Request_task_get_emulation_vector: __Request__task_get_emulation_vector_t }
  | { Request_task_set_emulation_vector: __Request__task_set_emulation_vector_t }
  | { Request_task_set_ras_pc: __Request__task_set_ras_pc_t }
  | { Request_task_zone_info: __Request__task_zone_info_t }
  | { Request_task_assign: __Request__task_assign_t }
  | { Request_task_assign_default: __Request__task_assign_default_t }
  | { Request_task_get_assignment: __Request__task_get_assignment_t }
  | { Request_task_set_policy: __Request__task_set_policy_t }
  | { Request_task_get_state: __Request__task_get_state_t }
  | { Request_task_set_state: __Request__task_set_state_t }
  | { Request_task_set_phys_footprint_limit: __Request__task_set_phys_footprint_limit_t }
  | { Request_task_suspend2: __Request__task_suspend2_t }
  | { Request_task_resume2: __Request__task_resume2_t }
  | { Request_task_purgable_info: __Request__task_purgable_info_t }
  | { Request_task_get_mach_voucher: __Request__task_get_mach_voucher_t }
  | { Request_task_set_mach_voucher: __Request__task_set_mach_voucher_t }
  | { Request_task_swap_mach_voucher: __Request__task_swap_mach_voucher_t }
  | { Request_task_generate_corpse: __Request__task_generate_corpse_t }
  | { Request_task_map_corpse_info: __Request__task_map_corpse_info_t }
  | { Request_task_register_dyld_image_infos: __Request__task_register_dyld_image_infos_t }
  | { Request_task_unregister_dyld_image_infos: __Request__task_unregister_dyld_image_infos_t }
  | { Request_task_get_dyld_image_infos: __Request__task_get_dyld_image_infos_t }
  | { Request_task_register_dyld_shared_cache_image_info: __Request__task_register_dyld_shared_cache_image_info_t }
  | { Request_task_register_dyld_set_dyld_state: __Request__task_register_dyld_set_dyld_state_t }
  | { Request_task_register_dyld_get_process_state: __Request__task_register_dyld_get_process_state_t }
  | { Request_task_map_corpse_info_64: __Request__task_map_corpse_info_64_t }
  | { Request_task_inspect: __Request__task_inspect_t }
  | { Request_task_get_exc_guard_behavior: __Request__task_get_exc_guard_behavior_t }
  | { Request_task_set_exc_guard_behavior: __Request__task_set_exc_guard_behavior_t }
  | { Request_task_dyld_process_info_notify_register: __Request__task_dyld_process_info_notify_register_t }
  | { Request_task_create_identity_token: __Request__task_create_identity_token_t }
  | { Request_task_identity_token_get_task_port: __Request__task_identity_token_get_task_port_t }
  | { Request_task_dyld_process_info_notify_deregister: __Request__task_dyld_process_info_notify_deregister_t }
  | { Request_task_get_exception_ports_info: __Request__task_get_exception_ports_info_t }
  | { Request_task_test_sync_upcall: __Request__task_test_sync_upcall_t }
  | { Request_task_set_corpse_forking_behavior: __Request__task_set_corpse_forking_behavior_t }
  | { Request_task_test_async_upcall_propagation: __Request__task_test_async_upcall_propagation_t }
  | { Request_task_map_kcdata_object_64: __Request__task_map_kcdata_object_64_t }
  | { Request_task_register_hardened_exception_handler: __Request__task_register_hardened_exception_handler_t };

declare class __RequestUnion__task_subsystem {
  constructor(init?: __RequestUnion__task_subsystemDescriptor);
  Request_task_create: __Request__task_create_t;
  Request_task_terminate: __Request__task_terminate_t;
  Request_task_threads: __Request__task_threads_t;
  Request_mach_ports_register: __Request__mach_ports_register_t;
  Request_mach_ports_lookup: __Request__mach_ports_lookup_t;
  Request_task_info: __Request__task_info_t;
  Request_task_set_info: __Request__task_set_info_t;
  Request_task_suspend: __Request__task_suspend_t;
  Request_task_resume: __Request__task_resume_t;
  Request_task_get_special_port: __Request__task_get_special_port_t;
  Request_task_set_special_port: __Request__task_set_special_port_t;
  Request_thread_create: __Request__thread_create_t;
  Request_thread_create_running: __Request__thread_create_running_t;
  Request_task_set_exception_ports: __Request__task_set_exception_ports_t;
  Request_task_get_exception_ports: __Request__task_get_exception_ports_t;
  Request_task_swap_exception_ports: __Request__task_swap_exception_ports_t;
  Request_lock_set_create: __Request__lock_set_create_t;
  Request_lock_set_destroy: __Request__lock_set_destroy_t;
  Request_semaphore_create: __Request__semaphore_create_t;
  Request_semaphore_destroy: __Request__semaphore_destroy_t;
  Request_task_policy_set: __Request__task_policy_set_t;
  Request_task_policy_get: __Request__task_policy_get_t;
  Request_task_sample: __Request__task_sample_t;
  Request_task_policy: __Request__task_policy_t;
  Request_task_set_emulation: __Request__task_set_emulation_t;
  Request_task_get_emulation_vector: __Request__task_get_emulation_vector_t;
  Request_task_set_emulation_vector: __Request__task_set_emulation_vector_t;
  Request_task_set_ras_pc: __Request__task_set_ras_pc_t;
  Request_task_zone_info: __Request__task_zone_info_t;
  Request_task_assign: __Request__task_assign_t;
  Request_task_assign_default: __Request__task_assign_default_t;
  Request_task_get_assignment: __Request__task_get_assignment_t;
  Request_task_set_policy: __Request__task_set_policy_t;
  Request_task_get_state: __Request__task_get_state_t;
  Request_task_set_state: __Request__task_set_state_t;
  Request_task_set_phys_footprint_limit: __Request__task_set_phys_footprint_limit_t;
  Request_task_suspend2: __Request__task_suspend2_t;
  Request_task_resume2: __Request__task_resume2_t;
  Request_task_purgable_info: __Request__task_purgable_info_t;
  Request_task_get_mach_voucher: __Request__task_get_mach_voucher_t;
  Request_task_set_mach_voucher: __Request__task_set_mach_voucher_t;
  Request_task_swap_mach_voucher: __Request__task_swap_mach_voucher_t;
  Request_task_generate_corpse: __Request__task_generate_corpse_t;
  Request_task_map_corpse_info: __Request__task_map_corpse_info_t;
  Request_task_register_dyld_image_infos: __Request__task_register_dyld_image_infos_t;
  Request_task_unregister_dyld_image_infos: __Request__task_unregister_dyld_image_infos_t;
  Request_task_get_dyld_image_infos: __Request__task_get_dyld_image_infos_t;
  Request_task_register_dyld_shared_cache_image_info: __Request__task_register_dyld_shared_cache_image_info_t;
  Request_task_register_dyld_set_dyld_state: __Request__task_register_dyld_set_dyld_state_t;
  Request_task_register_dyld_get_process_state: __Request__task_register_dyld_get_process_state_t;
  Request_task_map_corpse_info_64: __Request__task_map_corpse_info_64_t;
  Request_task_inspect: __Request__task_inspect_t;
  Request_task_get_exc_guard_behavior: __Request__task_get_exc_guard_behavior_t;
  Request_task_set_exc_guard_behavior: __Request__task_set_exc_guard_behavior_t;
  Request_task_dyld_process_info_notify_register: __Request__task_dyld_process_info_notify_register_t;
  Request_task_create_identity_token: __Request__task_create_identity_token_t;
  Request_task_identity_token_get_task_port: __Request__task_identity_token_get_task_port_t;
  Request_task_dyld_process_info_notify_deregister: __Request__task_dyld_process_info_notify_deregister_t;
  Request_task_get_exception_ports_info: __Request__task_get_exception_ports_info_t;
  Request_task_test_sync_upcall: __Request__task_test_sync_upcall_t;
  Request_task_set_corpse_forking_behavior: __Request__task_set_corpse_forking_behavior_t;
  Request_task_test_async_upcall_propagation: __Request__task_test_async_upcall_propagation_t;
  Request_task_map_kcdata_object_64: __Request__task_map_kcdata_object_64_t;
  Request_task_register_hardened_exception_handler: __Request__task_register_hardened_exception_handler_t;
}

type at_block_features_tDescriptor = 
  | { bits: number };

declare class at_block_features_t {
  constructor(init?: at_block_features_tDescriptor);
  bits: number;
}

type __sigaction_uDescriptor = 
  | { __sa_handler: (p1: number) => void | null }
  | { __sa_sigaction: (p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => void | null };

declare class __sigaction_u {
  constructor(init?: __sigaction_uDescriptor);
  __sa_handler: (p1: number) => void | null;
  __sa_sigaction: (p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => void | null;
}

declare function signal(p1: number, p2: (p1: number) => void): (p1: number) => void;

declare function getpriority(p1: number, p2: number): number;

declare function getiopolicy_np(p1: number, p2: number): number;

declare function getrlimit(p1: number, p2: interop.PointerConvertible): number;

declare function getrusage(p1: number, p2: interop.PointerConvertible): number;

declare function setpriority(p1: number, p2: number, p3: number): number;

declare function setiopolicy_np(p1: number, p2: number, p3: number): number;

declare function setrlimit(p1: number, p2: interop.PointerConvertible): number;

declare function wait(p1: interop.PointerConvertible): number;

declare function waitpid(p1: number, p2: interop.PointerConvertible, p3: number): number;

declare function waitid(p1: interop.Enum<typeof idtype_t>, p2: number, p3: interop.PointerConvertible, p4: number): number;

declare function wait3(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible): number;

declare function wait4(p1: number, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible): number;

declare function alloca(__size: number): interop.Pointer;

declare function malloc_type_malloc(size: number, type_id: number): interop.Pointer;

declare function malloc_type_calloc(count: number, size: number, type_id: number): interop.Pointer;

declare function malloc_type_free(ptr: interop.PointerConvertible, type_id: number): void;

declare function malloc_type_realloc(ptr: interop.PointerConvertible, size: number, type_id: number): interop.Pointer;

declare function malloc_type_valloc(size: number, type_id: number): interop.Pointer;

declare function malloc_type_aligned_alloc(alignment: number, size: number, type_id: number): interop.Pointer;

declare function malloc_type_posix_memalign(memptr: interop.PointerConvertible, alignment: number, size: number, type_id: number): number;

declare function malloc_type_zone_malloc(zone: interop.PointerConvertible, size: number, type_id: number): interop.Pointer;

declare function malloc_type_zone_calloc(zone: interop.PointerConvertible, count: number, size: number, type_id: number): interop.Pointer;

declare function malloc_type_zone_free(zone: interop.PointerConvertible, ptr: interop.PointerConvertible, type_id: number): void;

declare function malloc_type_zone_realloc(zone: interop.PointerConvertible, ptr: interop.PointerConvertible, size: number, type_id: number): interop.Pointer;

declare function malloc_type_zone_valloc(zone: interop.PointerConvertible, size: number, type_id: number): interop.Pointer;

declare function malloc_type_zone_memalign(zone: interop.PointerConvertible, alignment: number, size: number, type_id: number): interop.Pointer;

declare function malloc(__size: number): interop.Pointer;

declare function calloc(__count: number, __size: number): interop.Pointer;

declare function free(p1: interop.PointerConvertible): void;

declare function realloc(__ptr: interop.PointerConvertible, __size: number): interop.Pointer;

declare function reallocf(__ptr: interop.PointerConvertible, __size: number): interop.Pointer;

declare function valloc(__size: number): interop.Pointer;

declare function aligned_alloc(__alignment: number, __size: number): interop.Pointer;

declare function posix_memalign(__memptr: interop.PointerConvertible, __alignment: number, __size: number): number;

declare function abort(): void;

declare function abs(p1: number): number;

declare function atexit(p1: () => void): number;

declare function at_quick_exit(p1: () => void): number;

declare function atof(p1: string): number;

declare function atoi(p1: string): number;

declare function atol(p1: string): number;

declare function atoll(p1: string): number;

declare function bsearch(__key: interop.PointerConvertible, __base: interop.PointerConvertible, __nel: number, __width: number, __compar: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): interop.Pointer;

declare function div(p1: number, p2: number): div_t;

declare function exit(p1: number): void;

declare function getenv(p1: string): string;

declare function labs(p1: number): number;

declare function ldiv(p1: number, p2: number): ldiv_t;

declare function llabs(p1: number): number;

declare function lldiv(p1: number, p2: number): lldiv_t;

declare function mblen(__s: string, __n: number): number;

declare function mbstowcs(p1: interop.PointerConvertible, p2: string, __n: number): number;

declare function mbtowc(p1: interop.PointerConvertible, p2: string, __n: number): number;

declare function qsort(__base: interop.PointerConvertible, __nel: number, __width: number, __compar: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): void;

declare function quick_exit(p1: number): void;

declare function rand(): number;

declare function srand(p1: number): void;

declare function strtod(p1: string, p2: interop.PointerConvertible): number;

declare function strtof(p1: string, p2: interop.PointerConvertible): number;

declare function strtol(__str: string, __endptr: interop.PointerConvertible, __base: number): number;

declare function strtold(p1: string, p2: interop.PointerConvertible): number;

declare function strtoll(__str: string, __endptr: interop.PointerConvertible, __base: number): number;

declare function strtoul(__str: string, __endptr: interop.PointerConvertible, __base: number): number;

declare function strtoull(__str: string, __endptr: interop.PointerConvertible, __base: number): number;

declare function system(p1: string): number;

declare function wcstombs(p1: string, p2: interop.PointerConvertible, __n: number): number;

declare function wctomb(p1: string, p2: number): number;

declare function _Exit(p1: number): void;

declare function a64l(p1: string): number;

declare function drand48(): number;

declare function ecvt(p1: number, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible): string;

declare function erand48(p1: unknown /* const array */): number;

declare function fcvt(p1: number, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible): string;

declare function gcvt(p1: number, p2: number, p3: string): string;

declare function getsubopt(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function grantpt(p1: number): number;

declare function initstate(p1: number, p2: string, __size: number): string;

declare function jrand48(p1: unknown /* const array */): number;

declare function l64a(p1: number): string;

declare function lcong48(p1: unknown /* const array */): void;

declare function lrand48(): number;

declare function mktemp(p1: string): string;

declare function mkstemp(p1: string): number;

declare function mrand48(): number;

declare function nrand48(p1: unknown /* const array */): number;

declare function posix_openpt(p1: number): number;

declare function ptsname(p1: number): string;

declare function ptsname_r(fildes: number, buffer: string, buflen: number): number;

declare function putenv(p1: string): number;

declare function random(): number;

declare function rand_r(p1: interop.PointerConvertible): number;

declare function realpath(p1: string, p2: string): string;

declare function seed48(p1: unknown /* const array */): interop.Pointer;

declare function setenv(__name: string, __value: string, __overwrite: number): number;

declare function setkey(p1: string): void;

declare function setstate(p1: string): string;

declare function srand48(p1: number): void;

declare function srandom(p1: number): void;

declare function unlockpt(p1: number): number;

declare function unsetenv(p1: string): number;

declare function arc4random(): number;

declare function arc4random_addrandom(p1: interop.PointerConvertible, __datlen: number): void;

declare function arc4random_buf(__buf: interop.PointerConvertible, __nbytes: number): void;

declare function arc4random_stir(): void;

declare function arc4random_uniform(__upper_bound: number): number;

declare function atexit_b(p1: () => void): number;

declare function bsearch_b(__key: interop.PointerConvertible, __base: interop.PointerConvertible, __nel: number, __width: number, __compar: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): interop.Pointer;

declare function cgetcap(p1: string, p2: string, p3: number): string;

declare function cgetclose(): number;

declare function cgetent(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string): number;

declare function cgetfirst(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function cgetmatch(p1: string, p2: string): number;

declare function cgetnext(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function cgetnum(p1: string, p2: string, p3: interop.PointerConvertible): number;

declare function cgetset(p1: string): number;

declare function cgetstr(p1: string, p2: string, p3: interop.PointerConvertible): number;

declare function cgetustr(p1: string, p2: string, p3: interop.PointerConvertible): number;

declare function daemon(p1: number, p2: number): number;

declare function devname(p1: number, p2: number): string;

declare function devname_r(p1: number, p2: number, buf: string, len: number): string;

declare function getbsize(p1: interop.PointerConvertible, p2: interop.PointerConvertible): string;

declare function getloadavg(p1: interop.Pointer, __nelem: number): number;

declare function getprogname(): string;

declare function setprogname(p1: string): void;

declare function heapsort(__base: interop.PointerConvertible, __nel: number, __width: number, __compar: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): number;

declare function heapsort_b(__base: interop.PointerConvertible, __nel: number, __width: number, __compar: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): number;

declare function mergesort(__base: interop.PointerConvertible, __nel: number, __width: number, __compar: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): number;

declare function mergesort_b(__base: interop.PointerConvertible, __nel: number, __width: number, __compar: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): number;

declare function psort(__base: interop.PointerConvertible, __nel: number, __width: number, __compar: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): void;

declare function psort_b(__base: interop.PointerConvertible, __nel: number, __width: number, __compar: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): void;

declare function psort_r(__base: interop.PointerConvertible, __nel: number, __width: number, p4: interop.PointerConvertible, __compar: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number): void;

declare function qsort_b(__base: interop.PointerConvertible, __nel: number, __width: number, __compar: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): void;

declare function qsort_r(__base: interop.PointerConvertible, __nel: number, __width: number, p4: interop.PointerConvertible, __compar: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number): void;

declare function radixsort(__base: interop.PointerConvertible, __nel: number, __table: interop.PointerConvertible, __endbyte: number): number;

declare function rpmatch(p1: string): number;

declare function sradixsort(__base: interop.PointerConvertible, __nel: number, __table: interop.PointerConvertible, __endbyte: number): number;

declare function sranddev(): void;

declare function srandomdev(): void;

declare function strtonum(__numstr: string, __minval: number, __maxval: number, __errstrp: interop.PointerConvertible): number;

declare function strtoq(__str: string, __endptr: interop.PointerConvertible, __base: number): number;

declare function strtouq(__str: string, __endptr: interop.PointerConvertible, __base: number): number;

declare function __darwin_check_fd_set_overflow(p1: number, p2: interop.PointerConvertible, p3: number): number;

declare function sel_getName(sel: string): string;

declare function sel_registerName(str: string): string;

declare function object_getClassName(obj: interop.Object): string;

declare function object_getIndexedIvars(obj: interop.Object): interop.Pointer;

declare function sel_isMapped(sel: string): boolean;

declare function sel_getUid(str: string): string;

declare function os_retain(object: interop.PointerConvertible): interop.Pointer;

declare function os_release(object: interop.PointerConvertible): void;

declare function getattrlistbulk(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: number, p5: number): number;

declare function getattrlistat(p1: number, p2: string, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: number, p6: number): number;

declare function setattrlistat(p1: number, p2: string, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: number, p6: number): number;

declare function freadlink(p1: number, p2: string, p3: number): number;

declare function faccessat(p1: number, p2: string, p3: number, p4: number): number;

declare function fchownat(p1: number, p2: string, p3: number, p4: number, p5: number): number;

declare function linkat(p1: number, p2: string, p3: number, p4: string, p5: number): number;

declare function readlinkat(p1: number, p2: string, p3: string, p4: number): number;

declare function symlinkat(p1: string, p2: number, p3: string): number;

declare function unlinkat(p1: number, p2: string, p3: number): number;

declare function _exit(p1: number): void;

declare function access(p1: string, p2: number): number;

declare function alarm(p1: number): number;

declare function chdir(p1: string): number;

declare function chown(p1: string, p2: number, p3: number): number;

declare function close(p1: number): number;

declare function dup(p1: number): number;

declare function dup2(p1: number, p2: number): number;

declare function execl(__path: string, __arg0: string): number;

declare function execle(__path: string, __arg0: string): number;

declare function execlp(__file: string, __arg0: string): number;

declare function execv(__path: string, __argv: interop.PointerConvertible): number;

declare function execve(__file: string, __argv: interop.PointerConvertible, __envp: interop.PointerConvertible): number;

declare function execvp(__file: string, __argv: interop.PointerConvertible): number;

declare function fork(): number;

declare function fpathconf(p1: number, p2: number): number;

declare function getcwd(p1: string, __size: number): string;

declare function getegid(): number;

declare function geteuid(): number;

declare function getgid(): number;

declare function getgroups(__gidsetsize: number, p2: interop.Pointer): number;

declare function getlogin(): string;

declare function getpgrp(): number;

declare function getpid(): number;

declare function getppid(): number;

declare function getuid(): number;

declare function isatty(p1: number): number;

declare function link(p1: string, p2: string): number;

declare function lseek(p1: number, p2: number, p3: number): number;

declare function pathconf(p1: string, p2: number): number;

declare function pause(): number;

declare function pipe(p1: unknown /* const array */): number;

declare function read(p1: number, p2: interop.PointerConvertible, __nbyte: number): number;

declare function rmdir(p1: string): number;

declare function setgid(p1: number): number;

declare function setpgid(p1: number, p2: number): number;

declare function setsid(): number;

declare function setuid(p1: number): number;

declare function sleep(p1: number): number;

declare function sysconf(p1: number): number;

declare function tcgetpgrp(p1: number): number;

declare function tcsetpgrp(p1: number, p2: number): number;

declare function ttyname(p1: number): string;

declare function ttyname_r(p1: number, p2: string, __len: number): number;

declare function unlink(p1: string): number;

declare function write(__fd: number, __buf: interop.PointerConvertible, __nbyte: number): number;

declare function confstr(p1: number, p2: string, __len: number): number;

declare function getopt(__argc: number, p2: interop.Pointer, p3: string): number;

declare function ctermid(p1: string): string;

declare function brk(p1: interop.PointerConvertible): interop.Pointer;

declare function chroot(p1: string): number;

declare function crypt(p1: string, p2: string): string;

declare function encrypt(p1: string, p2: number): void;

declare function fchdir(p1: number): number;

declare function gethostid(): number;

declare function getpgid(p1: number): number;

declare function getsid(p1: number): number;

declare function getdtablesize(): number;

declare function getpagesize(): number;

declare function getpass(p1: string): string;

declare function getwd(p1: string): string;

declare function lchown(p1: string, p2: number, p3: number): number;

declare function lockf(p1: number, p2: number, p3: number): number;

declare function nice(p1: number): number;

declare function pread(__fd: number, __buf: interop.PointerConvertible, __nbyte: number, __offset: number): number;

declare function pwrite(__fd: number, __buf: interop.PointerConvertible, __nbyte: number, __offset: number): number;

declare function sbrk(p1: number): interop.Pointer;

declare function setpgrp(): number;

declare function setregid(p1: number, p2: number): number;

declare function setreuid(p1: number, p2: number): number;

declare function swab(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __nbytes: number): void;

declare function sync(): void;

declare function truncate(p1: string, p2: number): number;

declare function ualarm(p1: number, p2: number): number;

declare function usleep(p1: number): number;

declare function vfork(): number;

declare function fsync(p1: number): number;

declare function ftruncate(p1: number, p2: number): number;

declare function getlogin_r(p1: string, __namelen: number): number;

declare function fchown(p1: number, p2: number, p3: number): number;

declare function gethostname(p1: string, __namelen: number): number;

declare function readlink(p1: string, p2: string, __bufsize: number): number;

declare function setegid(p1: number): number;

declare function seteuid(p1: number): number;

declare function symlink(p1: string, p2: string): number;

declare function pselect(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible): number;

declare function select(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function _Exit(p1: number): void;

declare function accessx_np(p1: interop.PointerConvertible, __sz: number, p3: interop.PointerConvertible, p4: number): number;

declare function acct(p1: string): number;

declare function add_profil(p1: string, __bufsiz: number, p3: number, p4: number): number;

declare function endusershell(): void;

declare function execvP(__file: string, __searchpath: string, __argv: interop.PointerConvertible): number;

declare function fflagstostr(p1: number): string;

declare function getdomainname(p1: string, __namelen: number): number;

declare function getgrouplist(p1: string, p2: number, p3: interop.PointerConvertible, __ngroups: interop.PointerConvertible): number;

declare function gethostuuid(p1: unknown /* const array */, p2: interop.PointerConvertible): number;

declare function getmode(p1: interop.PointerConvertible, p2: number): number;

declare function getpeereid(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function getsgroups_np(p1: interop.PointerConvertible, p2: unknown /* const array */): number;

declare function getusershell(): string;

declare function getwgroups_np(p1: interop.PointerConvertible, p2: unknown /* const array */): number;

declare function initgroups(p1: string, p2: number): number;

declare function issetugid(): number;

declare function mkdtemp(p1: string): string;

declare function mknod(p1: string, p2: number, p3: number): number;

declare function mkpath_np(path: string, omode: number): number;

declare function mkpathat_np(dfd: number, path: string, omode: number): number;

declare function mkstemp(p1: string): number;

declare function mkstemps(p1: string, p2: number): number;

declare function mktemp(p1: string): string;

declare function mkostemp(path: string, oflags: number): number;

declare function mkostemps(path: string, slen: number, oflags: number): number;

declare function mkdtempat_np(dfd: number, path: string): string;

declare function mkstempsat_np(dfd: number, path: string, slen: number): number;

declare function mkostempsat_np(dfd: number, path: string, slen: number, oflags: number): number;

declare function nfssvc(p1: number, p2: interop.PointerConvertible): number;

declare function profil(p1: string, __bufsiz: number, p3: number, p4: number): number;

declare function pthread_setugid_np(p1: number, p2: number): number;

declare function pthread_getugid_np(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function reboot(p1: number): number;

declare function revoke(p1: string): number;

declare function rcmd(p1: interop.PointerConvertible, p2: number, p3: string, p4: string, p5: string, p6: interop.PointerConvertible): number;

declare function rcmd_af(p1: interop.PointerConvertible, p2: number, p3: string, p4: string, p5: string, p6: interop.PointerConvertible, p7: number): number;

declare function rresvport(p1: interop.PointerConvertible): number;

declare function rresvport_af(p1: interop.PointerConvertible, p2: number): number;

declare function iruserok(p1: number, p2: number, p3: string, p4: string): number;

declare function iruserok_sa(p1: interop.PointerConvertible, p2: number, p3: number, p4: string, p5: string): number;

declare function ruserok(p1: string, p2: number, p3: string, p4: string): number;

declare function setdomainname(p1: string, __namelen: number): number;

declare function setgroups(p1: number, p2: interop.PointerConvertible): number;

declare function sethostid(p1: number): void;

declare function sethostname(p1: string, __namelen: number): number;

declare function setkey(p1: string): void;

declare function setlogin(p1: string): number;

declare function setmode(p1: string): interop.Pointer;

declare function setrgid(p1: number): number;

declare function setruid(p1: number): number;

declare function setsgroups_np(p1: number, p2: unknown /* const array */): number;

declare function setusershell(): void;

declare function setwgroups_np(p1: number, p2: unknown /* const array */): number;

declare function strtofflags(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function swapon(p1: string): number;

declare function ttyslot(): number;

declare function undelete(p1: string): number;

declare function unwhiteout(p1: string): number;

declare function valloc(__size: number): interop.Pointer;

declare function syscall(p1: number): number;

declare function getsubopt(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function fgetattrlist(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible, __attrBufSize: number, p5: number): number;

declare function fsetattrlist(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible, __attrBufSize: number, p5: number): number;

declare function getattrlist(p1: string, p2: interop.PointerConvertible, p3: interop.PointerConvertible, __attrBufSize: number, p5: number): number;

declare function setattrlist(p1: string, p2: interop.PointerConvertible, p3: interop.PointerConvertible, __attrBufSize: number, p5: number): number;

declare function exchangedata(p1: string, p2: string, p3: number): number;

declare function getdirentriesattr(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible, __attrBufSize: number, p5: interop.PointerConvertible, p6: interop.PointerConvertible, p7: interop.PointerConvertible, p8: number): number;

declare function searchfs(p1: string, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: number, p5: number, p6: interop.PointerConvertible): number;

declare function fsctl(p1: string, p2: number, p3: interop.PointerConvertible, p4: number): number;

declare function ffsctl(p1: number, p2: number, p3: interop.PointerConvertible, p4: number): number;

declare function fsync_volume_np(p1: number, p2: number): number;

declare function sync_volume_np(p1: string, p2: number): number;

declare function at_texel_format_to_MTLPixelFormat(p1: interop.Enum<typeof at_texel_format_t>): number;

declare function at_block_format_to_MTLPixelFormat(blockFormat: interop.Enum<typeof at_block_format_t>): number;

declare function at_block_format_convert_to_MTLPixelFormat(blockFormat: interop.Enum<typeof at_block_format_t>, flags: interop.Enum<typeof at_flags_t>): number;

declare function at_block_get_features(blockType: interop.Enum<typeof at_block_format_t>, src: interop.PointerConvertible, validSize: at_size_t, size: number, outSize: interop.PointerConvertible, flags: interop.Enum<typeof at_flags_t>): at_block_features_t;

declare function at_encoder_create(texelType: interop.Enum<typeof at_texel_format_t>, texelAlphaType: interop.Enum<typeof at_alpha_t>, blockType: interop.Enum<typeof at_block_format_t>, blockAlphaType: interop.Enum<typeof at_alpha_t>, backgroundColor: interop.PointerConvertible): NSObject;

declare function at_encoder_compress_texels(encoder: NSObject, src: interop.PointerConvertible, dest: interop.PointerConvertible, errorThreshold: number, flags: interop.Enum<typeof at_flags_t>): number;

declare function at_encoder_decompress_texels(encoder: NSObject, src: interop.PointerConvertible, dest: interop.PointerConvertible, flags: interop.Enum<typeof at_flags_t>): interop.Enum<typeof at_error_t>;

declare function at_encoder_get_block_counts(encoder: NSObject, imageSize: at_size_t): at_size_t;

declare function at_encoder_get_block_dimensions(encoder: NSObject): at_size_t;

declare function at_encoder_get_block_size(encoder: NSObject): number;

declare function at_encoder_get_texel_format(encoder: NSObject): interop.Enum<typeof at_texel_format_t>;

declare function at_encoder_get_block_format(encoder: NSObject): interop.Enum<typeof at_block_format_t>;

declare function at_encoder_get_texel_alpha(encoder: NSObject): interop.Enum<typeof at_alpha_t>;

declare function at_encoder_get_block_alpha(encoder: NSObject): interop.Enum<typeof at_alpha_t>;

declare function at_encoder_is_compression_monolithic(encoder: NSObject, flags: interop.Enum<typeof at_flags_t>): boolean;

declare function at_encoder_is_decompression_monolithic(encoder: NSObject, flags: interop.Enum<typeof at_flags_t>): boolean;

declare function at_encoder_get_block_address(encoder: NSObject, texelPosition: at_size_t, imageSize: at_size_t, blockInfo: interop.PointerConvertible): interop.Pointer;

declare function at_encoder_get_version(): number;

declare function _asl_lib_log(client: interop.PointerConvertible, eval: number, msg: interop.PointerConvertible, format: string): number;

declare function _asl_evaluate_send(client: interop.PointerConvertible, msg: interop.PointerConvertible, level: number): number;

declare function asl_open(ident: string, facility: string, opts: number): interop.Pointer;

declare function asl_open_path(path: string, opts: number): interop.Pointer;

declare function asl_close(obj: interop.PointerConvertible): void;

declare function asl_add_log_file(client: interop.PointerConvertible, descriptor: number): number;

declare function asl_add_output_file(client: interop.PointerConvertible, fd: number, mfmt: string, tfmt: string, filter: number, text_encoding: number): number;

declare function asl_set_output_file_filter(client: interop.PointerConvertible, fd: number, filter: number): number;

declare function asl_remove_log_file(client: interop.PointerConvertible, descriptor: number): number;

declare function asl_set_filter(client: interop.PointerConvertible, f: number): number;

declare function asl_key(msg: interop.PointerConvertible, n: number): string;

declare function asl_fetch_key_val_op(msg: interop.PointerConvertible, n: number, key: interop.PointerConvertible, val: interop.PointerConvertible, op: interop.PointerConvertible): number;

declare function asl_new(type: number): interop.Pointer;

declare function asl_set(obj: interop.PointerConvertible, key: string, value: string): number;

declare function asl_unset(obj: interop.PointerConvertible, key: string): number;

declare function asl_get(msg: interop.PointerConvertible, key: string): string;

declare function asl_log(client: interop.PointerConvertible, msg: interop.PointerConvertible, level: number, format: string): number;

declare function asl_log_message(level: number, format: string): number;

declare function asl_vlog(obj: interop.PointerConvertible, msg: interop.PointerConvertible, level: number, format: string, ap: string): number;

declare function asl_send(obj: interop.PointerConvertible, msg: interop.PointerConvertible): number;

declare function asl_free(obj: interop.PointerConvertible): void;

declare function asl_retain(obj: interop.PointerConvertible): interop.Pointer;

declare function asl_release(obj: interop.PointerConvertible): void;

declare function asl_get_type(obj: interop.PointerConvertible): number;

declare function asl_set_query(msg: interop.PointerConvertible, key: string, value: string, op: number): number;

declare function asl_search(obj: interop.PointerConvertible, query: interop.PointerConvertible): interop.Pointer;

declare function aslresponse_next(obj: interop.PointerConvertible): interop.Pointer;

declare function aslresponse_free(obj: interop.PointerConvertible): void;

declare function asl_append(obj: interop.PointerConvertible, obj_to_add: interop.PointerConvertible): void;

declare function asl_prepend(obj: interop.PointerConvertible, obj_to_add: interop.PointerConvertible): void;

declare function asl_count(obj: interop.PointerConvertible): number;

declare function asl_get_index(list: interop.PointerConvertible, index: number): interop.Pointer;

declare function asl_remove_index(list: interop.PointerConvertible, index: number): void;

declare function asl_create_auxiliary_file(msg: interop.PointerConvertible, title: string, uti: string, out_descriptor: interop.PointerConvertible): number;

declare function asl_close_auxiliary_file(descriptor: number): number;

declare function asl_log_auxiliary_location(msg: interop.PointerConvertible, title: string, uti: string, url: string): number;

declare function asl_open_from_file(descriptor: number, ident: string, facility: string): interop.Pointer;

declare function asl_log_descriptor(asl: interop.PointerConvertible, msg: interop.PointerConvertible, level: number, descriptor: number, fd_type: number): number;

declare function asl_format(msg: interop.PointerConvertible, msg_fmt: string, time_fmt: string, text_encoding: number): string;

declare function asl_encode_buffer(buf: string, len: number): string;

declare function asl_decode_buffer(in: string, buf: interop.PointerConvertible, len: interop.PointerConvertible): number;

declare function asl_next(obj: interop.PointerConvertible): interop.Pointer;

declare function asl_prev(obj: interop.PointerConvertible): interop.Pointer;

declare function asl_reset_iteration(obj: interop.PointerConvertible, position: number): void;

declare function asl_match(data: interop.PointerConvertible, querylist: interop.PointerConvertible, last: interop.PointerConvertible, start: number, count: number, duration: number, direction: number): interop.Pointer;

declare function compression_encode_scratch_buffer_size(algorithm: interop.Enum<typeof compression_algorithm>): number;

declare function compression_encode_buffer(dst_buffer: interop.PointerConvertible, dst_size: number, src_buffer: interop.PointerConvertible, src_size: number, scratch_buffer: interop.PointerConvertible, algorithm: interop.Enum<typeof compression_algorithm>): number;

declare function compression_decode_scratch_buffer_size(algorithm: interop.Enum<typeof compression_algorithm>): number;

declare function compression_decode_buffer(dst_buffer: interop.PointerConvertible, dst_size: number, src_buffer: interop.PointerConvertible, src_size: number, scratch_buffer: interop.PointerConvertible, algorithm: interop.Enum<typeof compression_algorithm>): number;

declare function compression_stream_init(stream: interop.PointerConvertible, operation: interop.Enum<typeof compression_stream_operation>, algorithm: interop.Enum<typeof compression_algorithm>): interop.Enum<typeof compression_status>;

declare function compression_stream_process(stream: interop.PointerConvertible, flags: number): interop.Enum<typeof compression_status>;

declare function compression_stream_destroy(stream: interop.PointerConvertible): interop.Enum<typeof compression_status>;

declare function cupsFileClose(fp: interop.PointerConvertible): number;

declare function cupsFileCompression(fp: interop.PointerConvertible): number;

declare function cupsFileEOF(fp: interop.PointerConvertible): number;

declare function cupsFileFind(filename: string, path: string, executable: number, buffer: string, bufsize: number): string;

declare function cupsFileFlush(fp: interop.PointerConvertible): number;

declare function cupsFileGetChar(fp: interop.PointerConvertible): number;

declare function cupsFileGetConf(fp: interop.PointerConvertible, buf: string, buflen: number, value: interop.PointerConvertible, linenum: interop.PointerConvertible): string;

declare function cupsFileGetLine(fp: interop.PointerConvertible, buf: string, buflen: number): number;

declare function cupsFileGets(fp: interop.PointerConvertible, buf: string, buflen: number): string;

declare function cupsFileLock(fp: interop.PointerConvertible, block: number): number;

declare function cupsFileNumber(fp: interop.PointerConvertible): number;

declare function cupsFileOpen(filename: string, mode: string): interop.Pointer;

declare function cupsFileOpenFd(fd: number, mode: string): interop.Pointer;

declare function cupsFilePeekChar(fp: interop.PointerConvertible): number;

declare function cupsFilePrintf(fp: interop.PointerConvertible, format: string): number;

declare function cupsFilePutChar(fp: interop.PointerConvertible, c: number): number;

declare function cupsFilePutConf(fp: interop.PointerConvertible, directive: string, value: string): number;

declare function cupsFilePuts(fp: interop.PointerConvertible, s: string): number;

declare function cupsFileRead(fp: interop.PointerConvertible, buf: string, bytes: number): number;

declare function cupsFileRewind(fp: interop.PointerConvertible): number;

declare function cupsFileSeek(fp: interop.PointerConvertible, pos: number): number;

declare function cupsFileStderr(): interop.Pointer;

declare function cupsFileStdin(): interop.Pointer;

declare function cupsFileStdout(): interop.Pointer;

declare function cupsFileTell(fp: interop.PointerConvertible): number;

declare function cupsFileUnlock(fp: interop.PointerConvertible): number;

declare function cupsFileWrite(fp: interop.PointerConvertible, buf: string, bytes: number): number;

declare function cupsArrayAdd(a: interop.PointerConvertible, e: interop.PointerConvertible): number;

declare function cupsArrayClear(a: interop.PointerConvertible): void;

declare function cupsArrayCount(a: interop.PointerConvertible): number;

declare function cupsArrayCurrent(a: interop.PointerConvertible): interop.Pointer;

declare function cupsArrayDelete(a: interop.PointerConvertible): void;

declare function cupsArrayDup(a: interop.PointerConvertible): interop.Pointer;

declare function cupsArrayFind(a: interop.PointerConvertible, e: interop.PointerConvertible): interop.Pointer;

declare function cupsArrayFirst(a: interop.PointerConvertible): interop.Pointer;

declare function cupsArrayGetIndex(a: interop.PointerConvertible): number;

declare function cupsArrayGetInsert(a: interop.PointerConvertible): number;

declare function cupsArrayIndex(a: interop.PointerConvertible, n: number): interop.Pointer;

declare function cupsArrayInsert(a: interop.PointerConvertible, e: interop.PointerConvertible): number;

declare function cupsArrayLast(a: interop.PointerConvertible): interop.Pointer;

declare function cupsArrayNew(f: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number, d: interop.PointerConvertible): interop.Pointer;

declare function cupsArrayNew2(f: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number, d: interop.PointerConvertible, h: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number, hsize: number): interop.Pointer;

declare function cupsArrayNew3(f: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number, d: interop.PointerConvertible, h: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number, hsize: number, cf: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => interop.Pointer, ff: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void): interop.Pointer;

declare function cupsArrayNext(a: interop.PointerConvertible): interop.Pointer;

declare function cupsArrayPrev(a: interop.PointerConvertible): interop.Pointer;

declare function cupsArrayRemove(a: interop.PointerConvertible, e: interop.PointerConvertible): number;

declare function cupsArrayRestore(a: interop.PointerConvertible): interop.Pointer;

declare function cupsArraySave(a: interop.PointerConvertible): number;

declare function cupsArrayUserData(a: interop.PointerConvertible): interop.Pointer;

declare function memchr(__s: interop.PointerConvertible, __c: number, __n: number): interop.Pointer;

declare function memcmp(__s1: interop.PointerConvertible, __s2: interop.PointerConvertible, __n: number): number;

declare function memcpy(__dst: interop.PointerConvertible, __src: interop.PointerConvertible, __n: number): interop.Pointer;

declare function memmove(__dst: interop.PointerConvertible, __src: interop.PointerConvertible, __len: number): interop.Pointer;

declare function memset(__b: interop.PointerConvertible, __c: number, __len: number): interop.Pointer;

declare function strcat(__s1: string, __s2: string): string;

declare function strchr(__s: string, __c: number): string;

declare function strcmp(__s1: string, __s2: string): number;

declare function strcoll(__s1: string, __s2: string): number;

declare function strcpy(__dst: string, __src: string): string;

declare function strcspn(__s: string, __charset: string): number;

declare function strerror(__errnum: number): string;

declare function strlen(__s: string): number;

declare function strncat(__s1: string, __s2: string, __n: number): string;

declare function strncmp(__s1: string, __s2: string, __n: number): number;

declare function strncpy(__dst: string, __src: string, __n: number): string;

declare function strpbrk(__s: string, __charset: string): string;

declare function strrchr(__s: string, __c: number): string;

declare function strspn(__s: string, __charset: string): number;

declare function strstr(__big: string, __little: string): string;

declare function strtok(__str: string, __sep: string): string;

declare function strxfrm(__s1: string, __s2: string, __n: number): number;

declare function strtok_r(__str: string, __sep: string, __lasts: interop.PointerConvertible): string;

declare function strerror_r(__errnum: number, __strerrbuf: string, __buflen: number): number;

declare function strdup(__s1: string): string;

declare function memccpy(__dst: interop.PointerConvertible, __src: interop.PointerConvertible, __c: number, __n: number): interop.Pointer;

declare function stpcpy(__dst: string, __src: string): string;

declare function stpncpy(__dst: string, __src: string, __n: number): string;

declare function strndup(__s1: string, __n: number): string;

declare function strnlen(__s1: string, __n: number): number;

declare function strsignal(__sig: number): string;

declare function memset_s(__s: interop.PointerConvertible, __smax: number, __c: number, __n: number): number;

declare function memmem(__big: interop.PointerConvertible, __big_len: number, __little: interop.PointerConvertible, __little_len: number): interop.Pointer;

declare function memset_pattern4(__b: interop.PointerConvertible, __pattern4: interop.PointerConvertible, __len: number): void;

declare function memset_pattern8(__b: interop.PointerConvertible, __pattern8: interop.PointerConvertible, __len: number): void;

declare function memset_pattern16(__b: interop.PointerConvertible, __pattern16: interop.PointerConvertible, __len: number): void;

declare function strcasestr(__big: string, __little: string): string;

declare function strchrnul(__s: string, __c: number): string;

declare function strnstr(__big: string, __little: string, __len: number): string;

declare function strlcat(__dst: string, __source: string, __size: number): number;

declare function strlcpy(__dst: string, __source: string, __size: number): number;

declare function strmode(__mode: number, __bp: string): void;

declare function strsep(__stringp: interop.PointerConvertible, __delim: string): string;

declare function swab(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __len: number): void;

declare function timingsafe_bcmp(__b1: interop.PointerConvertible, __b2: interop.PointerConvertible, __len: number): number;

declare function strsignal_r(__sig: number, __strsignalbuf: string, __buflen: number): number;

declare function bcmp(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __n: number): number;

declare function bcopy(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __n: number): void;

declare function bzero(p1: interop.PointerConvertible, __n: number): void;

declare function index(p1: string, p2: number): string;

declare function rindex(p1: string, p2: number): string;

declare function ffs(p1: number): number;

declare function strcasecmp(p1: string, p2: string): number;

declare function strncasecmp(p1: string, p2: string, p3: number): number;

declare function ffsl(p1: number): number;

declare function ffsll(p1: number): number;

declare function fls(p1: number): number;

declare function flsl(p1: number): number;

declare function flsll(p1: number): number;

declare function asctime(p1: interop.PointerConvertible): string;

declare function clock(): number;

declare function ctime(p1: interop.PointerConvertible): string;

declare function difftime(p1: number, p2: number): number;

declare function getdate(p1: string): interop.Pointer;

declare function gmtime(p1: interop.PointerConvertible): interop.Pointer;

declare function localtime(p1: interop.PointerConvertible): interop.Pointer;

declare function mktime(p1: interop.PointerConvertible): number;

declare function strftime(p1: string, __maxsize: number, p3: string, p4: interop.PointerConvertible): number;

declare function strptime(p1: string, p2: string, p3: interop.PointerConvertible): string;

declare function time(p1: interop.PointerConvertible): number;

declare function tzset(): void;

declare function asctime_r(p1: interop.PointerConvertible, p2: string): string;

declare function ctime_r(p1: interop.PointerConvertible, p2: string): string;

declare function gmtime_r(p1: interop.PointerConvertible, p2: interop.PointerConvertible): interop.Pointer;

declare function localtime_r(p1: interop.PointerConvertible, p2: interop.PointerConvertible): interop.Pointer;

declare function posix2time(p1: number): number;

declare function tzsetwall(): void;

declare function time2posix(p1: number): number;

declare function timelocal(p1: interop.PointerConvertible): number;

declare function timegm(p1: interop.PointerConvertible): number;

declare function nanosleep(__rqtp: interop.PointerConvertible, __rmtp: interop.PointerConvertible): number;

declare function clock_getres(__clock_id: interop.Enum<typeof clockid_t>, __res: interop.PointerConvertible): number;

declare function clock_gettime(__clock_id: interop.Enum<typeof clockid_t>, __tp: interop.PointerConvertible): number;

declare function clock_gettime_nsec_np(__clock_id: interop.Enum<typeof clockid_t>): number;

declare function clock_settime(__clock_id: interop.Enum<typeof clockid_t>, __tp: interop.PointerConvertible): number;

declare function timespec_get(ts: interop.PointerConvertible, base: number): number;

declare function adjtime(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function futimes(p1: number, p2: interop.PointerConvertible): number;

declare function lutimes(p1: string, p2: interop.PointerConvertible): number;

declare function settimeofday(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function getitimer(p1: number, p2: interop.PointerConvertible): number;

declare function gettimeofday(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function setitimer(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function utimes(p1: string, p2: interop.PointerConvertible): number;

declare function accept(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function bind(p1: number, p2: interop.PointerConvertible, p3: number): number;

declare function connect(p1: number, p2: interop.PointerConvertible, p3: number): number;

declare function getpeername(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function getsockname(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function getsockopt(p1: number, p2: number, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function listen(p1: number, p2: number): number;

declare function recv(p1: number, p2: interop.PointerConvertible, p3: number, p4: number): number;

declare function recvfrom(p1: number, p2: interop.PointerConvertible, p3: number, p4: number, p5: interop.PointerConvertible, p6: interop.PointerConvertible): number;

declare function recvmsg(p1: number, p2: interop.PointerConvertible, p3: number): number;

declare function send(p1: number, p2: interop.PointerConvertible, p3: number, p4: number): number;

declare function sendmsg(p1: number, p2: interop.PointerConvertible, p3: number): number;

declare function sendto(p1: number, p2: interop.PointerConvertible, p3: number, p4: number, p5: interop.PointerConvertible, p6: number): number;

declare function setsockopt(p1: number, p2: number, p3: number, p4: interop.PointerConvertible, p5: number): number;

declare function shutdown(p1: number, p2: number): number;

declare function sockatmark(p1: number): number;

declare function socket(p1: number, p2: number, p3: number): number;

declare function socketpair(p1: number, p2: number, p3: number, p4: interop.PointerConvertible): number;

declare function sendfile(p1: number, p2: number, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: number): number;

declare function pfctlinput(p1: number, p2: interop.PointerConvertible): void;

declare function connectx(p1: number, p2: interop.PointerConvertible, p3: number, p4: number, p5: interop.PointerConvertible, p6: number, p7: interop.PointerConvertible, p8: interop.PointerConvertible): number;

declare function disconnectx(p1: number, p2: number, p3: number): number;

declare function setipv4sourcefilter(p1: number, p2: in_addr, p3: in_addr, p4: number, p5: number, p6: interop.PointerConvertible): number;

declare function getipv4sourcefilter(p1: number, p2: in_addr, p3: in_addr, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible): number;

declare function setsourcefilter(p1: number, p2: number, p3: interop.PointerConvertible, p4: number, p5: number, p6: number, p7: interop.PointerConvertible): number;

declare function getsourcefilter(p1: number, p2: number, p3: interop.PointerConvertible, p4: number, p5: interop.PointerConvertible, p6: interop.PointerConvertible, p7: interop.PointerConvertible): number;

declare function inet6_option_space(p1: number): number;

declare function inet6_option_init(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function inet6_option_append(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number): number;

declare function inet6_option_alloc(p1: interop.PointerConvertible, p2: number, p3: number, p4: number): interop.Pointer;

declare function inet6_option_next(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function inet6_option_find(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function inet6_rthdr_space(p1: number, p2: number): number;

declare function inet6_rthdr_init(p1: interop.PointerConvertible, p2: number): interop.Pointer;

declare function inet6_rthdr_add(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function inet6_rthdr_lasthop(p1: interop.PointerConvertible, p2: number): number;

declare function inet6_rthdr_segments(p1: interop.PointerConvertible): number;

declare function inet6_rthdr_getaddr(p1: interop.PointerConvertible, p2: number): interop.Pointer;

declare function inet6_rthdr_getflags(p1: interop.PointerConvertible, p2: number): number;

declare function inet6_opt_init(p1: interop.PointerConvertible, p2: number): number;

declare function inet6_opt_append(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number, p6: number, p7: interop.PointerConvertible): number;

declare function inet6_opt_finish(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function inet6_opt_set_val(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: number): number;

declare function inet6_opt_next(p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible): number;

declare function inet6_opt_find(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: interop.PointerConvertible, p6: interop.PointerConvertible): number;

declare function inet6_opt_get_val(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: number): number;

declare function inet6_rth_space(p1: number, p2: number): number;

declare function inet6_rth_init(p1: interop.PointerConvertible, p2: number, p3: number, p4: number): interop.Pointer;

declare function inet6_rth_add(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function inet6_rth_reverse(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function inet6_rth_segments(p1: interop.PointerConvertible): number;

declare function inet6_rth_getaddr(p1: interop.PointerConvertible, p2: number): interop.Pointer;

declare function bindresvport(p1: number, p2: interop.PointerConvertible): number;

declare function bindresvport_sa(p1: number, p2: interop.PointerConvertible): number;

declare function endhostent(): void;

declare function endnetent(): void;

declare function endprotoent(): void;

declare function endservent(): void;

declare function freeaddrinfo(p1: interop.PointerConvertible): void;

declare function gai_strerror(p1: number): string;

declare function getaddrinfo(p1: string, p2: string, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function gethostbyaddr(p1: interop.PointerConvertible, p2: number, p3: number): interop.Pointer;

declare function gethostbyname(p1: string): interop.Pointer;

declare function gethostent(): interop.Pointer;

declare function getnameinfo(p1: interop.PointerConvertible, p2: number, p3: string, p4: number, p5: string, p6: number, p7: number): number;

declare function getnetbyaddr(p1: number, p2: number): interop.Pointer;

declare function getnetbyname(p1: string): interop.Pointer;

declare function getnetent(): interop.Pointer;

declare function getprotobyname(p1: string): interop.Pointer;

declare function getprotobynumber(p1: number): interop.Pointer;

declare function getprotoent(): interop.Pointer;

declare function getservbyname(p1: string, p2: string): interop.Pointer;

declare function getservbyport(p1: number, p2: string): interop.Pointer;

declare function getservent(): interop.Pointer;

declare function sethostent(p1: number): void;

declare function setnetent(p1: number): void;

declare function setprotoent(p1: number): void;

declare function setservent(p1: number): void;

declare function freehostent(p1: interop.PointerConvertible): void;

declare function gethostbyname2(p1: string, p2: number): interop.Pointer;

declare function getipnodebyaddr(p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible): interop.Pointer;

declare function getipnodebyname(p1: string, p2: number, p3: number, p4: interop.PointerConvertible): interop.Pointer;

declare function getrpcbyname(name: string): interop.Pointer;

declare function getrpcbynumber(number: number): interop.Pointer;

declare function getrpcent(): interop.Pointer;

declare function setrpcent(stayopen: number): void;

declare function endrpcent(): void;

declare function herror(p1: string): void;

declare function hstrerror(p1: number): string;

declare function innetgr(p1: string, p2: string, p3: string, p4: string): number;

declare function getnetgrent(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function endnetgrent(): void;

declare function setnetgrent(p1: string): void;

declare function inet_addr(p1: string): number;

declare function inet_ntoa(p1: in_addr): string;

declare function inet_ntop(p1: number, p2: interop.PointerConvertible, p3: string, __size: number): string;

declare function inet_pton(p1: number, p2: string, p3: interop.PointerConvertible): number;

declare function ascii2addr(p1: number, p2: string, p3: interop.PointerConvertible): number;

declare function addr2ascii(p1: number, p2: interop.PointerConvertible, __size: number, p4: string): string;

declare function inet_aton(p1: string, p2: interop.PointerConvertible): number;

declare function inet_lnaof(p1: in_addr): number;

declare function inet_makeaddr(p1: number, p2: number): in_addr;

declare function inet_netof(p1: in_addr): number;

declare function inet_network(p1: string): number;

declare function inet_net_ntop(p1: number, p2: interop.PointerConvertible, p3: number, p4: string, __size: number): string;

declare function inet_net_pton(p1: number, p2: string, p3: interop.PointerConvertible, __size: number): number;

declare function inet_neta(p1: number, p2: string, __size: number): string;

declare function inet_nsap_addr(p1: string, p2: interop.PointerConvertible, __maxlen: number): number;

declare function inet_nsap_ntoa(__binlen: number, p2: interop.PointerConvertible, p3: string): string;

declare function httpBlocking(http: interop.PointerConvertible, b: number): void;

declare function httpCheck(http: interop.PointerConvertible): number;

declare function httpClearFields(http: interop.PointerConvertible): void;

declare function httpClose(http: interop.PointerConvertible): void;

declare function httpConnect(host: string, port: number): interop.Pointer;

declare function httpConnectEncrypt(host: string, port: number, encryption: interop.Enum<typeof http_encryption_e>): interop.Pointer;

declare function httpDelete(http: interop.PointerConvertible, uri: string): number;

declare function httpEncryption(http: interop.PointerConvertible, e: interop.Enum<typeof http_encryption_e>): number;

declare function httpError(http: interop.PointerConvertible): number;

declare function httpFlush(http: interop.PointerConvertible): void;

declare function httpGet(http: interop.PointerConvertible, uri: string): number;

declare function httpGets(line: string, length: number, http: interop.PointerConvertible): string;

declare function httpGetDateString(t: number): string;

declare function httpGetDateTime(s: string): number;

declare function httpGetField(http: interop.PointerConvertible, field: interop.Enum<typeof http_field_e>): string;

declare function httpGetHostByName(name: string): interop.Pointer;

declare function httpGetSubField(http: interop.PointerConvertible, field: interop.Enum<typeof http_field_e>, name: string, value: string): string;

declare function httpHead(http: interop.PointerConvertible, uri: string): number;

declare function httpInitialize(): void;

declare function httpOptions(http: interop.PointerConvertible, uri: string): number;

declare function httpPost(http: interop.PointerConvertible, uri: string): number;

declare function httpPrintf(http: interop.PointerConvertible, format: string): number;

declare function httpPut(http: interop.PointerConvertible, uri: string): number;

declare function httpRead(http: interop.PointerConvertible, buffer: string, length: number): number;

declare function httpReconnect(http: interop.PointerConvertible): number;

declare function httpSeparate(uri: string, method: string, username: string, host: string, port: interop.PointerConvertible, resource: string): void;

declare function httpSetField(http: interop.PointerConvertible, field: interop.Enum<typeof http_field_e>, value: string): void;

declare function httpStatus(status: interop.Enum<typeof http_status_e>): string;

declare function httpTrace(http: interop.PointerConvertible, uri: string): number;

declare function httpUpdate(http: interop.PointerConvertible): interop.Enum<typeof http_status_e>;

declare function httpWrite(http: interop.PointerConvertible, buffer: string, length: number): number;

declare function httpEncode64(out: string, in: string): string;

declare function httpDecode64(out: string, in: string): string;

declare function httpGetLength(http: interop.PointerConvertible): number;

declare function httpMD5(p1: string, p2: string, p3: string, p4: unknown /* const array */): string;

declare function httpMD5Final(p1: string, p2: string, p3: string, p4: unknown /* const array */): string;

declare function httpMD5String(p1: interop.PointerConvertible, p2: unknown /* const array */): string;

declare function httpClearCookie(http: interop.PointerConvertible): void;

declare function httpGetCookie(http: interop.PointerConvertible): string;

declare function httpSetCookie(http: interop.PointerConvertible, cookie: string): void;

declare function httpWait(http: interop.PointerConvertible, msec: number): number;

declare function httpDecode64_2(out: string, outlen: interop.PointerConvertible, in: string): string;

declare function httpEncode64_2(out: string, outlen: number, in: string, inlen: number): string;

declare function httpSeparate2(uri: string, method: string, methodlen: number, username: string, usernamelen: number, host: string, hostlen: number, port: interop.PointerConvertible, resource: string, resourcelen: number): void;

declare function httpAddrAny(addr: interop.PointerConvertible): number;

declare function httpAddrConnect(addrlist: interop.PointerConvertible, sock: interop.PointerConvertible): interop.Pointer;

declare function httpAddrEqual(addr1: interop.PointerConvertible, addr2: interop.PointerConvertible): number;

declare function httpAddrFreeList(addrlist: interop.PointerConvertible): void;

declare function httpAddrGetList(hostname: string, family: number, service: string): interop.Pointer;

declare function httpAddrLength(addr: interop.PointerConvertible): number;

declare function httpAddrLocalhost(addr: interop.PointerConvertible): number;

declare function httpAddrLookup(addr: interop.PointerConvertible, name: string, namelen: number): string;

declare function httpAddrString(addr: interop.PointerConvertible, s: string, slen: number): string;

declare function httpAssembleURI(encoding: interop.Enum<typeof http_uri_coding_e>, uri: string, urilen: number, scheme: string, username: string, host: string, port: number, resource: string): interop.Enum<typeof http_uri_status_e>;

declare function httpAssembleURIf(encoding: interop.Enum<typeof http_uri_coding_e>, uri: string, urilen: number, scheme: string, username: string, host: string, port: number, resourcef: string): interop.Enum<typeof http_uri_status_e>;

declare function httpFlushWrite(http: interop.PointerConvertible): number;

declare function httpGetBlocking(http: interop.PointerConvertible): number;

declare function httpGetDateString2(t: number, s: string, slen: number): string;

declare function httpGetFd(http: interop.PointerConvertible): number;

declare function httpGetHostname(http: interop.PointerConvertible, s: string, slen: number): string;

declare function httpGetLength2(http: interop.PointerConvertible): number;

declare function httpGetStatus(http: interop.PointerConvertible): interop.Enum<typeof http_status_e>;

declare function httpGetSubField2(http: interop.PointerConvertible, field: interop.Enum<typeof http_field_e>, name: string, value: string, valuelen: number): string;

declare function httpRead2(http: interop.PointerConvertible, buffer: string, length: number): number;

declare function httpSeparateURI(decoding: interop.Enum<typeof http_uri_coding_e>, uri: string, scheme: string, schemelen: number, username: string, usernamelen: number, host: string, hostlen: number, port: interop.PointerConvertible, resource: string, resourcelen: number): interop.Enum<typeof http_uri_status_e>;

declare function httpSetExpect(http: interop.PointerConvertible, expect: interop.Enum<typeof http_status_e>): void;

declare function httpSetLength(http: interop.PointerConvertible, length: number): void;

declare function httpWrite2(http: interop.PointerConvertible, buffer: string, length: number): number;

declare function httpGetAuthString(http: interop.PointerConvertible): string;

declare function httpSetAuthString(http: interop.PointerConvertible, scheme: string, data: string): void;

declare function httpAddCredential(credentials: interop.PointerConvertible, data: interop.PointerConvertible, datalen: number): number;

declare function httpCopyCredentials(http: interop.PointerConvertible, credentials: interop.PointerConvertible): number;

declare function httpFreeCredentials(certs: interop.PointerConvertible): void;

declare function httpSetCredentials(http: interop.PointerConvertible, certs: interop.PointerConvertible): number;

declare function httpSetTimeout(http: interop.PointerConvertible, timeout: number, cb: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number, user_data: interop.PointerConvertible): void;

declare function httpAddrConnect2(addrlist: interop.PointerConvertible, sock: interop.PointerConvertible, msec: number, cancel: interop.PointerConvertible): interop.Pointer;

declare function httpGetState(http: interop.PointerConvertible): interop.Enum<typeof http_state_e>;

declare function httpGetVersion(http: interop.PointerConvertible): interop.Enum<typeof http_version_e>;

declare function httpReconnect2(http: interop.PointerConvertible, msec: number, cancel: interop.PointerConvertible): number;

declare function httpAcceptConnection(fd: number, blocking: number): interop.Pointer;

declare function httpAddrCopyList(src: interop.PointerConvertible): interop.Pointer;

declare function httpAddrListen(addr: interop.PointerConvertible, port: number): number;

declare function httpAddrPort(addr: interop.PointerConvertible): number;

declare function httpAssembleUUID(server: string, port: number, name: string, number: number, buffer: string, bufsize: number): string;

declare function httpConnect2(host: string, port: number, addrlist: interop.PointerConvertible, family: number, encryption: interop.Enum<typeof http_encryption_e>, blocking: number, msec: number, cancel: interop.PointerConvertible): interop.Pointer;

declare function httpGetContentEncoding(http: interop.PointerConvertible): string;

declare function httpGetExpect(http: interop.PointerConvertible): interop.Enum<typeof http_status_e>;

declare function httpPeek(http: interop.PointerConvertible, buffer: string, length: number): number;

declare function httpReadRequest(http: interop.PointerConvertible, resource: string, resourcelen: number): interop.Enum<typeof http_state_e>;

declare function httpSetDefaultField(http: interop.PointerConvertible, field: interop.Enum<typeof http_field_e>, value: string): void;

declare function httpWriteResponse(http: interop.PointerConvertible, status: interop.Enum<typeof http_status_e>): interop.Enum<typeof http_state_e>;

declare function httpAddrClose(addr: interop.PointerConvertible, fd: number): number;

declare function httpAddrFamily(addr: interop.PointerConvertible): number;

declare function httpCompareCredentials(cred1: interop.PointerConvertible, cred2: interop.PointerConvertible): number;

declare function httpCredentialsAreValidForName(credentials: interop.PointerConvertible, common_name: string): number;

declare function httpCredentialsGetExpiration(credentials: interop.PointerConvertible): number;

declare function httpCredentialsGetTrust(credentials: interop.PointerConvertible, common_name: string): interop.Enum<typeof http_trust_e>;

declare function httpCredentialsString(credentials: interop.PointerConvertible, buffer: string, bufsize: number): number;

declare function httpFieldValue(name: string): interop.Enum<typeof http_field_e>;

declare function httpGetActivity(http: interop.PointerConvertible): number;

declare function httpGetAddress(http: interop.PointerConvertible): interop.Pointer;

declare function httpGetEncryption(http: interop.PointerConvertible): interop.Enum<typeof http_encryption_e>;

declare function httpGetKeepAlive(http: interop.PointerConvertible): interop.Enum<typeof http_keepalive_e>;

declare function httpGetPending(http: interop.PointerConvertible): number;

declare function httpGetReady(http: interop.PointerConvertible): number;

declare function httpGetRemaining(http: interop.PointerConvertible): number;

declare function httpIsChunked(http: interop.PointerConvertible): number;

declare function httpIsEncrypted(http: interop.PointerConvertible): number;

declare function httpLoadCredentials(path: string, credentials: interop.PointerConvertible, common_name: string): number;

declare function httpResolveHostname(http: interop.PointerConvertible, buffer: string, bufsize: number): string;

declare function httpSaveCredentials(path: string, credentials: interop.PointerConvertible, common_name: string): number;

declare function httpDeleteCredentials(common_name: string): number;

declare function httpSetKeepAlive(http: interop.PointerConvertible, keep_alive: interop.Enum<typeof http_keepalive_e>): void;

declare function httpShutdown(http: interop.PointerConvertible): void;

declare function httpStateString(state: interop.Enum<typeof http_state_e>): string;

declare function httpURIStatusString(status: interop.Enum<typeof http_uri_status_e>): string;

declare function ippAddBoolean(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, name: string, value: number): interop.Pointer;

declare function ippAddBooleans(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, name: string, num_values: number, values: string): interop.Pointer;

declare function ippAddDate(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, name: string, value: interop.PointerConvertible): interop.Pointer;

declare function ippAddInteger(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, value_tag: interop.Enum<typeof ipp_tag_e>, name: string, value: number): interop.Pointer;

declare function ippAddIntegers(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, value_tag: interop.Enum<typeof ipp_tag_e>, name: string, num_values: number, values: interop.PointerConvertible): interop.Pointer;

declare function ippAddRange(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, name: string, lower: number, upper: number): interop.Pointer;

declare function ippAddRanges(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, name: string, num_values: number, lower: interop.PointerConvertible, upper: interop.PointerConvertible): interop.Pointer;

declare function ippAddResolution(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, name: string, units: interop.Enum<typeof ipp_res_e>, xres: number, yres: number): interop.Pointer;

declare function ippAddResolutions(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, name: string, num_values: number, units: interop.Enum<typeof ipp_res_e>, xres: interop.PointerConvertible, yres: interop.PointerConvertible): interop.Pointer;

declare function ippAddSeparator(ipp: interop.PointerConvertible): interop.Pointer;

declare function ippAddString(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, value_tag: interop.Enum<typeof ipp_tag_e>, name: string, language: string, value: string): interop.Pointer;

declare function ippAddStrings(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, value_tag: interop.Enum<typeof ipp_tag_e>, name: string, num_values: number, language: string, values: interop.PointerConvertible): interop.Pointer;

declare function ippDateToTime(date: interop.PointerConvertible): number;

declare function ippDelete(ipp: interop.PointerConvertible): void;

declare function ippErrorString(error: interop.Enum<typeof ipp_status_e>): string;

declare function ippFindAttribute(ipp: interop.PointerConvertible, name: string, value_tag: interop.Enum<typeof ipp_tag_e>): interop.Pointer;

declare function ippFindNextAttribute(ipp: interop.PointerConvertible, name: string, value_tag: interop.Enum<typeof ipp_tag_e>): interop.Pointer;

declare function ippLength(ipp: interop.PointerConvertible): number;

declare function ippNew(): interop.Pointer;

declare function ippRead(http: interop.PointerConvertible, ipp: interop.PointerConvertible): interop.Enum<typeof ipp_state_e>;

declare function ippTimeToDate(t: number): interop.Pointer;

declare function ippWrite(http: interop.PointerConvertible, ipp: interop.PointerConvertible): interop.Enum<typeof ipp_state_e>;

declare function ippPort(): number;

declare function ippSetPort(p: number): void;

declare function ippAddCollection(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, name: string, value: interop.PointerConvertible): interop.Pointer;

declare function ippAddCollections(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, name: string, num_values: number, values: interop.PointerConvertible): interop.Pointer;

declare function ippDeleteAttribute(ipp: interop.PointerConvertible, attr: interop.PointerConvertible): void;

declare function ippReadFile(fd: number, ipp: interop.PointerConvertible): interop.Enum<typeof ipp_state_e>;

declare function ippWriteFile(fd: number, ipp: interop.PointerConvertible): interop.Enum<typeof ipp_state_e>;

declare function ippAddOctetString(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, name: string, data: interop.PointerConvertible, datalen: number): interop.Pointer;

declare function ippErrorValue(name: string): interop.Enum<typeof ipp_status_e>;

declare function ippNewRequest(op: interop.Enum<typeof ipp_op_e>): interop.Pointer;

declare function ippOpString(op: interop.Enum<typeof ipp_op_e>): string;

declare function ippOpValue(name: string): interop.Enum<typeof ipp_op_e>;

declare function ippReadIO(src: interop.PointerConvertible, cb: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number) => number, blocking: number, parent: interop.PointerConvertible, ipp: interop.PointerConvertible): interop.Enum<typeof ipp_state_e>;

declare function ippWriteIO(dst: interop.PointerConvertible, cb: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number) => number, blocking: number, parent: interop.PointerConvertible, ipp: interop.PointerConvertible): interop.Enum<typeof ipp_state_e>;

declare function ippTagString(tag: interop.Enum<typeof ipp_tag_e>): string;

declare function ippTagValue(name: string): interop.Enum<typeof ipp_tag_e>;

declare function ippAddOutOfBand(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, value_tag: interop.Enum<typeof ipp_tag_e>, name: string): interop.Pointer;

declare function ippAttributeString(attr: interop.PointerConvertible, buffer: string, bufsize: number): number;

declare function ippCopyAttribute(dst: interop.PointerConvertible, attr: interop.PointerConvertible, quickcopy: number): interop.Pointer;

declare function ippCopyAttributes(dst: interop.PointerConvertible, src: interop.PointerConvertible, quickcopy: number, cb: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number, context: interop.PointerConvertible): number;

declare function ippDeleteValues(ipp: interop.PointerConvertible, attr: interop.PointerConvertible, element: number, count: number): number;

declare function ippEnumString(attrname: string, enumvalue: number): string;

declare function ippEnumValue(attrname: string, enumstring: string): number;

declare function ippFirstAttribute(ipp: interop.PointerConvertible): interop.Pointer;

declare function ippGetBoolean(attr: interop.PointerConvertible, element: number): number;

declare function ippGetCollection(attr: interop.PointerConvertible, element: number): interop.Pointer;

declare function ippGetCount(attr: interop.PointerConvertible): number;

declare function ippGetDate(attr: interop.PointerConvertible, element: number): interop.Pointer;

declare function ippGetGroupTag(attr: interop.PointerConvertible): interop.Enum<typeof ipp_tag_e>;

declare function ippGetInteger(attr: interop.PointerConvertible, element: number): number;

declare function ippGetName(attr: interop.PointerConvertible): string;

declare function ippGetOperation(ipp: interop.PointerConvertible): interop.Enum<typeof ipp_op_e>;

declare function ippGetRange(attr: interop.PointerConvertible, element: number, upper: interop.PointerConvertible): number;

declare function ippGetRequestId(ipp: interop.PointerConvertible): number;

declare function ippGetResolution(attr: interop.PointerConvertible, element: number, yres: interop.PointerConvertible, units: interop.PointerConvertible): number;

declare function ippGetState(ipp: interop.PointerConvertible): interop.Enum<typeof ipp_state_e>;

declare function ippGetStatusCode(ipp: interop.PointerConvertible): interop.Enum<typeof ipp_status_e>;

declare function ippGetString(attr: interop.PointerConvertible, element: number, language: interop.PointerConvertible): string;

declare function ippGetValueTag(attr: interop.PointerConvertible): interop.Enum<typeof ipp_tag_e>;

declare function ippGetVersion(ipp: interop.PointerConvertible, minor: interop.PointerConvertible): number;

declare function ippNextAttribute(ipp: interop.PointerConvertible): interop.Pointer;

declare function ippSetBoolean(ipp: interop.PointerConvertible, attr: interop.PointerConvertible, element: number, boolvalue: number): number;

declare function ippSetCollection(ipp: interop.PointerConvertible, attr: interop.PointerConvertible, element: number, colvalue: interop.PointerConvertible): number;

declare function ippSetDate(ipp: interop.PointerConvertible, attr: interop.PointerConvertible, element: number, datevalue: interop.PointerConvertible): number;

declare function ippSetGroupTag(ipp: interop.PointerConvertible, attr: interop.PointerConvertible, group_tag: interop.Enum<typeof ipp_tag_e>): number;

declare function ippSetInteger(ipp: interop.PointerConvertible, attr: interop.PointerConvertible, element: number, intvalue: number): number;

declare function ippSetName(ipp: interop.PointerConvertible, attr: interop.PointerConvertible, name: string): number;

declare function ippSetOperation(ipp: interop.PointerConvertible, op: interop.Enum<typeof ipp_op_e>): number;

declare function ippSetRange(ipp: interop.PointerConvertible, attr: interop.PointerConvertible, element: number, lowervalue: number, uppervalue: number): number;

declare function ippSetRequestId(ipp: interop.PointerConvertible, request_id: number): number;

declare function ippSetResolution(ipp: interop.PointerConvertible, attr: interop.PointerConvertible, element: number, unitsvalue: interop.Enum<typeof ipp_res_e>, xresvalue: number, yresvalue: number): number;

declare function ippSetState(ipp: interop.PointerConvertible, state: interop.Enum<typeof ipp_state_e>): number;

declare function ippSetStatusCode(ipp: interop.PointerConvertible, status: interop.Enum<typeof ipp_status_e>): number;

declare function ippSetString(ipp: interop.PointerConvertible, attr: interop.PointerConvertible, element: number, strvalue: string): number;

declare function ippSetValueTag(ipp: interop.PointerConvertible, attr: interop.PointerConvertible, value_tag: interop.Enum<typeof ipp_tag_e>): number;

declare function ippSetVersion(ipp: interop.PointerConvertible, major: number, minor: number): number;

declare function ippAddStringf(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, value_tag: interop.Enum<typeof ipp_tag_e>, name: string, language: string, format: string): interop.Pointer;

declare function ippAddStringfv(ipp: interop.PointerConvertible, group: interop.Enum<typeof ipp_tag_e>, value_tag: interop.Enum<typeof ipp_tag_e>, name: string, language: string, format: string, ap: string): interop.Pointer;

declare function ippContainsInteger(attr: interop.PointerConvertible, value: number): number;

declare function ippContainsString(attr: interop.PointerConvertible, value: string): number;

declare function ippCreateRequestedArray(request: interop.PointerConvertible): interop.Pointer;

declare function ippGetOctetString(attr: interop.PointerConvertible, element: number, datalen: interop.PointerConvertible): interop.Pointer;

declare function ippNewResponse(request: interop.PointerConvertible): interop.Pointer;

declare function ippSetOctetString(ipp: interop.PointerConvertible, attr: interop.PointerConvertible, element: number, data: interop.PointerConvertible, datalen: number): number;

declare function ippSetStringf(ipp: interop.PointerConvertible, attr: interop.PointerConvertible, element: number, format: string): number;

declare function ippSetStringfv(ipp: interop.PointerConvertible, attr: interop.PointerConvertible, element: number, format: string, ap: string): number;

declare function ippValidateAttribute(attr: interop.PointerConvertible): number;

declare function ippValidateAttributes(ipp: interop.PointerConvertible): number;

declare function ippStateString(state: interop.Enum<typeof ipp_state_e>): string;

declare function duplocale(p1: interop.PointerConvertible): interop.Pointer;

declare function freelocale(p1: interop.PointerConvertible): number;

declare function newlocale(p1: number, p2: string, p3: interop.PointerConvertible): interop.Pointer;

declare function uselocale(p1: interop.PointerConvertible): interop.Pointer;

declare function localeconv(): interop.Pointer;

declare function setlocale(p1: number, p2: string): string;

declare function cupsLangDefault(): interop.Pointer;

declare function cupsLangEncoding(lang: interop.PointerConvertible): string;

declare function cupsLangFlush(): void;

declare function cupsLangFree(lang: interop.PointerConvertible): void;

declare function cupsLangGet(language: string): interop.Pointer;

declare function pwgFormatSizeName(keyword: string, keysize: number, prefix: string, name: string, width: number, length: number, units: string): number;

declare function pwgInitSize(size: interop.PointerConvertible, job: interop.PointerConvertible, margins_set: interop.PointerConvertible): number;

declare function pwgMediaForLegacy(legacy: string): interop.Pointer;

declare function pwgMediaForPPD(ppd: string): interop.Pointer;

declare function pwgMediaForPWG(pwg: string): interop.Pointer;

declare function pwgMediaForSize(width: number, length: number): interop.Pointer;

declare function cupsCancelJob(name: string, job_id: number): number;

declare function cupsDoFileRequest(http: interop.PointerConvertible, request: interop.PointerConvertible, resource: string, filename: string): interop.Pointer;

declare function cupsDoRequest(http: interop.PointerConvertible, request: interop.PointerConvertible, resource: string): interop.Pointer;

declare function cupsEncryption(): interop.Enum<typeof http_encryption_e>;

declare function cupsFreeJobs(num_jobs: number, jobs: interop.PointerConvertible): void;

declare function cupsGetClasses(classes: interop.PointerConvertible): number;

declare function cupsGetDefault(): string;

declare function cupsGetJobs(jobs: interop.PointerConvertible, name: string, myjobs: number, whichjobs: number): number;

declare function cupsGetPrinters(printers: interop.PointerConvertible): number;

declare function cupsLastError(): interop.Enum<typeof ipp_status_e>;

declare function cupsPrintFile(name: string, filename: string, title: string, num_options: number, options: interop.PointerConvertible): number;

declare function cupsPrintFiles(name: string, num_files: number, files: interop.PointerConvertible, title: string, num_options: number, options: interop.PointerConvertible): number;

declare function cupsTempFile(filename: string, len: number): string;

declare function cupsTempFd(filename: string, len: number): number;

declare function cupsAddDest(name: string, instance: string, num_dests: number, dests: interop.PointerConvertible): number;

declare function cupsFreeDests(num_dests: number, dests: interop.PointerConvertible): void;

declare function cupsGetDest(name: string, instance: string, num_dests: number, dests: interop.PointerConvertible): interop.Pointer;

declare function cupsGetDests(dests: interop.PointerConvertible): number;

declare function cupsSetDests(num_dests: number, dests: interop.PointerConvertible): void;

declare function cupsAddOption(name: string, value: string, num_options: number, options: interop.PointerConvertible): number;

declare function cupsEncodeOptions(ipp: interop.PointerConvertible, num_options: number, options: interop.PointerConvertible): void;

declare function cupsFreeOptions(num_options: number, options: interop.PointerConvertible): void;

declare function cupsGetOption(name: string, num_options: number, options: interop.PointerConvertible): string;

declare function cupsParseOptions(arg: string, num_options: number, options: interop.PointerConvertible): number;

declare function cupsGetPassword(prompt: string): string;

declare function cupsServer(): string;

declare function cupsSetEncryption(e: interop.Enum<typeof http_encryption_e>): void;

declare function cupsSetPasswordCB(cb: (p1: string) => string): void;

declare function cupsSetServer(server: string): void;

declare function cupsSetUser(user: string): void;

declare function cupsUser(): string;

declare function cupsDoAuthentication(http: interop.PointerConvertible, method: string, resource: string): number;

declare function cupsGetFile(http: interop.PointerConvertible, resource: string, filename: string): interop.Enum<typeof http_status_e>;

declare function cupsGetFd(http: interop.PointerConvertible, resource: string, fd: number): interop.Enum<typeof http_status_e>;

declare function cupsPutFile(http: interop.PointerConvertible, resource: string, filename: string): interop.Enum<typeof http_status_e>;

declare function cupsPutFd(http: interop.PointerConvertible, resource: string, fd: number): interop.Enum<typeof http_status_e>;

declare function cupsGetDefault2(http: interop.PointerConvertible): string;

declare function cupsGetDests2(http: interop.PointerConvertible, dests: interop.PointerConvertible): number;

declare function cupsGetJobs2(http: interop.PointerConvertible, jobs: interop.PointerConvertible, name: string, myjobs: number, whichjobs: number): number;

declare function cupsPrintFile2(http: interop.PointerConvertible, name: string, filename: string, title: string, num_options: number, options: interop.PointerConvertible): number;

declare function cupsPrintFiles2(http: interop.PointerConvertible, name: string, num_files: number, files: interop.PointerConvertible, title: string, num_options: number, options: interop.PointerConvertible): number;

declare function cupsSetDests2(http: interop.PointerConvertible, num_dests: number, dests: interop.PointerConvertible): number;

declare function cupsEncodeOptions2(ipp: interop.PointerConvertible, num_options: number, options: interop.PointerConvertible, group_tag: interop.Enum<typeof ipp_tag_e>): void;

declare function cupsLastErrorString(): string;

declare function cupsNotifySubject(lang: interop.PointerConvertible, event: interop.PointerConvertible): string;

declare function cupsNotifyText(lang: interop.PointerConvertible, event: interop.PointerConvertible): string;

declare function cupsRemoveOption(name: string, num_options: number, options: interop.PointerConvertible): number;

declare function cupsTempFile2(filename: string, len: number): interop.Pointer;

declare function cupsDoIORequest(http: interop.PointerConvertible, request: interop.PointerConvertible, resource: string, infile: number, outfile: number): interop.Pointer;

declare function cupsRemoveDest(name: string, instance: string, num_dests: number, dests: interop.PointerConvertible): number;

declare function cupsSetDefaultDest(name: string, instance: string, num_dests: number, dests: interop.PointerConvertible): void;

declare function cupsCancelJob2(http: interop.PointerConvertible, name: string, job_id: number, purge: number): interop.Enum<typeof ipp_status_e>;

declare function cupsCreateJob(http: interop.PointerConvertible, name: string, title: string, num_options: number, options: interop.PointerConvertible): number;

declare function cupsFinishDocument(http: interop.PointerConvertible, name: string): interop.Enum<typeof ipp_status_e>;

declare function cupsGetNamedDest(http: interop.PointerConvertible, name: string, instance: string): interop.Pointer;

declare function cupsGetPassword2(prompt: string, http: interop.PointerConvertible, method: string, resource: string): string;

declare function cupsGetResponse(http: interop.PointerConvertible, resource: string): interop.Pointer;

declare function cupsReadResponseData(http: interop.PointerConvertible, buffer: string, length: number): number;

declare function cupsSendRequest(http: interop.PointerConvertible, request: interop.PointerConvertible, resource: string, length: number): interop.Enum<typeof http_status_e>;

declare function cupsSetPasswordCB2(cb: (p1: string, p2: interop.PointerConvertible, p3: string, p4: string, p5: interop.PointerConvertible) => string, user_data: interop.PointerConvertible): void;

declare function cupsStartDocument(http: interop.PointerConvertible, name: string, job_id: number, docname: string, format: string, last_document: number): interop.Enum<typeof http_status_e>;

declare function cupsWriteRequestData(http: interop.PointerConvertible, buffer: string, length: number): interop.Enum<typeof http_status_e>;

declare function cupsSetClientCertCB(cb: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number, user_data: interop.PointerConvertible): void;

declare function cupsSetCredentials(certs: interop.PointerConvertible): number;

declare function cupsSetServerCertCB(cb: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number, user_data: interop.PointerConvertible): void;

declare function cupsCancelDestJob(http: interop.PointerConvertible, dest: interop.PointerConvertible, job_id: number): interop.Enum<typeof ipp_status_e>;

declare function cupsCheckDestSupported(http: interop.PointerConvertible, dest: interop.PointerConvertible, info: interop.PointerConvertible, option: string, value: string): number;

declare function cupsCloseDestJob(http: interop.PointerConvertible, dest: interop.PointerConvertible, info: interop.PointerConvertible, job_id: number): interop.Enum<typeof ipp_status_e>;

declare function cupsConnectDest(dest: interop.PointerConvertible, flags: number, msec: number, cancel: interop.PointerConvertible, resource: string, resourcesize: number, cb: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number, user_data: interop.PointerConvertible): interop.Pointer;

declare function cupsConnectDestBlock(dest: interop.PointerConvertible, flags: number, msec: number, cancel: interop.PointerConvertible, resource: string, resourcesize: number, block: (p1: number, p2: interop.PointerConvertible) => number): interop.Pointer;

declare function cupsCopyDest(dest: interop.PointerConvertible, num_dests: number, dests: interop.PointerConvertible): number;

declare function cupsCopyDestInfo(http: interop.PointerConvertible, dest: interop.PointerConvertible): interop.Pointer;

declare function cupsCopyDestConflicts(http: interop.PointerConvertible, dest: interop.PointerConvertible, info: interop.PointerConvertible, num_options: number, options: interop.PointerConvertible, new_option: string, new_value: string, num_conflicts: interop.PointerConvertible, conflicts: interop.PointerConvertible, num_resolved: interop.PointerConvertible, resolved: interop.PointerConvertible): number;

declare function cupsCreateDestJob(http: interop.PointerConvertible, dest: interop.PointerConvertible, info: interop.PointerConvertible, job_id: interop.PointerConvertible, title: string, num_options: number, options: interop.PointerConvertible): interop.Enum<typeof ipp_status_e>;

declare function cupsEnumDests(flags: number, msec: number, cancel: interop.PointerConvertible, type: number, mask: number, cb: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number, user_data: interop.PointerConvertible): number;

declare function cupsEnumDestsBlock(flags: number, msec: number, cancel: interop.PointerConvertible, type: number, mask: number, block: (p1: number, p2: interop.PointerConvertible) => number): number;

declare function cupsFinishDestDocument(http: interop.PointerConvertible, dest: interop.PointerConvertible, info: interop.PointerConvertible): interop.Enum<typeof ipp_status_e>;

declare function cupsFreeDestInfo(dinfo: interop.PointerConvertible): void;

declare function cupsGetDestMediaByName(http: interop.PointerConvertible, dest: interop.PointerConvertible, dinfo: interop.PointerConvertible, media: string, flags: number, size: interop.PointerConvertible): number;

declare function cupsGetDestMediaBySize(http: interop.PointerConvertible, dest: interop.PointerConvertible, dinfo: interop.PointerConvertible, width: number, length: number, flags: number, size: interop.PointerConvertible): number;

declare function cupsLocalizeDestOption(http: interop.PointerConvertible, dest: interop.PointerConvertible, info: interop.PointerConvertible, option: string): string;

declare function cupsLocalizeDestValue(http: interop.PointerConvertible, dest: interop.PointerConvertible, info: interop.PointerConvertible, option: string, value: string): string;

declare function cupsStartDestDocument(http: interop.PointerConvertible, dest: interop.PointerConvertible, info: interop.PointerConvertible, job_id: number, docname: string, format: string, num_options: number, options: interop.PointerConvertible, last_document: number): interop.Enum<typeof http_status_e>;

declare function cupsFindDestDefault(http: interop.PointerConvertible, dest: interop.PointerConvertible, dinfo: interop.PointerConvertible, option: string): interop.Pointer;

declare function cupsFindDestReady(http: interop.PointerConvertible, dest: interop.PointerConvertible, dinfo: interop.PointerConvertible, option: string): interop.Pointer;

declare function cupsFindDestSupported(http: interop.PointerConvertible, dest: interop.PointerConvertible, dinfo: interop.PointerConvertible, option: string): interop.Pointer;

declare function cupsGetDestMediaByIndex(http: interop.PointerConvertible, dest: interop.PointerConvertible, dinfo: interop.PointerConvertible, n: number, flags: number, size: interop.PointerConvertible): number;

declare function cupsGetDestMediaCount(http: interop.PointerConvertible, dest: interop.PointerConvertible, dinfo: interop.PointerConvertible, flags: number): number;

declare function cupsGetDestMediaDefault(http: interop.PointerConvertible, dest: interop.PointerConvertible, dinfo: interop.PointerConvertible, flags: number, size: interop.PointerConvertible): number;

declare function cupsSetUserAgent(user_agent: string): void;

declare function cupsUserAgent(): string;

declare function cupsGetDestWithURI(name: string, uri: string): interop.Pointer;

declare function cupsLocalizeDestMedia(http: interop.PointerConvertible, dest: interop.PointerConvertible, info: interop.PointerConvertible, flags: number, size: interop.PointerConvertible): string;

declare function cupsMakeServerCredentials(path: string, common_name: string, num_alt_names: number, alt_names: interop.PointerConvertible, expiration_date: number): number;

declare function cupsSetServerCredentials(path: string, common_name: string, auto_create: number): number;

declare function cupsHashData(algorithm: string, data: interop.PointerConvertible, datalen: number, hash: interop.PointerConvertible, hashsize: number): number;

declare function cupsAddIntegerOption(name: string, value: number, num_options: number, options: interop.PointerConvertible): number;

declare function cupsGetIntegerOption(name: string, num_options: number, options: interop.PointerConvertible): number;

declare function cupsHashString(hash: interop.PointerConvertible, hashsize: number, buffer: string, bufsize: number): string;

declare function cupsAddDestMediaOptions(http: interop.PointerConvertible, dest: interop.PointerConvertible, dinfo: interop.PointerConvertible, flags: number, size: interop.PointerConvertible, num_options: number, options: interop.PointerConvertible): number;

declare function cupsEncodeOption(ipp: interop.PointerConvertible, group_tag: interop.Enum<typeof ipp_tag_e>, name: string, value: string): interop.Pointer;

declare function cupsSetBearerTokenCB(http: interop.PointerConvertible, cb: (p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible) => string, user_data: interop.PointerConvertible): void;

declare function renameat(p1: number, p2: string, p3: number, p4: string): number;

declare function renamex_np(p1: string, p2: string, p3: number): number;

declare function renameatx_np(p1: number, p2: string, p3: number, p4: string, p5: number): number;

declare function printf(p1: string): number;

declare function clearerr(p1: interop.PointerConvertible): void;

declare function fclose(p1: interop.PointerConvertible): number;

declare function feof(p1: interop.PointerConvertible): number;

declare function ferror(p1: interop.PointerConvertible): number;

declare function fflush(p1: interop.PointerConvertible): number;

declare function fgetc(p1: interop.PointerConvertible): number;

declare function fgetpos(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function fgets(p1: string, __size: number, p3: interop.PointerConvertible): string;

declare function fopen(__filename: string, __mode: string): interop.Pointer;

declare function fprintf(p1: interop.PointerConvertible, p2: string): number;

declare function fputc(p1: number, p2: interop.PointerConvertible): number;

declare function fputs(p1: string, p2: interop.PointerConvertible): number;

declare function fread(__ptr: interop.PointerConvertible, __size: number, __nitems: number, __stream: interop.PointerConvertible): number;

declare function freopen(p1: string, p2: string, p3: interop.PointerConvertible): interop.Pointer;

declare function fscanf(p1: interop.PointerConvertible, p2: string): number;

declare function fseek(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function fsetpos(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function ftell(p1: interop.PointerConvertible): number;

declare function fwrite(__ptr: interop.PointerConvertible, __size: number, __nitems: number, __stream: interop.PointerConvertible): number;

declare function getc(p1: interop.PointerConvertible): number;

declare function getchar(): number;

declare function gets(p1: string): string;

declare function perror(p1: string): void;

declare function putc(p1: number, p2: interop.PointerConvertible): number;

declare function putchar(p1: number): number;

declare function puts(p1: string): number;

declare function remove(p1: string): number;

declare function rename(__old: string, __new: string): number;

declare function rewind(p1: interop.PointerConvertible): void;

declare function scanf(p1: string): number;

declare function setbuf(p1: interop.PointerConvertible, p2: string): void;

declare function setvbuf(p1: interop.PointerConvertible, p2: string, p3: number, __size: number): number;

declare function sprintf(p1: string, p2: string): number;

declare function sscanf(p1: string, p2: string): number;

declare function tmpfile(): interop.Pointer;

declare function tmpnam(p1: string): string;

declare function ungetc(p1: number, p2: interop.PointerConvertible): number;

declare function vfprintf(p1: interop.PointerConvertible, p2: string, p3: string): number;

declare function vprintf(p1: string, p2: string): number;

declare function vsprintf(p1: string, p2: string, p3: string): number;

declare function fdopen(p1: number, p2: string): interop.Pointer;

declare function fileno(p1: interop.PointerConvertible): number;

declare function pclose(p1: interop.PointerConvertible): number;

declare function popen(p1: string, p2: string): interop.Pointer;

declare function __srget(p1: interop.PointerConvertible): number;

declare function __svfscanf(p1: interop.PointerConvertible, p2: string, p3: string): number;

declare function __swbuf(p1: number, p2: interop.PointerConvertible): number;

declare function flockfile(p1: interop.PointerConvertible): void;

declare function ftrylockfile(p1: interop.PointerConvertible): number;

declare function funlockfile(p1: interop.PointerConvertible): void;

declare function getc_unlocked(p1: interop.PointerConvertible): number;

declare function getchar_unlocked(): number;

declare function putc_unlocked(p1: number, p2: interop.PointerConvertible): number;

declare function putchar_unlocked(p1: number): number;

declare function getw(p1: interop.PointerConvertible): number;

declare function putw(p1: number, p2: interop.PointerConvertible): number;

declare function tempnam(__dir: string, __prefix: string): string;

declare function fseeko(__stream: interop.PointerConvertible, __offset: number, __whence: number): number;

declare function ftello(__stream: interop.PointerConvertible): number;

declare function snprintf(__str: string, __size: number, __format: string): number;

declare function vfscanf(__stream: interop.PointerConvertible, __format: string, p3: string): number;

declare function vscanf(__format: string, p2: string): number;

declare function vsnprintf(__str: string, __size: number, __format: string, p4: string): number;

declare function vsscanf(__str: string, __format: string, p3: string): number;

declare function dprintf(p1: number, p2: string): number;

declare function vdprintf(p1: number, p2: string, p3: string): number;

declare function getdelim(__linep: interop.PointerConvertible, __linecapp: interop.PointerConvertible, __delimiter: number, __stream: interop.PointerConvertible): number;

declare function getline(__linep: interop.PointerConvertible, __linecapp: interop.PointerConvertible, __stream: interop.PointerConvertible): number;

declare function fmemopen(__buf: interop.PointerConvertible, __size: number, __mode: string): interop.Pointer;

declare function open_memstream(__bufp: interop.PointerConvertible, __sizep: interop.PointerConvertible): interop.Pointer;

declare function asprintf(p1: interop.PointerConvertible, p2: string): number;

declare function ctermid_r(p1: string): string;

declare function fgetln(p1: interop.PointerConvertible, __len: interop.PointerConvertible): string;

declare function fmtcheck(p1: string, p2: string): string;

declare function fpurge(p1: interop.PointerConvertible): number;

declare function setbuffer(p1: interop.PointerConvertible, p2: string, __size: number): void;

declare function setlinebuf(p1: interop.PointerConvertible): number;

declare function vasprintf(p1: interop.PointerConvertible, p2: string, p3: string): number;

declare function funopen(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: string, p3: number) => number, p3: (p1: interop.PointerConvertible, p2: string, p3: number) => number, p4: (p1: interop.PointerConvertible, p2: number, p3: number) => number, p5: (p1: interop.PointerConvertible) => number): interop.Pointer;

declare function __snprintf_chk(p1: string, __maxlen: number, p3: number, p4: number, p5: string): number;

declare function __vsnprintf_chk(p1: string, __maxlen: number, p3: number, p4: number, p5: string, p6: string): number;

declare function __sprintf_chk(p1: string, p2: number, p3: number, p4: string): number;

declare function __vsprintf_chk(p1: string, p2: number, p3: number, p4: string, p5: string): number;

declare function cupsAdminExportSamba(dest: string, ppd: string, samba_server: string, samba_user: string, samba_password: string, logfile: interop.PointerConvertible): number;

declare function cupsAdminCreateWindowsPPD(http: interop.PointerConvertible, dest: string, buffer: string, bufsize: number): string;

declare function cupsAdminGetServerSettings(http: interop.PointerConvertible, num_settings: interop.PointerConvertible, settings: interop.PointerConvertible): number;

declare function cupsAdminSetServerSettings(http: interop.PointerConvertible, num_settings: number, settings: interop.PointerConvertible): number;

declare function cupsGetDevices(http: interop.PointerConvertible, timeout: number, include_schemes: string, exclude_schemes: string, callback: (p1: string, p2: string, p3: string, p4: string, p5: string, p6: string, p7: interop.PointerConvertible) => void, user_data: interop.PointerConvertible): interop.Enum<typeof ipp_status_e>;

declare function cupsBackendDeviceURI(argv: interop.PointerConvertible): string;

declare function cupsBackendReport(device_scheme: string, device_uri: string, device_make_and_model: string, device_info: string, device_id: string, device_location: string): void;

declare function chmod(p1: string, p2: number): number;

declare function fchmod(p1: number, p2: number): number;

declare function fstat(p1: number, p2: interop.PointerConvertible): number;

declare function lstat(p1: string, p2: interop.PointerConvertible): number;

declare function mkdir(p1: string, p2: number): number;

declare function mkfifo(p1: string, p2: number): number;

declare function stat(p1: string, p2: interop.PointerConvertible): number;

declare function mknod(p1: string, p2: number, p3: number): number;

declare function umask(p1: number): number;

declare function fchmodat(p1: number, p2: string, p3: number, p4: number): number;

declare function fstatat(p1: number, p2: string, p3: interop.PointerConvertible, p4: number): number;

declare function mkdirat(p1: number, p2: string, p3: number): number;

declare function mkfifoat(p1: number, p2: string, p3: number): number;

declare function mknodat(p1: number, p2: string, p3: number, p4: number): number;

declare function futimens(__fd: number, __times: unknown /* const array */): number;

declare function utimensat(__fd: number, __path: string, __times: unknown /* const array */, __flag: number): number;

declare function chflags(p1: string, p2: number): number;

declare function chmodx_np(p1: string, p2: interop.PointerConvertible): number;

declare function fchflags(p1: number, p2: number): number;

declare function fchmodx_np(p1: number, p2: interop.PointerConvertible): number;

declare function fstatx_np(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function lchflags(p1: string, p2: number): number;

declare function lchmod(p1: string, p2: number): number;

declare function lstatx_np(p1: string, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function mkdirx_np(p1: string, p2: interop.PointerConvertible): number;

declare function mkfifox_np(p1: string, p2: interop.PointerConvertible): number;

declare function statx_np(p1: string, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function umaskx_np(p1: interop.PointerConvertible): number;

declare function cupsDirClose(dp: interop.PointerConvertible): void;

declare function cupsDirOpen(directory: string): interop.Pointer;

declare function cupsDirRead(dp: interop.PointerConvertible): interop.Pointer;

declare function cupsDirRewind(dp: interop.PointerConvertible): void;

declare function cupsRasterClose(r: interop.PointerConvertible): void;

declare function cupsRasterOpen(fd: number, mode: interop.Enum<typeof cups_mode_e>): interop.Pointer;

declare function cupsRasterReadHeader(r: interop.PointerConvertible, h: interop.PointerConvertible): number;

declare function cupsRasterReadPixels(r: interop.PointerConvertible, p: interop.PointerConvertible, len: number): number;

declare function cupsRasterWriteHeader(r: interop.PointerConvertible, h: interop.PointerConvertible): number;

declare function cupsRasterWritePixels(r: interop.PointerConvertible, p: interop.PointerConvertible, len: number): number;

declare function cupsRasterReadHeader2(r: interop.PointerConvertible, h: interop.PointerConvertible): number;

declare function cupsRasterWriteHeader2(r: interop.PointerConvertible, h: interop.PointerConvertible): number;

declare function cupsRasterErrorString(): string;

declare function cupsRasterOpenIO(iocb: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number) => number, ctx: interop.PointerConvertible, mode: interop.Enum<typeof cups_mode_e>): interop.Pointer;

declare function cupsRasterInitPWGHeader(h: interop.PointerConvertible, media: interop.PointerConvertible, type: string, xdpi: number, ydpi: number, sides: string, sheet_back: string): number;

declare function cupsGetPPD(name: string): string;

declare function cupsGetPPD2(http: interop.PointerConvertible, name: string): string;

declare function cupsGetPPD3(http: interop.PointerConvertible, name: string, modtime: interop.PointerConvertible, buffer: string, bufsize: number): interop.Enum<typeof http_status_e>;

declare function cupsGetServerPPD(http: interop.PointerConvertible, name: string): string;

declare function cupsMarkOptions(ppd: interop.PointerConvertible, num_options: number, options: interop.PointerConvertible): number;

declare function ppdClose(ppd: interop.PointerConvertible): void;

declare function ppdCollect(ppd: interop.PointerConvertible, section: interop.Enum<typeof ppd_section_e>, choices: interop.PointerConvertible): number;

declare function ppdConflicts(ppd: interop.PointerConvertible): number;

declare function ppdEmit(ppd: interop.PointerConvertible, fp: interop.PointerConvertible, section: interop.Enum<typeof ppd_section_e>): number;

declare function ppdEmitFd(ppd: interop.PointerConvertible, fd: number, section: interop.Enum<typeof ppd_section_e>): number;

declare function ppdEmitJCL(ppd: interop.PointerConvertible, fp: interop.PointerConvertible, job_id: number, user: string, title: string): number;

declare function ppdFindChoice(o: interop.PointerConvertible, option: string): interop.Pointer;

declare function ppdFindMarkedChoice(ppd: interop.PointerConvertible, keyword: string): interop.Pointer;

declare function ppdFindOption(ppd: interop.PointerConvertible, keyword: string): interop.Pointer;

declare function ppdIsMarked(ppd: interop.PointerConvertible, keyword: string, option: string): number;

declare function ppdMarkDefaults(ppd: interop.PointerConvertible): void;

declare function ppdMarkOption(ppd: interop.PointerConvertible, keyword: string, option: string): number;

declare function ppdOpen(fp: interop.PointerConvertible): interop.Pointer;

declare function ppdOpenFd(fd: number): interop.Pointer;

declare function ppdOpenFile(filename: string): interop.Pointer;

declare function ppdPageLength(ppd: interop.PointerConvertible, name: string): number;

declare function ppdPageSize(ppd: interop.PointerConvertible, name: string): interop.Pointer;

declare function ppdPageWidth(ppd: interop.PointerConvertible, name: string): number;

declare function ppdErrorString(status: interop.Enum<typeof ppd_status_e>): string;

declare function ppdFindAttr(ppd: interop.PointerConvertible, name: string, spec: string): interop.Pointer;

declare function ppdFindNextAttr(ppd: interop.PointerConvertible, name: string, spec: string): interop.Pointer;

declare function ppdLastError(line: interop.PointerConvertible): interop.Enum<typeof ppd_status_e>;

declare function ppdSetConformance(c: interop.Enum<typeof ppd_conform_e>): void;

declare function cupsRasterInterpretPPD(h: interop.PointerConvertible, ppd: interop.PointerConvertible, num_options: number, options: interop.PointerConvertible, func: (p1: interop.PointerConvertible, p2: number) => number): number;

declare function ppdCollect2(ppd: interop.PointerConvertible, section: interop.Enum<typeof ppd_section_e>, min_order: number, choices: interop.PointerConvertible): number;

declare function ppdEmitAfterOrder(ppd: interop.PointerConvertible, fp: interop.PointerConvertible, section: interop.Enum<typeof ppd_section_e>, limit: number, min_order: number): number;

declare function ppdEmitJCLEnd(ppd: interop.PointerConvertible, fp: interop.PointerConvertible): number;

declare function ppdEmitString(ppd: interop.PointerConvertible, section: interop.Enum<typeof ppd_section_e>, min_order: number): string;

declare function ppdFindCustomOption(ppd: interop.PointerConvertible, keyword: string): interop.Pointer;

declare function ppdFindCustomParam(opt: interop.PointerConvertible, name: string): interop.Pointer;

declare function ppdFirstCustomParam(opt: interop.PointerConvertible): interop.Pointer;

declare function ppdFirstOption(ppd: interop.PointerConvertible): interop.Pointer;

declare function ppdNextCustomParam(opt: interop.PointerConvertible): interop.Pointer;

declare function ppdNextOption(ppd: interop.PointerConvertible): interop.Pointer;

declare function ppdLocalize(ppd: interop.PointerConvertible): number;

declare function ppdOpen2(fp: interop.PointerConvertible): interop.Pointer;

declare function ppdLocalizeIPPReason(ppd: interop.PointerConvertible, reason: string, scheme: string, buffer: string, bufsize: number): string;

declare function cupsGetConflicts(ppd: interop.PointerConvertible, option: string, choice: string, options: interop.PointerConvertible): number;

declare function cupsResolveConflicts(ppd: interop.PointerConvertible, option: string, choice: string, num_options: interop.PointerConvertible, options: interop.PointerConvertible): number;

declare function ppdInstallableConflict(ppd: interop.PointerConvertible, option: string, choice: string): number;

declare function ppdLocalizeAttr(ppd: interop.PointerConvertible, keyword: string, spec: string): interop.Pointer;

declare function ppdLocalizeMarkerName(ppd: interop.PointerConvertible, name: string): string;

declare function ppdPageSizeLimits(ppd: interop.PointerConvertible, minimum: interop.PointerConvertible, maximum: interop.PointerConvertible): number;

declare function cupsBackChannelRead(buffer: string, bytes: number, timeout: number): number;

declare function cupsBackChannelWrite(buffer: string, bytes: number, timeout: number): number;

declare function cupsSideChannelDoRequest(command: interop.Enum<typeof cups_sc_command_e>, data: string, datalen: interop.PointerConvertible, timeout: number): interop.Enum<typeof cups_sc_status_e>;

declare function cupsSideChannelRead(command: interop.PointerConvertible, status: interop.PointerConvertible, data: string, datalen: interop.PointerConvertible, timeout: number): number;

declare function cupsSideChannelWrite(command: interop.Enum<typeof cups_sc_command_e>, status: interop.Enum<typeof cups_sc_status_e>, data: string, datalen: number, timeout: number): number;

declare function cupsSideChannelSNMPGet(oid: string, data: string, datalen: interop.PointerConvertible, timeout: number): interop.Enum<typeof cups_sc_status_e>;

declare function cupsSideChannelSNMPWalk(oid: string, timeout: number, cb: (p1: string, p2: string, p3: number, p4: interop.PointerConvertible) => void, context: interop.PointerConvertible): interop.Enum<typeof cups_sc_status_e>;

declare function cupsCharsetToUTF8(dest: interop.PointerConvertible, src: string, maxout: number, encoding: interop.Enum<typeof cups_encoding_e>): number;

declare function cupsUTF8ToCharset(dest: string, src: interop.PointerConvertible, maxout: number, encoding: interop.Enum<typeof cups_encoding_e>): number;

declare function cupsUTF8ToUTF32(dest: interop.PointerConvertible, src: interop.PointerConvertible, maxout: number): number;

declare function cupsUTF32ToUTF8(dest: interop.PointerConvertible, src: interop.PointerConvertible, maxout: number): number;

declare function open(p1: string, p2: number): number;

declare function openat(p1: number, p2: string, p3: number): number;

declare function creat(p1: string, p2: number): number;

declare function fcntl(p1: number, p2: number): number;

declare function openx_np(p1: string, p2: number, p3: interop.PointerConvertible): number;

declare function open_dprotected_np(p1: string, p2: number, p3: number, p4: number): number;

declare function openat_dprotected_np(p1: number, p2: string, p3: number, p4: number, p5: number): number;

declare function openat_authenticated_np(p1: number, p2: string, p3: number, p4: number): number;

declare function flock(p1: number, p2: number): number;

declare function filesec_init(): interop.Pointer;

declare function filesec_dup(p1: interop.PointerConvertible): interop.Pointer;

declare function filesec_free(p1: interop.PointerConvertible): void;

declare function filesec_get_property(p1: interop.PointerConvertible, p2: interop.Enum<typeof filesec_property_t>, p3: interop.PointerConvertible): number;

declare function filesec_query_property(p1: interop.PointerConvertible, p2: interop.Enum<typeof filesec_property_t>, p3: interop.PointerConvertible): number;

declare function filesec_set_property(p1: interop.PointerConvertible, p2: interop.Enum<typeof filesec_property_t>, p3: interop.PointerConvertible): number;

declare function filesec_unset_property(p1: interop.PointerConvertible, p2: interop.Enum<typeof filesec_property_t>): number;

declare function os_workgroup_copy_port(wg: OS_os_workgroup, mach_port_out: interop.PointerConvertible): number;

declare function os_workgroup_create_with_port(name: string, mach_port: number): OS_os_workgroup;

declare function os_workgroup_create_with_workgroup(name: string, wg: OS_os_workgroup): OS_os_workgroup;

declare function os_workgroup_join(wg: OS_os_workgroup, token_out: interop.PointerConvertible): number;

declare function os_workgroup_leave(wg: OS_os_workgroup, token: interop.PointerConvertible): void;

declare function os_workgroup_set_working_arena(wg: OS_os_workgroup, arena: interop.PointerConvertible, max_workers: number, destructor: (p1: interop.PointerConvertible) => void): number;

declare function os_workgroup_get_working_arena(wg: OS_os_workgroup, index_out: interop.PointerConvertible): interop.Pointer;

declare function os_workgroup_cancel(wg: OS_os_workgroup): void;

declare function os_workgroup_testcancel(wg: OS_os_workgroup): boolean;

declare function os_workgroup_max_parallel_threads(wg: OS_os_workgroup, attr: interop.PointerConvertible): number;

declare function os_workgroup_interval_start(wg: OS_os_workgroup, start: number, deadline: number, data: interop.PointerConvertible): number;

declare function os_workgroup_interval_update(wg: OS_os_workgroup, deadline: number, data: interop.PointerConvertible): number;

declare function os_workgroup_interval_finish(wg: OS_os_workgroup, data: interop.PointerConvertible): number;

declare function os_workgroup_parallel_create(name: string, attr: interop.PointerConvertible): OS_os_workgroup;

declare function dispatch_time(when: number, delta: number): number;

declare function dispatch_walltime(when: interop.PointerConvertible, delta: number): number;

declare function qos_class_self(): interop.Enum<typeof qos_class_t>;

declare function qos_class_main(): interop.Enum<typeof qos_class_t>;

declare function dispatch_retain(object: NSObject): void;

declare function dispatch_release(object: NSObject): void;

declare function dispatch_get_context(object: NSObject): interop.Pointer;

declare function dispatch_set_context(object: NSObject, context: interop.PointerConvertible): void;

declare function dispatch_set_finalizer_f(object: NSObject, finalizer: (p1: interop.PointerConvertible) => void): void;

declare function dispatch_activate(object: NSObject): void;

declare function dispatch_suspend(object: NSObject): void;

declare function dispatch_resume(object: NSObject): void;

declare function dispatch_set_qos_class_floor(object: NSObject, qos_class: interop.Enum<typeof qos_class_t>, relative_priority: number): void;

declare function dispatch_debug(object: NSObject, message: string): void;

declare function dispatch_debugv(object: NSObject, message: string, ap: string): void;

declare function dispatch_async(queue: NSObject, block: () => void): void;

declare function dispatch_async_f(queue: NSObject, context: interop.PointerConvertible, work: (p1: interop.PointerConvertible) => void): void;

declare function dispatch_sync(queue: NSObject, block: () => void): void;

declare function dispatch_sync_f(queue: NSObject, context: interop.PointerConvertible, work: (p1: interop.PointerConvertible) => void): void;

declare function dispatch_async_and_wait(queue: NSObject, block: () => void): void;

declare function dispatch_async_and_wait_f(queue: NSObject, context: interop.PointerConvertible, work: (p1: interop.PointerConvertible) => void): void;

declare function dispatch_apply(iterations: number, queue: NSObject, block: (p1: number) => void): void;

declare function dispatch_apply_f(iterations: number, queue: NSObject, context: interop.PointerConvertible, work: (p1: interop.PointerConvertible, p2: number) => void): void;

declare function dispatch_get_current_queue(): NSObject;

declare function dispatch_get_global_queue(identifier: number, flags: number): NSObject;

declare function dispatch_queue_attr_make_initially_inactive(attr: NSObject): NSObject;

declare function dispatch_queue_attr_make_with_autorelease_frequency(attr: NSObject, frequency: interop.Enum<typeof dispatch_autorelease_frequency_t>): NSObject;

declare function dispatch_queue_attr_make_with_qos_class(attr: NSObject, qos_class: interop.Enum<typeof qos_class_t>, relative_priority: number): NSObject;

declare function dispatch_queue_create_with_target(label: string, attr: NSObject, target: NSObject): NSObject;

declare function dispatch_queue_create(label: string, attr: NSObject): NSObject;

declare function dispatch_queue_get_label(queue: NSObject): string;

declare function dispatch_queue_get_qos_class(queue: NSObject, relative_priority_ptr: interop.PointerConvertible): interop.Enum<typeof qos_class_t>;

declare function dispatch_set_target_queue(object: NSObject, queue: NSObject): void;

declare function dispatch_main(): void;

declare function dispatch_after(when: number, queue: NSObject, block: () => void): void;

declare function dispatch_after_f(when: number, queue: NSObject, context: interop.PointerConvertible, work: (p1: interop.PointerConvertible) => void): void;

declare function dispatch_barrier_async(queue: NSObject, block: () => void): void;

declare function dispatch_barrier_async_f(queue: NSObject, context: interop.PointerConvertible, work: (p1: interop.PointerConvertible) => void): void;

declare function dispatch_barrier_sync(queue: NSObject, block: () => void): void;

declare function dispatch_barrier_sync_f(queue: NSObject, context: interop.PointerConvertible, work: (p1: interop.PointerConvertible) => void): void;

declare function dispatch_barrier_async_and_wait(queue: NSObject, block: () => void): void;

declare function dispatch_barrier_async_and_wait_f(queue: NSObject, context: interop.PointerConvertible, work: (p1: interop.PointerConvertible) => void): void;

declare function dispatch_queue_set_specific(queue: NSObject, key: interop.PointerConvertible, context: interop.PointerConvertible, destructor: (p1: interop.PointerConvertible) => void): void;

declare function dispatch_queue_get_specific(queue: NSObject, key: interop.PointerConvertible): interop.Pointer;

declare function dispatch_get_specific(key: interop.PointerConvertible): interop.Pointer;

declare function dispatch_assert_queue(queue: NSObject): void;

declare function dispatch_assert_queue_barrier(queue: NSObject): void;

declare function dispatch_assert_queue_not(queue: NSObject): void;

declare function dispatch_allow_send_signals(preserve_signum: number): number;

declare function dispatch_block_create(flags: interop.Enum<typeof dispatch_block_flags_t>, block: () => void): () => void;

declare function dispatch_block_create_with_qos_class(flags: interop.Enum<typeof dispatch_block_flags_t>, qos_class: interop.Enum<typeof qos_class_t>, relative_priority: number, block: () => void): () => void;

declare function dispatch_block_perform(flags: interop.Enum<typeof dispatch_block_flags_t>, block: () => void): void;

declare function dispatch_block_wait(block: () => void, timeout: number): number;

declare function dispatch_block_notify(block: () => void, queue: NSObject, notification_block: () => void): void;

declare function dispatch_block_cancel(block: () => void): void;

declare function dispatch_block_testcancel(block: () => void): number;

declare function mach_msg_overwrite(msg: interop.PointerConvertible, option: number, send_size: number, rcv_size: number, rcv_name: number, timeout: number, notify: number, rcv_msg: interop.PointerConvertible, rcv_limit: number): number;

declare function mach_msg(msg: interop.PointerConvertible, option: number, send_size: number, rcv_size: number, rcv_name: number, timeout: number, notify: number): number;

declare function mach_voucher_deallocate(voucher: number): number;

declare function dispatch_source_create(type: interop.PointerConvertible, handle: number, mask: number, queue: NSObject): NSObject;

declare function dispatch_source_set_event_handler(source: NSObject, handler: () => void): void;

declare function dispatch_source_set_event_handler_f(source: NSObject, handler: (p1: interop.PointerConvertible) => void): void;

declare function dispatch_source_set_cancel_handler(source: NSObject, handler: () => void): void;

declare function dispatch_source_set_cancel_handler_f(source: NSObject, handler: (p1: interop.PointerConvertible) => void): void;

declare function dispatch_source_cancel(source: NSObject): void;

declare function dispatch_source_testcancel(source: NSObject): number;

declare function dispatch_source_get_handle(source: NSObject): number;

declare function dispatch_source_get_mask(source: NSObject): number;

declare function dispatch_source_get_data(source: NSObject): number;

declare function dispatch_source_merge_data(source: NSObject, value: number): void;

declare function dispatch_source_set_timer(source: NSObject, start: number, interval: number, leeway: number): void;

declare function dispatch_source_set_registration_handler(source: NSObject, handler: () => void): void;

declare function dispatch_source_set_registration_handler_f(source: NSObject, handler: (p1: interop.PointerConvertible) => void): void;

declare function dispatch_group_create(): NSObject;

declare function dispatch_group_async(group: NSObject, queue: NSObject, block: () => void): void;

declare function dispatch_group_async_f(group: NSObject, queue: NSObject, context: interop.PointerConvertible, work: (p1: interop.PointerConvertible) => void): void;

declare function dispatch_group_wait(group: NSObject, timeout: number): number;

declare function dispatch_group_notify(group: NSObject, queue: NSObject, block: () => void): void;

declare function dispatch_group_notify_f(group: NSObject, queue: NSObject, context: interop.PointerConvertible, work: (p1: interop.PointerConvertible) => void): void;

declare function dispatch_group_enter(group: NSObject): void;

declare function dispatch_group_leave(group: NSObject): void;

declare function dispatch_semaphore_create(value: number): NSObject;

declare function dispatch_semaphore_wait(dsema: NSObject, timeout: number): number;

declare function dispatch_semaphore_signal(dsema: NSObject): number;

declare function dispatch_once(predicate: interop.PointerConvertible, block: () => void): void;

declare function dispatch_once_f(predicate: interop.PointerConvertible, context: interop.PointerConvertible, function$: (p1: interop.PointerConvertible) => void): void;

declare function dispatch_data_create(buffer: interop.PointerConvertible, size: number, queue: NSObject, destructor: () => void): NSObject;

declare function dispatch_data_get_size(data: NSObject): number;

declare function dispatch_data_create_map(data: NSObject, buffer_ptr: interop.PointerConvertible, size_ptr: interop.PointerConvertible): NSObject;

declare function dispatch_data_create_concat(data1: NSObject, data2: NSObject): NSObject;

declare function dispatch_data_create_subrange(data: NSObject, offset: number, length: number): NSObject;

declare function dispatch_data_apply(data: NSObject, applier: (p1: NSObject, p2: number, p3: interop.PointerConvertible, p4: number) => boolean): boolean;

declare function dispatch_data_copy_region(data: NSObject, location: number, offset_ptr: interop.PointerConvertible): NSObject;

declare function dispatch_read(fd: number, length: number, queue: NSObject, handler: (p1: NSObject, p2: number) => void): void;

declare function dispatch_write(fd: number, data: NSObject, queue: NSObject, handler: (p1: NSObject, p2: number) => void): void;

declare function dispatch_io_create(type: number, fd: number, queue: NSObject, cleanup_handler: (p1: number) => void): NSObject;

declare function dispatch_io_create_with_path(type: number, path: string, oflag: number, mode: number, queue: NSObject, cleanup_handler: (p1: number) => void): NSObject;

declare function dispatch_io_create_with_io(type: number, io: NSObject, queue: NSObject, cleanup_handler: (p1: number) => void): NSObject;

declare function dispatch_io_read(channel: NSObject, offset: number, length: number, queue: NSObject, io_handler: (p1: boolean, p2: NSObject, p3: number) => void): void;

declare function dispatch_io_write(channel: NSObject, offset: number, data: NSObject, queue: NSObject, io_handler: (p1: boolean, p2: NSObject, p3: number) => void): void;

declare function dispatch_io_close(channel: NSObject, flags: number): void;

declare function dispatch_io_barrier(channel: NSObject, barrier: () => void): void;

declare function dispatch_io_get_descriptor(channel: NSObject): number;

declare function dispatch_io_set_high_water(channel: NSObject, high_water: number): void;

declare function dispatch_io_set_low_water(channel: NSObject, low_water: number): void;

declare function dispatch_io_set_interval(channel: NSObject, interval: number, flags: number): void;

declare function dispatch_workloop_create(label: string): NSObject;

declare function dispatch_workloop_create_inactive(label: string): NSObject;

declare function dispatch_workloop_set_autorelease_frequency(workloop: NSObject, frequency: interop.Enum<typeof dispatch_autorelease_frequency_t>): void;

declare function dispatch_workloop_set_os_workgroup(workloop: NSObject, workgroup: OS_os_workgroup): void;

declare function DNSServiceGetProperty(property: string, result: interop.PointerConvertible, size: interop.PointerConvertible): number;

declare function DNSServiceRefSockFD(sdRef: interop.PointerConvertible): number;

declare function DNSServiceProcessResult(sdRef: interop.PointerConvertible): number;

declare function DNSServiceRefDeallocate(sdRef: interop.PointerConvertible): void;

declare function DNSServiceEnumerateDomains(sdRef: interop.PointerConvertible, flags: number, interfaceIndex: number, callBack: (p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: string, p6: interop.PointerConvertible) => void, context: interop.PointerConvertible): number;

declare function DNSServiceRegister(sdRef: interop.PointerConvertible, flags: number, interfaceIndex: number, name: string, regtype: string, domain: string, host: string, port: number, txtLen: number, txtRecord: interop.PointerConvertible, callBack: (p1: interop.PointerConvertible, p2: number, p3: number, p4: string, p5: string, p6: string, p7: interop.PointerConvertible) => void, context: interop.PointerConvertible): number;

declare function DNSServiceAddRecord(sdRef: interop.PointerConvertible, RecordRef: interop.PointerConvertible, flags: number, rrtype: number, rdlen: number, rdata: interop.PointerConvertible, ttl: number): number;

declare function DNSServiceUpdateRecord(sdRef: interop.PointerConvertible, recordRef: interop.PointerConvertible, flags: number, rdlen: number, rdata: interop.PointerConvertible, ttl: number): number;

declare function DNSServiceUpdateRecordWithAttribute(sdRef: interop.PointerConvertible, recordRef: interop.PointerConvertible, flags: number, rdlen: number, rdata: interop.PointerConvertible, ttl: number, attr: interop.PointerConvertible): number;

declare function DNSServiceRemoveRecord(sdRef: interop.PointerConvertible, RecordRef: interop.PointerConvertible, flags: number): number;

declare function DNSServiceBrowse(sdRef: interop.PointerConvertible, flags: number, interfaceIndex: number, regtype: string, domain: string, callBack: (p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: string, p6: string, p7: string, p8: interop.PointerConvertible) => void, context: interop.PointerConvertible): number;

declare function DNSServiceResolve(sdRef: interop.PointerConvertible, flags: number, interfaceIndex: number, name: string, regtype: string, domain: string, callBack: (p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: string, p6: string, p7: number, p8: number, p9: interop.PointerConvertible, p10: interop.PointerConvertible) => void, context: interop.PointerConvertible): number;

declare function DNSServiceQueryRecord(sdRef: interop.PointerConvertible, flags: number, interfaceIndex: number, fullname: string, rrtype: number, rrclass: number, callBack: (p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: string, p6: number, p7: number, p8: number, p9: interop.PointerConvertible, p10: number, p11: interop.PointerConvertible) => void, context: interop.PointerConvertible): number;

declare function DNSServiceGetAddrInfo(sdRef: interop.PointerConvertible, flags: number, interfaceIndex: number, protocol: number, hostname: string, callBack: (p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: string, p6: interop.PointerConvertible, p7: number, p8: interop.PointerConvertible) => void, context: interop.PointerConvertible): number;

declare function DNSServiceCreateConnection(sdRef: interop.PointerConvertible): number;

declare function DNSServiceRegisterRecord(sdRef: interop.PointerConvertible, RecordRef: interop.PointerConvertible, flags: number, interfaceIndex: number, fullname: string, rrtype: number, rrclass: number, rdlen: number, rdata: interop.PointerConvertible, ttl: number, callBack: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number, p5: interop.PointerConvertible) => void, context: interop.PointerConvertible): number;

declare function DNSServiceReconfirmRecord(flags: number, interfaceIndex: number, fullname: string, rrtype: number, rrclass: number, rdlen: number, rdata: interop.PointerConvertible): number;

declare function PeerConnectionRelease(flags: number, name: string, regtype: string, domain: string): number;

declare function DNSServiceNATPortMappingCreate(sdRef: interop.PointerConvertible, flags: number, interfaceIndex: number, protocol: number, internalPort: number, externalPort: number, ttl: number, callBack: (p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number, p10: interop.PointerConvertible) => void, context: interop.PointerConvertible): number;

declare function DNSServiceConstructFullName(fullName: string, service: string, regtype: string, domain: string): number;

declare function TXTRecordCreate(txtRecord: interop.PointerConvertible, bufferLen: number, buffer: interop.PointerConvertible): void;

declare function TXTRecordDeallocate(txtRecord: interop.PointerConvertible): void;

declare function TXTRecordSetValue(txtRecord: interop.PointerConvertible, key: string, valueSize: number, value: interop.PointerConvertible): number;

declare function TXTRecordRemoveValue(txtRecord: interop.PointerConvertible, key: string): number;

declare function TXTRecordGetLength(txtRecord: interop.PointerConvertible): number;

declare function TXTRecordGetBytesPtr(txtRecord: interop.PointerConvertible): interop.Pointer;

declare function TXTRecordContainsKey(txtLen: number, txtRecord: interop.PointerConvertible, key: string): number;

declare function TXTRecordGetValuePtr(txtLen: number, txtRecord: interop.PointerConvertible, key: string, valueLen: interop.PointerConvertible): interop.Pointer;

declare function TXTRecordGetCount(txtLen: number, txtRecord: interop.PointerConvertible): number;

declare function TXTRecordGetItemAtIndex(txtLen: number, txtRecord: interop.PointerConvertible, itemIndex: number, keyBufLen: number, key: string, valueLen: interop.PointerConvertible, value: interop.PointerConvertible): number;

declare function DNSServiceSetDispatchQueue(service: interop.PointerConvertible, queue: NSObject): number;

declare function DNSServiceSleepKeepalive(sdRef: interop.PointerConvertible, flags: number, fd: number, timeout: number, callBack: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, context: interop.PointerConvertible): number;

declare function DNSServiceAttributeCreate(): interop.Pointer;

declare function DNSServiceAttributeSetAAAAPolicy(attr: interop.PointerConvertible, policy: interop.Enum<typeof DNSServiceAAAAPolicy>): number;

declare function DNSServiceAttributeSetTimestamp(attr: interop.PointerConvertible, timestamp: number): number;

declare function DNSServiceAttributeSetHostKeyHash(attr: interop.PointerConvertible, hostkeyhash: number): number;

declare function DNSServiceAttributeDeallocate(attr: interop.PointerConvertible): void;

declare function DNSServiceQueryRecordWithAttribute(sdRef: interop.PointerConvertible, flags: number, ifindex: number, name: string, rrtype: number, rrclass: number, attr: interop.PointerConvertible, callback: (p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: string, p6: number, p7: number, p8: number, p9: interop.PointerConvertible, p10: number, p11: interop.PointerConvertible) => void, context: interop.PointerConvertible): number;

declare function DNSServiceRegisterWithAttribute(sdRef: interop.PointerConvertible, flags: number, interfaceIndex: number, name: string, regtype: string, domain: string, host: string, portInNetworkByteOrder: number, txtLen: number, txtRecord: interop.PointerConvertible, attr: interop.PointerConvertible, callBack: (p1: interop.PointerConvertible, p2: number, p3: number, p4: string, p5: string, p6: string, p7: interop.PointerConvertible) => void, context: interop.PointerConvertible): number;

declare function DNSServiceRegisterRecordWithAttribute(sdRef: interop.PointerConvertible, recordRef: interop.PointerConvertible, flags: number, interfaceIndex: number, fullname: string, rrtype: number, rrclass: number, rdlen: number, rdata: interop.PointerConvertible, ttl: number, attr: interop.PointerConvertible, callBack: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number, p5: interop.PointerConvertible) => void, context: interop.PointerConvertible): number;

declare function DNSServiceSendQueuedRequests(sdRef: interop.PointerConvertible): number;

declare function el_init(p1: string, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): interop.Pointer;

declare function el_end(p1: interop.PointerConvertible): void;

declare function el_reset(p1: interop.PointerConvertible): void;

declare function el_gets(p1: interop.PointerConvertible, p2: interop.PointerConvertible): string;

declare function el_getc(p1: interop.PointerConvertible, p2: string): number;

declare function el_push(p1: interop.PointerConvertible, p2: string): void;

declare function el_beep(p1: interop.PointerConvertible): void;

declare function el_parse(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible): number;

declare function el_set(p1: interop.PointerConvertible, p2: number): number;

declare function el_get(p1: interop.PointerConvertible, p2: number): number;

declare function _el_fn_complete(p1: interop.PointerConvertible, p2: number): number;

declare function _el_fn_sh_complete(p1: interop.PointerConvertible, p2: number): number;

declare function el_source(p1: interop.PointerConvertible, p2: string): number;

declare function el_resize(p1: interop.PointerConvertible): void;

declare function el_line(p1: interop.PointerConvertible): interop.Pointer;

declare function el_insertstr(p1: interop.PointerConvertible, p2: string): number;

declare function el_deletestr(p1: interop.PointerConvertible, p2: number): void;

declare function history_init(): interop.Pointer;

declare function history_end(p1: interop.PointerConvertible): void;

declare function history(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function tok_init(p1: string): interop.Pointer;

declare function tok_end(p1: interop.PointerConvertible): void;

declare function tok_reset(p1: interop.PointerConvertible): void;

declare function tok_line(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible): number;

declare function tok_str(p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function ___runetype(p1: number): number;

declare function ___tolower(p1: number): number;

declare function ___toupper(p1: number): number;

declare function __maskrune(p1: number, p2: number): number;

declare function __toupper(p1: number): number;

declare function __tolower(p1: number): number;

declare function wctype(p1: string): number;

declare function btowc(p1: number): number;

declare function fgetwc(p1: interop.PointerConvertible): number;

declare function fgetws(p1: interop.PointerConvertible, __n: number, p3: interop.PointerConvertible): interop.Pointer;

declare function fputwc(p1: number, p2: interop.PointerConvertible): number;

declare function fputws(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function fwide(p1: interop.PointerConvertible, p2: number): number;

declare function fwprintf(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function fwscanf(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function getwc(p1: interop.PointerConvertible): number;

declare function getwchar(): number;

declare function mbrlen(p1: string, __n: number, p3: interop.PointerConvertible): number;

declare function mbrtowc(p1: interop.PointerConvertible, p2: string, __n: number, p4: interop.PointerConvertible): number;

declare function mbsinit(p1: interop.PointerConvertible): number;

declare function mbsrtowcs(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __len: number, p4: interop.PointerConvertible): number;

declare function putwc(p1: number, p2: interop.PointerConvertible): number;

declare function putwchar(p1: number): number;

declare function swprintf(p1: interop.PointerConvertible, __maxlen: number, p3: interop.PointerConvertible): number;

declare function swscanf(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function ungetwc(p1: number, p2: interop.PointerConvertible): number;

declare function vfwprintf(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string): number;

declare function vswprintf(p1: interop.PointerConvertible, __maxlen: number, p3: interop.PointerConvertible, p4: string): number;

declare function vwprintf(p1: interop.PointerConvertible, p2: string): number;

declare function wcrtomb(p1: string, p2: number, p3: interop.PointerConvertible): number;

declare function wcscat(p1: interop.PointerConvertible, p2: interop.PointerConvertible): interop.Pointer;

declare function wcschr(p1: interop.PointerConvertible, p2: number): interop.Pointer;

declare function wcscmp(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function wcscoll(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function wcscpy(p1: interop.PointerConvertible, p2: interop.PointerConvertible): interop.Pointer;

declare function wcscspn(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function wcsftime(p1: interop.PointerConvertible, __maxlen: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function wcslen(p1: interop.PointerConvertible): number;

declare function wcsncat(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __n: number): interop.Pointer;

declare function wcsncmp(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function wcsncpy(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __n: number): interop.Pointer;

declare function wcspbrk(p1: interop.PointerConvertible, p2: interop.PointerConvertible): interop.Pointer;

declare function wcsrchr(p1: interop.PointerConvertible, p2: number): interop.Pointer;

declare function wcsrtombs(p1: string, p2: interop.PointerConvertible, __len: number, p4: interop.PointerConvertible): number;

declare function wcsspn(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function wcsstr(p1: interop.PointerConvertible, p2: interop.PointerConvertible): interop.Pointer;

declare function wcsxfrm(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __n: number): number;

declare function wctob(p1: number): number;

declare function wcstod(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function wcstok(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): interop.Pointer;

declare function wcstol(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function wcstoul(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function wmemchr(p1: interop.PointerConvertible, p2: number, __n: number): interop.Pointer;

declare function wmemcmp(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __n: number): number;

declare function wmemcpy(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __n: number): interop.Pointer;

declare function wmemmove(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __n: number): interop.Pointer;

declare function wmemset(p1: interop.PointerConvertible, p2: number, __n: number): interop.Pointer;

declare function wprintf(p1: interop.PointerConvertible): number;

declare function wscanf(p1: interop.PointerConvertible): number;

declare function wcswidth(p1: interop.PointerConvertible, __n: number): number;

declare function wcwidth(p1: number): number;

declare function vfwscanf(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string): number;

declare function vswscanf(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string): number;

declare function vwscanf(p1: interop.PointerConvertible, p2: string): number;

declare function wcstof(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function wcstold(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function wcstoll(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function wcstoull(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function mbsnrtowcs(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, __len: number, p5: interop.PointerConvertible): number;

declare function wcpcpy(p1: interop.PointerConvertible, p2: interop.PointerConvertible): interop.Pointer;

declare function wcpncpy(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __n: number): interop.Pointer;

declare function wcsdup(p1: interop.PointerConvertible): interop.Pointer;

declare function wcscasecmp(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function wcsncasecmp(p1: interop.PointerConvertible, p2: interop.PointerConvertible, n: number): number;

declare function wcsnlen(p1: interop.PointerConvertible, __n: number): number;

declare function wcsnrtombs(p1: string, p2: interop.PointerConvertible, p3: number, __len: number, p5: interop.PointerConvertible): number;

declare function open_wmemstream(__bufp: interop.PointerConvertible, __sizep: interop.PointerConvertible): interop.Pointer;

declare function fgetwln(p1: interop.PointerConvertible, __len: interop.PointerConvertible): interop.Pointer;

declare function wcslcat(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __len: number): number;

declare function wcslcpy(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __len: number): number;

declare function nextwctype(p1: number, p2: number): number;

declare function towctrans(p1: number, p2: number): number;

declare function wctrans(p1: string): number;

declare function el_wgets(p1: interop.PointerConvertible, p2: interop.PointerConvertible): interop.Pointer;

declare function el_wgetc(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function el_wpush(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function el_wparse(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible): number;

declare function el_wset(p1: interop.PointerConvertible, p2: number): number;

declare function el_wget(p1: interop.PointerConvertible, p2: number): number;

declare function el_wline(p1: interop.PointerConvertible): interop.Pointer;

declare function el_winsertstr(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function history_winit(): interop.Pointer;

declare function history_wend(p1: interop.PointerConvertible): void;

declare function history_w(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function tok_winit(p1: interop.PointerConvertible): interop.Pointer;

declare function tok_wend(p1: interop.PointerConvertible): void;

declare function tok_wreset(p1: interop.PointerConvertible): void;

declare function tok_wline(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible): number;

declare function tok_wstr(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function if_nametoindex(p1: string): number;

declare function if_indextoname(p1: number, p2: string): string;

declare function if_nameindex(): interop.Pointer;

declare function if_freenameindex(p1: interop.PointerConvertible): void;

declare function ioctl(p1: number, p2: number): number;

declare function readline(p1: string): string;

declare function rl_initialize(): number;

declare function using_history(): void;

declare function add_history(p1: string): number;

declare function clear_history(): void;

declare function stifle_history(p1: number): void;

declare function unstifle_history(): number;

declare function history_is_stifled(): number;

declare function where_history(): number;

declare function current_history(): interop.Pointer;

declare function history_get(p1: number): interop.Pointer;

declare function remove_history(p1: number): interop.Pointer;

declare function replace_history_entry(p1: number, p2: string, p3: interop.PointerConvertible): interop.Pointer;

declare function history_total_bytes(): number;

declare function history_set_pos(p1: number): number;

declare function previous_history(): interop.Pointer;

declare function next_history(): interop.Pointer;

declare function history_search(p1: string, p2: number): number;

declare function history_search_prefix(p1: string, p2: number): number;

declare function history_search_pos(p1: string, p2: number, p3: number): number;

declare function read_history(p1: string): number;

declare function write_history(p1: string): number;

declare function history_truncate_file(p1: string, p2: number): number;

declare function history_expand(p1: string, p2: interop.PointerConvertible): number;

declare function history_tokenize(p1: string): interop.Pointer;

declare function get_history_event(p1: string, p2: interop.PointerConvertible, p3: number): string;

declare function history_arg_extract(p1: number, p2: number, p3: string): string;

declare function tilde_expand(p1: string): string;

declare function filename_completion_function(p1: string, p2: number): string;

declare function username_completion_function(p1: string, p2: number): string;

declare function rl_complete(p1: number, p2: number): number;

declare function rl_read_key(): number;

declare function completion_matches(p1: string, p2: (p1: string, p2: number) => string): interop.Pointer;

declare function rl_display_match_list(p1: interop.PointerConvertible, p2: number, p3: number): void;

declare function rl_insert(p1: number, p2: number): number;

declare function rl_insert_text(p1: string): number;

declare function rl_reset_terminal(p1: string): void;

declare function rl_bind_key(p1: number, p2: (p1: number, p2: number) => number): number;

declare function rl_newline(p1: number, p2: number): number;

declare function rl_callback_read_char(): void;

declare function rl_callback_handler_install(p1: string, p2: (p1: string) => void): void;

declare function rl_callback_handler_remove(): void;

declare function rl_redisplay(): void;

declare function rl_get_previous_history(p1: number, p2: number): number;

declare function rl_prep_terminal(p1: number): void;

declare function rl_deprep_terminal(): void;

declare function rl_read_init_file(p1: string): number;

declare function rl_parse_and_bind(p1: string): number;

declare function rl_variable_bind(p1: string, p2: string): number;

declare function rl_stuff_char(p1: number): void;

declare function rl_add_defun(p1: string, p2: (p1: string, p2: number) => number, p3: number): number;

declare function history_get_history_state(): interop.Pointer;

declare function rl_get_screen_size(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function rl_set_screen_size(p1: number, p2: number): void;

declare function rl_filename_completion_function(p1: string, p2: number): string;

declare function _rl_abort_internal(): number;

declare function _rl_qsort_string_compare(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function rl_completion_matches(p1: string, p2: (p1: string, p2: number) => string): interop.Pointer;

declare function rl_forced_update_display(): void;

declare function rl_set_prompt(p1: string): number;

declare function rl_on_new_line(): number;

declare function rl_kill_text(p1: number, p2: number): number;

declare function rl_get_keymap(): interop.Pointer;

declare function rl_set_keymap(p1: interop.PointerConvertible): void;

declare function rl_make_bare_keymap(): interop.Pointer;

declare function rl_generic_bind(p1: number, p2: string, p3: string, p4: interop.PointerConvertible): number;

declare function rl_bind_key_in_map(p1: number, p2: (p1: number, p2: number) => number, p3: interop.PointerConvertible): number;

declare function rl_cleanup_after_signal(): void;

declare function rl_free_line_state(): void;

declare function imaxabs(j: number): number;

declare function imaxdiv(__numer: number, __denom: number): imaxdiv_t;

declare function strtoimax(__nptr: string, __endptr: interop.PointerConvertible, __base: number): number;

declare function strtoumax(__nptr: string, __endptr: interop.PointerConvertible, __base: number): number;

declare function wcstoimax(__nptr: interop.PointerConvertible, __endptr: interop.PointerConvertible, __base: number): number;

declare function wcstoumax(__nptr: interop.PointerConvertible, __endptr: interop.PointerConvertible, __base: number): number;

declare function gss_acquire_cred(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible, p5: number, p6: interop.PointerConvertible, p7: interop.PointerConvertible, p8: interop.PointerConvertible): number;

declare function gss_release_cred(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function gss_init_sec_context(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: number, p7: number, p8: interop.PointerConvertible, p9: interop.PointerConvertible, p10: interop.PointerConvertible, p11: interop.PointerConvertible, p12: interop.PointerConvertible, p13: interop.PointerConvertible): number;

declare function gss_accept_sec_context(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible, p7: interop.PointerConvertible, p8: interop.PointerConvertible, p9: interop.PointerConvertible, p10: interop.PointerConvertible, p11: interop.PointerConvertible): number;

declare function gss_process_context_token(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function gss_delete_sec_context(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function gss_context_time(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function gss_get_mic(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function gss_verify_mic(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function gss_wrap(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number, p5: interop.PointerConvertible, p6: interop.PointerConvertible, p7: interop.PointerConvertible): number;

declare function gss_unwrap(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible): number;

declare function gss_display_status(p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible): number;

declare function gss_indicate_mechs(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function gss_compare_name(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function gss_display_name(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function gss_import_name(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function gss_release_name(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function gss_release_buffer(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function gss_release_oid_set(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function gss_inquire_cred(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible): number;

declare function gss_inquire_context(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible, p7: interop.PointerConvertible, p8: interop.PointerConvertible, p9: interop.PointerConvertible): number;

declare function gss_wrap_size_limit(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number, p5: number, p6: interop.PointerConvertible): number;

declare function gss_export_name_object(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function gss_add_cred(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: number, p6: number, p7: number, p8: interop.PointerConvertible, p9: interop.PointerConvertible, p10: interop.PointerConvertible, p11: interop.PointerConvertible): number;

declare function gss_inquire_cred_by_mech(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible, p7: interop.PointerConvertible): number;

declare function gss_export_sec_context(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function gss_import_sec_context(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function gss_release_oid(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function gss_create_empty_oid_set(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function gss_add_oid_set_member(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function gss_test_oid_set_member(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function gss_str_to_oid(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function gss_oid_to_str(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function gss_inquire_names_for_mech(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function gss_inquire_mechs_for_name(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function gss_sign(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function gss_verify(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function gss_seal(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number, p5: interop.PointerConvertible, p6: interop.PointerConvertible, p7: interop.PointerConvertible): number;

declare function gss_unseal(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible): number;

declare function gss_export_name(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function gss_duplicate_name(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function gss_canonicalize_name(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function krb5_is_referral_realm(p1: interop.PointerConvertible): number;

declare function krb5_c_encrypt(context: interop.PointerConvertible, key: interop.PointerConvertible, usage: number, cipher_state: interop.PointerConvertible, input: interop.PointerConvertible, output: interop.PointerConvertible): number;

declare function krb5_c_decrypt(context: interop.PointerConvertible, key: interop.PointerConvertible, usage: number, cipher_state: interop.PointerConvertible, input: interop.PointerConvertible, output: interop.PointerConvertible): number;

declare function krb5_c_encrypt_length(context: interop.PointerConvertible, enctype: number, inputlen: number, length: interop.PointerConvertible): number;

declare function krb5_c_block_size(context: interop.PointerConvertible, enctype: number, blocksize: interop.PointerConvertible): number;

declare function krb5_c_init_state(context: interop.PointerConvertible, key: interop.PointerConvertible, usage: number, new_state: interop.PointerConvertible): number;

declare function krb5_c_free_state(context: interop.PointerConvertible, key: interop.PointerConvertible, state: interop.PointerConvertible): number;

declare function krb5_c_make_random_key(context: interop.PointerConvertible, enctype: number, k5_random_key: interop.PointerConvertible): number;

declare function krb5_c_random_add_entropy(context: interop.PointerConvertible, randsource_id: number, data: interop.PointerConvertible): number;

declare function krb5_c_random_make_octets(context: interop.PointerConvertible, data: interop.PointerConvertible): number;

declare function krb5_c_random_os_entropy(context: interop.PointerConvertible, strong: number, success: interop.PointerConvertible): number;

declare function krb5_c_random_seed(context: interop.PointerConvertible, data: interop.PointerConvertible): number;

declare function krb5_c_string_to_key(context: interop.PointerConvertible, enctype: number, string: interop.PointerConvertible, salt: interop.PointerConvertible, key: interop.PointerConvertible): number;

declare function krb5_c_string_to_key_with_params(context: interop.PointerConvertible, enctype: number, string: interop.PointerConvertible, salt: interop.PointerConvertible, params: interop.PointerConvertible, key: interop.PointerConvertible): number;

declare function krb5_c_enctype_compare(context: interop.PointerConvertible, e1: number, e2: number, similar: interop.PointerConvertible): number;

declare function krb5_c_make_checksum(context: interop.PointerConvertible, cksumtype: number, key: interop.PointerConvertible, usage: number, input: interop.PointerConvertible, cksum: interop.PointerConvertible): number;

declare function krb5_c_verify_checksum(context: interop.PointerConvertible, key: interop.PointerConvertible, usage: number, data: interop.PointerConvertible, cksum: interop.PointerConvertible, valid: interop.PointerConvertible): number;

declare function krb5_c_checksum_length(context: interop.PointerConvertible, cksumtype: number, length: interop.PointerConvertible): number;

declare function krb5_c_keyed_checksum_types(context: interop.PointerConvertible, enctype: number, count: interop.PointerConvertible, cksumtypes: interop.PointerConvertible): number;

declare function krb5_c_valid_enctype(ktype: number): number;

declare function krb5_c_valid_cksumtype(ctype: number): number;

declare function krb5_c_is_coll_proof_cksum(ctype: number): number;

declare function krb5_c_is_keyed_cksum(ctype: number): number;

declare function krb5_encrypt(context: interop.PointerConvertible, inptr: interop.PointerConvertible, outptr: interop.PointerConvertible, size: number, eblock: interop.PointerConvertible, ivec: interop.PointerConvertible): number;

declare function krb5_decrypt(context: interop.PointerConvertible, inptr: interop.PointerConvertible, outptr: interop.PointerConvertible, size: number, eblock: interop.PointerConvertible, ivec: interop.PointerConvertible): number;

declare function krb5_process_key(context: interop.PointerConvertible, eblock: interop.PointerConvertible, key: interop.PointerConvertible): number;

declare function krb5_finish_key(context: interop.PointerConvertible, eblock: interop.PointerConvertible): number;

declare function krb5_string_to_key(context: interop.PointerConvertible, eblock: interop.PointerConvertible, keyblock: interop.PointerConvertible, data: interop.PointerConvertible, salt: interop.PointerConvertible): number;

declare function krb5_init_random_key(context: interop.PointerConvertible, eblock: interop.PointerConvertible, keyblock: interop.PointerConvertible, ptr: interop.PointerConvertible): number;

declare function krb5_finish_random_key(context: interop.PointerConvertible, eblock: interop.PointerConvertible, ptr: interop.PointerConvertible): number;

declare function krb5_random_key(context: interop.PointerConvertible, eblock: interop.PointerConvertible, ptr: interop.PointerConvertible, keyblock: interop.PointerConvertible): number;

declare function krb5_eblock_enctype(context: interop.PointerConvertible, eblock: interop.PointerConvertible): number;

declare function krb5_use_enctype(context: interop.PointerConvertible, eblock: interop.PointerConvertible, enctype: number): number;

declare function krb5_encrypt_size(length: number, crypto: number): number;

declare function krb5_checksum_size(context: interop.PointerConvertible, ctype: number): number;

declare function krb5_calculate_checksum(context: interop.PointerConvertible, ctype: number, in: interop.PointerConvertible, in_length: number, seed: interop.PointerConvertible, seed_length: number, outcksum: interop.PointerConvertible): number;

declare function krb5_verify_checksum(context: interop.PointerConvertible, ctype: number, cksum: interop.PointerConvertible, in: interop.PointerConvertible, in_length: number, seed: interop.PointerConvertible, seed_length: number): number;

declare function krb5_cc_get_name(context: interop.PointerConvertible, cache: interop.PointerConvertible): string;

declare function krb5_cc_gen_new(context: interop.PointerConvertible, cache: interop.PointerConvertible): number;

declare function krb5_cc_initialize(context: interop.PointerConvertible, cache: interop.PointerConvertible, principal: interop.PointerConvertible): number;

declare function krb5_cc_destroy(context: interop.PointerConvertible, cache: interop.PointerConvertible): number;

declare function krb5_cc_close(context: interop.PointerConvertible, cache: interop.PointerConvertible): number;

declare function krb5_cc_store_cred(context: interop.PointerConvertible, cache: interop.PointerConvertible, creds: interop.PointerConvertible): number;

declare function krb5_cc_retrieve_cred(context: interop.PointerConvertible, cache: interop.PointerConvertible, flags: number, mcreds: interop.PointerConvertible, creds: interop.PointerConvertible): number;

declare function krb5_cc_get_principal(context: interop.PointerConvertible, cache: interop.PointerConvertible, principal: interop.PointerConvertible): number;

declare function krb5_cc_start_seq_get(context: interop.PointerConvertible, cache: interop.PointerConvertible, cursor: interop.PointerConvertible): number;

declare function krb5_cc_next_cred(context: interop.PointerConvertible, cache: interop.PointerConvertible, cursor: interop.PointerConvertible, creds: interop.PointerConvertible): number;

declare function krb5_cc_end_seq_get(context: interop.PointerConvertible, cache: interop.PointerConvertible, cursor: interop.PointerConvertible): number;

declare function krb5_cc_remove_cred(context: interop.PointerConvertible, cache: interop.PointerConvertible, flags: number, creds: interop.PointerConvertible): number;

declare function krb5_cc_set_flags(context: interop.PointerConvertible, cache: interop.PointerConvertible, flags: number): number;

declare function krb5_cc_get_type(context: interop.PointerConvertible, cache: interop.PointerConvertible): string;

declare function krb5_cc_move(context: interop.PointerConvertible, src: interop.PointerConvertible, dst: interop.PointerConvertible): number;

declare function krb5_cc_last_change_time(context: interop.PointerConvertible, ccache: interop.PointerConvertible, change_time: interop.PointerConvertible): number;

declare function krb5_cc_lock(context: interop.PointerConvertible, ccache: interop.PointerConvertible): number;

declare function krb5_cc_unlock(context: interop.PointerConvertible, ccache: interop.PointerConvertible): number;

declare function krb5_cc_cache_match(context: interop.PointerConvertible, client: interop.PointerConvertible, id: interop.PointerConvertible): number;

declare function krb5_cccol_cursor_new(context: interop.PointerConvertible, cursor: interop.PointerConvertible): number;

declare function krb5_cccol_cursor_next(context: interop.PointerConvertible, cursor: interop.PointerConvertible, ccache: interop.PointerConvertible): number;

declare function krb5_cccol_cursor_free(context: interop.PointerConvertible, cursor: interop.PointerConvertible): number;

declare function krb5_cccol_last_change_time(context: interop.PointerConvertible, change_time: interop.PointerConvertible): number;

declare function krb5_cccol_lock(context: interop.PointerConvertible): number;

declare function krb5_cccol_unlock(context: interop.PointerConvertible): number;

declare function krb5_cc_new_unique(context: interop.PointerConvertible, type: string, hint: string, id: interop.PointerConvertible): number;

declare function krb5_kt_get_type(p1: interop.PointerConvertible, keytab: interop.PointerConvertible): string;

declare function krb5_kt_get_name(context: interop.PointerConvertible, keytab: interop.PointerConvertible, name: string, namelen: number): number;

declare function krb5_kt_close(context: interop.PointerConvertible, keytab: interop.PointerConvertible): number;

declare function krb5_kt_get_entry(context: interop.PointerConvertible, keytab: interop.PointerConvertible, principal: interop.PointerConvertible, vno: number, enctype: number, entry: interop.PointerConvertible): number;

declare function krb5_kt_start_seq_get(context: interop.PointerConvertible, keytab: interop.PointerConvertible, cursor: interop.PointerConvertible): number;

declare function krb5_kt_next_entry(context: interop.PointerConvertible, keytab: interop.PointerConvertible, entry: interop.PointerConvertible, cursor: interop.PointerConvertible): number;

declare function krb5_kt_end_seq_get(context: interop.PointerConvertible, keytab: interop.PointerConvertible, cursor: interop.PointerConvertible): number;

declare function krb5_init_context(p1: interop.PointerConvertible): number;

declare function krb5_init_secure_context(p1: interop.PointerConvertible): number;

declare function krb5_free_context(p1: interop.PointerConvertible): void;

declare function krb5_copy_context(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function krb5_set_default_tgs_enctypes(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function krb5_get_permitted_enctypes(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function krb5_is_thread_safe(): number;

declare function krb5_server_decrypt_ticket_keytab(context: interop.PointerConvertible, kt: interop.PointerConvertible, ticket: interop.PointerConvertible): number;

declare function krb5_free_tgt_creds(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_get_credentials(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function krb5_get_credentials_validate(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function krb5_get_credentials_renew(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function krb5_mk_req(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: string, p5: string, p6: interop.PointerConvertible, p7: interop.PointerConvertible, p8: interop.PointerConvertible): number;

declare function krb5_mk_req_extended(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible): number;

declare function krb5_mk_rep(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_rd_rep(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function krb5_mk_error(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_rd_error(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_rd_safe(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function krb5_rd_priv(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function krb5_parse_name(p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible): number;

declare function krb5_parse_name_flags(p1: interop.PointerConvertible, p2: string, p3: number, p4: interop.PointerConvertible): number;

declare function krb5_unparse_name(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_unparse_name_ext(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function krb5_unparse_name_flags(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible): number;

declare function krb5_unparse_name_flags_ext(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function krb5_set_principal_realm(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string): number;

declare function krb5_address_search(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_address_compare(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_address_order(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_realm_compare(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_principal_compare(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_init_keyblock(p1: interop.PointerConvertible, enctype: number, length: number, out: interop.PointerConvertible): number;

declare function krb5_copy_keyblock(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_copy_keyblock_contents(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_copy_creds(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_copy_data(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_copy_principal(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_copy_addresses(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_copy_ticket(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_copy_authdata(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_copy_authenticator(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_copy_checksum(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_get_server_rcache(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_build_principal_ext(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: string): number;

declare function krb5_build_principal(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: string): number;

declare function krb5_build_principal_alloc_va(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: string, p5: string): number;

declare function krb5_425_conv_principal(p1: interop.PointerConvertible, name: string, instance: string, realm: string, princ: interop.PointerConvertible): number;

declare function krb5_524_conv_principal(context: interop.PointerConvertible, princ: interop.PointerConvertible, name: string, inst: string, realm: string): number;

declare function krb5_524_convert_creds(context: interop.PointerConvertible, v5creds: interop.PointerConvertible, v4creds: interop.PointerConvertible): number;

declare function krb5_kt_resolve(p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible): number;

declare function krb5_kt_default_name(p1: interop.PointerConvertible, p2: string, p3: number): number;

declare function krb5_kt_default(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function krb5_free_keytab_entry_contents(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function krb5_kt_remove_entry(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_kt_add_entry(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_principal2salt(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_cc_resolve(p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible): number;

declare function krb5_cc_default_name(p1: interop.PointerConvertible): string;

declare function krb5_cc_set_default_name(p1: interop.PointerConvertible, p2: string): number;

declare function krb5_cc_default(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function krb5_cc_copy_creds(context: interop.PointerConvertible, incc: interop.PointerConvertible, outcc: interop.PointerConvertible): number;

declare function krb5_cc_get_config(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: string, p5: interop.PointerConvertible): number;

declare function krb5_cc_set_config(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: string, p5: interop.PointerConvertible): number;

declare function krb5_is_config_principal(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function krb5_free_principal(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_free_authenticator(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_free_addresses(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_free_authdata(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_free_ticket(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_free_error(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_free_creds(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_free_cred_contents(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_free_checksum(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_free_checksum_contents(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_free_keyblock(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_free_keyblock_contents(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_free_ap_rep_enc_part(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_free_data(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_free_data_contents(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_free_unparsed_name(p1: interop.PointerConvertible, p2: string): void;

declare function krb5_free_cksumtypes(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function krb5_us_timeofday(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_timeofday(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function krb5_os_localaddr(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function krb5_get_default_realm(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function krb5_set_default_realm(p1: interop.PointerConvertible, p2: string): number;

declare function krb5_free_default_realm(p1: interop.PointerConvertible, p2: string): void;

declare function krb5_sname_to_principal(p1: interop.PointerConvertible, p2: string, p3: string, p4: number, p5: interop.PointerConvertible): number;

declare function krb5_change_password(context: interop.PointerConvertible, creds: interop.PointerConvertible, newpw: string, result_code: interop.PointerConvertible, result_code_string: interop.PointerConvertible, result_string: interop.PointerConvertible): number;

declare function krb5_set_password(context: interop.PointerConvertible, creds: interop.PointerConvertible, newpw: string, change_password_for: interop.PointerConvertible, result_code: interop.PointerConvertible, result_code_string: interop.PointerConvertible, result_string: interop.PointerConvertible): number;

declare function krb5_set_password_using_ccache(context: interop.PointerConvertible, ccache: interop.PointerConvertible, newpw: string, change_password_for: interop.PointerConvertible, result_code: interop.PointerConvertible, result_code_string: interop.PointerConvertible, result_string: interop.PointerConvertible): number;

declare function krb5_get_profile(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function krb5_rd_req(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible, p7: interop.PointerConvertible): number;

declare function krb5_kt_read_service_key(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: number, p5: number, p6: interop.PointerConvertible): number;

declare function krb5_mk_safe(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function krb5_mk_priv(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function krb5_sendauth(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: string, p5: interop.PointerConvertible, p6: interop.PointerConvertible, p7: number, p8: interop.PointerConvertible, p9: interop.PointerConvertible, p10: interop.PointerConvertible, p11: interop.PointerConvertible, p12: interop.PointerConvertible, p13: interop.PointerConvertible): number;

declare function krb5_recvauth(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: string, p5: interop.PointerConvertible, p6: number, p7: interop.PointerConvertible, p8: interop.PointerConvertible): number;

declare function krb5_recvauth_version(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: number, p6: interop.PointerConvertible, p7: interop.PointerConvertible, p8: interop.PointerConvertible): number;

declare function krb5_mk_ncred(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function krb5_mk_1cred(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function krb5_rd_cred(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function krb5_fwd_tgt_creds(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible, forwardable: number, p8: interop.PointerConvertible): number;

declare function krb5_auth_con_init(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function krb5_auth_con_free(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function krb5_auth_con_setflags(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function krb5_auth_con_getflags(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_auth_con_set_checksum_func(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number, p4: interop.PointerConvertible): number;

declare function krb5_auth_con_get_checksum_func(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function krb5_auth_con_setaddrs(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function krb5_auth_con_getaddrs(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function krb5_auth_con_setports(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function krb5_auth_con_setuseruserkey(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_auth_con_getkey(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_auth_con_getsendsubkey(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_auth_con_getrecvsubkey(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_auth_con_setsendsubkey(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_auth_con_setrecvsubkey(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_auth_con_getlocalseqnumber(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_auth_con_getremoteseqnumber(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_auth_con_setrcache(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_auth_con_getrcache(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_auth_con_getauthenticator(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_read_password(p1: interop.PointerConvertible, p2: string, p3: string, p4: string, p5: interop.PointerConvertible): number;

declare function krb5_aname_to_localname(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: string): number;

declare function krb5_get_host_realm(p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible): number;

declare function krb5_free_host_realm(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function krb5_kuserok(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string): number;

declare function krb5_auth_con_genaddrs(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number): number;

declare function krb5_set_real_time(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function krb5_get_time_offsets(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function krb5_string_to_enctype(p1: string, p2: interop.PointerConvertible): number;

declare function krb5_string_to_salttype(p1: string, p2: interop.PointerConvertible): number;

declare function krb5_string_to_cksumtype(p1: string, p2: interop.PointerConvertible): number;

declare function krb5_string_to_timestamp(p1: string, p2: interop.PointerConvertible): number;

declare function krb5_string_to_deltat(p1: string, p2: interop.PointerConvertible): number;

declare function krb5_enctype_to_string(p1: number, p2: string, p3: number): number;

declare function krb5_salttype_to_string(p1: number, p2: string, p3: number): number;

declare function krb5_cksumtype_to_string(p1: number, p2: string, p3: number): number;

declare function krb5_timestamp_to_string(p1: number, p2: string, p3: number): number;

declare function krb5_timestamp_to_sfstring(p1: number, p2: string, p3: number, p4: string): number;

declare function krb5_deltat_to_string(p1: number, p2: string, p3: number): number;

declare function krb5_prompter_posix(context: interop.PointerConvertible, data: interop.PointerConvertible, name: string, banner: string, num_prompts: number, prompts: interop.Pointer): number;

declare function krb5_get_init_creds_opt_alloc(context: interop.PointerConvertible, opt: interop.PointerConvertible): number;

declare function krb5_get_init_creds_opt_free(context: interop.PointerConvertible, opt: interop.PointerConvertible): void;

declare function krb5_get_init_creds_opt_init(opt: interop.PointerConvertible): void;

declare function krb5_get_init_creds_opt_set_tkt_life(opt: interop.PointerConvertible, tkt_life: number): void;

declare function krb5_get_init_creds_opt_set_renew_life(opt: interop.PointerConvertible, renew_life: number): void;

declare function krb5_get_init_creds_opt_set_forwardable(opt: interop.PointerConvertible, forwardable: number): void;

declare function krb5_get_init_creds_opt_set_proxiable(opt: interop.PointerConvertible, proxiable: number): void;

declare function krb5_get_init_creds_opt_set_canonicalize(opt: interop.PointerConvertible, canonicalize: number): void;

declare function krb5_get_init_creds_opt_set_etype_list(opt: interop.PointerConvertible, etype_list: interop.PointerConvertible, etype_list_length: number): void;

declare function krb5_get_init_creds_opt_set_address_list(opt: interop.PointerConvertible, addresses: interop.PointerConvertible): void;

declare function krb5_get_init_creds_opt_set_preauth_list(opt: interop.PointerConvertible, preauth_list: interop.PointerConvertible, preauth_list_length: number): void;

declare function krb5_get_init_creds_opt_set_salt(opt: interop.PointerConvertible, salt: interop.PointerConvertible): void;

declare function krb5_get_init_creds_opt_set_change_password_prompt(opt: interop.PointerConvertible, prompt: number): void;

declare function krb5_get_init_creds_opt_set_pa(context: interop.PointerConvertible, opt: interop.PointerConvertible, attr: string, value: string): number;

declare function krb5_get_init_creds_opt_set_process_last_req(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number, p4: interop.PointerConvertible): number;

declare function krb5_get_init_creds_password(context: interop.PointerConvertible, creds: interop.PointerConvertible, client: interop.PointerConvertible, password: string, prompter: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string, p4: string, p5: number, p6: interop.PointerConvertible) => number, data: interop.PointerConvertible, start_time: number, in_tkt_service: string, k5_gic_options: interop.PointerConvertible): number;

declare function krb5_get_init_creds_keytab(context: interop.PointerConvertible, creds: interop.PointerConvertible, client: interop.PointerConvertible, arg_keytab: interop.PointerConvertible, start_time: number, in_tkt_service: string, k5_gic_options: interop.PointerConvertible): number;

declare function krb5_verify_init_creds_opt_init(k5_vic_options: interop.PointerConvertible): void;

declare function krb5_verify_init_creds_opt_set_ap_req_nofail(k5_vic_options: interop.PointerConvertible, ap_req_nofail: number): void;

declare function krb5_verify_init_creds(context: interop.PointerConvertible, creds: interop.PointerConvertible, ap_req_server: interop.PointerConvertible, ap_req_keytab: interop.PointerConvertible, ccache: interop.PointerConvertible, k5_vic_options: interop.PointerConvertible): number;

declare function krb5_get_validated_creds(context: interop.PointerConvertible, creds: interop.PointerConvertible, client: interop.PointerConvertible, ccache: interop.PointerConvertible, in_tkt_service: string): number;

declare function krb5_get_renewed_creds(context: interop.PointerConvertible, creds: interop.PointerConvertible, client: interop.PointerConvertible, ccache: interop.PointerConvertible, in_tkt_service: string): number;

declare function krb5_decode_ticket(code: interop.PointerConvertible, rep: interop.PointerConvertible): number;

declare function krb5_appdefault_string(context: interop.PointerConvertible, appname: string, realm: interop.PointerConvertible, option: string, default_value: string, ret_value: interop.PointerConvertible): void;

declare function krb5_appdefault_boolean(context: interop.PointerConvertible, appname: string, realm: interop.PointerConvertible, option: string, default_value: number, ret_value: interop.PointerConvertible): void;

declare function krb5_get_prompt_types(context: interop.PointerConvertible): interop.Pointer;

declare function krb5_set_error_message(p1: interop.PointerConvertible, p2: number, p3: string): void;

declare function krb5_vset_error_message(p1: interop.PointerConvertible, p2: number, p3: string, p4: string): void;

declare function krb5_get_error_message(p1: interop.PointerConvertible, p2: number): string;

declare function krb5_free_error_message(p1: interop.PointerConvertible, p2: string): void;

declare function krb5_clear_error_message(p1: interop.PointerConvertible): void;

declare function com_err(progname: string, code: number, format: string): void;

declare function com_err_va(progname: string, code: number, format: string, args: string): void;

declare function error_message(code: number): string;

declare function set_com_err_hook(handler: (p1: string, p2: number, p3: string, p4: string) => void): (p1: string, p2: number, p3: string, p4: string) => void;

declare function reset_com_err_hook(): (p1: string, p2: number, p3: string, p4: string) => void;

declare function add_error_table(et: interop.PointerConvertible): number;

declare function remove_error_table(et: interop.PointerConvertible): number;

declare function initialize_krb5_error_table(): void;

declare function initialize_k524_error_table(): void;

declare function initialize_asn1_error_table(): void;

declare function krb5_gss_register_acceptor_identity(p1: string): number;

declare function gss_krb5_get_tkt_flags(minor_status: interop.PointerConvertible, context_handle: interop.PointerConvertible, ticket_flags: interop.PointerConvertible): number;

declare function gss_krb5_copy_ccache(minor_status: interop.PointerConvertible, cred_handle: interop.PointerConvertible, out_ccache: interop.PointerConvertible): number;

declare function gss_krb5_ccache_name(minor_status: interop.PointerConvertible, name: string, out_name: interop.PointerConvertible): number;

declare function gss_krb5_set_allowable_enctypes(minor_status: interop.PointerConvertible, cred: interop.PointerConvertible, num_ktypes: number, ktypes: interop.PointerConvertible): number;

declare function gss_krb5_export_lucid_sec_context(minor_status: interop.PointerConvertible, context_handle: interop.PointerConvertible, version: number, kctx: interop.PointerConvertible): number;

declare function apple_gss_krb5_export_authdata_if_relevant_context(minor_status: interop.PointerConvertible, context_handle: interop.PointerConvertible, version: number, kctx: interop.PointerConvertible): number;

declare function apple_gss_krb5_free_authdata_if_relevant(minor_status: interop.PointerConvertible, kctx: interop.PointerConvertible): number;

declare function gss_krb5_free_lucid_sec_context(minor_status: interop.PointerConvertible, kctx: interop.PointerConvertible): number;

declare function gss_krb5_ui(p1: interop.PointerConvertible, p2: number): number;

declare function u_versionFromString(versionArray: unknown /* const array */, versionString: string): void;

declare function u_versionFromUString(versionArray: unknown /* const array */, versionString: interop.PointerConvertible): void;

declare function u_versionToString(versionArray: unknown /* const array */, versionString: string): void;

declare function u_getVersion(versionArray: unknown /* const array */): void;

declare function utf8_nextCharSafeBody(s: interop.PointerConvertible, pi: interop.PointerConvertible, length: number, c: number, strict: number): number;

declare function utf8_appendCharSafeBody(s: interop.PointerConvertible, i: number, length: number, c: number, pIsError: interop.PointerConvertible): number;

declare function utf8_prevCharSafeBody(s: interop.PointerConvertible, start: number, pi: interop.PointerConvertible, c: number, strict: number): number;

declare function utf8_back1SafeBody(s: interop.PointerConvertible, start: number, i: number): number;

declare function u_errorName(code: interop.Enum<typeof UErrorCode>): string;

declare function u_getDataDirectory(): string;

declare function u_setDataDirectory(directory: string): void;

declare function u_getTimeZoneFilesDirectory(status: interop.PointerConvertible): string;

declare function u_setTimeZoneFilesDirectory(path: string, status: interop.PointerConvertible): void;

declare function u_charsToUChars(cs: string, us: interop.PointerConvertible, length: number): void;

declare function u_UCharsToChars(us: interop.PointerConvertible, cs: string, length: number): void;

declare function ucpmap_get(map: interop.PointerConvertible, c: number): number;

declare function ucpmap_getRange(map: interop.PointerConvertible, start: number, option: interop.Enum<typeof UCPMapRangeOption>, surrogateValue: number, filter: (p1: interop.PointerConvertible, p2: number) => number, context: interop.PointerConvertible, pValue: interop.PointerConvertible): number;

declare function u_hasBinaryProperty(c: number, which: interop.Enum<typeof UProperty>): number;

declare function u_stringHasBinaryProperty(s: interop.PointerConvertible, length: number, which: interop.Enum<typeof UProperty>): number;

declare function u_getBinaryPropertySet(property: interop.Enum<typeof UProperty>, pErrorCode: interop.PointerConvertible): interop.Pointer;

declare function u_isUAlphabetic(c: number): number;

declare function u_isULowercase(c: number): number;

declare function u_isUUppercase(c: number): number;

declare function u_isUWhiteSpace(c: number): number;

declare function u_getIntPropertyValue(c: number, which: interop.Enum<typeof UProperty>): number;

declare function u_getIntPropertyMinValue(which: interop.Enum<typeof UProperty>): number;

declare function u_getIntPropertyMaxValue(which: interop.Enum<typeof UProperty>): number;

declare function u_getIntPropertyMap(property: interop.Enum<typeof UProperty>, pErrorCode: interop.PointerConvertible): interop.Pointer;

declare function u_getNumericValue(c: number): number;

declare function u_islower(c: number): number;

declare function u_isupper(c: number): number;

declare function u_istitle(c: number): number;

declare function u_isdigit(c: number): number;

declare function u_isalpha(c: number): number;

declare function u_isalnum(c: number): number;

declare function u_isxdigit(c: number): number;

declare function u_ispunct(c: number): number;

declare function u_isgraph(c: number): number;

declare function u_isblank(c: number): number;

declare function u_isdefined(c: number): number;

declare function u_isspace(c: number): number;

declare function u_isJavaSpaceChar(c: number): number;

declare function u_isWhitespace(c: number): number;

declare function u_iscntrl(c: number): number;

declare function u_isISOControl(c: number): number;

declare function u_isprint(c: number): number;

declare function u_isbase(c: number): number;

declare function u_charDirection(c: number): interop.Enum<typeof UCharDirection>;

declare function u_isMirrored(c: number): number;

declare function u_charMirror(c: number): number;

declare function u_getBidiPairedBracket(c: number): number;

declare function u_charType(c: number): number;

declare function u_enumCharTypes(enumRange: (p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.Enum<typeof UCharCategory>) => number, context: interop.PointerConvertible): void;

declare function u_getCombiningClass(c: number): number;

declare function u_charDigitValue(c: number): number;

declare function ublock_getCode(c: number): interop.Enum<typeof UBlockCode>;

declare function u_charName(code: number, nameChoice: interop.Enum<typeof UCharNameChoice>, buffer: string, bufferLength: number, pErrorCode: interop.PointerConvertible): number;

declare function u_getISOComment(c: number, dest: string, destCapacity: number, pErrorCode: interop.PointerConvertible): number;

declare function u_charFromName(nameChoice: interop.Enum<typeof UCharNameChoice>, name: string, pErrorCode: interop.PointerConvertible): number;

declare function u_enumCharNames(start: number, limit: number, fn: (p1: interop.PointerConvertible, p2: number, p3: interop.Enum<typeof UCharNameChoice>, p4: string, p5: number) => number, context: interop.PointerConvertible, nameChoice: interop.Enum<typeof UCharNameChoice>, pErrorCode: interop.PointerConvertible): void;

declare function u_getPropertyName(property: interop.Enum<typeof UProperty>, nameChoice: interop.Enum<typeof UPropertyNameChoice>): string;

declare function u_getPropertyEnum(alias: string): interop.Enum<typeof UProperty>;

declare function u_getPropertyValueName(property: interop.Enum<typeof UProperty>, value: number, nameChoice: interop.Enum<typeof UPropertyNameChoice>): string;

declare function u_getPropertyValueEnum(property: interop.Enum<typeof UProperty>, alias: string): number;

declare function u_isIDStart(c: number): number;

declare function u_isIDPart(c: number): number;

declare function u_hasIDType(c: number, type: interop.Enum<typeof UIdentifierType>): boolean;

declare function u_getIDTypes(c: number, types: interop.PointerConvertible, capacity: number, pErrorCode: interop.PointerConvertible): number;

declare function u_isIDIgnorable(c: number): number;

declare function u_isJavaIDStart(c: number): number;

declare function u_isJavaIDPart(c: number): number;

declare function u_tolower(c: number): number;

declare function u_toupper(c: number): number;

declare function u_totitle(c: number): number;

declare function u_foldCase(c: number, options: number): number;

declare function u_digit(ch: number, radix: number): number;

declare function u_forDigit(digit: number, radix: number): number;

declare function u_charAge(c: number, versionArray: unknown /* const array */): void;

declare function u_getUnicodeVersion(versionArray: unknown /* const array */): void;

declare function u_getFC_NFKC_Closure(c: number, dest: interop.PointerConvertible, destCapacity: number, pErrorCode: interop.PointerConvertible): number;

declare function uiter_current32(iter: interop.PointerConvertible): number;

declare function uiter_next32(iter: interop.PointerConvertible): number;

declare function uiter_previous32(iter: interop.PointerConvertible): number;

declare function uiter_getState(iter: interop.PointerConvertible): number;

declare function uiter_setState(iter: interop.PointerConvertible, state: number, pErrorCode: interop.PointerConvertible): void;

declare function uiter_setString(iter: interop.PointerConvertible, s: interop.PointerConvertible, length: number): void;

declare function uiter_setUTF16BE(iter: interop.PointerConvertible, s: string, length: number): void;

declare function uiter_setUTF8(iter: interop.PointerConvertible, s: string, length: number): void;

declare function utext_close(ut: interop.PointerConvertible): interop.Pointer;

declare function utext_openUTF8(ut: interop.PointerConvertible, s: string, length: number, status: interop.PointerConvertible): interop.Pointer;

declare function utext_openUChars(ut: interop.PointerConvertible, s: interop.PointerConvertible, length: number, status: interop.PointerConvertible): interop.Pointer;

declare function utext_clone(dest: interop.PointerConvertible, src: interop.PointerConvertible, deep: number, readOnly: number, status: interop.PointerConvertible): interop.Pointer;

declare function utext_equals(a: interop.PointerConvertible, b: interop.PointerConvertible): number;

declare function utext_nativeLength(ut: interop.PointerConvertible): number;

declare function utext_isLengthExpensive(ut: interop.PointerConvertible): number;

declare function utext_char32At(ut: interop.PointerConvertible, nativeIndex: number): number;

declare function utext_current32(ut: interop.PointerConvertible): number;

declare function utext_next32(ut: interop.PointerConvertible): number;

declare function utext_previous32(ut: interop.PointerConvertible): number;

declare function utext_next32From(ut: interop.PointerConvertible, nativeIndex: number): number;

declare function utext_previous32From(ut: interop.PointerConvertible, nativeIndex: number): number;

declare function utext_getNativeIndex(ut: interop.PointerConvertible): number;

declare function utext_setNativeIndex(ut: interop.PointerConvertible, nativeIndex: number): void;

declare function utext_moveIndex32(ut: interop.PointerConvertible, delta: number): number;

declare function utext_getPreviousNativeIndex(ut: interop.PointerConvertible): number;

declare function utext_extract(ut: interop.PointerConvertible, nativeStart: number, nativeLimit: number, dest: interop.PointerConvertible, destCapacity: number, status: interop.PointerConvertible): number;

declare function utext_isWritable(ut: interop.PointerConvertible): number;

declare function utext_hasMetaData(ut: interop.PointerConvertible): number;

declare function utext_replace(ut: interop.PointerConvertible, nativeStart: number, nativeLimit: number, replacementText: interop.PointerConvertible, replacementLength: number, status: interop.PointerConvertible): number;

declare function utext_copy(ut: interop.PointerConvertible, nativeStart: number, nativeLimit: number, destIndex: number, move: number, status: interop.PointerConvertible): void;

declare function utext_freeze(ut: interop.PointerConvertible): void;

declare function utext_setup(ut: interop.PointerConvertible, extraSpace: number, status: interop.PointerConvertible): interop.Pointer;

declare function uidna_openUTS46(options: number, pErrorCode: interop.PointerConvertible): interop.Pointer;

declare function uidna_close(idna: interop.PointerConvertible): void;

declare function uidna_labelToASCII(idna: interop.PointerConvertible, label: interop.PointerConvertible, length: number, dest: interop.PointerConvertible, capacity: number, pInfo: interop.PointerConvertible, pErrorCode: interop.PointerConvertible): number;

declare function uidna_labelToUnicode(idna: interop.PointerConvertible, label: interop.PointerConvertible, length: number, dest: interop.PointerConvertible, capacity: number, pInfo: interop.PointerConvertible, pErrorCode: interop.PointerConvertible): number;

declare function uidna_nameToASCII(idna: interop.PointerConvertible, name: interop.PointerConvertible, length: number, dest: interop.PointerConvertible, capacity: number, pInfo: interop.PointerConvertible, pErrorCode: interop.PointerConvertible): number;

declare function uidna_nameToUnicode(idna: interop.PointerConvertible, name: interop.PointerConvertible, length: number, dest: interop.PointerConvertible, capacity: number, pInfo: interop.PointerConvertible, pErrorCode: interop.PointerConvertible): number;

declare function uidna_labelToASCII_UTF8(idna: interop.PointerConvertible, label: string, length: number, dest: string, capacity: number, pInfo: interop.PointerConvertible, pErrorCode: interop.PointerConvertible): number;

declare function uidna_labelToUnicodeUTF8(idna: interop.PointerConvertible, label: string, length: number, dest: string, capacity: number, pInfo: interop.PointerConvertible, pErrorCode: interop.PointerConvertible): number;

declare function uidna_nameToASCII_UTF8(idna: interop.PointerConvertible, name: string, length: number, dest: string, capacity: number, pInfo: interop.PointerConvertible, pErrorCode: interop.PointerConvertible): number;

declare function uidna_nameToUnicodeUTF8(idna: interop.PointerConvertible, name: string, length: number, dest: string, capacity: number, pInfo: interop.PointerConvertible, pErrorCode: interop.PointerConvertible): number;

declare function uidna_toASCII(src: interop.PointerConvertible, srcLength: number, dest: interop.PointerConvertible, destCapacity: number, options: number, parseError: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uidna_toUnicode(src: interop.PointerConvertible, srcLength: number, dest: interop.PointerConvertible, destCapacity: number, options: number, parseError: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uidna_IDNToASCII(src: interop.PointerConvertible, srcLength: number, dest: interop.PointerConvertible, destCapacity: number, options: number, parseError: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uidna_IDNToUnicode(src: interop.PointerConvertible, srcLength: number, dest: interop.PointerConvertible, destCapacity: number, options: number, parseError: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uidna_compare(s1: interop.PointerConvertible, length1: number, s2: interop.PointerConvertible, length2: number, options: number, status: interop.PointerConvertible): number;

declare function uregex_open(pattern: interop.PointerConvertible, patternLength: number, flags: number, pe: interop.PointerConvertible, status: interop.PointerConvertible): interop.Pointer;

declare function uregex_openUText(pattern: interop.PointerConvertible, flags: number, pe: interop.PointerConvertible, status: interop.PointerConvertible): interop.Pointer;

declare function uregex_openC(pattern: string, flags: number, pe: interop.PointerConvertible, status: interop.PointerConvertible): interop.Pointer;

declare function uregex_close(regexp: interop.PointerConvertible): void;

declare function uregex_clone(regexp: interop.PointerConvertible, status: interop.PointerConvertible): interop.Pointer;

declare function uregex_pattern(regexp: interop.PointerConvertible, patLength: interop.PointerConvertible, status: interop.PointerConvertible): interop.Pointer;

declare function uregex_patternUText(regexp: interop.PointerConvertible, status: interop.PointerConvertible): interop.Pointer;

declare function uregex_flags(regexp: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uregex_setText(regexp: interop.PointerConvertible, text: interop.PointerConvertible, textLength: number, status: interop.PointerConvertible): void;

declare function uregex_setUText(regexp: interop.PointerConvertible, text: interop.PointerConvertible, status: interop.PointerConvertible): void;

declare function uregex_getText(regexp: interop.PointerConvertible, textLength: interop.PointerConvertible, status: interop.PointerConvertible): interop.Pointer;

declare function uregex_getUText(regexp: interop.PointerConvertible, dest: interop.PointerConvertible, status: interop.PointerConvertible): interop.Pointer;

declare function uregex_refreshUText(regexp: interop.PointerConvertible, text: interop.PointerConvertible, status: interop.PointerConvertible): void;

declare function uregex_matches(regexp: interop.PointerConvertible, startIndex: number, status: interop.PointerConvertible): number;

declare function uregex_matches64(regexp: interop.PointerConvertible, startIndex: number, status: interop.PointerConvertible): number;

declare function uregex_lookingAt(regexp: interop.PointerConvertible, startIndex: number, status: interop.PointerConvertible): number;

declare function uregex_lookingAt64(regexp: interop.PointerConvertible, startIndex: number, status: interop.PointerConvertible): number;

declare function uregex_find(regexp: interop.PointerConvertible, startIndex: number, status: interop.PointerConvertible): number;

declare function uregex_find64(regexp: interop.PointerConvertible, startIndex: number, status: interop.PointerConvertible): number;

declare function uregex_findNext(regexp: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uregex_groupCount(regexp: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uregex_groupNumberFromName(regexp: interop.PointerConvertible, groupName: interop.PointerConvertible, nameLength: number, status: interop.PointerConvertible): number;

declare function uregex_groupNumberFromCName(regexp: interop.PointerConvertible, groupName: string, nameLength: number, status: interop.PointerConvertible): number;

declare function uregex_group(regexp: interop.PointerConvertible, groupNum: number, dest: interop.PointerConvertible, destCapacity: number, status: interop.PointerConvertible): number;

declare function uregex_groupUText(regexp: interop.PointerConvertible, groupNum: number, dest: interop.PointerConvertible, groupLength: interop.PointerConvertible, status: interop.PointerConvertible): interop.Pointer;

declare function uregex_start(regexp: interop.PointerConvertible, groupNum: number, status: interop.PointerConvertible): number;

declare function uregex_start64(regexp: interop.PointerConvertible, groupNum: number, status: interop.PointerConvertible): number;

declare function uregex_end(regexp: interop.PointerConvertible, groupNum: number, status: interop.PointerConvertible): number;

declare function uregex_end64(regexp: interop.PointerConvertible, groupNum: number, status: interop.PointerConvertible): number;

declare function uregex_reset(regexp: interop.PointerConvertible, index: number, status: interop.PointerConvertible): void;

declare function uregex_reset64(regexp: interop.PointerConvertible, index: number, status: interop.PointerConvertible): void;

declare function uregex_setRegion(regexp: interop.PointerConvertible, regionStart: number, regionLimit: number, status: interop.PointerConvertible): void;

declare function uregex_setRegion64(regexp: interop.PointerConvertible, regionStart: number, regionLimit: number, status: interop.PointerConvertible): void;

declare function uregex_setRegionAndStart(regexp: interop.PointerConvertible, regionStart: number, regionLimit: number, startIndex: number, status: interop.PointerConvertible): void;

declare function uregex_regionStart(regexp: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uregex_regionStart64(regexp: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uregex_regionEnd(regexp: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uregex_regionEnd64(regexp: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uregex_hasTransparentBounds(regexp: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uregex_useTransparentBounds(regexp: interop.PointerConvertible, b: number, status: interop.PointerConvertible): void;

declare function uregex_hasAnchoringBounds(regexp: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uregex_useAnchoringBounds(regexp: interop.PointerConvertible, b: number, status: interop.PointerConvertible): void;

declare function uregex_hitEnd(regexp: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uregex_requireEnd(regexp: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uregex_replaceAll(regexp: interop.PointerConvertible, replacementText: interop.PointerConvertible, replacementLength: number, destBuf: interop.PointerConvertible, destCapacity: number, status: interop.PointerConvertible): number;

declare function uregex_replaceAllUText(regexp: interop.PointerConvertible, replacement: interop.PointerConvertible, dest: interop.PointerConvertible, status: interop.PointerConvertible): interop.Pointer;

declare function uregex_replaceFirst(regexp: interop.PointerConvertible, replacementText: interop.PointerConvertible, replacementLength: number, destBuf: interop.PointerConvertible, destCapacity: number, status: interop.PointerConvertible): number;

declare function uregex_replaceFirstUText(regexp: interop.PointerConvertible, replacement: interop.PointerConvertible, dest: interop.PointerConvertible, status: interop.PointerConvertible): interop.Pointer;

declare function uregex_appendReplacement(regexp: interop.PointerConvertible, replacementText: interop.PointerConvertible, replacementLength: number, destBuf: interop.PointerConvertible, destCapacity: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uregex_appendReplacementUText(regexp: interop.PointerConvertible, replacementText: interop.PointerConvertible, dest: interop.PointerConvertible, status: interop.PointerConvertible): void;

declare function uregex_appendTail(regexp: interop.PointerConvertible, destBuf: interop.PointerConvertible, destCapacity: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uregex_appendTailUText(regexp: interop.PointerConvertible, dest: interop.PointerConvertible, status: interop.PointerConvertible): interop.Pointer;

declare function uregex_split(regexp: interop.PointerConvertible, destBuf: interop.PointerConvertible, destCapacity: number, requiredCapacity: interop.PointerConvertible, destFields: interop.Pointer, destFieldsCapacity: number, status: interop.PointerConvertible): number;

declare function uregex_splitUText(regexp: interop.PointerConvertible, destFields: interop.Pointer, destFieldsCapacity: number, status: interop.PointerConvertible): number;

declare function uregex_setTimeLimit(regexp: interop.PointerConvertible, limit: number, status: interop.PointerConvertible): void;

declare function uregex_getTimeLimit(regexp: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uregex_setStackLimit(regexp: interop.PointerConvertible, limit: number, status: interop.PointerConvertible): void;

declare function uregex_getStackLimit(regexp: interop.PointerConvertible, status: interop.PointerConvertible): number;

declare function uregex_setMatchCallback(regexp: interop.PointerConvertible, callback: (p1: interop.PointerConvertible, p2: number) => number, context: interop.PointerConvertible, status: interop.PointerConvertible): void;

declare function uregex_getMatchCallback(regexp: interop.PointerConvertible, callback: interop.PointerConvertible, context: interop.PointerConvertible, status: interop.PointerConvertible): void;

declare function uregex_setFindProgressCallback(regexp: interop.PointerConvertible, callback: (p1: interop.PointerConvertible, p2: number) => number, context: interop.PointerConvertible, status: interop.PointerConvertible): void;

declare function uregex_getFindProgressCallback(regexp: interop.PointerConvertible, callback: interop.PointerConvertible, context: interop.PointerConvertible, status: interop.PointerConvertible): void;

declare function u_strlen(s: interop.PointerConvertible): number;

declare function u_countChar32(s: interop.PointerConvertible, length: number): number;

declare function u_strHasMoreChar32Than(s: interop.PointerConvertible, length: number, number: number): number;

declare function u_strcat(dst: interop.PointerConvertible, src: interop.PointerConvertible): interop.Pointer;

declare function u_strncat(dst: interop.PointerConvertible, src: interop.PointerConvertible, n: number): interop.Pointer;

declare function u_strstr(s: interop.PointerConvertible, substring: interop.PointerConvertible): interop.Pointer;

declare function u_strFindFirst(s: interop.PointerConvertible, length: number, substring: interop.PointerConvertible, subLength: number): interop.Pointer;

declare function u_strchr(s: interop.PointerConvertible, c: number): interop.Pointer;

declare function u_strchr32(s: interop.PointerConvertible, c: number): interop.Pointer;

declare function u_strrstr(s: interop.PointerConvertible, substring: interop.PointerConvertible): interop.Pointer;

declare function u_strFindLast(s: interop.PointerConvertible, length: number, substring: interop.PointerConvertible, subLength: number): interop.Pointer;

declare function u_strrchr(s: interop.PointerConvertible, c: number): interop.Pointer;

declare function u_strrchr32(s: interop.PointerConvertible, c: number): interop.Pointer;

declare function u_strpbrk(string: interop.PointerConvertible, matchSet: interop.PointerConvertible): interop.Pointer;

declare function u_strcspn(string: interop.PointerConvertible, matchSet: interop.PointerConvertible): number;

declare function u_strspn(string: interop.PointerConvertible, matchSet: interop.PointerConvertible): number;

declare function u_strtok_r(src: interop.PointerConvertible, delim: interop.PointerConvertible, saveState: interop.PointerConvertible): interop.Pointer;

declare function u_strcmp(s1: interop.PointerConvertible, s2: interop.PointerConvertible): number;

declare function u_strcmpCodePointOrder(s1: interop.PointerConvertible, s2: interop.PointerConvertible): number;

declare function u_strCompare(s1: interop.PointerConvertible, length1: number, s2: interop.PointerConvertible, length2: number, codePointOrder: number): number;

declare function u_strCompareIter(iter1: interop.PointerConvertible, iter2: interop.PointerConvertible, codePointOrder: number): number;

declare function u_strCaseCompare(s1: interop.PointerConvertible, length1: number, s2: interop.PointerConvertible, length2: number, options: number, pErrorCode: interop.PointerConvertible): number;

declare function u_strncmp(ucs1: interop.PointerConvertible, ucs2: interop.PointerConvertible, n: number): number;

declare function u_strncmpCodePointOrder(s1: interop.PointerConvertible, s2: interop.PointerConvertible, n: number): number;

declare function u_strcasecmp(s1: interop.PointerConvertible, s2: interop.PointerConvertible, options: number): number;

declare function u_strncasecmp(s1: interop.PointerConvertible, s2: interop.PointerConvertible, n: number, options: number): number;

declare function u_memcasecmp(s1: interop.PointerConvertible, s2: interop.PointerConvertible, length: number, options: number): number;

declare function u_strcpy(dst: interop.PointerConvertible, src: interop.PointerConvertible): interop.Pointer;

declare function u_strncpy(dst: interop.PointerConvertible, src: interop.PointerConvertible, n: number): interop.Pointer;

declare function u_uastrcpy(dst: interop.PointerConvertible, src: string): interop.Pointer;

declare function u_uastrncpy(dst: interop.PointerConvertible, src: string, n: number): interop.Pointer;

declare function u_austrcpy(dst: string, src: interop.PointerConvertible): string;

declare function u_austrncpy(dst: string, src: interop.PointerConvertible, n: number): string;

declare function u_memcpy(dest: interop.PointerConvertible, src: interop.PointerConvertible, count: number): interop.Pointer;

declare function u_memmove(dest: interop.PointerConvertible, src: interop.PointerConvertible, count: number): interop.Pointer;

declare function u_memset(dest: interop.PointerConvertible, c: number, count: number): interop.Pointer;

declare function u_memcmp(buf1: interop.PointerConvertible, buf2: interop.PointerConvertible, count: number): number;

declare function u_memcmpCodePointOrder(s1: interop.PointerConvertible, s2: interop.PointerConvertible, count: number): number;

declare function u_memchr(s: interop.PointerConvertible, c: number, count: number): interop.Pointer;

declare function u_memchr32(s: interop.PointerConvertible, c: number, count: number): interop.Pointer;

declare function u_memrchr(s: interop.PointerConvertible, c: number, count: number): interop.Pointer;

declare function u_memrchr32(s: interop.PointerConvertible, c: number, count: number): interop.Pointer;

declare function u_unescape(src: string, dest: interop.PointerConvertible, destCapacity: number): number;

declare function u_unescapeAt(charAt: (p1: number, p2: interop.PointerConvertible) => number, offset: interop.PointerConvertible, length: number, context: interop.PointerConvertible): number;

declare function u_strToUpper(dest: interop.PointerConvertible, destCapacity: number, src: interop.PointerConvertible, srcLength: number, locale: string, pErrorCode: interop.PointerConvertible): number;

declare function u_strToLower(dest: interop.PointerConvertible, destCapacity: number, src: interop.PointerConvertible, srcLength: number, locale: string, pErrorCode: interop.PointerConvertible): number;

declare function u_strToTitle(dest: interop.PointerConvertible, destCapacity: number, src: interop.PointerConvertible, srcLength: number, titleIter: interop.PointerConvertible, locale: string, pErrorCode: interop.PointerConvertible): number;

declare function u_strFoldCase(dest: interop.PointerConvertible, destCapacity: number, src: interop.PointerConvertible, srcLength: number, options: number, pErrorCode: interop.PointerConvertible): number;

declare function u_strToWCS(dest: interop.PointerConvertible, destCapacity: number, pDestLength: interop.PointerConvertible, src: interop.PointerConvertible, srcLength: number, pErrorCode: interop.PointerConvertible): interop.Pointer;

declare function u_strFromWCS(dest: interop.PointerConvertible, destCapacity: number, pDestLength: interop.PointerConvertible, src: interop.PointerConvertible, srcLength: number, pErrorCode: interop.PointerConvertible): interop.Pointer;

declare function u_strToUTF8(dest: string, destCapacity: number, pDestLength: interop.PointerConvertible, src: interop.PointerConvertible, srcLength: number, pErrorCode: interop.PointerConvertible): string;

declare function u_strFromUTF8(dest: interop.PointerConvertible, destCapacity: number, pDestLength: interop.PointerConvertible, src: string, srcLength: number, pErrorCode: interop.PointerConvertible): interop.Pointer;

declare function u_strToUTF8WithSub(dest: string, destCapacity: number, pDestLength: interop.PointerConvertible, src: interop.PointerConvertible, srcLength: number, subchar: number, pNumSubstitutions: interop.PointerConvertible, pErrorCode: interop.PointerConvertible): string;

declare function u_strFromUTF8WithSub(dest: interop.PointerConvertible, destCapacity: number, pDestLength: interop.PointerConvertible, src: string, srcLength: number, subchar: number, pNumSubstitutions: interop.PointerConvertible, pErrorCode: interop.PointerConvertible): interop.Pointer;

declare function u_strFromUTF8Lenient(dest: interop.PointerConvertible, destCapacity: number, pDestLength: interop.PointerConvertible, src: string, srcLength: number, pErrorCode: interop.PointerConvertible): interop.Pointer;

declare function u_strToUTF32(dest: interop.PointerConvertible, destCapacity: number, pDestLength: interop.PointerConvertible, src: interop.PointerConvertible, srcLength: number, pErrorCode: interop.PointerConvertible): interop.Pointer;

declare function u_strFromUTF32(dest: interop.PointerConvertible, destCapacity: number, pDestLength: interop.PointerConvertible, src: interop.PointerConvertible, srcLength: number, pErrorCode: interop.PointerConvertible): interop.Pointer;

declare function u_strToUTF32WithSub(dest: interop.PointerConvertible, destCapacity: number, pDestLength: interop.PointerConvertible, src: interop.PointerConvertible, srcLength: number, subchar: number, pNumSubstitutions: interop.PointerConvertible, pErrorCode: interop.PointerConvertible): interop.Pointer;

declare function u_strFromUTF32WithSub(dest: interop.PointerConvertible, destCapacity: number, pDestLength: interop.PointerConvertible, src: interop.PointerConvertible, srcLength: number, subchar: number, pNumSubstitutions: interop.PointerConvertible, pErrorCode: interop.PointerConvertible): interop.Pointer;

declare function u_strToJavaModifiedUTF8(dest: string, destCapacity: number, pDestLength: interop.PointerConvertible, src: interop.PointerConvertible, srcLength: number, pErrorCode: interop.PointerConvertible): string;

declare function u_strFromJavaModifiedUTF8WithSub(dest: interop.PointerConvertible, destCapacity: number, pDestLength: interop.PointerConvertible, src: string, srcLength: number, subchar: number, pNumSubstitutions: interop.PointerConvertible, pErrorCode: interop.PointerConvertible): interop.Pointer;

declare function u_strIsWellFormed(s: interop.PointerConvertible, length: number): number;

declare function profile_init(files: interop.PointerConvertible, ret_profile: interop.PointerConvertible): number;

declare function profile_init_path(filelist: string, ret_profile: interop.PointerConvertible): number;

declare function profile_configuration_updated(): void;

declare function profile_flush(profile: interop.PointerConvertible): number;

declare function profile_flush_to_file(profile: interop.PointerConvertible, outfile: string): number;

declare function profile_flush_to_buffer(profile: interop.PointerConvertible, bufp: interop.PointerConvertible): number;

declare function profile_free_buffer(profile: interop.PointerConvertible, buf: string): void;

declare function profile_is_writable(profile: interop.PointerConvertible, writable: interop.PointerConvertible): number;

declare function profile_is_modified(profile: interop.PointerConvertible, modified: interop.PointerConvertible): number;

declare function profile_abandon(profile: interop.PointerConvertible): void;

declare function profile_release(profile: interop.PointerConvertible): void;

declare function profile_get_values(profile: interop.PointerConvertible, names: interop.PointerConvertible, ret_values: interop.PointerConvertible): number;

declare function profile_free_list(list: interop.PointerConvertible): void;

declare function profile_get_string(profile: interop.PointerConvertible, name: string, subname: string, subsubname: string, def_val: string, ret_string: interop.PointerConvertible): number;

declare function profile_get_integer(profile: interop.PointerConvertible, name: string, subname: string, subsubname: string, def_val: number, ret_default: interop.PointerConvertible): number;

declare function profile_get_boolean(profile: interop.PointerConvertible, name: string, subname: string, subsubname: string, def_val: number, ret_default: interop.PointerConvertible): number;

declare function profile_get_relation_names(profile: interop.PointerConvertible, names: interop.PointerConvertible, ret_names: interop.PointerConvertible): number;

declare function profile_get_subsection_names(profile: interop.PointerConvertible, names: interop.PointerConvertible, ret_names: interop.PointerConvertible): number;

declare function profile_iterator_create(profile: interop.PointerConvertible, names: interop.PointerConvertible, flags: number, ret_iter: interop.PointerConvertible): number;

declare function profile_iterator_free(iter_p: interop.PointerConvertible): void;

declare function profile_iterator(iter_p: interop.PointerConvertible, ret_name: interop.PointerConvertible, ret_value: interop.PointerConvertible): number;

declare function profile_release_string(str: string): void;

declare function profile_update_relation(profile: interop.PointerConvertible, names: interop.PointerConvertible, old_value: string, new_value: string): number;

declare function profile_clear_relation(profile: interop.PointerConvertible, names: interop.PointerConvertible): number;

declare function profile_rename_section(profile: interop.PointerConvertible, names: interop.PointerConvertible, new_name: string): number;

declare function profile_add_relation(profile: interop.PointerConvertible, names: interop.PointerConvertible, new_value: string): number;

declare function initialize_prof_error_table(): void;

declare function ber_error_print(data: string): void;

declare function ber_bprint(data: string, len: number): void;

declare function ber_dump(ber: interop.PointerConvertible, inout: number): void;

declare function ber_get_tag(ber: interop.PointerConvertible): number;

declare function ber_skip_tag(ber: interop.PointerConvertible, len: interop.PointerConvertible): number;

declare function ber_peek_tag(ber: interop.PointerConvertible, len: interop.PointerConvertible): number;

declare function ber_skip_element(ber: interop.PointerConvertible, bv: interop.PointerConvertible): number;

declare function ber_peek_element(ber: interop.PointerConvertible, bv: interop.PointerConvertible): number;

declare function ber_get_int(ber: interop.PointerConvertible, num: interop.PointerConvertible): number;

declare function ber_get_enum(ber: interop.PointerConvertible, num: interop.PointerConvertible): number;

declare function ber_get_stringb(ber: interop.PointerConvertible, buf: string, len: interop.PointerConvertible): number;

declare function ber_get_stringbv(ber: interop.PointerConvertible, bv: interop.PointerConvertible, options: number): number;

declare function ber_get_stringa(ber: interop.PointerConvertible, buf: interop.PointerConvertible): number;

declare function ber_get_stringal(ber: interop.PointerConvertible, bv: interop.PointerConvertible): number;

declare function ber_get_bitstringa(ber: interop.PointerConvertible, buf: interop.PointerConvertible, len: interop.PointerConvertible): number;

declare function ber_get_null(ber: interop.PointerConvertible): number;

declare function ber_get_boolean(ber: interop.PointerConvertible, boolval: interop.PointerConvertible): number;

declare function ber_first_element(ber: interop.PointerConvertible, len: interop.PointerConvertible, last: interop.PointerConvertible): number;

declare function ber_next_element(ber: interop.PointerConvertible, len: interop.PointerConvertible, last: string): number;

declare function ber_scanf(ber: interop.PointerConvertible, fmt: string): number;

declare function ber_decode_oid(in: interop.PointerConvertible, out: interop.PointerConvertible): number;

declare function ber_encode_oid(in: interop.PointerConvertible, out: interop.PointerConvertible): number;

declare function ber_put_enum(ber: interop.PointerConvertible, num: number, tag: number): number;

declare function ber_put_int(ber: interop.PointerConvertible, num: number, tag: number): number;

declare function ber_put_ostring(ber: interop.PointerConvertible, str: string, len: number, tag: number): number;

declare function ber_put_berval(ber: interop.PointerConvertible, bv: interop.PointerConvertible, tag: number): number;

declare function ber_put_string(ber: interop.PointerConvertible, str: string, tag: number): number;

declare function ber_put_bitstring(ber: interop.PointerConvertible, str: string, bitlen: number, tag: number): number;

declare function ber_put_null(ber: interop.PointerConvertible, tag: number): number;

declare function ber_put_boolean(ber: interop.PointerConvertible, boolval: number, tag: number): number;

declare function ber_start_seq(ber: interop.PointerConvertible, tag: number): number;

declare function ber_start_set(ber: interop.PointerConvertible, tag: number): number;

declare function ber_put_seq(ber: interop.PointerConvertible): number;

declare function ber_put_set(ber: interop.PointerConvertible): number;

declare function ber_printf(ber: interop.PointerConvertible, fmt: string): number;

declare function ber_skip_data(ber: interop.PointerConvertible, len: number): number;

declare function ber_read(ber: interop.PointerConvertible, buf: string, len: number): number;

declare function ber_write(ber: interop.PointerConvertible, buf: string, len: number, zero: number): number;

declare function ber_free(ber: interop.PointerConvertible, freebuf: number): void;

declare function ber_free_buf(ber: interop.PointerConvertible): void;

declare function ber_flush2(sb: interop.PointerConvertible, ber: interop.PointerConvertible, freeit: number): number;

declare function ber_flush(sb: interop.PointerConvertible, ber: interop.PointerConvertible, freeit: number): number;

declare function ber_alloc(): interop.Pointer;

declare function der_alloc(): interop.Pointer;

declare function ber_alloc_t(beroptions: number): interop.Pointer;

declare function ber_dup(ber: interop.PointerConvertible): interop.Pointer;

declare function ber_get_next(sb: interop.PointerConvertible, len: interop.PointerConvertible, ber: interop.PointerConvertible): number;

declare function ber_init2(ber: interop.PointerConvertible, bv: interop.PointerConvertible, options: number): void;

declare function ber_init_w_nullc(ber: interop.PointerConvertible, options: number): void;

declare function ber_reset(ber: interop.PointerConvertible, was_writing: number): void;

declare function ber_init(bv: interop.PointerConvertible): interop.Pointer;

declare function ber_flatten(ber: interop.PointerConvertible, bvPtr: interop.PointerConvertible): number;

declare function ber_flatten2(ber: interop.PointerConvertible, bv: interop.PointerConvertible, alloc: number): number;

declare function ber_remaining(ber: interop.PointerConvertible): number;

declare function ber_get_option(item: interop.PointerConvertible, option: number, outvalue: interop.PointerConvertible): number;

declare function ber_set_option(item: interop.PointerConvertible, option: number, invalue: interop.PointerConvertible): number;

declare function ber_sockbuf_alloc(): interop.Pointer;

declare function ber_sockbuf_free(sb: interop.PointerConvertible): void;

declare function ber_sockbuf_add_io(sb: interop.PointerConvertible, sbio: interop.PointerConvertible, layer: number, arg: interop.PointerConvertible): number;

declare function ber_sockbuf_remove_io(sb: interop.PointerConvertible, sbio: interop.PointerConvertible, layer: number): number;

declare function ber_sockbuf_ctrl(sb: interop.PointerConvertible, opt: number, arg: interop.PointerConvertible): number;

declare function ber_memalloc(s: number): interop.Pointer;

declare function ber_memrealloc(p: interop.PointerConvertible, s: number): interop.Pointer;

declare function ber_memcalloc(n: number, s: number): interop.Pointer;

declare function ber_memfree(p: interop.PointerConvertible): void;

declare function ber_memvfree(vector: interop.PointerConvertible): void;

declare function ber_bvfree(bv: interop.PointerConvertible): void;

declare function ber_bvecfree(bv: interop.PointerConvertible): void;

declare function ber_bvecadd(bvec: interop.PointerConvertible, bv: interop.PointerConvertible): number;

declare function ber_dupbv(dst: interop.PointerConvertible, src: interop.PointerConvertible): interop.Pointer;

declare function ber_bvdup(src: interop.PointerConvertible): interop.Pointer;

declare function ber_mem2bv(p1: string, len: number, duplicate: number, bv: interop.PointerConvertible): interop.Pointer;

declare function ber_str2bv(p1: string, len: number, duplicate: number, bv: interop.PointerConvertible): interop.Pointer;

declare function ber_strdup(p1: string): string;

declare function ber_strnlen(s: string, len: number): number;

declare function ber_strndup(s: string, l: number): string;

declare function ber_bvreplace(dst: interop.PointerConvertible, src: interop.PointerConvertible): interop.Pointer;

declare function ber_bvarray_free(p: interop.PointerConvertible): void;

declare function ber_bvarray_add(p: interop.PointerConvertible, bv: interop.PointerConvertible): number;

declare function ber_errno_addr(): interop.Pointer;

declare function ldap_get_option(ld: interop.PointerConvertible, option: number, outvalue: interop.PointerConvertible): number;

declare function ldap_set_option(ld: interop.PointerConvertible, option: number, invalue: interop.PointerConvertible): number;

declare function ldap_set_rebind_proc(ld: interop.PointerConvertible, rebind_proc: (p1: interop.PointerConvertible, p2: string, p3: number, p4: number, p5: interop.PointerConvertible) => number, params: interop.PointerConvertible): number;

declare function ldap_set_nextref_proc(ld: interop.PointerConvertible, nextref_proc: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number, params: interop.PointerConvertible): number;

declare function ldap_set_urllist_proc(ld: interop.PointerConvertible, urllist_proc: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number, params: interop.PointerConvertible): number;

declare function ldap_create_control(requestOID: string, ber: interop.PointerConvertible, iscritical: number, ctrlp: interop.PointerConvertible): number;

declare function ldap_find_control(oid: string, ctrls: interop.PointerConvertible): interop.Pointer;

declare function ldap_control_create(requestOID: string, iscritical: number, value: interop.PointerConvertible, dupval: number, ctrlp: interop.PointerConvertible): number;

declare function ldap_control_find(oid: string, ctrls: interop.PointerConvertible, nextctrlp: interop.PointerConvertible): interop.Pointer;

declare function ldap_control_free(ctrl: interop.PointerConvertible): void;

declare function ldap_controls_free(ctrls: interop.PointerConvertible): void;

declare function ldap_controls_dup(controls: interop.PointerConvertible): interop.Pointer;

declare function ldap_control_dup(c: interop.PointerConvertible): interop.Pointer;

declare function ldap_domain2dn(domain: string, dn: interop.PointerConvertible): number;

declare function ldap_dn2domain(dn: string, domain: interop.PointerConvertible): number;

declare function ldap_domain2hostlist(domain: string, hostlist: interop.PointerConvertible): number;

declare function ldap_extended_operation(ld: interop.PointerConvertible, reqoid: string, reqdata: interop.PointerConvertible, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible, msgidp: interop.PointerConvertible): number;

declare function ldap_extended_operation_s(ld: interop.PointerConvertible, reqoid: string, reqdata: interop.PointerConvertible, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible, retoidp: interop.PointerConvertible, retdatap: interop.PointerConvertible): number;

declare function ldap_parse_extended_result(ld: interop.PointerConvertible, res: interop.PointerConvertible, retoidp: interop.PointerConvertible, retdatap: interop.PointerConvertible, freeit: number): number;

declare function ldap_parse_intermediate(ld: interop.PointerConvertible, res: interop.PointerConvertible, retoidp: interop.PointerConvertible, retdatap: interop.PointerConvertible, serverctrls: interop.PointerConvertible, freeit: number): number;

declare function ldap_abandon_ext(ld: interop.PointerConvertible, msgid: number, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible): number;

declare function ldap_abandon(ld: interop.PointerConvertible, msgid: number): number;

declare function ldap_add_ext(ld: interop.PointerConvertible, dn: string, attrs: interop.PointerConvertible, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible, msgidp: interop.PointerConvertible): number;

declare function ldap_add_ext_s(ld: interop.PointerConvertible, dn: string, attrs: interop.PointerConvertible, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible): number;

declare function ldap_add(ld: interop.PointerConvertible, dn: string, attrs: interop.PointerConvertible): number;

declare function ldap_add_s(ld: interop.PointerConvertible, dn: string, attrs: interop.PointerConvertible): number;

declare function ldap_sasl_bind(ld: interop.PointerConvertible, dn: string, mechanism: string, cred: interop.PointerConvertible, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible, msgidp: interop.PointerConvertible): number;

declare function ldap_sasl_interactive_bind(ld: interop.PointerConvertible, dn: string, saslMechanism: string, serverControls: interop.PointerConvertible, clientControls: interop.PointerConvertible, flags: number, proc: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number, defaults: interop.PointerConvertible, result: interop.PointerConvertible, rmech: interop.PointerConvertible, msgid: interop.PointerConvertible): number;

declare function ldap_sasl_interactive_bind_s(ld: interop.PointerConvertible, dn: string, saslMechanism: string, serverControls: interop.PointerConvertible, clientControls: interop.PointerConvertible, flags: number, proc: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number, defaults: interop.PointerConvertible): number;

declare function ldap_sasl_bind_s(ld: interop.PointerConvertible, dn: string, mechanism: string, cred: interop.PointerConvertible, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible, servercredp: interop.PointerConvertible): number;

declare function ldap_parse_sasl_bind_result(ld: interop.PointerConvertible, res: interop.PointerConvertible, servercredp: interop.PointerConvertible, freeit: number): number;

declare function ldap_bind(ld: interop.PointerConvertible, who: string, passwd: string, authmethod: number): number;

declare function ldap_bind_s(ld: interop.PointerConvertible, who: string, cred: string, authmethod: number): number;

declare function ldap_simple_bind(ld: interop.PointerConvertible, who: string, passwd: string): number;

declare function ldap_simple_bind_s(ld: interop.PointerConvertible, who: string, passwd: string): number;

declare function ldap_compare_ext(ld: interop.PointerConvertible, dn: string, attr: string, bvalue: interop.PointerConvertible, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible, msgidp: interop.PointerConvertible): number;

declare function ldap_compare_ext_s(ld: interop.PointerConvertible, dn: string, attr: string, bvalue: interop.PointerConvertible, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible): number;

declare function ldap_compare(ld: interop.PointerConvertible, dn: string, attr: string, value: string): number;

declare function ldap_compare_s(ld: interop.PointerConvertible, dn: string, attr: string, value: string): number;

declare function ldap_delete_ext(ld: interop.PointerConvertible, dn: string, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible, msgidp: interop.PointerConvertible): number;

declare function ldap_delete_ext_s(ld: interop.PointerConvertible, dn: string, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible): number;

declare function ldap_delete(ld: interop.PointerConvertible, dn: string): number;

declare function ldap_delete_s(ld: interop.PointerConvertible, dn: string): number;

declare function ldap_parse_result(ld: interop.PointerConvertible, res: interop.PointerConvertible, errcodep: interop.PointerConvertible, matcheddnp: interop.PointerConvertible, errmsgp: interop.PointerConvertible, referralsp: interop.PointerConvertible, serverctrls: interop.PointerConvertible, freeit: number): number;

declare function ldap_err2string(err: number): string;

declare function ldap_result2error(ld: interop.PointerConvertible, r: interop.PointerConvertible, freeit: number): number;

declare function ldap_perror(ld: interop.PointerConvertible, s: string): void;

declare function ldap_gssapi_bind(ld: interop.PointerConvertible, dn: string, creds: string): number;

declare function ldap_gssapi_bind_s(ld: interop.PointerConvertible, dn: string, creds: string): number;

declare function ldap_modify_ext(ld: interop.PointerConvertible, dn: string, mods: interop.PointerConvertible, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible, msgidp: interop.PointerConvertible): number;

declare function ldap_modify_ext_s(ld: interop.PointerConvertible, dn: string, mods: interop.PointerConvertible, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible): number;

declare function ldap_modify(ld: interop.PointerConvertible, dn: string, mods: interop.PointerConvertible): number;

declare function ldap_modify_s(ld: interop.PointerConvertible, dn: string, mods: interop.PointerConvertible): number;

declare function ldap_rename(ld: interop.PointerConvertible, dn: string, newrdn: string, newSuperior: string, deleteoldrdn: number, sctrls: interop.PointerConvertible, cctrls: interop.PointerConvertible, msgidp: interop.PointerConvertible): number;

declare function ldap_rename_s(ld: interop.PointerConvertible, dn: string, newrdn: string, newSuperior: string, deleteoldrdn: number, sctrls: interop.PointerConvertible, cctrls: interop.PointerConvertible): number;

declare function ldap_rename2(ld: interop.PointerConvertible, dn: string, newrdn: string, newSuperior: string, deleteoldrdn: number): number;

declare function ldap_rename2_s(ld: interop.PointerConvertible, dn: string, newrdn: string, newSuperior: string, deleteoldrdn: number): number;

declare function ldap_modrdn(ld: interop.PointerConvertible, dn: string, newrdn: string): number;

declare function ldap_modrdn_s(ld: interop.PointerConvertible, dn: string, newrdn: string): number;

declare function ldap_modrdn2(ld: interop.PointerConvertible, dn: string, newrdn: string, deleteoldrdn: number): number;

declare function ldap_modrdn2_s(ld: interop.PointerConvertible, dn: string, newrdn: string, deleteoldrdn: number): number;

declare function ldap_init(host: string, port: number): interop.Pointer;

declare function ldap_open(host: string, port: number): interop.Pointer;

declare function ldap_create(ldp: interop.PointerConvertible): number;

declare function ldap_initialize(ldp: interop.PointerConvertible, url: string): number;

declare function ldap_dup(old: interop.PointerConvertible): interop.Pointer;

declare function ldap_tls_inplace(ld: interop.PointerConvertible): number;

declare function ldap_start_tls(ld: interop.PointerConvertible, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible, msgidp: interop.PointerConvertible): number;

declare function ldap_install_tls(ld: interop.PointerConvertible): number;

declare function ldap_start_tls_s(ld: interop.PointerConvertible, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible): number;

declare function ldap_first_message(ld: interop.PointerConvertible, chain: interop.PointerConvertible): interop.Pointer;

declare function ldap_next_message(ld: interop.PointerConvertible, msg: interop.PointerConvertible): interop.Pointer;

declare function ldap_count_messages(ld: interop.PointerConvertible, chain: interop.PointerConvertible): number;

declare function ldap_first_reference(ld: interop.PointerConvertible, chain: interop.PointerConvertible): interop.Pointer;

declare function ldap_next_reference(ld: interop.PointerConvertible, ref: interop.PointerConvertible): interop.Pointer;

declare function ldap_count_references(ld: interop.PointerConvertible, chain: interop.PointerConvertible): number;

declare function ldap_parse_reference(ld: interop.PointerConvertible, ref: interop.PointerConvertible, referralsp: interop.PointerConvertible, serverctrls: interop.PointerConvertible, freeit: number): number;

declare function ldap_first_entry(ld: interop.PointerConvertible, chain: interop.PointerConvertible): interop.Pointer;

declare function ldap_next_entry(ld: interop.PointerConvertible, entry: interop.PointerConvertible): interop.Pointer;

declare function ldap_count_entries(ld: interop.PointerConvertible, chain: interop.PointerConvertible): number;

declare function ldap_get_entry_controls(ld: interop.PointerConvertible, entry: interop.PointerConvertible, serverctrls: interop.PointerConvertible): number;

declare function ldap_delete_result_entry(list: interop.PointerConvertible, e: interop.PointerConvertible): interop.Pointer;

declare function ldap_add_result_entry(list: interop.PointerConvertible, e: interop.PointerConvertible): void;

declare function ldap_get_dn(ld: interop.PointerConvertible, entry: interop.PointerConvertible): string;

declare function ldap_rdnfree(rdn: interop.PointerConvertible): void;

declare function ldap_dnfree(dn: interop.PointerConvertible): void;

declare function ldap_bv2dn(bv: interop.PointerConvertible, dn: interop.PointerConvertible, flags: number): number;

declare function ldap_str2dn(str: string, dn: interop.PointerConvertible, flags: number): number;

declare function ldap_dn2bv(dn: interop.PointerConvertible, bv: interop.PointerConvertible, flags: number): number;

declare function ldap_dn2str(dn: interop.PointerConvertible, str: interop.PointerConvertible, flags: number): number;

declare function ldap_bv2rdn(bv: interop.PointerConvertible, rdn: interop.PointerConvertible, next: interop.PointerConvertible, flags: number): number;

declare function ldap_str2rdn(str: string, rdn: interop.PointerConvertible, next: interop.PointerConvertible, flags: number): number;

declare function ldap_rdn2bv(rdn: interop.PointerConvertible, bv: interop.PointerConvertible, flags: number): number;

declare function ldap_rdn2str(rdn: interop.PointerConvertible, str: interop.PointerConvertible, flags: number): number;

declare function ldap_dn_normalize(in: string, iflags: number, out: interop.PointerConvertible, oflags: number): number;

declare function ldap_dn2ufn(dn: string): string;

declare function ldap_explode_dn(dn: string, notypes: number): interop.Pointer;

declare function ldap_explode_rdn(rdn: string, notypes: number): interop.Pointer;

declare function ldap_X509dn2bv(x509_name: interop.PointerConvertible, dn: interop.PointerConvertible, func: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => number, flags: number): number;

declare function ldap_dn2dcedn(dn: string): string;

declare function ldap_dcedn2dn(dce: string): string;

declare function ldap_dn2ad_canonical(dn: string): string;

declare function ldap_get_dn_ber(ld: interop.PointerConvertible, e: interop.PointerConvertible, berout: interop.PointerConvertible, dn: interop.PointerConvertible): number;

declare function ldap_get_attribute_ber(ld: interop.PointerConvertible, e: interop.PointerConvertible, ber: interop.PointerConvertible, attr: interop.PointerConvertible, vals: interop.PointerConvertible): number;

declare function ldap_first_attribute(ld: interop.PointerConvertible, entry: interop.PointerConvertible, ber: interop.PointerConvertible): string;

declare function ldap_next_attribute(ld: interop.PointerConvertible, entry: interop.PointerConvertible, ber: interop.PointerConvertible): string;

declare function ldap_get_values_len(ld: interop.PointerConvertible, entry: interop.PointerConvertible, target: string): interop.Pointer;

declare function ldap_count_values_len(vals: interop.PointerConvertible): number;

declare function ldap_value_free_len(vals: interop.PointerConvertible): void;

declare function ldap_get_values(ld: interop.PointerConvertible, entry: interop.PointerConvertible, target: string): interop.Pointer;

declare function ldap_count_values(vals: interop.PointerConvertible): number;

declare function ldap_value_free(vals: interop.PointerConvertible): void;

declare function ldap_result(ld: interop.PointerConvertible, msgid: number, all: number, timeout: interop.PointerConvertible, result: interop.PointerConvertible): number;

declare function ldap_msgtype(lm: interop.PointerConvertible): number;

declare function ldap_msgid(lm: interop.PointerConvertible): number;

declare function ldap_msgfree(lm: interop.PointerConvertible): number;

declare function ldap_msgdelete(ld: interop.PointerConvertible, msgid: number): number;

declare function ldap_bv2escaped_filter_value(in: interop.PointerConvertible, out: interop.PointerConvertible): number;

declare function ldap_search_ext(ld: interop.PointerConvertible, base: string, scope: number, filter: string, attrs: interop.PointerConvertible, attrsonly: number, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible, timeout: interop.PointerConvertible, sizelimit: number, msgidp: interop.PointerConvertible): number;

declare function ldap_search_ext_s(ld: interop.PointerConvertible, base: string, scope: number, filter: string, attrs: interop.PointerConvertible, attrsonly: number, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible, timeout: interop.PointerConvertible, sizelimit: number, res: interop.PointerConvertible): number;

declare function ldap_search(ld: interop.PointerConvertible, base: string, scope: number, filter: string, attrs: interop.PointerConvertible, attrsonly: number): number;

declare function ldap_search_s(ld: interop.PointerConvertible, base: string, scope: number, filter: string, attrs: interop.PointerConvertible, attrsonly: number, res: interop.PointerConvertible): number;

declare function ldap_search_st(ld: interop.PointerConvertible, base: string, scope: number, filter: string, attrs: interop.PointerConvertible, attrsonly: number, timeout: interop.PointerConvertible, res: interop.PointerConvertible): number;

declare function ldap_unbind_ext(ld: interop.PointerConvertible, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible): number;

declare function ldap_unbind_ext_s(ld: interop.PointerConvertible, serverctrls: interop.PointerConvertible, clientctrls: interop.PointerConvertible): number;

declare function ldap_destroy(ld: interop.PointerConvertible): number;

declare function ldap_unbind(ld: interop.PointerConvertible): number;

declare function ldap_unbind_s(ld: interop.PointerConvertible): number;

declare function ldap_put_vrFilter(ber: interop.PointerConvertible, vrf: string): number;

declare function ldap_memalloc(s: number): interop.Pointer;

declare function ldap_memrealloc(p: interop.PointerConvertible, s: number): interop.Pointer;

declare function ldap_memcalloc(n: number, s: number): interop.Pointer;

declare function ldap_memfree(p: interop.PointerConvertible): void;

declare function ldap_memvfree(v: interop.PointerConvertible): void;

declare function ldap_strdup(p1: string): string;

declare function ldap_mods_free(mods: interop.PointerConvertible, freemods: number): void;

declare function ldap_sort_entries(ld: interop.PointerConvertible, chain: interop.PointerConvertible, attr: string, cmp: (p1: string, p2: string) => number): number;

declare function ldap_sort_values(ld: interop.PointerConvertible, vals: interop.PointerConvertible, cmp: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): number;

declare function ldap_sort_strcasecmp(a: interop.PointerConvertible, b: interop.PointerConvertible): number;

declare function ldap_is_ldap_url(url: string): number;

declare function ldap_is_ldaps_url(url: string): number;

declare function ldap_is_ldapi_url(url: string): number;

declare function ldap_url_parse(url: string, ludpp: interop.PointerConvertible): number;

declare function ldap_url_desc2str(ludp: interop.PointerConvertible): string;

declare function ldap_free_urldesc(ludp: interop.PointerConvertible): void;

declare function ldap_cancel(ld: interop.PointerConvertible, cancelid: number, sctrls: interop.PointerConvertible, cctrls: interop.PointerConvertible, msgidp: interop.PointerConvertible): number;

declare function ldap_cancel_s(ld: interop.PointerConvertible, cancelid: number, sctrl: interop.PointerConvertible, cctrl: interop.PointerConvertible): number;

declare function ldap_turn(ld: interop.PointerConvertible, mutual: number, identifier: string, sctrls: interop.PointerConvertible, cctrls: interop.PointerConvertible, msgidp: interop.PointerConvertible): number;

declare function ldap_turn_s(ld: interop.PointerConvertible, mutual: number, identifier: string, sctrl: interop.PointerConvertible, cctrl: interop.PointerConvertible): number;

declare function ldap_create_page_control_value(ld: interop.PointerConvertible, pagesize: number, cookie: interop.PointerConvertible, value: interop.PointerConvertible): number;

declare function ldap_create_page_control(ld: interop.PointerConvertible, pagesize: number, cookie: interop.PointerConvertible, iscritical: number, ctrlp: interop.PointerConvertible): number;

declare function ldap_parse_page_control(ld: interop.PointerConvertible, ctrls: interop.PointerConvertible, count: interop.PointerConvertible, cookie: interop.PointerConvertible): number;

declare function ldap_parse_pageresponse_control(ld: interop.PointerConvertible, ctrl: interop.PointerConvertible, count: interop.PointerConvertible, cookie: interop.PointerConvertible): number;

declare function ldap_create_sort_keylist(sortKeyList: interop.PointerConvertible, keyString: string): number;

declare function ldap_free_sort_keylist(sortkeylist: interop.PointerConvertible): void;

declare function ldap_create_sort_control_value(ld: interop.PointerConvertible, keyList: interop.PointerConvertible, value: interop.PointerConvertible): number;

declare function ldap_create_sort_control(ld: interop.PointerConvertible, keyList: interop.PointerConvertible, iscritical: number, ctrlp: interop.PointerConvertible): number;

declare function ldap_parse_sort_control(ld: interop.PointerConvertible, ctrlp: interop.PointerConvertible, result: interop.PointerConvertible, attribute: interop.PointerConvertible): number;

declare function ldap_parse_sortresponse_control(ld: interop.PointerConvertible, ctrl: interop.PointerConvertible, result: interop.PointerConvertible, attribute: interop.PointerConvertible): number;

declare function ldap_create_vlv_control_value(ld: interop.PointerConvertible, ldvlistp: interop.PointerConvertible, value: interop.PointerConvertible): number;

declare function ldap_create_vlv_control(ld: interop.PointerConvertible, ldvlistp: interop.PointerConvertible, ctrlp: interop.PointerConvertible): number;

declare function ldap_parse_vlv_control(ld: interop.PointerConvertible, ctrls: interop.PointerConvertible, target_posp: interop.PointerConvertible, list_countp: interop.PointerConvertible, contextp: interop.PointerConvertible, errcodep: interop.PointerConvertible): number;

declare function ldap_parse_vlvresponse_control(ld: interop.PointerConvertible, ctrls: interop.PointerConvertible, target_posp: interop.PointerConvertible, list_countp: interop.PointerConvertible, contextp: interop.PointerConvertible, errcodep: interop.PointerConvertible): number;

declare function ldap_parse_whoami(ld: interop.PointerConvertible, res: interop.PointerConvertible, authzid: interop.PointerConvertible): number;

declare function ldap_whoami(ld: interop.PointerConvertible, sctrls: interop.PointerConvertible, cctrls: interop.PointerConvertible, msgidp: interop.PointerConvertible): number;

declare function ldap_whoami_s(ld: interop.PointerConvertible, authzid: interop.PointerConvertible, sctrls: interop.PointerConvertible, cctrls: interop.PointerConvertible): number;

declare function ldap_parse_passwd(ld: interop.PointerConvertible, res: interop.PointerConvertible, newpasswd: interop.PointerConvertible): number;

declare function ldap_passwd(ld: interop.PointerConvertible, user: interop.PointerConvertible, oldpw: interop.PointerConvertible, newpw: interop.PointerConvertible, sctrls: interop.PointerConvertible, cctrls: interop.PointerConvertible, msgidp: interop.PointerConvertible): number;

declare function ldap_passwd_s(ld: interop.PointerConvertible, user: interop.PointerConvertible, oldpw: interop.PointerConvertible, newpw: interop.PointerConvertible, newpasswd: interop.PointerConvertible, sctrls: interop.PointerConvertible, cctrls: interop.PointerConvertible): number;

declare function ldap_create_passwordpolicy_control(ld: interop.PointerConvertible, ctrlp: interop.PointerConvertible): number;

declare function ldap_parse_passwordpolicy_control(ld: interop.PointerConvertible, ctrl: interop.PointerConvertible, expirep: interop.PointerConvertible, gracep: interop.PointerConvertible, errorp: interop.PointerConvertible): number;

declare function ldap_passwordpolicy_err2txt(p1: interop.Enum<typeof passpolicyerror_enum>): string;

declare function ldap_parse_refresh(ld: interop.PointerConvertible, res: interop.PointerConvertible, newttl: interop.PointerConvertible): number;

declare function ldap_refresh(ld: interop.PointerConvertible, dn: interop.PointerConvertible, ttl: number, sctrls: interop.PointerConvertible, cctrls: interop.PointerConvertible, msgidp: interop.PointerConvertible): number;

declare function ldap_refresh_s(ld: interop.PointerConvertible, dn: interop.PointerConvertible, ttl: number, newttl: interop.PointerConvertible, sctrls: interop.PointerConvertible, cctrls: interop.PointerConvertible): number;

declare function ldap_sync_initialize(ls: interop.PointerConvertible): interop.Pointer;

declare function ldap_sync_destroy(ls: interop.PointerConvertible, freeit: number): void;

declare function ldap_sync_init(ls: interop.PointerConvertible, mode: number): number;

declare function ldap_sync_init_refresh_only(ls: interop.PointerConvertible): number;

declare function ldap_sync_init_refresh_and_persist(ls: interop.PointerConvertible): number;

declare function ldap_sync_poll(ls: interop.PointerConvertible): number;

declare function ldap_create_session_tracking_value(ld: interop.PointerConvertible, sessionSourceIp: string, sessionSourceName: string, formatOID: string, sessionTrackingIdentifier: interop.PointerConvertible, value: interop.PointerConvertible): number;

declare function ldap_create_session_tracking(ld: interop.PointerConvertible, sessionSourceIp: string, sessionSourceName: string, formatOID: string, sessionTrackingIdentifier: interop.PointerConvertible, ctrlp: interop.PointerConvertible): number;

declare function ldap_parse_session_tracking_control(ld: interop.PointerConvertible, ctrl: interop.PointerConvertible, ip: interop.PointerConvertible, name: interop.PointerConvertible, oid: interop.PointerConvertible, id: interop.PointerConvertible): number;

declare function ldap_create_assertion_control_value(ld: interop.PointerConvertible, assertion: string, value: interop.PointerConvertible): number;

declare function ldap_create_assertion_control(ld: interop.PointerConvertible, filter: string, iscritical: number, ctrlp: interop.PointerConvertible): number;

declare function ldap_create_deref_control_value(ld: interop.PointerConvertible, ds: interop.PointerConvertible, value: interop.PointerConvertible): number;

declare function ldap_create_deref_control(ld: interop.PointerConvertible, ds: interop.PointerConvertible, iscritical: number, ctrlp: interop.PointerConvertible): number;

declare function ldap_derefresponse_free(dr: interop.PointerConvertible): void;

declare function ldap_parse_derefresponse_control(ld: interop.PointerConvertible, ctrl: interop.PointerConvertible, drp: interop.PointerConvertible): number;

declare function ldap_parse_deref_control(ld: interop.PointerConvertible, ctrls: interop.PointerConvertible, drp: interop.PointerConvertible): number;

declare function ldap_syntax2name(syn: interop.PointerConvertible): string;

declare function ldap_matchingrule2name(mr: interop.PointerConvertible): string;

declare function ldap_matchingruleuse2name(mru: interop.PointerConvertible): string;

declare function ldap_attributetype2name(at: interop.PointerConvertible): string;

declare function ldap_objectclass2name(oc: interop.PointerConvertible): string;

declare function ldap_contentrule2name(cr: interop.PointerConvertible): string;

declare function ldap_nameform2name(nf: interop.PointerConvertible): string;

declare function ldap_structurerule2name(sr: interop.PointerConvertible): string;

declare function ldap_syntax_free(syn: interop.PointerConvertible): void;

declare function ldap_matchingrule_free(mr: interop.PointerConvertible): void;

declare function ldap_matchingruleuse_free(mr: interop.PointerConvertible): void;

declare function ldap_attributetype_free(at: interop.PointerConvertible): void;

declare function ldap_objectclass_free(oc: interop.PointerConvertible): void;

declare function ldap_contentrule_free(cr: interop.PointerConvertible): void;

declare function ldap_nameform_free(nf: interop.PointerConvertible): void;

declare function ldap_structurerule_free(sr: interop.PointerConvertible): void;

declare function ldap_str2structurerule(s: string, code: interop.PointerConvertible, errp: interop.PointerConvertible, flags: number): interop.Pointer;

declare function ldap_str2nameform(s: string, code: interop.PointerConvertible, errp: interop.PointerConvertible, flags: number): interop.Pointer;

declare function ldap_str2contentrule(s: string, code: interop.PointerConvertible, errp: interop.PointerConvertible, flags: number): interop.Pointer;

declare function ldap_str2objectclass(s: string, code: interop.PointerConvertible, errp: interop.PointerConvertible, flags: number): interop.Pointer;

declare function ldap_str2attributetype(s: string, code: interop.PointerConvertible, errp: interop.PointerConvertible, flags: number): interop.Pointer;

declare function ldap_str2syntax(s: string, code: interop.PointerConvertible, errp: interop.PointerConvertible, flags: number): interop.Pointer;

declare function ldap_str2matchingrule(s: string, code: interop.PointerConvertible, errp: interop.PointerConvertible, flags: number): interop.Pointer;

declare function ldap_str2matchingruleuse(s: string, code: interop.PointerConvertible, errp: interop.PointerConvertible, flags: number): interop.Pointer;

declare function ldap_structurerule2str(sr: interop.PointerConvertible): string;

declare function ldap_structurerule2bv(sr: interop.PointerConvertible, bv: interop.PointerConvertible): interop.Pointer;

declare function ldap_nameform2str(nf: interop.PointerConvertible): string;

declare function ldap_nameform2bv(nf: interop.PointerConvertible, bv: interop.PointerConvertible): interop.Pointer;

declare function ldap_contentrule2str(cr: interop.PointerConvertible): string;

declare function ldap_contentrule2bv(cr: interop.PointerConvertible, bv: interop.PointerConvertible): interop.Pointer;

declare function ldap_objectclass2str(oc: interop.PointerConvertible): string;

declare function ldap_objectclass2bv(oc: interop.PointerConvertible, bv: interop.PointerConvertible): interop.Pointer;

declare function ldap_attributetype2str(at: interop.PointerConvertible): string;

declare function ldap_attributetype2bv(at: interop.PointerConvertible, bv: interop.PointerConvertible): interop.Pointer;

declare function ldap_syntax2str(syn: interop.PointerConvertible): string;

declare function ldap_syntax2bv(syn: interop.PointerConvertible, bv: interop.PointerConvertible): interop.Pointer;

declare function ldap_matchingrule2str(mr: interop.PointerConvertible): string;

declare function ldap_matchingrule2bv(mr: interop.PointerConvertible, bv: interop.PointerConvertible): interop.Pointer;

declare function ldap_matchingruleuse2str(mru: interop.PointerConvertible): string;

declare function ldap_matchingruleuse2bv(mru: interop.PointerConvertible, bv: interop.PointerConvertible): interop.Pointer;

declare function ldap_scherr2str(code: number): string;

declare function ldap_x_utf8_to_ucs4(p: string): number;

declare function ldap_x_ucs4_to_utf8(c: number, buf: string): number;

declare function ldap_x_utf8_to_wc(wchar: interop.PointerConvertible, utf8char: string): number;

declare function ldap_x_utf8s_to_wcs(wcstr: interop.PointerConvertible, utf8str: string, count: number): number;

declare function ldap_x_wc_to_utf8(utf8char: string, wchar: number, count: number): number;

declare function ldap_x_wcs_to_utf8s(utf8str: string, wcstr: interop.PointerConvertible, count: number): number;

declare function ldap_x_utf8_to_mb(mbchar: string, utf8char: string, ldap_f_wctomb: (p1: string, p2: number) => number): number;

declare function ldap_x_utf8s_to_mbs(mbstr: string, utf8str: string, count: number, ldap_f_wcstombs: (p1: string, p2: interop.PointerConvertible, p3: number) => number): number;

declare function ldap_x_mb_to_utf8(utf8char: string, mbchar: string, mbsize: number, ldap_f_mbtowc: (p1: interop.PointerConvertible, p2: string, p3: number) => number): number;

declare function ldap_x_mbs_to_utf8s(utf8str: string, mbstr: string, count: number, ldap_f_mbstowcs: (p1: interop.PointerConvertible, p2: string, p3: number) => number): number;

declare function ldif_parse_line(line: string, name: interop.PointerConvertible, value: interop.PointerConvertible, vlen: interop.PointerConvertible): number;

declare function ldif_parse_line2(line: string, type: interop.PointerConvertible, value: interop.PointerConvertible, freeval: interop.PointerConvertible): number;

declare function ldif_open_url(urlstr: string): interop.Pointer;

declare function ldif_fetch_url(line: string, value: interop.PointerConvertible, vlen: interop.PointerConvertible): number;

declare function ldif_getline(next: interop.PointerConvertible): string;

declare function ldif_countlines(line: string): number;

declare function ldif_open(file: string, mode: string): interop.Pointer;

declare function ldif_close(p1: interop.PointerConvertible): void;

declare function ldif_read_record(fp: interop.PointerConvertible, lineno: interop.PointerConvertible, bufp: interop.PointerConvertible, buflen: interop.PointerConvertible): number;

declare function ldif_must_b64_encode_register(name: string, oid: string): number;

declare function ldif_must_b64_encode_release(): void;

declare function ldif_sput(out: interop.PointerConvertible, type: number, name: string, val: string, vlen: number): void;

declare function ldif_sput_wrap(out: interop.PointerConvertible, type: number, name: string, val: string, vlen: number, wrap: number): void;

declare function ldif_put(type: number, name: string, val: string, vlen: number): string;

declare function ldif_put_wrap(type: number, name: string, val: string, vlen: number, wrap: number): string;

declare function ldif_is_not_printable(val: string, vlen: number): number;

declare function slapi_pblock_get(pb: interop.PointerConvertible, arg: number, value: interop.PointerConvertible): number;

declare function slapi_pblock_set(pb: interop.PointerConvertible, arg: number, value: interop.PointerConvertible): number;

declare function slapi_pblock_new(): interop.Pointer;

declare function slapi_pblock_destroy(pb: interop.PointerConvertible): void;

declare function slapi_str2entry(s: string, flags: number): interop.Pointer;

declare function slapi_entry2str(e: interop.PointerConvertible, len: interop.PointerConvertible): string;

declare function slapi_entry_get_dn(e: interop.PointerConvertible): string;

declare function slapi_x_entry_get_id(e: interop.PointerConvertible): number;

declare function slapi_entry_set_dn(e: interop.PointerConvertible, dn: string): void;

declare function slapi_entry_dup(e: interop.PointerConvertible): interop.Pointer;

declare function slapi_entry_attr_delete(e: interop.PointerConvertible, type: string): number;

declare function slapi_entry_alloc(): interop.Pointer;

declare function slapi_entry_free(e: interop.PointerConvertible): void;

declare function slapi_entry_attr_merge(e: interop.PointerConvertible, type: string, vals: interop.PointerConvertible): number;

declare function slapi_entry_attr_find(e: interop.PointerConvertible, type: string, attr: interop.PointerConvertible): number;

declare function slapi_entry_attr_get_charptr(e: interop.PointerConvertible, type: string): string;

declare function slapi_entry_attr_get_int(e: interop.PointerConvertible, type: string): number;

declare function slapi_entry_attr_get_long(e: interop.PointerConvertible, type: string): number;

declare function slapi_entry_attr_get_uint(e: interop.PointerConvertible, type: string): number;

declare function slapi_entry_attr_get_ulong(e: interop.PointerConvertible, type: string): number;

declare function slapi_attr_get_values(attr: interop.PointerConvertible, vals: interop.PointerConvertible): number;

declare function slapi_dn_normalize(dn: string): string;

declare function slapi_dn_normalize_case(dn: string): string;

declare function slapi_dn_issuffix(dn: string, suffix: string): number;

declare function slapi_dn_beparent(pb: interop.PointerConvertible, dn: string): string;

declare function slapi_dn_isbesuffix(pb: interop.PointerConvertible, dn: string): number;

declare function slapi_dn_parent(dn: string): string;

declare function slapi_dn_isparent(parentdn: string, childdn: string): number;

declare function slapi_dn_ignore_case(dn: string): string;

declare function slapi_rdn2typeval(rdn: string, type: interop.PointerConvertible, bv: interop.PointerConvertible): number;

declare function slapi_dn_plus_rdn(dn: string, rdn: string): string;

declare function slapi_access_allowed(pb: interop.PointerConvertible, e: interop.PointerConvertible, attr: string, val: interop.PointerConvertible, access: number): number;

declare function slapi_acl_check_mods(pb: interop.PointerConvertible, e: interop.PointerConvertible, mods: interop.PointerConvertible, errbuf: interop.PointerConvertible): number;

declare function slapi_attr_new(): interop.Pointer;

declare function slapi_attr_init(a: interop.PointerConvertible, type: string): interop.Pointer;

declare function slapi_attr_free(a: interop.PointerConvertible): void;

declare function slapi_attr_dup(attr: interop.PointerConvertible): interop.Pointer;

declare function slapi_attr_add_value(a: interop.PointerConvertible, v: interop.PointerConvertible): number;

declare function slapi_attr_type2plugin(type: string, pi: interop.PointerConvertible): number;

declare function slapi_attr_get_type(attr: interop.PointerConvertible, type: interop.PointerConvertible): number;

declare function slapi_attr_get_oid_copy(attr: interop.PointerConvertible, oidp: interop.PointerConvertible): number;

declare function slapi_attr_get_flags(attr: interop.PointerConvertible, flags: interop.PointerConvertible): number;

declare function slapi_attr_flag_is_set(attr: interop.PointerConvertible, flag: number): number;

declare function slapi_attr_value_cmp(attr: interop.PointerConvertible, v1: interop.PointerConvertible, v2: interop.PointerConvertible): number;

declare function slapi_attr_value_find(a: interop.PointerConvertible, v: interop.PointerConvertible): number;

declare function slapi_attr_type_cmp(t1: string, t2: string, opt: number): number;

declare function slapi_attr_types_equivalent(t1: string, t2: string): number;

declare function slapi_attr_first_value(a: interop.PointerConvertible, v: interop.PointerConvertible): number;

declare function slapi_attr_next_value(a: interop.PointerConvertible, hint: number, v: interop.PointerConvertible): number;

declare function slapi_attr_get_numvalues(a: interop.PointerConvertible, numValues: interop.PointerConvertible): number;

declare function slapi_attr_get_valueset(a: interop.PointerConvertible, vs: interop.PointerConvertible): number;

declare function slapi_attr_get_bervals_copy(a: interop.PointerConvertible, vals: interop.PointerConvertible): number;

declare function slapi_entry_attr_hasvalue(e: interop.PointerConvertible, type: string, value: string): number;

declare function slapi_entry_attr_merge_sv(e: interop.PointerConvertible, type: string, vals: interop.PointerConvertible): number;

declare function slapi_entry_attr_set_charptr(e: interop.PointerConvertible, type: string, value: string): void;

declare function slapi_entry_attr_set_int(e: interop.PointerConvertible, type: string, l: number): void;

declare function slapi_entry_attr_set_uint(e: interop.PointerConvertible, type: string, l: number): void;

declare function slapi_entry_attr_set_long(e: interop.PointerConvertible, type: string, l: number): void;

declare function slapi_entry_attr_set_ulong(e: interop.PointerConvertible, type: string, l: number): void;

declare function slapi_entry_has_children(e: interop.PointerConvertible): number;

declare function slapi_entry_size(e: interop.PointerConvertible): number;

declare function slapi_is_rootdse(dn: string): number;

declare function slapi_entry_attr_merge_sv(e: interop.PointerConvertible, type: string, vals: interop.PointerConvertible): number;

declare function slapi_entry_add_values_sv(e: interop.PointerConvertible, type: string, vals: interop.PointerConvertible): number;

declare function slapi_entry_add_valueset(e: interop.PointerConvertible, type: string, vs: interop.PointerConvertible): number;

declare function slapi_entry_delete_values_sv(e: interop.PointerConvertible, type: string, vals: interop.PointerConvertible): number;

declare function slapi_entry_merge_values_sv(e: interop.PointerConvertible, type: string, vals: interop.PointerConvertible): number;

declare function slapi_entry_attr_replace_sv(e: interop.PointerConvertible, type: string, vals: interop.PointerConvertible): number;

declare function slapi_entry_add_value(e: interop.PointerConvertible, type: string, value: interop.PointerConvertible): number;

declare function slapi_entry_add_string(e: interop.PointerConvertible, type: string, value: string): number;

declare function slapi_entry_delete_string(e: interop.PointerConvertible, type: string, value: string): number;

declare function slapi_entry_first_attr(e: interop.PointerConvertible, attr: interop.PointerConvertible): number;

declare function slapi_entry_next_attr(e: interop.PointerConvertible, prevattr: interop.PointerConvertible, attr: interop.PointerConvertible): number;

declare function slapi_entry_get_uniqueid(e: interop.PointerConvertible): string;

declare function slapi_entry_set_uniqueid(e: interop.PointerConvertible, uniqueid: string): void;

declare function slapi_entry_schema_check(pb: interop.PointerConvertible, e: interop.PointerConvertible): number;

declare function slapi_entry_rdn_values_present(e: interop.PointerConvertible): number;

declare function slapi_entry_add_rdn_values(e: interop.PointerConvertible): number;

declare function slapi_attr_syntax_normalize(s: string): string;

declare function slapi_value_new(): interop.Pointer;

declare function slapi_value_new_berval(bval: interop.PointerConvertible): interop.Pointer;

declare function slapi_value_new_value(v: interop.PointerConvertible): interop.Pointer;

declare function slapi_value_new_string(s: string): interop.Pointer;

declare function slapi_value_init(v: interop.PointerConvertible): interop.Pointer;

declare function slapi_value_init_berval(v: interop.PointerConvertible, bval: interop.PointerConvertible): interop.Pointer;

declare function slapi_value_init_string(v: interop.PointerConvertible, s: string): interop.Pointer;

declare function slapi_value_dup(v: interop.PointerConvertible): interop.Pointer;

declare function slapi_value_free(value: interop.PointerConvertible): void;

declare function slapi_value_get_berval(value: interop.PointerConvertible): interop.Pointer;

declare function slapi_value_set_berval(value: interop.PointerConvertible, bval: interop.PointerConvertible): interop.Pointer;

declare function slapi_value_set_value(value: interop.PointerConvertible, vfrom: interop.PointerConvertible): interop.Pointer;

declare function slapi_value_set(value: interop.PointerConvertible, val: interop.PointerConvertible, len: number): interop.Pointer;

declare function slapi_value_set_string(value: interop.PointerConvertible, strVal: string): number;

declare function slapi_value_set_int(value: interop.PointerConvertible, intVal: number): number;

declare function slapi_value_get_string(value: interop.PointerConvertible): string;

declare function slapi_value_get_int(value: interop.PointerConvertible): number;

declare function slapi_value_get_uint(value: interop.PointerConvertible): number;

declare function slapi_value_get_long(value: interop.PointerConvertible): number;

declare function slapi_value_get_ulong(value: interop.PointerConvertible): number;

declare function slapi_value_get_length(value: interop.PointerConvertible): number;

declare function slapi_value_compare(a: interop.PointerConvertible, v1: interop.PointerConvertible, v2: interop.PointerConvertible): number;

declare function slapi_valueset_new(): interop.Pointer;

declare function slapi_valueset_free(vs: interop.PointerConvertible): void;

declare function slapi_valueset_init(vs: interop.PointerConvertible): void;

declare function slapi_valueset_done(vs: interop.PointerConvertible): void;

declare function slapi_valueset_add_value(vs: interop.PointerConvertible, addval: interop.PointerConvertible): void;

declare function slapi_valueset_first_value(vs: interop.PointerConvertible, v: interop.PointerConvertible): number;

declare function slapi_valueset_next_value(vs: interop.PointerConvertible, index: number, v: interop.PointerConvertible): number;

declare function slapi_valueset_count(vs: interop.PointerConvertible): number;

declare function slapi_valueset_set_valueset(vs1: interop.PointerConvertible, vs2: interop.PointerConvertible): void;

declare function slapi_sdn_new(): interop.Pointer;

declare function slapi_sdn_new_dn_byval(dn: string): interop.Pointer;

declare function slapi_sdn_new_ndn_byval(ndn: string): interop.Pointer;

declare function slapi_sdn_new_dn_byref(dn: string): interop.Pointer;

declare function slapi_sdn_new_ndn_byref(ndn: string): interop.Pointer;

declare function slapi_sdn_new_dn_passin(dn: string): interop.Pointer;

declare function slapi_sdn_set_dn_byval(sdn: interop.PointerConvertible, dn: string): interop.Pointer;

declare function slapi_sdn_set_dn_byref(sdn: interop.PointerConvertible, dn: string): interop.Pointer;

declare function slapi_sdn_set_dn_passin(sdn: interop.PointerConvertible, dn: string): interop.Pointer;

declare function slapi_sdn_set_ndn_byval(sdn: interop.PointerConvertible, ndn: string): interop.Pointer;

declare function slapi_sdn_set_ndn_byref(sdn: interop.PointerConvertible, ndn: string): interop.Pointer;

declare function slapi_sdn_done(sdn: interop.PointerConvertible): void;

declare function slapi_sdn_free(sdn: interop.PointerConvertible): void;

declare function slapi_sdn_get_dn(sdn: interop.PointerConvertible): string;

declare function slapi_sdn_get_ndn(sdn: interop.PointerConvertible): string;

declare function slapi_sdn_get_parent(sdn: interop.PointerConvertible, sdn_parent: interop.PointerConvertible): void;

declare function slapi_sdn_get_backend_parent(sdn: interop.PointerConvertible, sdn_parent: interop.PointerConvertible, backend: interop.PointerConvertible): void;

declare function slapi_sdn_dup(sdn: interop.PointerConvertible): interop.Pointer;

declare function slapi_sdn_copy(from: interop.PointerConvertible, to: interop.PointerConvertible): void;

declare function slapi_sdn_compare(sdn1: interop.PointerConvertible, sdn2: interop.PointerConvertible): number;

declare function slapi_sdn_isempty(sdn: interop.PointerConvertible): number;

declare function slapi_sdn_issuffix(sdn: interop.PointerConvertible, suffixsdn: interop.PointerConvertible): number;

declare function slapi_sdn_isparent(parent: interop.PointerConvertible, child: interop.PointerConvertible): number;

declare function slapi_sdn_isgrandparent(parent: interop.PointerConvertible, child: interop.PointerConvertible): number;

declare function slapi_sdn_get_ndn_len(sdn: interop.PointerConvertible): number;

declare function slapi_sdn_scope_test(dn: interop.PointerConvertible, base: interop.PointerConvertible, scope: number): number;

declare function slapi_sdn_get_rdn(sdn: interop.PointerConvertible, rdn: interop.PointerConvertible): void;

declare function slapi_sdn_set_rdn(sdn: interop.PointerConvertible, rdn: interop.PointerConvertible): interop.Pointer;

declare function slapi_sdn_set_parent(sdn: interop.PointerConvertible, parentdn: interop.PointerConvertible): interop.Pointer;

declare function slapi_sdn_is_rdn_component(rdn: interop.PointerConvertible, a: interop.PointerConvertible, v: interop.PointerConvertible): number;

declare function slapi_moddn_get_newdn(dn_olddn: interop.PointerConvertible, newrdn: string, newsuperiordn: string): string;

declare function slapi_rdn_new(): interop.Pointer;

declare function slapi_rdn_new_dn(dn: string): interop.Pointer;

declare function slapi_rdn_new_sdn(sdn: interop.PointerConvertible): interop.Pointer;

declare function slapi_rdn_new_rdn(fromrdn: interop.PointerConvertible): interop.Pointer;

declare function slapi_rdn_init(rdn: interop.PointerConvertible): void;

declare function slapi_rdn_init_dn(rdn: interop.PointerConvertible, dn: string): void;

declare function slapi_rdn_init_sdn(rdn: interop.PointerConvertible, sdn: interop.PointerConvertible): void;

declare function slapi_rdn_init_rdn(rdn: interop.PointerConvertible, fromrdn: interop.PointerConvertible): void;

declare function slapi_rdn_set_dn(rdn: interop.PointerConvertible, dn: string): void;

declare function slapi_rdn_set_sdn(rdn: interop.PointerConvertible, sdn: interop.PointerConvertible): void;

declare function slapi_rdn_set_rdn(rdn: interop.PointerConvertible, fromrdn: interop.PointerConvertible): void;

declare function slapi_rdn_free(rdn: interop.PointerConvertible): void;

declare function slapi_rdn_done(rdn: interop.PointerConvertible): void;

declare function slapi_rdn_get_first(rdn: interop.PointerConvertible, type: interop.PointerConvertible, value: interop.PointerConvertible): number;

declare function slapi_rdn_get_next(rdn: interop.PointerConvertible, index: number, type: interop.PointerConvertible, value: interop.PointerConvertible): number;

declare function slapi_rdn_get_index(rdn: interop.PointerConvertible, type: string, value: string, length: number): number;

declare function slapi_rdn_get_index_attr(rdn: interop.PointerConvertible, type: string, value: interop.PointerConvertible): number;

declare function slapi_rdn_contains(rdn: interop.PointerConvertible, type: string, value: string, length: number): number;

declare function slapi_rdn_contains_attr(rdn: interop.PointerConvertible, type: string, value: interop.PointerConvertible): number;

declare function slapi_rdn_add(rdn: interop.PointerConvertible, type: string, value: string): number;

declare function slapi_rdn_remove_index(rdn: interop.PointerConvertible, atindex: number): number;

declare function slapi_rdn_remove(rdn: interop.PointerConvertible, type: string, value: string, length: number): number;

declare function slapi_rdn_remove_attr(rdn: interop.PointerConvertible, type: string): number;

declare function slapi_rdn_isempty(rdn: interop.PointerConvertible): number;

declare function slapi_rdn_get_num_components(rdn: interop.PointerConvertible): number;

declare function slapi_rdn_compare(rdn1: interop.PointerConvertible, rdn2: interop.PointerConvertible): number;

declare function slapi_rdn_get_rdn(rdn: interop.PointerConvertible): string;

declare function slapi_rdn_get_nrdn(rdn: interop.PointerConvertible): string;

declare function slapi_sdn_add_rdn(sdn: interop.PointerConvertible, rdn: interop.PointerConvertible): interop.Pointer;

declare function slapi_new_mutex(): interop.Pointer;

declare function slapi_destroy_mutex(mutex: interop.PointerConvertible): void;

declare function slapi_lock_mutex(mutex: interop.PointerConvertible): void;

declare function slapi_unlock_mutex(mutex: interop.PointerConvertible): number;

declare function slapi_new_condvar(mutex: interop.PointerConvertible): interop.Pointer;

declare function slapi_destroy_condvar(cvar: interop.PointerConvertible): void;

declare function slapi_wait_condvar(cvar: interop.PointerConvertible, timeout: interop.PointerConvertible): number;

declare function slapi_notify_condvar(cvar: interop.PointerConvertible, notify_all: number): number;

declare function slapi_ldap_init(ldaphost: string, ldapport: number, secure: number, shared: number): interop.Pointer;

declare function slapi_ldap_unbind(ld: interop.PointerConvertible): void;

declare function slapi_ch_malloc(size: number): string;

declare function slapi_ch_free(ptr: interop.PointerConvertible): void;

declare function slapi_ch_free_string(ptr: interop.PointerConvertible): void;

declare function slapi_ch_calloc(nelem: number, size: number): string;

declare function slapi_ch_realloc(block: string, size: number): string;

declare function slapi_ch_strdup(s: string): string;

declare function slapi_ch_array_free(arrayp: interop.PointerConvertible): void;

declare function slapi_ch_bvdup(v: interop.PointerConvertible): interop.Pointer;

declare function slapi_ch_bvecdup(v: interop.PointerConvertible): interop.Pointer;

declare function slapi_control_present(controls: interop.PointerConvertible, oid: string, val: interop.PointerConvertible, iscritical: interop.PointerConvertible): number;

declare function slapi_register_supported_control(controloid: string, controlops: number): void;

declare function slapi_get_supported_controls(ctrloidsp: interop.PointerConvertible, ctrlopsp: interop.PointerConvertible): number;

declare function slapi_dup_control(ctrl: interop.PointerConvertible): interop.Pointer;

declare function slapi_register_supported_saslmechanism(mechanism: string): void;

declare function slapi_get_supported_saslmechanisms(): interop.Pointer;

declare function slapi_get_supported_extended_ops(): interop.Pointer;

declare function slapi_op_abandoned(pb: interop.PointerConvertible): number;

declare function slapi_op_get_type(op: interop.PointerConvertible): number;

declare function slapi_operation_set_flag(op: interop.PointerConvertible, flag: number): void;

declare function slapi_operation_clear_flag(op: interop.PointerConvertible, flag: number): void;

declare function slapi_operation_is_flag_set(op: interop.PointerConvertible, flag: number): number;

declare function slapi_op_type_to_string(type: number): string;

declare function slapi_send_ldap_result(pb: interop.PointerConvertible, err: number, matched: string, text: string, nentries: number, urls: interop.PointerConvertible): void;

declare function slapi_send_ldap_search_entry(pb: interop.PointerConvertible, e: interop.PointerConvertible, ectrls: interop.PointerConvertible, attrs: interop.PointerConvertible, attrsonly: number): number;

declare function slapi_send_ldap_search_reference(pb: interop.PointerConvertible, e: interop.PointerConvertible, urls: interop.PointerConvertible, ectrls: interop.PointerConvertible, v2refs: interop.PointerConvertible): number;

declare function slapi_str2filter(str: string): interop.Pointer;

declare function slapi_filter_dup(f: interop.PointerConvertible): interop.Pointer;

declare function slapi_filter_free(f: interop.PointerConvertible, recurse: number): void;

declare function slapi_filter_get_choice(f: interop.PointerConvertible): number;

declare function slapi_filter_get_ava(f: interop.PointerConvertible, type: interop.PointerConvertible, bval: interop.PointerConvertible): number;

declare function slapi_filter_list_first(f: interop.PointerConvertible): interop.Pointer;

declare function slapi_filter_list_next(f: interop.PointerConvertible, fprev: interop.PointerConvertible): interop.Pointer;

declare function slapi_filter_get_attribute_type(f: interop.PointerConvertible, type: interop.PointerConvertible): number;

declare function slapi_x_filter_set_attribute_type(f: interop.PointerConvertible, type: string): number;

declare function slapi_filter_get_subfilt(f: interop.PointerConvertible, type: interop.PointerConvertible, initial: interop.PointerConvertible, any: interop.PointerConvertible, final: interop.PointerConvertible): number;

declare function slapi_filter_join(ftype: number, f1: interop.PointerConvertible, f2: interop.PointerConvertible): interop.Pointer;

declare function slapi_x_filter_append(choice: number, pContainingFilter: interop.PointerConvertible, pNextFilter: interop.PointerConvertible, filterToAppend: interop.PointerConvertible): number;

declare function slapi_filter_test(pb: interop.PointerConvertible, e: interop.PointerConvertible, f: interop.PointerConvertible, verify_access: number): number;

declare function slapi_filter_test_simple(e: interop.PointerConvertible, f: interop.PointerConvertible): number;

declare function slapi_filter_apply(f: interop.PointerConvertible, fn: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number, arg: interop.PointerConvertible, error_code: interop.PointerConvertible): number;

declare function slapi_search_internal(base: string, scope: number, filter: string, controls: interop.PointerConvertible, attrs: interop.PointerConvertible, attrsonly: number): interop.Pointer;

declare function slapi_modify_internal(dn: string, mods: interop.PointerConvertible, controls: interop.PointerConvertible, log_change: number): interop.Pointer;

declare function slapi_add_internal(dn: string, attrs: interop.PointerConvertible, controls: interop.PointerConvertible, log_changes: number): interop.Pointer;

declare function slapi_add_entry_internal(e: interop.PointerConvertible, controls: interop.PointerConvertible, log_change: number): interop.Pointer;

declare function slapi_delete_internal(dn: string, controls: interop.PointerConvertible, log_change: number): interop.Pointer;

declare function slapi_modrdn_internal(olddn: string, newrdn: string, deloldrdn: number, controls: interop.PointerConvertible, log_change: number): interop.Pointer;

declare function slapi_rename_internal(olddn: string, newrdn: string, newsuperior: string, delolrdn: number, controls: interop.PointerConvertible, log_change: number): interop.Pointer;

declare function slapi_free_search_results_internal(pb: interop.PointerConvertible): void;

declare function slapi_free_search_results_internal(pb: interop.PointerConvertible): void;

declare function slapi_search_internal_pb(pb: interop.PointerConvertible): number;

declare function slapi_search_internal_callback_pb(pb: interop.PointerConvertible, callback_data: interop.PointerConvertible, prc: (p1: number, p2: interop.PointerConvertible) => void, psec: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number, prec: (p1: string, p2: interop.PointerConvertible) => number): number;

declare function slapi_add_internal_pb(pb: interop.PointerConvertible): number;

declare function slapi_modify_internal_pb(pb: interop.PointerConvertible): number;

declare function slapi_modrdn_internal_pb(pb: interop.PointerConvertible): number;

declare function slapi_delete_internal_pb(pb: interop.PointerConvertible): number;

declare function slapi_seq_internal_callback_pb(pb: interop.PointerConvertible, callback_data: interop.PointerConvertible, res_callback: (p1: number, p2: interop.PointerConvertible) => void, srch_callback: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number, ref_callback: (p1: string, p2: interop.PointerConvertible) => number): number;

declare function slapi_search_internal_set_pb(pb: interop.PointerConvertible, base: string, scope: number, filter: string, attrs: interop.PointerConvertible, attrsonly: number, controls: interop.PointerConvertible, uniqueid: string, plugin_identity: interop.PointerConvertible, operation_flags: number): void;

declare function slapi_add_entry_internal_set_pb(pb: interop.PointerConvertible, e: interop.PointerConvertible, controls: interop.PointerConvertible, plugin_identity: interop.PointerConvertible, operation_flags: number): void;

declare function slapi_add_internal_set_pb(pb: interop.PointerConvertible, dn: string, attrs: interop.PointerConvertible, controls: interop.PointerConvertible, plugin_identity: interop.PointerConvertible, operation_flags: number): number;

declare function slapi_modify_internal_set_pb(pb: interop.PointerConvertible, dn: string, mods: interop.PointerConvertible, controls: interop.PointerConvertible, uniqueid: string, plugin_identity: interop.PointerConvertible, operation_flags: number): void;

declare function slapi_rename_internal_set_pb(pb: interop.PointerConvertible, olddn: string, newrdn: string, newsuperior: string, deloldrdn: number, controls: interop.PointerConvertible, uniqueid: string, plugin_identity: interop.PointerConvertible, operation_flags: number): void;

declare function slapi_delete_internal_set_pb(pb: interop.PointerConvertible, dn: string, controls: interop.PointerConvertible, uniqueid: string, plugin_identity: interop.PointerConvertible, operation_flags: number): void;

declare function slapi_seq_internal_set_pb(pb: interop.PointerConvertible, ibase: string, type: number, attrname: string, val: string, attrs: interop.PointerConvertible, attrsonly: number, controls: interop.PointerConvertible, plugin_identity: interop.PointerConvertible, operation_flags: number): void;

declare function slapi_is_connection_ssl(pPB: interop.PointerConvertible, isSSL: interop.PointerConvertible): number;

declare function slapi_get_client_port(pPB: interop.PointerConvertible, fromPort: interop.PointerConvertible): number;

declare function slapi_compute_add_evaluator(function$: (p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number) => number): number;

declare function slapi_compute_add_search_rewriter(function$: (p1: interop.PointerConvertible) => number): number;

declare function compute_rewrite_search_filter(pb: interop.PointerConvertible): number;

declare function compute_evaluator(c: interop.PointerConvertible, type: string, e: interop.PointerConvertible, outputfn: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number): number;

declare function slapi_x_compute_get_pblock(c: interop.PointerConvertible, pb: interop.PointerConvertible): number;

declare function slapi_be_set_readonly(be: interop.PointerConvertible, readonly: number): void;

declare function slapi_be_get_readonly(be: interop.PointerConvertible): number;

declare function slapi_x_be_get_updatedn(be: interop.PointerConvertible): string;

declare function slapi_be_select(sdn: interop.PointerConvertible): interop.Pointer;

declare function slapi_register_object_extension(pluginname: string, objectname: string, constructor: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => interop.Pointer, destructor: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => void, objecttype: interop.PointerConvertible, extensionhandle: interop.PointerConvertible): number;

declare function slapi_get_object_extension(objecttype: number, object: interop.PointerConvertible, extensionhandle: number): interop.Pointer;

declare function slapi_set_object_extension(objecttype: number, object: interop.PointerConvertible, extensionhandle: number, extension: interop.PointerConvertible): void;

declare function slapi_x_backend_get_flags(be: interop.PointerConvertible, flags: interop.PointerConvertible): number;

declare function slapi_log_error(severity: number, subsystem: string, fmt: string): number;

declare function sqlite3_libversion(): string;

declare function sqlite3_sourceid(): string;

declare function sqlite3_libversion_number(): number;

declare function sqlite3_compileoption_used(zOptName: string): number;

declare function sqlite3_compileoption_get(N: number): string;

declare function sqlite3_threadsafe(): number;

declare function sqlite3_close(p1: interop.PointerConvertible): number;

declare function sqlite3_close_v2(p1: interop.PointerConvertible): number;

declare function sqlite3_exec(p1: interop.PointerConvertible, sql: string, callback: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number, p4: interop.PointerConvertible, errmsg: interop.PointerConvertible): number;

declare function sqlite3_initialize(): number;

declare function sqlite3_shutdown(): number;

declare function sqlite3_os_init(): number;

declare function sqlite3_os_end(): number;

declare function sqlite3_config(p1: number): number;

declare function sqlite3_db_config(p1: interop.PointerConvertible, op: number): number;

declare function sqlite3_extended_result_codes(p1: interop.PointerConvertible, onoff: number): number;

declare function sqlite3_last_insert_rowid(p1: interop.PointerConvertible): number;

declare function sqlite3_set_last_insert_rowid(p1: interop.PointerConvertible, p2: number): void;

declare function sqlite3_changes(p1: interop.PointerConvertible): number;

declare function sqlite3_changes64(p1: interop.PointerConvertible): number;

declare function sqlite3_total_changes(p1: interop.PointerConvertible): number;

declare function sqlite3_total_changes64(p1: interop.PointerConvertible): number;

declare function sqlite3_interrupt(p1: interop.PointerConvertible): void;

declare function sqlite3_is_interrupted(p1: interop.PointerConvertible): number;

declare function sqlite3_complete(sql: string): number;

declare function sqlite3_complete16(sql: interop.PointerConvertible): number;

declare function sqlite3_busy_handler(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: number) => number, p3: interop.PointerConvertible): number;

declare function sqlite3_busy_timeout(p1: interop.PointerConvertible, ms: number): number;

declare function sqlite3_setlk_timeout(p1: interop.PointerConvertible, ms: number, flags: number): number;

declare function sqlite3_get_table(db: interop.PointerConvertible, zSql: string, pazResult: interop.PointerConvertible, pnRow: interop.PointerConvertible, pnColumn: interop.PointerConvertible, pzErrmsg: interop.PointerConvertible): number;

declare function sqlite3_free_table(result: interop.PointerConvertible): void;

declare function sqlite3_mprintf(p1: string): string;

declare function sqlite3_vmprintf(p1: string, p2: string): string;

declare function sqlite3_snprintf(p1: number, p2: string, p3: string): string;

declare function sqlite3_vsnprintf(p1: number, p2: string, p3: string, p4: string): string;

declare function sqlite3_malloc(p1: number): interop.Pointer;

declare function sqlite3_malloc64(p1: number): interop.Pointer;

declare function sqlite3_realloc(p1: interop.PointerConvertible, p2: number): interop.Pointer;

declare function sqlite3_realloc64(p1: interop.PointerConvertible, p2: number): interop.Pointer;

declare function sqlite3_free(p1: interop.PointerConvertible): void;

declare function sqlite3_msize(p1: interop.PointerConvertible): number;

declare function sqlite3_memory_used(): number;

declare function sqlite3_memory_highwater(resetFlag: number): number;

declare function sqlite3_randomness(N: number, P: interop.PointerConvertible): void;

declare function sqlite3_set_authorizer(p1: interop.PointerConvertible, xAuth: (p1: interop.PointerConvertible, p2: number, p3: string, p4: string, p5: string, p6: string) => number, pUserData: interop.PointerConvertible): number;

declare function sqlite3_trace(p1: interop.PointerConvertible, xTrace: (p1: interop.PointerConvertible, p2: string) => void, p3: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_profile(p1: interop.PointerConvertible, xProfile: (p1: interop.PointerConvertible, p2: string, p3: number) => void, p3: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_trace_v2(p1: interop.PointerConvertible, uMask: number, xCallback: (p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number, pCtx: interop.PointerConvertible): number;

declare function sqlite3_progress_handler(p1: interop.PointerConvertible, p2: number, p3: (p1: interop.PointerConvertible) => number, p4: interop.PointerConvertible): void;

declare function sqlite3_open(filename: string, ppDb: interop.PointerConvertible): number;

declare function sqlite3_open16(filename: interop.PointerConvertible, ppDb: interop.PointerConvertible): number;

declare function sqlite3_open_v2(filename: string, ppDb: interop.PointerConvertible, flags: number, zVfs: string): number;

declare function sqlite3_uri_parameter(z: string, zParam: string): string;

declare function sqlite3_uri_boolean(z: string, zParam: string, bDefault: number): number;

declare function sqlite3_uri_int64(p1: string, p2: string, p3: number): number;

declare function sqlite3_uri_key(z: string, N: number): string;

declare function sqlite3_filename_database(p1: string): string;

declare function sqlite3_filename_journal(p1: string): string;

declare function sqlite3_filename_wal(p1: string): string;

declare function sqlite3_database_file_object(p1: string): interop.Pointer;

declare function sqlite3_create_filename(zDatabase: string, zJournal: string, zWal: string, nParam: number, azParam: interop.PointerConvertible): string;

declare function sqlite3_free_filename(p1: string): void;

declare function sqlite3_errcode(db: interop.PointerConvertible): number;

declare function sqlite3_extended_errcode(db: interop.PointerConvertible): number;

declare function sqlite3_errmsg(p1: interop.PointerConvertible): string;

declare function sqlite3_errmsg16(p1: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_errstr(p1: number): string;

declare function sqlite3_error_offset(db: interop.PointerConvertible): number;

declare function sqlite3_limit(p1: interop.PointerConvertible, id: number, newVal: number): number;

declare function sqlite3_prepare(db: interop.PointerConvertible, zSql: string, nByte: number, ppStmt: interop.PointerConvertible, pzTail: interop.PointerConvertible): number;

declare function sqlite3_prepare_v2(db: interop.PointerConvertible, zSql: string, nByte: number, ppStmt: interop.PointerConvertible, pzTail: interop.PointerConvertible): number;

declare function sqlite3_prepare_v3(db: interop.PointerConvertible, zSql: string, nByte: number, prepFlags: number, ppStmt: interop.PointerConvertible, pzTail: interop.PointerConvertible): number;

declare function sqlite3_prepare16(db: interop.PointerConvertible, zSql: interop.PointerConvertible, nByte: number, ppStmt: interop.PointerConvertible, pzTail: interop.PointerConvertible): number;

declare function sqlite3_prepare16_v2(db: interop.PointerConvertible, zSql: interop.PointerConvertible, nByte: number, ppStmt: interop.PointerConvertible, pzTail: interop.PointerConvertible): number;

declare function sqlite3_prepare16_v3(db: interop.PointerConvertible, zSql: interop.PointerConvertible, nByte: number, prepFlags: number, ppStmt: interop.PointerConvertible, pzTail: interop.PointerConvertible): number;

declare function sqlite3_sql(pStmt: interop.PointerConvertible): string;

declare function sqlite3_expanded_sql(pStmt: interop.PointerConvertible): string;

declare function sqlite3_normalized_sql(pStmt: interop.PointerConvertible): string;

declare function sqlite3_stmt_readonly(pStmt: interop.PointerConvertible): number;

declare function sqlite3_stmt_isexplain(pStmt: interop.PointerConvertible): number;

declare function sqlite3_stmt_explain(pStmt: interop.PointerConvertible, eMode: number): number;

declare function sqlite3_stmt_busy(p1: interop.PointerConvertible): number;

declare function sqlite3_bind_blob(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, n: number, p5: (p1: interop.PointerConvertible) => void): number;

declare function sqlite3_bind_blob64(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: number, p5: (p1: interop.PointerConvertible) => void): number;

declare function sqlite3_bind_double(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function sqlite3_bind_int(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function sqlite3_bind_int64(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function sqlite3_bind_null(p1: interop.PointerConvertible, p2: number): number;

declare function sqlite3_bind_text(p1: interop.PointerConvertible, p2: number, p3: string, p4: number, p5: (p1: interop.PointerConvertible) => void): number;

declare function sqlite3_bind_text16(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: number, p5: (p1: interop.PointerConvertible) => void): number;

declare function sqlite3_bind_text64(p1: interop.PointerConvertible, p2: number, p3: string, p4: number, p5: (p1: interop.PointerConvertible) => void, encoding: number): number;

declare function sqlite3_bind_value(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible): number;

declare function sqlite3_bind_pointer(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: string, p5: (p1: interop.PointerConvertible) => void): number;

declare function sqlite3_bind_zeroblob(p1: interop.PointerConvertible, p2: number, n: number): number;

declare function sqlite3_bind_zeroblob64(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function sqlite3_bind_parameter_count(p1: interop.PointerConvertible): number;

declare function sqlite3_bind_parameter_name(p1: interop.PointerConvertible, p2: number): string;

declare function sqlite3_bind_parameter_index(p1: interop.PointerConvertible, zName: string): number;

declare function sqlite3_clear_bindings(p1: interop.PointerConvertible): number;

declare function sqlite3_column_count(pStmt: interop.PointerConvertible): number;

declare function sqlite3_column_name(p1: interop.PointerConvertible, N: number): string;

declare function sqlite3_column_name16(p1: interop.PointerConvertible, N: number): interop.Pointer;

declare function sqlite3_column_database_name(p1: interop.PointerConvertible, p2: number): string;

declare function sqlite3_column_database_name16(p1: interop.PointerConvertible, p2: number): interop.Pointer;

declare function sqlite3_column_table_name(p1: interop.PointerConvertible, p2: number): string;

declare function sqlite3_column_table_name16(p1: interop.PointerConvertible, p2: number): interop.Pointer;

declare function sqlite3_column_origin_name(p1: interop.PointerConvertible, p2: number): string;

declare function sqlite3_column_origin_name16(p1: interop.PointerConvertible, p2: number): interop.Pointer;

declare function sqlite3_column_decltype(p1: interop.PointerConvertible, p2: number): string;

declare function sqlite3_column_decltype16(p1: interop.PointerConvertible, p2: number): interop.Pointer;

declare function sqlite3_step(p1: interop.PointerConvertible): number;

declare function sqlite3_data_count(pStmt: interop.PointerConvertible): number;

declare function sqlite3_column_blob(p1: interop.PointerConvertible, iCol: number): interop.Pointer;

declare function sqlite3_column_double(p1: interop.PointerConvertible, iCol: number): number;

declare function sqlite3_column_int(p1: interop.PointerConvertible, iCol: number): number;

declare function sqlite3_column_int64(p1: interop.PointerConvertible, iCol: number): number;

declare function sqlite3_column_text(p1: interop.PointerConvertible, iCol: number): interop.Pointer;

declare function sqlite3_column_text16(p1: interop.PointerConvertible, iCol: number): interop.Pointer;

declare function sqlite3_column_value(p1: interop.PointerConvertible, iCol: number): interop.Pointer;

declare function sqlite3_column_bytes(p1: interop.PointerConvertible, iCol: number): number;

declare function sqlite3_column_bytes16(p1: interop.PointerConvertible, iCol: number): number;

declare function sqlite3_column_type(p1: interop.PointerConvertible, iCol: number): number;

declare function sqlite3_finalize(pStmt: interop.PointerConvertible): number;

declare function sqlite3_reset(pStmt: interop.PointerConvertible): number;

declare function sqlite3_create_function(db: interop.PointerConvertible, zFunctionName: string, nArg: number, eTextRep: number, pApp: interop.PointerConvertible, xFunc: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, xStep: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, xFinal: (p1: interop.PointerConvertible) => void): number;

declare function sqlite3_create_function16(db: interop.PointerConvertible, zFunctionName: interop.PointerConvertible, nArg: number, eTextRep: number, pApp: interop.PointerConvertible, xFunc: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, xStep: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, xFinal: (p1: interop.PointerConvertible) => void): number;

declare function sqlite3_create_function_v2(db: interop.PointerConvertible, zFunctionName: string, nArg: number, eTextRep: number, pApp: interop.PointerConvertible, xFunc: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, xStep: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, xFinal: (p1: interop.PointerConvertible) => void, xDestroy: (p1: interop.PointerConvertible) => void): number;

declare function sqlite3_create_window_function(db: interop.PointerConvertible, zFunctionName: string, nArg: number, eTextRep: number, pApp: interop.PointerConvertible, xStep: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, xFinal: (p1: interop.PointerConvertible) => void, xValue: (p1: interop.PointerConvertible) => void, xInverse: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible) => void, xDestroy: (p1: interop.PointerConvertible) => void): number;

declare function sqlite3_aggregate_count(p1: interop.PointerConvertible): number;

declare function sqlite3_expired(p1: interop.PointerConvertible): number;

declare function sqlite3_transfer_bindings(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function sqlite3_global_recover(): number;

declare function sqlite3_thread_cleanup(): void;

declare function sqlite3_memory_alarm(p1: (p1: interop.PointerConvertible, p2: number, p3: number) => void, p2: interop.PointerConvertible, p3: number): number;

declare function sqlite3_value_blob(p1: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_value_double(p1: interop.PointerConvertible): number;

declare function sqlite3_value_int(p1: interop.PointerConvertible): number;

declare function sqlite3_value_int64(p1: interop.PointerConvertible): number;

declare function sqlite3_value_pointer(p1: interop.PointerConvertible, p2: string): interop.Pointer;

declare function sqlite3_value_text(p1: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_value_text16(p1: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_value_text16le(p1: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_value_text16be(p1: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_value_bytes(p1: interop.PointerConvertible): number;

declare function sqlite3_value_bytes16(p1: interop.PointerConvertible): number;

declare function sqlite3_value_type(p1: interop.PointerConvertible): number;

declare function sqlite3_value_numeric_type(p1: interop.PointerConvertible): number;

declare function sqlite3_value_nochange(p1: interop.PointerConvertible): number;

declare function sqlite3_value_frombind(p1: interop.PointerConvertible): number;

declare function sqlite3_value_encoding(p1: interop.PointerConvertible): number;

declare function sqlite3_value_subtype(p1: interop.PointerConvertible): number;

declare function sqlite3_value_dup(p1: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_value_free(p1: interop.PointerConvertible): void;

declare function sqlite3_aggregate_context(p1: interop.PointerConvertible, nBytes: number): interop.Pointer;

declare function sqlite3_user_data(p1: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_context_db_handle(p1: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_get_auxdata(p1: interop.PointerConvertible, N: number): interop.Pointer;

declare function sqlite3_set_auxdata(p1: interop.PointerConvertible, N: number, p3: interop.PointerConvertible, p4: (p1: interop.PointerConvertible) => void): void;

declare function sqlite3_get_clientdata(p1: interop.PointerConvertible, p2: string): interop.Pointer;

declare function sqlite3_set_clientdata(p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: (p1: interop.PointerConvertible) => void): number;

declare function sqlite3_result_blob(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: (p1: interop.PointerConvertible) => void): void;

declare function sqlite3_result_blob64(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: (p1: interop.PointerConvertible) => void): void;

declare function sqlite3_result_double(p1: interop.PointerConvertible, p2: number): void;

declare function sqlite3_result_error(p1: interop.PointerConvertible, p2: string, p3: number): void;

declare function sqlite3_result_error16(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): void;

declare function sqlite3_result_error_toobig(p1: interop.PointerConvertible): void;

declare function sqlite3_result_error_nomem(p1: interop.PointerConvertible): void;

declare function sqlite3_result_error_code(p1: interop.PointerConvertible, p2: number): void;

declare function sqlite3_result_int(p1: interop.PointerConvertible, p2: number): void;

declare function sqlite3_result_int64(p1: interop.PointerConvertible, p2: number): void;

declare function sqlite3_result_null(p1: interop.PointerConvertible): void;

declare function sqlite3_result_text(p1: interop.PointerConvertible, p2: string, p3: number, p4: (p1: interop.PointerConvertible) => void): void;

declare function sqlite3_result_text64(p1: interop.PointerConvertible, p2: string, p3: number, p4: (p1: interop.PointerConvertible) => void, encoding: number): void;

declare function sqlite3_result_text16(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: (p1: interop.PointerConvertible) => void): void;

declare function sqlite3_result_text16le(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: (p1: interop.PointerConvertible) => void): void;

declare function sqlite3_result_text16be(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: (p1: interop.PointerConvertible) => void): void;

declare function sqlite3_result_value(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function sqlite3_result_pointer(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string, p4: (p1: interop.PointerConvertible) => void): void;

declare function sqlite3_result_zeroblob(p1: interop.PointerConvertible, n: number): void;

declare function sqlite3_result_zeroblob64(p1: interop.PointerConvertible, n: number): number;

declare function sqlite3_result_subtype(p1: interop.PointerConvertible, p2: number): void;

declare function sqlite3_create_collation(p1: interop.PointerConvertible, zName: string, eTextRep: number, pArg: interop.PointerConvertible, xCompare: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: number, p5: interop.PointerConvertible) => number): number;

declare function sqlite3_create_collation_v2(p1: interop.PointerConvertible, zName: string, eTextRep: number, pArg: interop.PointerConvertible, xCompare: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: number, p5: interop.PointerConvertible) => number, xDestroy: (p1: interop.PointerConvertible) => void): number;

declare function sqlite3_create_collation16(p1: interop.PointerConvertible, zName: interop.PointerConvertible, eTextRep: number, pArg: interop.PointerConvertible, xCompare: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: number, p5: interop.PointerConvertible) => number): number;

declare function sqlite3_collation_needed(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: string) => void): number;

declare function sqlite3_collation_needed16(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible) => void): number;

declare function sqlite3_sleep(p1: number): number;

declare function sqlite3_get_autocommit(p1: interop.PointerConvertible): number;

declare function sqlite3_db_handle(p1: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_db_name(db: interop.PointerConvertible, N: number): string;

declare function sqlite3_db_filename(db: interop.PointerConvertible, zDbName: string): string;

declare function sqlite3_db_readonly(db: interop.PointerConvertible, zDbName: string): number;

declare function sqlite3_txn_state(p1: interop.PointerConvertible, zSchema: string): number;

declare function sqlite3_next_stmt(pDb: interop.PointerConvertible, pStmt: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_commit_hook(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible) => number, p3: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_rollback_hook(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible) => void, p3: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_autovacuum_pages(db: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: string, p3: number, p4: number, p5: number) => number, p3: interop.PointerConvertible, p4: (p1: interop.PointerConvertible) => void): number;

declare function sqlite3_update_hook(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: number, p3: string, p4: string, p5: number) => void, p3: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_enable_shared_cache(p1: number): number;

declare function sqlite3_release_memory(p1: number): number;

declare function sqlite3_db_release_memory(p1: interop.PointerConvertible): number;

declare function sqlite3_soft_heap_limit64(N: number): number;

declare function sqlite3_soft_heap_limit(N: number): void;

declare function sqlite3_table_column_metadata(db: interop.PointerConvertible, zDbName: string, zTableName: string, zColumnName: string, pzDataType: interop.PointerConvertible, pzCollSeq: interop.PointerConvertible, pNotNull: interop.PointerConvertible, pPrimaryKey: interop.PointerConvertible, pAutoinc: interop.PointerConvertible): number;

declare function sqlite3_auto_extension(xEntryPoint: () => void): number;

declare function sqlite3_cancel_auto_extension(xEntryPoint: () => void): number;

declare function sqlite3_reset_auto_extension(): void;

declare function sqlite3_create_module(db: interop.PointerConvertible, zName: string, p: interop.PointerConvertible, pClientData: interop.PointerConvertible): number;

declare function sqlite3_create_module_v2(db: interop.PointerConvertible, zName: string, p: interop.PointerConvertible, pClientData: interop.PointerConvertible, xDestroy: (p1: interop.PointerConvertible) => void): number;

declare function sqlite3_drop_modules(db: interop.PointerConvertible, azKeep: interop.PointerConvertible): number;

declare function sqlite3_declare_vtab(p1: interop.PointerConvertible, zSQL: string): number;

declare function sqlite3_overload_function(p1: interop.PointerConvertible, zFuncName: string, nArg: number): number;

declare function sqlite3_blob_open(p1: interop.PointerConvertible, zDb: string, zTable: string, zColumn: string, iRow: number, flags: number, ppBlob: interop.PointerConvertible): number;

declare function sqlite3_blob_reopen(p1: interop.PointerConvertible, p2: number): number;

declare function sqlite3_blob_close(p1: interop.PointerConvertible): number;

declare function sqlite3_blob_bytes(p1: interop.PointerConvertible): number;

declare function sqlite3_blob_read(p1: interop.PointerConvertible, Z: interop.PointerConvertible, N: number, iOffset: number): number;

declare function sqlite3_blob_write(p1: interop.PointerConvertible, z: interop.PointerConvertible, n: number, iOffset: number): number;

declare function sqlite3_vfs_find(zVfsName: string): interop.Pointer;

declare function sqlite3_vfs_register(p1: interop.PointerConvertible, makeDflt: number): number;

declare function sqlite3_vfs_unregister(p1: interop.PointerConvertible): number;

declare function sqlite3_mutex_alloc(p1: number): interop.Pointer;

declare function sqlite3_mutex_free(p1: interop.PointerConvertible): void;

declare function sqlite3_mutex_enter(p1: interop.PointerConvertible): void;

declare function sqlite3_mutex_try(p1: interop.PointerConvertible): number;

declare function sqlite3_mutex_leave(p1: interop.PointerConvertible): void;

declare function sqlite3_db_mutex(p1: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_file_control(p1: interop.PointerConvertible, zDbName: string, op: number, p4: interop.PointerConvertible): number;

declare function sqlite3_test_control(op: number): number;

declare function sqlite3_keyword_count(): number;

declare function sqlite3_keyword_name(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function sqlite3_keyword_check(p1: string, p2: number): number;

declare function sqlite3_str_new(p1: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_str_finish(p1: interop.PointerConvertible): string;

declare function sqlite3_str_appendf(p1: interop.PointerConvertible, zFormat: string): void;

declare function sqlite3_str_vappendf(p1: interop.PointerConvertible, zFormat: string, p3: string): void;

declare function sqlite3_str_append(p1: interop.PointerConvertible, zIn: string, N: number): void;

declare function sqlite3_str_appendall(p1: interop.PointerConvertible, zIn: string): void;

declare function sqlite3_str_appendchar(p1: interop.PointerConvertible, N: number, C: number): void;

declare function sqlite3_str_reset(p1: interop.PointerConvertible): void;

declare function sqlite3_str_errcode(p1: interop.PointerConvertible): number;

declare function sqlite3_str_length(p1: interop.PointerConvertible): number;

declare function sqlite3_str_value(p1: interop.PointerConvertible): string;

declare function sqlite3_status(op: number, pCurrent: interop.PointerConvertible, pHighwater: interop.PointerConvertible, resetFlag: number): number;

declare function sqlite3_status64(op: number, pCurrent: interop.PointerConvertible, pHighwater: interop.PointerConvertible, resetFlag: number): number;

declare function sqlite3_db_status(p1: interop.PointerConvertible, op: number, pCur: interop.PointerConvertible, pHiwtr: interop.PointerConvertible, resetFlg: number): number;

declare function sqlite3_stmt_status(p1: interop.PointerConvertible, op: number, resetFlg: number): number;

declare function sqlite3_backup_init(pDest: interop.PointerConvertible, zDestName: string, pSource: interop.PointerConvertible, zSourceName: string): interop.Pointer;

declare function sqlite3_backup_step(p: interop.PointerConvertible, nPage: number): number;

declare function sqlite3_backup_finish(p: interop.PointerConvertible): number;

declare function sqlite3_backup_remaining(p: interop.PointerConvertible): number;

declare function sqlite3_backup_pagecount(p: interop.PointerConvertible): number;

declare function sqlite3_stricmp(p1: string, p2: string): number;

declare function sqlite3_strnicmp(p1: string, p2: string, p3: number): number;

declare function sqlite3_strglob(zGlob: string, zStr: string): number;

declare function sqlite3_strlike(zGlob: string, zStr: string, cEsc: number): number;

declare function sqlite3_log(iErrCode: number, zFormat: string): void;

declare function sqlite3_wal_hook(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string, p4: number) => number, p3: interop.PointerConvertible): interop.Pointer;

declare function sqlite3_wal_autocheckpoint(db: interop.PointerConvertible, N: number): number;

declare function sqlite3_wal_checkpoint(db: interop.PointerConvertible, zDb: string): number;

declare function sqlite3_wal_checkpoint_v2(db: interop.PointerConvertible, zDb: string, eMode: number, pnLog: interop.PointerConvertible, pnCkpt: interop.PointerConvertible): number;

declare function sqlite3_vtab_config(p1: interop.PointerConvertible, op: number): number;

declare function sqlite3_vtab_on_conflict(p1: interop.PointerConvertible): number;

declare function sqlite3_vtab_nochange(p1: interop.PointerConvertible): number;

declare function sqlite3_vtab_collation(p1: interop.PointerConvertible, p2: number): string;

declare function sqlite3_vtab_distinct(p1: interop.PointerConvertible): number;

declare function sqlite3_vtab_in(p1: interop.PointerConvertible, iCons: number, bHandle: number): number;

declare function sqlite3_vtab_in_first(pVal: interop.PointerConvertible, ppOut: interop.PointerConvertible): number;

declare function sqlite3_vtab_in_next(pVal: interop.PointerConvertible, ppOut: interop.PointerConvertible): number;

declare function sqlite3_vtab_rhs_value(p1: interop.PointerConvertible, p2: number, ppVal: interop.PointerConvertible): number;

declare function sqlite3_stmt_scanstatus(pStmt: interop.PointerConvertible, idx: number, iScanStatusOp: number, pOut: interop.PointerConvertible): number;

declare function sqlite3_stmt_scanstatus_v2(pStmt: interop.PointerConvertible, idx: number, iScanStatusOp: number, flags: number, pOut: interop.PointerConvertible): number;

declare function sqlite3_stmt_scanstatus_reset(p1: interop.PointerConvertible): void;

declare function sqlite3_db_cacheflush(p1: interop.PointerConvertible): number;

declare function sqlite3_system_errno(p1: interop.PointerConvertible): number;

declare function sqlite3_snapshot_get(db: interop.PointerConvertible, zSchema: string, ppSnapshot: interop.PointerConvertible): number;

declare function sqlite3_snapshot_open(db: interop.PointerConvertible, zSchema: string, pSnapshot: interop.PointerConvertible): number;

declare function sqlite3_snapshot_free(p1: interop.PointerConvertible): void;

declare function sqlite3_snapshot_cmp(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function sqlite3_snapshot_recover(db: interop.PointerConvertible, zDb: string): number;

declare function sqlite3_serialize(db: interop.PointerConvertible, zSchema: string, piSize: interop.PointerConvertible, mFlags: number): interop.Pointer;

declare function sqlite3_deserialize(db: interop.PointerConvertible, zSchema: string, pData: interop.PointerConvertible, szDb: number, szBuf: number, mFlags: number): number;

declare function sqlite3_rtree_geometry_callback(db: interop.PointerConvertible, zGeom: string, xGeom: (p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible) => number, pContext: interop.PointerConvertible): number;

declare function sqlite3_rtree_query_callback(db: interop.PointerConvertible, zQueryFunc: string, xQueryFunc: (p1: interop.PointerConvertible) => number, pContext: interop.PointerConvertible, xDestructor: (p1: interop.PointerConvertible) => void): number;

declare function _Block_copy(aBlock: interop.PointerConvertible): interop.Pointer;

declare function _Block_release(aBlock: interop.PointerConvertible): void;

declare function _Block_object_assign(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): void;

declare function _Block_object_dispose(p1: interop.PointerConvertible, p2: number): void;

declare function Debugger(): void;

declare function DebugStr(debuggerMsg: interop.PointerConvertible): void;

declare function SysBreak(): void;

declare function SysBreakStr(debuggerMsg: interop.PointerConvertible): void;

declare function SysBreakFunc(debuggerMsg: interop.PointerConvertible): void;

declare function xcselect_host_sdk_path(sdk_policy: interop.Enum<typeof xcselect_host_sdk_policy_t>, path: interop.PointerConvertible): number;

declare function zlibVersion(): string;

declare function deflate(strm: interop.PointerConvertible, flush: number): number;

declare function deflateEnd(strm: interop.PointerConvertible): number;

declare function inflate(strm: interop.PointerConvertible, flush: number): number;

declare function inflateEnd(strm: interop.PointerConvertible): number;

declare function deflateSetDictionary(strm: interop.PointerConvertible, dictionary: interop.PointerConvertible, dictLength: number): number;

declare function deflateGetDictionary(strm: interop.PointerConvertible, dictionary: interop.PointerConvertible, dictLength: interop.PointerConvertible): number;

declare function deflateCopy(dest: interop.PointerConvertible, source: interop.PointerConvertible): number;

declare function deflateReset(strm: interop.PointerConvertible): number;

declare function deflateParams(strm: interop.PointerConvertible, level: number, strategy: number): number;

declare function deflateTune(strm: interop.PointerConvertible, good_length: number, max_lazy: number, nice_length: number, max_chain: number): number;

declare function deflateBound(strm: interop.PointerConvertible, sourceLen: number): number;

declare function deflatePending(strm: interop.PointerConvertible, pending: interop.PointerConvertible, bits: interop.PointerConvertible): number;

declare function deflatePrime(strm: interop.PointerConvertible, bits: number, value: number): number;

declare function deflateSetHeader(strm: interop.PointerConvertible, head: interop.PointerConvertible): number;

declare function inflateSetDictionary(strm: interop.PointerConvertible, dictionary: interop.PointerConvertible, dictLength: number): number;

declare function inflateGetDictionary(strm: interop.PointerConvertible, dictionary: interop.PointerConvertible, dictLength: interop.PointerConvertible): number;

declare function inflateSync(strm: interop.PointerConvertible): number;

declare function inflateCopy(dest: interop.PointerConvertible, source: interop.PointerConvertible): number;

declare function inflateReset(strm: interop.PointerConvertible): number;

declare function inflateReset2(strm: interop.PointerConvertible, windowBits: number): number;

declare function inflatePrime(strm: interop.PointerConvertible, bits: number, value: number): number;

declare function inflateMark(strm: interop.PointerConvertible): number;

declare function inflateGetHeader(strm: interop.PointerConvertible, head: interop.PointerConvertible): number;

declare function inflateBack(strm: interop.PointerConvertible, in: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number, in_desc: interop.PointerConvertible, out: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number) => number, out_desc: interop.PointerConvertible): number;

declare function inflateBackEnd(strm: interop.PointerConvertible): number;

declare function zlibCompileFlags(): number;

declare function compress(dest: interop.PointerConvertible, destLen: interop.PointerConvertible, source: interop.PointerConvertible, sourceLen: number): number;

declare function compress2(dest: interop.PointerConvertible, destLen: interop.PointerConvertible, source: interop.PointerConvertible, sourceLen: number, level: number): number;

declare function compressBound(sourceLen: number): number;

declare function uncompress(dest: interop.PointerConvertible, destLen: interop.PointerConvertible, source: interop.PointerConvertible, sourceLen: number): number;

declare function uncompress2(dest: interop.PointerConvertible, destLen: interop.PointerConvertible, source: interop.PointerConvertible, sourceLen: interop.PointerConvertible): number;

declare function gzdopen(fd: number, mode: string): interop.Pointer;

declare function gzbuffer(file: interop.PointerConvertible, size: number): number;

declare function gzsetparams(file: interop.PointerConvertible, level: number, strategy: number): number;

declare function gzread(file: interop.PointerConvertible, buf: interop.PointerConvertible, len: number): number;

declare function gzfread(buf: interop.PointerConvertible, size: number, nitems: number, file: interop.PointerConvertible): number;

declare function gzwrite(file: interop.PointerConvertible, buf: interop.PointerConvertible, len: number): number;

declare function gzfwrite(buf: interop.PointerConvertible, size: number, nitems: number, file: interop.PointerConvertible): number;

declare function gzprintf(file: interop.PointerConvertible, format: string): number;

declare function gzputs(file: interop.PointerConvertible, s: string): number;

declare function gzgets(file: interop.PointerConvertible, buf: string, len: number): string;

declare function gzputc(file: interop.PointerConvertible, c: number): number;

declare function gzgetc(file: interop.PointerConvertible): number;

declare function gzungetc(c: number, file: interop.PointerConvertible): number;

declare function gzflush(file: interop.PointerConvertible, flush: number): number;

declare function gzrewind(file: interop.PointerConvertible): number;

declare function gzeof(file: interop.PointerConvertible): number;

declare function gzdirect(file: interop.PointerConvertible): number;

declare function gzclose(file: interop.PointerConvertible): number;

declare function gzclose_r(file: interop.PointerConvertible): number;

declare function gzclose_w(file: interop.PointerConvertible): number;

declare function gzerror(file: interop.PointerConvertible, errnum: interop.PointerConvertible): string;

declare function gzclearerr(file: interop.PointerConvertible): void;

declare function adler32(adler: number, buf: interop.PointerConvertible, len: number): number;

declare function adler32_z(adler: number, buf: interop.PointerConvertible, len: number): number;

declare function crc32(crc: number, buf: interop.PointerConvertible, len: number): number;

declare function crc32_z(crc: number, buf: interop.PointerConvertible, len: number): number;

declare function crc32_combine_op(crc1: number, crc2: number, op: number): number;

declare function deflateInit_(strm: interop.PointerConvertible, level: number, version: string, stream_size: number): number;

declare function inflateInit_(strm: interop.PointerConvertible, version: string, stream_size: number): number;

declare function deflateInit2_(strm: interop.PointerConvertible, level: number, method: number, windowBits: number, memLevel: number, strategy: number, version: string, stream_size: number): number;

declare function inflateInit2_(strm: interop.PointerConvertible, windowBits: number, version: string, stream_size: number): number;

declare function inflateBackInit_(strm: interop.PointerConvertible, windowBits: number, window: interop.PointerConvertible, version: string, stream_size: number): number;

declare function gzgetc_(file: interop.PointerConvertible): number;

declare function gzopen(p1: string, p2: string): interop.Pointer;

declare function gzseek(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function gztell(p1: interop.PointerConvertible): number;

declare function gzoffset(p1: interop.PointerConvertible): number;

declare function adler32_combine(p1: number, p2: number, p3: number): number;

declare function crc32_combine(p1: number, p2: number, p3: number): number;

declare function crc32_combine_gen(p1: number): number;

declare function zError(p1: number): string;

declare function inflateSyncPoint(p1: interop.PointerConvertible): number;

declare function get_crc_table(): interop.Pointer;

declare function inflateUndermine(p1: interop.PointerConvertible, p2: number): number;

declare function inflateValidate(p1: interop.PointerConvertible, p2: number): number;

declare function inflateCodesUsed(p1: interop.PointerConvertible): number;

declare function inflateResetKeep(p1: interop.PointerConvertible): number;

declare function deflateResetKeep(p1: interop.PointerConvertible): number;

declare function gzvprintf(file: interop.PointerConvertible, format: string, va: string): number;

declare function bootstrap_create_server(bp: number, server_cmd: unknown /* const array */, server_uid: number, on_demand: number, server_port: interop.PointerConvertible): number;

declare function bootstrap_subset(bp: number, requestor_port: number, subset_port: interop.PointerConvertible): number;

declare function bootstrap_unprivileged(bp: number, unpriv_port: interop.PointerConvertible): number;

declare function bootstrap_parent(bp: number, parent_port: interop.PointerConvertible): number;

declare function bootstrap_register(bp: number, service_name: unknown /* const array */, sp: number): number;

declare function bootstrap_create_service(bp: number, service_name: unknown /* const array */, sp: interop.PointerConvertible): number;

declare function bootstrap_check_in(bp: number, service_name: unknown /* const array */, sp: interop.PointerConvertible): number;

declare function bootstrap_look_up(bp: number, service_name: unknown /* const array */, sp: interop.PointerConvertible): number;

declare function bootstrap_status(bp: number, service_name: unknown /* const array */, service_active: interop.PointerConvertible): number;

declare function bootstrap_strerror(r: number): string;

declare function vm_stats(info: interop.PointerConvertible, count: interop.PointerConvertible): number;

declare function mig_get_reply_port(): number;

declare function mig_dealloc_reply_port(reply_port: number): void;

declare function mig_put_reply_port(reply_port: number): void;

declare function mig_strncpy(dest: string, src: string, len: number): number;

declare function mig_strncpy_zerofill(dest: string, src: string, len: number): number;

declare function mig_allocate(p1: interop.PointerConvertible, p2: number): void;

declare function mig_deallocate(p1: number, p2: number): void;

declare function mig_strncpy_zerofill(dest: string, src: string, len: number): number;

declare function clock_set_time(clock_ctrl: number, new_time: mach_timespec): number;

declare function clock_set_attributes(clock_ctrl: number, flavor: number, clock_attr: interop.PointerConvertible, clock_attrCnt: number): number;

declare function host_get_boot_info(host_priv: number, boot_info: unknown /* const array */): number;

declare function host_reboot(host_priv: number, options: number): number;

declare function host_priv_statistics(host_priv: number, flavor: number, host_info_out: interop.PointerConvertible, host_info_outCnt: interop.PointerConvertible): number;

declare function host_default_memory_manager(host_priv: number, default_manager: interop.PointerConvertible, cluster_size: number): number;

declare function vm_wire(host_priv: number, task: number, address: number, size: number, desired_access: number): number;

declare function thread_wire(host_priv: number, thread: number, wired: number): number;

declare function vm_allocate_cpm(host_priv: number, task: number, address: interop.PointerConvertible, size: number, flags: number): number;

declare function host_processors(host_priv: number, out_processor_list: interop.PointerConvertible, out_processor_listCnt: interop.PointerConvertible): number;

declare function host_get_clock_control(host_priv: number, clock_id: number, clock_ctrl: interop.PointerConvertible): number;

declare function kmod_create(host_priv: number, info: number, module: interop.PointerConvertible): number;

declare function kmod_destroy(host_priv: number, module: number): number;

declare function kmod_control(host_priv: number, module: number, flavor: number, data: interop.PointerConvertible, dataCnt: interop.PointerConvertible): number;

declare function host_get_special_port(host_priv: number, node: number, which: number, port: interop.PointerConvertible): number;

declare function host_set_special_port(host_priv: number, which: number, port: number): number;

declare function host_set_exception_ports(host_priv: number, exception_mask: number, new_port: number, behavior: number, new_flavor: number): number;

declare function host_get_exception_ports(host_priv: number, exception_mask: number, masks: interop.PointerConvertible, masksCnt: interop.PointerConvertible, old_handlers: interop.PointerConvertible, old_behaviors: interop.PointerConvertible, old_flavors: interop.PointerConvertible): number;

declare function host_swap_exception_ports(host_priv: number, exception_mask: number, new_port: number, behavior: number, new_flavor: number, masks: interop.PointerConvertible, masksCnt: interop.PointerConvertible, old_handlerss: interop.PointerConvertible, old_behaviors: interop.PointerConvertible, old_flavors: interop.PointerConvertible): number;

declare function mach_vm_wire(host_priv: number, task: number, address: number, size: number, desired_access: number): number;

declare function host_processor_sets(host_priv: number, processor_sets: interop.PointerConvertible, processor_setsCnt: interop.PointerConvertible): number;

declare function host_processor_set_priv(host_priv: number, set_name: number, set: interop.PointerConvertible): number;

declare function host_set_UNDServer(host: number, server: number): number;

declare function host_get_UNDServer(host: number, server: interop.PointerConvertible): number;

declare function kext_request(host_priv: number, user_log_flags: number, request_data: number, request_dataCnt: number, response_data: interop.PointerConvertible, response_dataCnt: interop.PointerConvertible, log_data: interop.PointerConvertible, log_dataCnt: interop.PointerConvertible, op_result: interop.PointerConvertible): number;

declare function host_security_create_task_token(host_security: number, parent_task: number, sec_token: security_token_t, audit_token: audit_token_t, host: number, ledgers: interop.PointerConvertible, ledgersCnt: number, inherit_memory: number, child_task: interop.PointerConvertible): number;

declare function host_security_set_task_token(host_security: number, target_task: number, sec_token: security_token_t, audit_token: audit_token_t, host: number): number;

declare function processor_start(processor: number): number;

declare function processor_exit(processor: number): number;

declare function processor_info(processor: number, flavor: number, host: interop.PointerConvertible, processor_info_out: interop.PointerConvertible, processor_info_outCnt: interop.PointerConvertible): number;

declare function processor_control(processor: number, processor_cmd: interop.PointerConvertible, processor_cmdCnt: number): number;

declare function processor_assign(processor: number, new_set: number, wait: number): number;

declare function processor_get_assignment(processor: number, assigned_set: interop.PointerConvertible): number;

declare function processor_set_statistics(pset: number, flavor: number, info_out: interop.PointerConvertible, info_outCnt: interop.PointerConvertible): number;

declare function processor_set_destroy(set: number): number;

declare function processor_set_max_priority(processor_set: number, max_priority: number, change_threads: number): number;

declare function processor_set_policy_enable(processor_set: number, policy: number): number;

declare function processor_set_policy_disable(processor_set: number, policy: number, change_threads: number): number;

declare function processor_set_tasks(processor_set: number, task_list: interop.PointerConvertible, task_listCnt: interop.PointerConvertible): number;

declare function processor_set_threads(processor_set: number, thread_list: interop.PointerConvertible, thread_listCnt: interop.PointerConvertible): number;

declare function processor_set_policy_control(pset: number, flavor: number, policy_info: interop.PointerConvertible, policy_infoCnt: number, change: number): number;

declare function processor_set_stack_usage(pset: number, ltotal: interop.PointerConvertible, space: interop.PointerConvertible, resident: interop.PointerConvertible, maxusage: interop.PointerConvertible, maxstack: interop.PointerConvertible): number;

declare function processor_set_info(set_name: number, flavor: number, host: interop.PointerConvertible, info_out: interop.PointerConvertible, info_outCnt: interop.PointerConvertible): number;

declare function processor_set_tasks_with_flavor(processor_set: number, flavor: number, task_list: interop.PointerConvertible, task_listCnt: interop.PointerConvertible): number;

declare function semaphore_signal(semaphore: number): number;

declare function semaphore_signal_all(semaphore: number): number;

declare function semaphore_wait(semaphore: number): number;

declare function semaphore_timedwait(semaphore: number, wait_time: mach_timespec): number;

declare function semaphore_timedwait_signal(wait_semaphore: number, signal_semaphore: number, wait_time: mach_timespec): number;

declare function semaphore_wait_signal(wait_semaphore: number, signal_semaphore: number): number;

declare function semaphore_signal_thread(semaphore: number, thread: number): number;

declare function task_create(target_task: number, ledgers: interop.PointerConvertible, ledgersCnt: number, inherit_memory: number, child_task: interop.PointerConvertible): number;

declare function task_terminate(target_task: number): number;

declare function task_threads(target_task: number, act_list: interop.PointerConvertible, act_listCnt: interop.PointerConvertible): number;

declare function mach_ports_register(target_task: number, init_port_set: interop.PointerConvertible, init_port_setCnt: number): number;

declare function mach_ports_lookup(target_task: number, init_port_set: interop.PointerConvertible, init_port_setCnt: interop.PointerConvertible): number;

declare function task_info(target_task: number, flavor: number, task_info_out: interop.PointerConvertible, task_info_outCnt: interop.PointerConvertible): number;

declare function task_set_info(target_task: number, flavor: number, task_info_in: interop.PointerConvertible, task_info_inCnt: number): number;

declare function task_suspend(target_task: number): number;

declare function task_resume(target_task: number): number;

declare function task_get_special_port(task: number, which_port: number, special_port: interop.PointerConvertible): number;

declare function task_set_special_port(task: number, which_port: number, special_port: number): number;

declare function thread_create(parent_task: number, child_act: interop.PointerConvertible): number;

declare function thread_create_running(parent_task: number, flavor: number, new_state: interop.PointerConvertible, new_stateCnt: number, child_act: interop.PointerConvertible): number;

declare function task_set_exception_ports(task: number, exception_mask: number, new_port: number, behavior: number, new_flavor: number): number;

declare function task_get_exception_ports(task: number, exception_mask: number, masks: interop.PointerConvertible, masksCnt: interop.PointerConvertible, old_handlers: interop.PointerConvertible, old_behaviors: interop.PointerConvertible, old_flavors: interop.PointerConvertible): number;

declare function task_swap_exception_ports(task: number, exception_mask: number, new_port: number, behavior: number, new_flavor: number, masks: interop.PointerConvertible, masksCnt: interop.PointerConvertible, old_handlers: interop.PointerConvertible, old_behaviors: interop.PointerConvertible, old_flavors: interop.PointerConvertible): number;

declare function lock_set_create(task: number, new_lock_set: interop.PointerConvertible, n_ulocks: number, policy: number): number;

declare function lock_set_destroy(task: number, lock_set: number): number;

declare function semaphore_create(task: number, semaphore: interop.PointerConvertible, policy: number, value: number): number;

declare function semaphore_destroy(task: number, semaphore: number): number;

declare function task_policy_set(task: number, flavor: number, policy_info: interop.PointerConvertible, policy_infoCnt: number): number;

declare function task_policy_get(task: number, flavor: number, policy_info: interop.PointerConvertible, policy_infoCnt: interop.PointerConvertible, get_default: interop.PointerConvertible): number;

declare function task_sample(task: number, reply: number): number;

declare function task_policy(task: number, policy: number, base: interop.PointerConvertible, baseCnt: number, set_limit: number, change: number): number;

declare function task_set_emulation(target_port: number, routine_entry_pt: number, routine_number: number): number;

declare function task_get_emulation_vector(task: number, vector_start: interop.PointerConvertible, emulation_vector: interop.PointerConvertible, emulation_vectorCnt: interop.PointerConvertible): number;

declare function task_set_emulation_vector(task: number, vector_start: number, emulation_vector: interop.PointerConvertible, emulation_vectorCnt: number): number;

declare function task_set_ras_pc(target_task: number, basepc: number, boundspc: number): number;

declare function task_zone_info(target_task: number, names: interop.PointerConvertible, namesCnt: interop.PointerConvertible, info: interop.PointerConvertible, infoCnt: interop.PointerConvertible): number;

declare function task_assign(task: number, new_set: number, assign_threads: number): number;

declare function task_assign_default(task: number, assign_threads: number): number;

declare function task_get_assignment(task: number, assigned_set: interop.PointerConvertible): number;

declare function task_set_policy(task: number, pset: number, policy: number, base: interop.PointerConvertible, baseCnt: number, limit: interop.PointerConvertible, limitCnt: number, change: number): number;

declare function task_get_state(task: number, flavor: number, old_state: interop.PointerConvertible, old_stateCnt: interop.PointerConvertible): number;

declare function task_set_state(task: number, flavor: number, new_state: interop.PointerConvertible, new_stateCnt: number): number;

declare function task_set_phys_footprint_limit(task: number, new_limit: number, old_limit: interop.PointerConvertible): number;

declare function task_suspend2(target_task: number, suspend_token: interop.PointerConvertible): number;

declare function task_resume2(suspend_token: number): number;

declare function task_purgable_info(task: number, stats: interop.PointerConvertible): number;

declare function task_get_mach_voucher(task: number, which: number, voucher: interop.PointerConvertible): number;

declare function task_set_mach_voucher(task: number, voucher: number): number;

declare function task_swap_mach_voucher(task: number, new_voucher: number, old_voucher: interop.PointerConvertible): number;

declare function task_generate_corpse(task: number, corpse_task_port: interop.PointerConvertible): number;

declare function task_map_corpse_info(task: number, corspe_task: number, kcd_addr_begin: interop.PointerConvertible, kcd_size: interop.PointerConvertible): number;

declare function task_register_dyld_image_infos(task: number, dyld_images: interop.PointerConvertible, dyld_imagesCnt: number): number;

declare function task_unregister_dyld_image_infos(task: number, dyld_images: interop.PointerConvertible, dyld_imagesCnt: number): number;

declare function task_get_dyld_image_infos(task: number, dyld_images: interop.PointerConvertible, dyld_imagesCnt: interop.PointerConvertible): number;

declare function task_register_dyld_shared_cache_image_info(task: number, dyld_cache_image: dyld_kernel_image_info, no_cache: number, private_cache: number): number;

declare function task_register_dyld_set_dyld_state(task: number, dyld_state: number): number;

declare function task_register_dyld_get_process_state(task: number, dyld_process_state: interop.PointerConvertible): number;

declare function task_map_corpse_info_64(task: number, corspe_task: number, kcd_addr_begin: interop.PointerConvertible, kcd_size: interop.PointerConvertible): number;

declare function task_inspect(task: number, flavor: number, info_out: interop.PointerConvertible, info_outCnt: interop.PointerConvertible): number;

declare function task_get_exc_guard_behavior(task: number, behavior: interop.PointerConvertible): number;

declare function task_set_exc_guard_behavior(task: number, behavior: number): number;

declare function task_dyld_process_info_notify_register(target_task: number, notify: number): number;

declare function task_create_identity_token(task: number, token: interop.PointerConvertible): number;

declare function task_identity_token_get_task_port(token: number, flavor: number, task_port: interop.PointerConvertible): number;

declare function task_dyld_process_info_notify_deregister(target_task: number, notify: number): number;

declare function task_get_exception_ports_info(port: number, exception_mask: number, masks: interop.PointerConvertible, masksCnt: interop.PointerConvertible, old_handlers_info: interop.PointerConvertible, old_behaviors: interop.PointerConvertible, old_flavors: interop.PointerConvertible): number;

declare function task_test_sync_upcall(task: number, port: number): number;

declare function task_set_corpse_forking_behavior(task: number, behavior: number): number;

declare function task_test_async_upcall_propagation(task: number, port: number, qos: number, iotier: number): number;

declare function task_map_kcdata_object_64(task: number, kcdata_object: number, kcd_addr_begin: interop.PointerConvertible, kcd_size: interop.PointerConvertible): number;

declare function task_register_hardened_exception_handler(task: number, signed_pc_key: number, exceptions_allowed: number, behaviors_allowed: number, flavors_allowed: number, new_exception_port: number): number;

declare function thread_terminate(target_act: number): number;

declare function act_get_state(target_act: number, flavor: number, old_state: interop.PointerConvertible, old_stateCnt: interop.PointerConvertible): number;

declare function act_set_state(target_act: number, flavor: number, new_state: interop.PointerConvertible, new_stateCnt: number): number;

declare function thread_get_state(target_act: number, flavor: number, old_state: interop.PointerConvertible, old_stateCnt: interop.PointerConvertible): number;

declare function thread_set_state(target_act: number, flavor: number, new_state: interop.PointerConvertible, new_stateCnt: number): number;

declare function thread_suspend(target_act: number): number;

declare function thread_resume(target_act: number): number;

declare function thread_abort(target_act: number): number;

declare function thread_abort_safely(target_act: number): number;

declare function thread_depress_abort(thread: number): number;

declare function thread_get_special_port(thr_act: number, which_port: number, special_port: interop.PointerConvertible): number;

declare function thread_set_special_port(thr_act: number, which_port: number, special_port: number): number;

declare function thread_info(target_act: number, flavor: number, thread_info_out: interop.PointerConvertible, thread_info_outCnt: interop.PointerConvertible): number;

declare function thread_set_exception_ports(thread: number, exception_mask: number, new_port: number, behavior: number, new_flavor: number): number;

declare function thread_get_exception_ports(thread: number, exception_mask: number, masks: interop.PointerConvertible, masksCnt: interop.PointerConvertible, old_handlers: interop.PointerConvertible, old_behaviors: interop.PointerConvertible, old_flavors: interop.PointerConvertible): number;

declare function thread_swap_exception_ports(thread: number, exception_mask: number, new_port: number, behavior: number, new_flavor: number, masks: interop.PointerConvertible, masksCnt: interop.PointerConvertible, old_handlers: interop.PointerConvertible, old_behaviors: interop.PointerConvertible, old_flavors: interop.PointerConvertible): number;

declare function thread_policy(thr_act: number, policy: number, base: interop.PointerConvertible, baseCnt: number, set_limit: number): number;

declare function thread_policy_set(thread: number, flavor: number, policy_info: interop.PointerConvertible, policy_infoCnt: number): number;

declare function thread_policy_get(thread: number, flavor: number, policy_info: interop.PointerConvertible, policy_infoCnt: interop.PointerConvertible, get_default: interop.PointerConvertible): number;

declare function thread_sample(thread: number, reply: number): number;

declare function etap_trace_thread(target_act: number, trace_status: number): number;

declare function thread_assign(thread: number, new_set: number): number;

declare function thread_assign_default(thread: number): number;

declare function thread_get_assignment(thread: number, assigned_set: interop.PointerConvertible): number;

declare function thread_set_policy(thr_act: number, pset: number, policy: number, base: interop.PointerConvertible, baseCnt: number, limit: interop.PointerConvertible, limitCnt: number): number;

declare function thread_get_mach_voucher(thr_act: number, which: number, voucher: interop.PointerConvertible): number;

declare function thread_set_mach_voucher(thr_act: number, voucher: number): number;

declare function thread_swap_mach_voucher(thr_act: number, new_voucher: number, old_voucher: interop.PointerConvertible): number;

declare function thread_convert_thread_state(thread: number, direction: number, flavor: number, in_state: interop.PointerConvertible, in_stateCnt: number, out_state: interop.PointerConvertible, out_stateCnt: interop.PointerConvertible): number;

declare function thread_get_exception_ports_info(port: number, exception_mask: number, masks: interop.PointerConvertible, masksCnt: interop.PointerConvertible, old_handlers_info: interop.PointerConvertible, old_behaviors: interop.PointerConvertible, old_flavors: interop.PointerConvertible): number;

declare function thread_adopt_exception_handler(thread: number, exc_port: number, exc_mask: number, behavior_mask: number, flavor_mask: number): number;

declare function vm_region(target_task: number, address: interop.PointerConvertible, size: interop.PointerConvertible, flavor: number, info: interop.PointerConvertible, infoCnt: interop.PointerConvertible, object_name: interop.PointerConvertible): number;

declare function vm_allocate(target_task: number, address: interop.PointerConvertible, size: number, flags: number): number;

declare function vm_deallocate(target_task: number, address: number, size: number): number;

declare function vm_protect(target_task: number, address: number, size: number, set_maximum: number, new_protection: number): number;

declare function vm_inherit(target_task: number, address: number, size: number, new_inheritance: number): number;

declare function vm_read(target_task: number, address: number, size: number, data: interop.PointerConvertible, dataCnt: interop.PointerConvertible): number;

declare function vm_read_list(target_task: number, data_list: unknown /* const array */, count: number): number;

declare function vm_write(target_task: number, address: number, data: number, dataCnt: number): number;

declare function vm_copy(target_task: number, source_address: number, size: number, dest_address: number): number;

declare function vm_read_overwrite(target_task: number, address: number, size: number, data: number, outsize: interop.PointerConvertible): number;

declare function vm_msync(target_task: number, address: number, size: number, sync_flags: number): number;

declare function vm_behavior_set(target_task: number, address: number, size: number, new_behavior: number): number;

declare function vm_map(target_task: number, address: interop.PointerConvertible, size: number, mask: number, flags: number, object: number, offset: number, copy: number, cur_protection: number, max_protection: number, inheritance: number): number;

declare function vm_machine_attribute(target_task: number, address: number, size: number, attribute: number, value: interop.PointerConvertible): number;

declare function vm_remap(target_task: number, target_address: interop.PointerConvertible, size: number, mask: number, flags: number, src_task: number, src_address: number, copy: number, cur_protection: interop.PointerConvertible, max_protection: interop.PointerConvertible, inheritance: number): number;

declare function task_wire(target_task: number, must_wire: number): number;

declare function mach_make_memory_entry(target_task: number, size: interop.PointerConvertible, offset: number, permission: number, object_handle: interop.PointerConvertible, parent_entry: number): number;

declare function vm_map_page_query(target_map: number, offset: number, disposition: interop.PointerConvertible, ref_count: interop.PointerConvertible): number;

declare function mach_vm_region_info(task: number, address: number, region: interop.PointerConvertible, objects: interop.PointerConvertible, objectsCnt: interop.PointerConvertible): number;

declare function vm_mapped_pages_info(task: number, pages: interop.PointerConvertible, pagesCnt: interop.PointerConvertible): number;

declare function vm_region_recurse(target_task: number, address: interop.PointerConvertible, size: interop.PointerConvertible, nesting_depth: interop.PointerConvertible, info: interop.PointerConvertible, infoCnt: interop.PointerConvertible): number;

declare function vm_region_recurse_64(target_task: number, address: interop.PointerConvertible, size: interop.PointerConvertible, nesting_depth: interop.PointerConvertible, info: interop.PointerConvertible, infoCnt: interop.PointerConvertible): number;

declare function mach_vm_region_info_64(task: number, address: number, region: interop.PointerConvertible, objects: interop.PointerConvertible, objectsCnt: interop.PointerConvertible): number;

declare function vm_region_64(target_task: number, address: interop.PointerConvertible, size: interop.PointerConvertible, flavor: number, info: interop.PointerConvertible, infoCnt: interop.PointerConvertible, object_name: interop.PointerConvertible): number;

declare function mach_make_memory_entry_64(target_task: number, size: interop.PointerConvertible, offset: number, permission: number, object_handle: interop.PointerConvertible, parent_entry: number): number;

declare function vm_map_64(target_task: number, address: interop.PointerConvertible, size: number, mask: number, flags: number, object: number, offset: number, copy: number, cur_protection: number, max_protection: number, inheritance: number): number;

declare function vm_purgable_control(target_task: number, address: number, control: number, state: interop.PointerConvertible): number;

declare function vm_map_exec_lockdown(target_task: number): number;

declare function vm_remap_new(target_task: number, target_address: interop.PointerConvertible, size: number, mask: number, flags: number, src_task: number, src_address: number, copy: number, cur_protection: interop.PointerConvertible, max_protection: interop.PointerConvertible, inheritance: number): number;

declare function mach_port_names(task: number, names: interop.PointerConvertible, namesCnt: interop.PointerConvertible, types: interop.PointerConvertible, typesCnt: interop.PointerConvertible): number;

declare function mach_port_type(task: number, name: number, ptype: interop.PointerConvertible): number;

declare function mach_port_rename(task: number, old_name: number, new_name: number): number;

declare function mach_port_allocate_name(task: number, right: number, name: number): number;

declare function mach_port_allocate(task: number, right: number, name: interop.PointerConvertible): number;

declare function mach_port_destroy(task: number, name: number): number;

declare function mach_port_deallocate(task: number, name: number): number;

declare function mach_port_get_refs(task: number, name: number, right: number, refs: interop.PointerConvertible): number;

declare function mach_port_mod_refs(task: number, name: number, right: number, delta: number): number;

declare function mach_port_peek(task: number, name: number, trailer_type: number, request_seqnop: interop.PointerConvertible, msg_sizep: interop.PointerConvertible, msg_idp: interop.PointerConvertible, trailer_infop: string, trailer_infopCnt: interop.PointerConvertible): number;

declare function mach_port_set_mscount(task: number, name: number, mscount: number): number;

declare function mach_port_get_set_status(task: number, name: number, members: interop.PointerConvertible, membersCnt: interop.PointerConvertible): number;

declare function mach_port_move_member(task: number, member: number, after: number): number;

declare function mach_port_request_notification(task: number, name: number, msgid: number, sync: number, notify: number, notifyPoly: number, previous: interop.PointerConvertible): number;

declare function mach_port_insert_right(task: number, name: number, poly: number, polyPoly: number): number;

declare function mach_port_extract_right(task: number, name: number, msgt_name: number, poly: interop.PointerConvertible, polyPoly: interop.PointerConvertible): number;

declare function mach_port_set_seqno(task: number, name: number, seqno: number): number;

declare function mach_port_get_attributes(task: number, name: number, flavor: number, port_info_out: interop.PointerConvertible, port_info_outCnt: interop.PointerConvertible): number;

declare function mach_port_set_attributes(task: number, name: number, flavor: number, port_info: interop.PointerConvertible, port_infoCnt: number): number;

declare function mach_port_allocate_qos(task: number, right: number, qos: interop.PointerConvertible, name: interop.PointerConvertible): number;

declare function mach_port_allocate_full(task: number, right: number, proto: number, qos: interop.PointerConvertible, name: interop.PointerConvertible): number;

declare function task_set_port_space(task: number, table_entries: number): number;

declare function mach_port_get_srights(task: number, name: number, srights: interop.PointerConvertible): number;

declare function mach_port_space_info(space: number, space_info: interop.PointerConvertible, table_info: interop.PointerConvertible, table_infoCnt: interop.PointerConvertible, tree_info: interop.PointerConvertible, tree_infoCnt: interop.PointerConvertible): number;

declare function mach_port_dnrequest_info(task: number, name: number, dnr_total: interop.PointerConvertible, dnr_used: interop.PointerConvertible): number;

declare function mach_port_kernel_object(task: number, name: number, object_type: interop.PointerConvertible, object_addr: interop.PointerConvertible): number;

declare function mach_port_insert_member(task: number, name: number, pset: number): number;

declare function mach_port_extract_member(task: number, name: number, pset: number): number;

declare function mach_port_get_context(task: number, name: number, context: interop.PointerConvertible): number;

declare function mach_port_set_context(task: number, name: number, context: number): number;

declare function mach_port_kobject(task: number, name: number, object_type: interop.PointerConvertible, object_addr: interop.PointerConvertible): number;

declare function mach_port_construct(task: number, options: interop.PointerConvertible, context: number, name: interop.PointerConvertible): number;

declare function mach_port_destruct(task: number, name: number, srdelta: number, guard: number): number;

declare function mach_port_guard(task: number, name: number, guard: number, strict: number): number;

declare function mach_port_unguard(task: number, name: number, guard: number): number;

declare function mach_port_space_basic_info(task: number, basic_info: interop.PointerConvertible): number;

declare function mach_port_guard_with_flags(task: number, name: number, guard: number, flags: number): number;

declare function mach_port_swap_guard(task: number, name: number, old_guard: number, new_guard: number): number;

declare function mach_port_kobject_description(task: number, name: number, object_type: interop.PointerConvertible, object_addr: interop.PointerConvertible, description: unknown /* const array */): number;

declare function mach_port_is_connection_for_service(task: number, connection_port: number, service_port: number, filter_policy_id: interop.PointerConvertible): number;

declare function mach_port_get_service_port_info(task: number, name: number, sp_info_out: interop.PointerConvertible): number;

declare function mach_port_assert_attributes(task: number, name: number, flavor: number, info: interop.PointerConvertible, infoCnt: number): number;

declare function mach_host_self(): number;

declare function mach_thread_self(): number;

declare function mach_task_is_self(task: number): number;

declare function host_page_size(p1: number, p2: interop.PointerConvertible): number;

declare function clock_sleep_trap(clock_name: number, sleep_type: number, sleep_sec: number, sleep_nsec: number, wakeup_time: interop.PointerConvertible): number;

declare function _kernelrpc_mach_vm_allocate_trap(target: number, addr: interop.PointerConvertible, size: number, flags: number): number;

declare function _kernelrpc_mach_vm_deallocate_trap(target: number, address: number, size: number): number;

declare function task_dyld_process_info_notify_get(names_addr: interop.PointerConvertible, names_count_addr: interop.PointerConvertible): number;

declare function _kernelrpc_mach_vm_protect_trap(target: number, address: number, size: number, set_maximum: number, new_protection: number): number;

declare function _kernelrpc_mach_vm_map_trap(target: number, address: interop.PointerConvertible, size: number, mask: number, flags: number, cur_protection: number): number;

declare function _kernelrpc_mach_vm_purgable_control_trap(target: number, address: number, control: number, state: interop.PointerConvertible): number;

declare function _kernelrpc_mach_port_allocate_trap(target: number, right: number, name: interop.PointerConvertible): number;

declare function _kernelrpc_mach_port_deallocate_trap(target: number, name: number): number;

declare function _kernelrpc_mach_port_mod_refs_trap(target: number, name: number, right: number, delta: number): number;

declare function _kernelrpc_mach_port_move_member_trap(target: number, member: number, after: number): number;

declare function _kernelrpc_mach_port_insert_right_trap(target: number, name: number, poly: number, polyPoly: number): number;

declare function _kernelrpc_mach_port_get_attributes_trap(target: number, name: number, flavor: number, port_info_out: interop.PointerConvertible, port_info_outCnt: interop.PointerConvertible): number;

declare function _kernelrpc_mach_port_insert_member_trap(target: number, name: number, pset: number): number;

declare function _kernelrpc_mach_port_extract_member_trap(target: number, name: number, pset: number): number;

declare function _kernelrpc_mach_port_construct_trap(target: number, options: interop.PointerConvertible, context: number, name: interop.PointerConvertible): number;

declare function _kernelrpc_mach_port_destruct_trap(target: number, name: number, srdelta: number, guard: number): number;

declare function _kernelrpc_mach_port_guard_trap(target: number, name: number, guard: number, strict: number): number;

declare function _kernelrpc_mach_port_unguard_trap(target: number, name: number, guard: number): number;

declare function mach_generate_activity_id(target: number, count: number, activity_id: interop.PointerConvertible): number;

declare function macx_swapon(filename: number, flags: number, size: number, priority: number): number;

declare function macx_swapoff(filename: number, flags: number): number;

declare function macx_triggers(hi_water: number, low_water: number, flags: number, alert_port: number): number;

declare function macx_backing_store_suspend(suspend: number): number;

declare function macx_backing_store_recovery(pid: number): number;

declare function swtch_pri(pri: number): number;

declare function swtch(): number;

declare function thread_switch(thread_name: number, option: number, option_time: number): number;

declare function task_self_trap(): number;

declare function host_create_mach_voucher_trap(host: number, recipes: interop.PointerConvertible, recipes_size: number, voucher: interop.PointerConvertible): number;

declare function mach_voucher_extract_attr_recipe_trap(voucher_name: number, key: number, recipe: interop.PointerConvertible, recipe_size: interop.PointerConvertible): number;

declare function _kernelrpc_mach_port_type_trap(task: number, name: number, ptype: interop.PointerConvertible): number;

declare function _kernelrpc_mach_port_request_notification_trap(task: number, name: number, msgid: number, sync: number, notify: number, notifyPoly: number, previous: interop.PointerConvertible): number;

declare function task_for_pid(target_tport: number, pid: number, t: interop.PointerConvertible): number;

declare function task_name_for_pid(target_tport: number, pid: number, tn: interop.PointerConvertible): number;

declare function pid_for_task(t: number, x: interop.PointerConvertible): number;

declare function debug_control_port_for_pid(target_tport: number, pid: number, t: interop.PointerConvertible): number;

declare function mach_vm_reclaim_update_kernel_accounting_trap(target_tport: number, bytes_reclaimed: interop.PointerConvertible): number;

declare function host_info(host: number, flavor: number, host_info_out: interop.PointerConvertible, host_info_outCnt: interop.PointerConvertible): number;

declare function host_kernel_version(host: number, kernel_version: unknown /* const array */): number;

declare function _host_page_size(host: number, out_page_size: interop.PointerConvertible): number;

declare function mach_memory_object_memory_entry(host: number, internal: number, size: number, permission: number, pager: number, entry_handle: interop.PointerConvertible): number;

declare function host_processor_info(host: number, flavor: number, out_processor_count: interop.PointerConvertible, out_processor_info: interop.PointerConvertible, out_processor_infoCnt: interop.PointerConvertible): number;

declare function host_get_io_main(host: number, io_main: interop.PointerConvertible): number;

declare function host_get_clock_service(host: number, clock_id: number, clock_serv: interop.PointerConvertible): number;

declare function kmod_get_info(host: number, modules: interop.PointerConvertible, modulesCnt: interop.PointerConvertible): number;

declare function host_virtual_physical_table_info(host: number, info: interop.PointerConvertible, infoCnt: interop.PointerConvertible): number;

declare function processor_set_default(host: number, default_set: interop.PointerConvertible): number;

declare function processor_set_create(host: number, new_set: interop.PointerConvertible, new_name: interop.PointerConvertible): number;

declare function mach_memory_object_memory_entry_64(host: number, internal: number, size: number, permission: number, pager: number, entry_handle: interop.PointerConvertible): number;

declare function host_statistics(host_priv: number, flavor: number, host_info_out: interop.PointerConvertible, host_info_outCnt: interop.PointerConvertible): number;

declare function host_request_notification(host: number, notify_type: number, notify_port: number): number;

declare function host_lockgroup_info(host: number, lockgroup_info: interop.PointerConvertible, lockgroup_infoCnt: interop.PointerConvertible): number;

declare function host_statistics64(host_priv: number, flavor: number, host_info64_out: interop.PointerConvertible, host_info64_outCnt: interop.PointerConvertible): number;

declare function mach_zone_info(host: number, names: interop.PointerConvertible, namesCnt: interop.PointerConvertible, info: interop.PointerConvertible, infoCnt: interop.PointerConvertible): number;

declare function host_create_mach_voucher(host: number, recipes: interop.PointerConvertible, recipesCnt: number, voucher: interop.PointerConvertible): number;

declare function host_register_mach_voucher_attr_manager(host: number, attr_manager: number, default_value: number, new_key: interop.PointerConvertible, new_attr_control: interop.PointerConvertible): number;

declare function host_register_well_known_mach_voucher_attr_manager(host: number, attr_manager: number, default_value: number, key: number, new_attr_control: interop.PointerConvertible): number;

declare function host_set_atm_diagnostic_flag(host: number, diagnostic_flag: number): number;

declare function host_get_atm_diagnostic_flag(host: number, diagnostic_flag: interop.PointerConvertible): number;

declare function mach_memory_info(host: number, names: interop.PointerConvertible, namesCnt: interop.PointerConvertible, info: interop.PointerConvertible, infoCnt: interop.PointerConvertible, memory_info: interop.PointerConvertible, memory_infoCnt: interop.PointerConvertible): number;

declare function host_set_multiuser_config_flags(host_priv: number, multiuser_flags: number): number;

declare function host_get_multiuser_config_flags(host: number, multiuser_flags: interop.PointerConvertible): number;

declare function host_check_multiuser_mode(host: number, multiuser_mode: interop.PointerConvertible): number;

declare function mach_zone_info_for_zone(host: number, name: mach_zone_name, info: interop.PointerConvertible): number;

declare function mach_error_string(error_value: number): string;

declare function mach_error(str: string, error_value: number): void;

declare function mach_error_type(error_value: number): string;

declare function panic_init(p1: number): void;

declare function panic(p1: string): void;

declare function slot_name(p1: number, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible): void;

declare function mig_reply_setup(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function mach_msg_destroy(p1: interop.PointerConvertible): void;

declare function mach_msg_receive(p1: interop.PointerConvertible): number;

declare function mach_msg_send(p1: interop.PointerConvertible): number;

declare function mach_msg_server_once(p1: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number, p2: number, p3: number, p4: number): number;

declare function mach_msg_server(p1: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number, p2: number, p3: number, p4: number): number;

declare function mach_msg_server_importance(p1: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number, p2: number, p3: number, p4: number): number;

declare function clock_get_res(p1: number, p2: interop.PointerConvertible): number;

declare function clock_set_res(p1: number, p2: number): number;

declare function clock_sleep(p1: number, p2: number, p3: mach_timespec, p4: interop.PointerConvertible): number;

declare function voucher_mach_msg_set(msg: interop.PointerConvertible): number;

declare function voucher_mach_msg_clear(msg: interop.PointerConvertible): void;

declare function voucher_mach_msg_adopt(msg: interop.PointerConvertible): interop.Pointer;

declare function voucher_mach_msg_revert(state: interop.PointerConvertible): void;

declare function launch_activate_socket(name: string, fds: interop.PointerConvertible, cnt: interop.PointerConvertible): number;

declare function launch_data_alloc(type: interop.Enum<typeof launch_data_type_t>): interop.Pointer;

declare function launch_data_copy(ld: interop.PointerConvertible): interop.Pointer;

declare function launch_data_get_type(ld: interop.PointerConvertible): interop.Enum<typeof launch_data_type_t>;

declare function launch_data_free(ld: interop.PointerConvertible): void;

declare function launch_data_dict_insert(ldict: interop.PointerConvertible, lval: interop.PointerConvertible, key: string): boolean;

declare function launch_data_dict_lookup(ldict: interop.PointerConvertible, key: string): interop.Pointer;

declare function launch_data_dict_remove(ldict: interop.PointerConvertible, key: string): boolean;

declare function launch_data_dict_iterate(ldict: interop.PointerConvertible, iterator: (p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible) => void, ctx: interop.PointerConvertible): void;

declare function launch_data_dict_get_count(ldict: interop.PointerConvertible): number;

declare function launch_data_array_set_index(larray: interop.PointerConvertible, lval: interop.PointerConvertible, idx: number): boolean;

declare function launch_data_array_get_index(larray: interop.PointerConvertible, idx: number): interop.Pointer;

declare function launch_data_array_get_count(larray: interop.PointerConvertible): number;

declare function launch_data_new_fd(fd: number): interop.Pointer;

declare function launch_data_new_machport(val: number): interop.Pointer;

declare function launch_data_new_integer(val: number): interop.Pointer;

declare function launch_data_new_bool(val: boolean): interop.Pointer;

declare function launch_data_new_real(val: number): interop.Pointer;

declare function launch_data_new_string(val: string): interop.Pointer;

declare function launch_data_new_opaque(bytes: interop.PointerConvertible, sz: number): interop.Pointer;

declare function launch_data_set_fd(ld: interop.PointerConvertible, fd: number): boolean;

declare function launch_data_set_machport(ld: interop.PointerConvertible, mp: number): boolean;

declare function launch_data_set_integer(ld: interop.PointerConvertible, val: number): boolean;

declare function launch_data_set_bool(ld: interop.PointerConvertible, val: boolean): boolean;

declare function launch_data_set_real(ld: interop.PointerConvertible, val: number): boolean;

declare function launch_data_set_string(ld: interop.PointerConvertible, val: string): boolean;

declare function launch_data_set_opaque(ld: interop.PointerConvertible, bytes: interop.PointerConvertible, sz: number): boolean;

declare function launch_data_get_fd(ld: interop.PointerConvertible): number;

declare function launch_data_get_machport(ld: interop.PointerConvertible): number;

declare function launch_data_get_integer(ld: interop.PointerConvertible): number;

declare function launch_data_get_bool(ld: interop.PointerConvertible): boolean;

declare function launch_data_get_real(ld: interop.PointerConvertible): number;

declare function launch_data_get_string(ld: interop.PointerConvertible): string;

declare function launch_data_get_opaque(ld: interop.PointerConvertible): interop.Pointer;

declare function launch_data_get_opaque_size(ld: interop.PointerConvertible): number;

declare function launch_data_get_errno(ld: interop.PointerConvertible): number;

declare function launch_get_fd(): number;

declare function launch_msg(request: interop.PointerConvertible): interop.Pointer;

declare function vproc_transaction_begin(virtual_proc: interop.PointerConvertible): interop.Pointer;

declare function vproc_transaction_end(virtual_proc: interop.PointerConvertible, handle: interop.PointerConvertible): void;

declare function vproc_standby_begin(virtual_proc: interop.PointerConvertible): interop.Pointer;

declare function vproc_standby_end(virtual_proc: interop.PointerConvertible, handle: interop.PointerConvertible): void;

declare function notify_post(name: string): number;

declare function notify_register_dispatch(name: string, out_token: interop.PointerConvertible, queue: NSObject, handler: (p1: number) => void): number;

declare function notify_register_check(name: string, out_token: interop.PointerConvertible): number;

declare function notify_register_signal(name: string, sig: number, out_token: interop.PointerConvertible): number;

declare function notify_register_mach_port(name: string, notify_port: interop.PointerConvertible, flags: number, out_token: interop.PointerConvertible): number;

declare function notify_register_file_descriptor(name: string, notify_fd: interop.PointerConvertible, flags: number, out_token: interop.PointerConvertible): number;

declare function notify_check(token: number, check: interop.PointerConvertible): number;

declare function notify_cancel(token: number): number;

declare function notify_suspend(token: number): number;

declare function notify_resume(token: number): number;

declare function notify_set_state(token: number, state64: number): number;

declare function notify_get_state(token: number, state64: interop.PointerConvertible): number;

declare function notify_is_valid_token(val: number): boolean;

declare function mlockall(p1: number): number;

declare function munlockall(): number;

declare function mlock(p1: interop.PointerConvertible, p2: number): number;

declare function mmap(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number, p6: number): interop.Pointer;

declare function mprotect(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function msync(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function munlock(p1: interop.PointerConvertible, p2: number): number;

declare function munmap(p1: interop.PointerConvertible, p2: number): number;

declare function shm_open(p1: string, p2: number): number;

declare function shm_unlink(p1: string): number;

declare function posix_madvise(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function madvise(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function mincore(p1: interop.PointerConvertible, p2: number, p3: string): number;

declare function minherit(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function uuid_clear(uu: unknown /* const array */): void;

declare function uuid_compare(uu1: unknown /* const array */, uu2: unknown /* const array */): number;

declare function uuid_copy(dst: unknown /* const array */, src: unknown /* const array */): void;

declare function uuid_generate(out: unknown /* const array */): void;

declare function uuid_generate_random(out: unknown /* const array */): void;

declare function uuid_generate_time(out: unknown /* const array */): void;

declare function uuid_is_null(uu: unknown /* const array */): number;

declare function uuid_parse(in: unknown /* const array */, uu: unknown /* const array */): number;

declare function uuid_unparse(uu: unknown /* const array */, out: unknown /* const array */): void;

declare function uuid_unparse_lower(uu: unknown /* const array */, out: unknown /* const array */): void;

declare function uuid_unparse_upper(uu: unknown /* const array */, out: unknown /* const array */): void;

declare function audit(p1: interop.PointerConvertible, p2: number): number;

declare function auditon(p1: number, p2: interop.PointerConvertible, p3: number): number;

declare function auditctl(p1: string): number;

declare function getauid(p1: interop.PointerConvertible): number;

declare function setauid(p1: interop.PointerConvertible): number;

declare function getaudit_addr(p1: interop.PointerConvertible, p2: number): number;

declare function setaudit_addr(p1: interop.PointerConvertible, p2: number): number;

declare function getaudit(p1: interop.PointerConvertible): number;

declare function setaudit(p1: interop.PointerConvertible): number;

declare function audit_session_self(): number;

declare function audit_session_join(port: number): number;

declare function audit_session_port(asid: number, portname: interop.PointerConvertible): number;

declare function xpc_endpoint_create(connection: NSObject): NSObject;

declare function xpc_debugger_api_misuse_info(): string;

declare function xpc_activity_register(identifier: string, criteria: NSObject, handler: (p1: NSObject) => void): void;

declare function xpc_activity_copy_criteria(activity: NSObject): NSObject;

declare function xpc_activity_set_criteria(activity: NSObject, criteria: NSObject): void;

declare function xpc_activity_get_state(activity: NSObject): number;

declare function xpc_activity_set_state(activity: NSObject, state: number): boolean;

declare function xpc_activity_should_defer(activity: NSObject): boolean;

declare function xpc_activity_unregister(identifier: string): void;

declare function xpc_peer_requirement_create_entitlement_exists(entitlement: string, error_out: interop.PointerConvertible): NSObject;

declare function xpc_peer_requirement_create_entitlement_matches_value(entitlement: string, value: NSObject, error_out: interop.PointerConvertible): NSObject;

declare function xpc_peer_requirement_create_team_identity(signing_identifier: string, error_out: interop.PointerConvertible): NSObject;

declare function xpc_peer_requirement_create_platform_identity(signing_identifier: string, error_out: interop.PointerConvertible): NSObject;

declare function xpc_peer_requirement_create_lwcr(lwcr: NSObject, error_out: interop.PointerConvertible): NSObject;

declare function xpc_peer_requirement_match_received_message(peer_requirement: NSObject, message: NSObject, error_out: interop.PointerConvertible): boolean;

declare function xpc_connection_create(name: string, targetq: NSObject): NSObject;

declare function xpc_connection_create_mach_service(name: string, targetq: NSObject, flags: number): NSObject;

declare function xpc_connection_create_from_endpoint(endpoint: NSObject): NSObject;

declare function xpc_connection_set_target_queue(connection: NSObject, targetq: NSObject): void;

declare function xpc_connection_set_event_handler(connection: NSObject, handler: (p1: NSObject) => void): void;

declare function xpc_connection_activate(connection: NSObject): void;

declare function xpc_connection_suspend(connection: NSObject): void;

declare function xpc_connection_resume(connection: NSObject): void;

declare function xpc_connection_send_message(connection: NSObject, message: NSObject): void;

declare function xpc_connection_send_barrier(connection: NSObject, barrier: () => void): void;

declare function xpc_connection_send_message_with_reply(connection: NSObject, message: NSObject, replyq: NSObject, handler: (p1: NSObject) => void): void;

declare function xpc_connection_send_message_with_reply_sync(connection: NSObject, message: NSObject): NSObject;

declare function xpc_connection_cancel(connection: NSObject): void;

declare function xpc_connection_get_name(connection: NSObject): string;

declare function xpc_connection_get_euid(connection: NSObject): number;

declare function xpc_connection_get_egid(connection: NSObject): number;

declare function xpc_connection_get_pid(connection: NSObject): number;

declare function xpc_connection_get_asid(connection: NSObject): number;

declare function xpc_connection_set_context(connection: NSObject, context: interop.PointerConvertible): void;

declare function xpc_connection_get_context(connection: NSObject): interop.Pointer;

declare function xpc_connection_set_finalizer_f(connection: NSObject, finalizer: (p1: interop.PointerConvertible) => void): void;

declare function xpc_connection_set_peer_code_signing_requirement(connection: NSObject, requirement: string): number;

declare function xpc_connection_set_peer_entitlement_exists_requirement(connection: NSObject, entitlement: string): number;

declare function xpc_connection_set_peer_entitlement_matches_value_requirement(connection: NSObject, entitlement: string, value: NSObject): number;

declare function xpc_connection_set_peer_team_identity_requirement(connection: NSObject, signing_identifier: string): number;

declare function xpc_connection_set_peer_platform_identity_requirement(connection: NSObject, signing_identifier: string): number;

declare function xpc_connection_set_peer_lightweight_code_requirement(connection: NSObject, lwcr: NSObject): number;

declare function xpc_connection_set_peer_requirement(connection: NSObject, peer_requirement: NSObject): void;

declare function xpc_connection_copy_invalidation_reason(connection: NSObject): string;

declare function xpc_rich_error_copy_description(error: NSObject): string;

declare function xpc_rich_error_can_retry(error: NSObject): boolean;

declare function xpc_session_copy_description(session: NSObject): string;

declare function xpc_session_create_xpc_service(name: string, target_queue: NSObject, flags: interop.Enum<typeof xpc_session_create_flags_t>, error_out: interop.PointerConvertible): NSObject;

declare function xpc_session_create_mach_service(mach_service: string, target_queue: NSObject, flags: interop.Enum<typeof xpc_session_create_flags_t>, error_out: interop.PointerConvertible): NSObject;

declare function xpc_session_set_incoming_message_handler(session: NSObject, handler: (p1: NSObject) => void): void;

declare function xpc_session_set_cancel_handler(session: NSObject, cancel_handler: (p1: NSObject) => void): void;

declare function xpc_session_set_target_queue(session: NSObject, target_queue: NSObject): void;

declare function xpc_session_activate(session: NSObject, error_out: interop.PointerConvertible): boolean;

declare function xpc_session_cancel(session: NSObject): void;

declare function xpc_session_send_message(session: NSObject, message: NSObject): NSObject;

declare function xpc_session_send_message_with_reply_sync(session: NSObject, message: NSObject, error_out: interop.PointerConvertible): NSObject;

declare function xpc_session_send_message_with_reply_async(session: NSObject, message: NSObject, reply_handler: (p1: NSObject, p2: NSObject) => void): void;

declare function xpc_session_set_peer_code_signing_requirement(session: NSObject, requirement: string): number;

declare function xpc_session_set_peer_requirement(session: NSObject, requirement: NSObject): void;

declare function xpc_listener_copy_description(listener: NSObject): string;

declare function xpc_listener_create(service: string, target_queue: NSObject, flags: interop.Enum<typeof xpc_listener_create_flags_t>, incoming_session_handler: (p1: NSObject) => void, error_out: interop.PointerConvertible): NSObject;

declare function xpc_listener_activate(listener: NSObject, error_out: interop.PointerConvertible): boolean;

declare function xpc_listener_cancel(listener: NSObject): void;

declare function xpc_listener_reject_peer(peer: NSObject, reason: string): void;

declare function xpc_listener_set_peer_code_signing_requirement(listener: NSObject, requirement: string): number;

declare function xpc_listener_set_peer_requirement(listener: NSObject, requirement: NSObject): void;

declare function xpc_retain(object: NSObject): NSObject;

declare function xpc_release(object: NSObject): void;

declare function xpc_get_type(object: NSObject): interop.Pointer;

declare function xpc_type_get_name(type: interop.PointerConvertible): string;

declare function xpc_copy(object: NSObject): NSObject;

declare function xpc_equal(object1: NSObject, object2: NSObject): boolean;

declare function xpc_hash(object: NSObject): number;

declare function xpc_copy_description(object: NSObject): string;

declare function xpc_null_create(): NSObject;

declare function xpc_bool_create(value: boolean): NSObject;

declare function xpc_bool_get_value(xbool: NSObject): boolean;

declare function xpc_int64_create(value: number): NSObject;

declare function xpc_int64_get_value(xint: NSObject): number;

declare function xpc_uint64_create(value: number): NSObject;

declare function xpc_uint64_get_value(xuint: NSObject): number;

declare function xpc_double_create(value: number): NSObject;

declare function xpc_double_get_value(xdouble: NSObject): number;

declare function xpc_date_create(interval: number): NSObject;

declare function xpc_date_create_from_current(): NSObject;

declare function xpc_date_get_value(xdate: NSObject): number;

declare function xpc_data_create(bytes: interop.PointerConvertible, length: number): NSObject;

declare function xpc_data_create_with_dispatch_data(ddata: NSObject): NSObject;

declare function xpc_data_get_length(xdata: NSObject): number;

declare function xpc_data_get_bytes_ptr(xdata: NSObject): interop.Pointer;

declare function xpc_data_get_bytes(xdata: NSObject, buffer: interop.PointerConvertible, off: number, length: number): number;

declare function xpc_string_create(string: string): NSObject;

declare function xpc_string_create_with_format(fmt: string): NSObject;

declare function xpc_string_create_with_format_and_arguments(fmt: string, ap: string): NSObject;

declare function xpc_string_get_length(xstring: NSObject): number;

declare function xpc_string_get_string_ptr(xstring: NSObject): string;

declare function xpc_uuid_create(uuid: interop.PointerConvertible): NSObject;

declare function xpc_uuid_get_bytes(xuuid: NSObject): interop.Pointer;

declare function xpc_fd_create(fd: number): NSObject;

declare function xpc_fd_dup(xfd: NSObject): number;

declare function xpc_shmem_create(region: interop.PointerConvertible, length: number): NSObject;

declare function xpc_shmem_map(xshmem: NSObject, region: interop.PointerConvertible): number;

declare function xpc_array_create(objects: interop.PointerConvertible, count: number): NSObject;

declare function xpc_array_create_empty(): NSObject;

declare function xpc_array_set_value(xarray: NSObject, index: number, value: NSObject): void;

declare function xpc_array_append_value(xarray: NSObject, value: NSObject): void;

declare function xpc_array_get_count(xarray: NSObject): number;

declare function xpc_array_get_value(xarray: NSObject, index: number): NSObject;

declare function xpc_array_apply(xarray: NSObject, applier: (p1: number, p2: NSObject) => boolean): boolean;

declare function xpc_array_set_bool(xarray: NSObject, index: number, value: boolean): void;

declare function xpc_array_set_int64(xarray: NSObject, index: number, value: number): void;

declare function xpc_array_set_uint64(xarray: NSObject, index: number, value: number): void;

declare function xpc_array_set_double(xarray: NSObject, index: number, value: number): void;

declare function xpc_array_set_date(xarray: NSObject, index: number, value: number): void;

declare function xpc_array_set_data(xarray: NSObject, index: number, bytes: interop.PointerConvertible, length: number): void;

declare function xpc_array_set_string(xarray: NSObject, index: number, string: string): void;

declare function xpc_array_set_uuid(xarray: NSObject, index: number, uuid: interop.PointerConvertible): void;

declare function xpc_array_set_fd(xarray: NSObject, index: number, fd: number): void;

declare function xpc_array_set_connection(xarray: NSObject, index: number, connection: NSObject): void;

declare function xpc_array_get_bool(xarray: NSObject, index: number): boolean;

declare function xpc_array_get_int64(xarray: NSObject, index: number): number;

declare function xpc_array_get_uint64(xarray: NSObject, index: number): number;

declare function xpc_array_get_double(xarray: NSObject, index: number): number;

declare function xpc_array_get_date(xarray: NSObject, index: number): number;

declare function xpc_array_get_data(xarray: NSObject, index: number, length: interop.PointerConvertible): interop.Pointer;

declare function xpc_array_get_string(xarray: NSObject, index: number): string;

declare function xpc_array_get_uuid(xarray: NSObject, index: number): interop.Pointer;

declare function xpc_array_dup_fd(xarray: NSObject, index: number): number;

declare function xpc_array_create_connection(xarray: NSObject, index: number): NSObject;

declare function xpc_array_get_dictionary(xarray: NSObject, index: number): NSObject;

declare function xpc_array_get_array(xarray: NSObject, index: number): NSObject;

declare function xpc_dictionary_create(keys: interop.PointerConvertible, values: interop.PointerConvertible, count: number): NSObject;

declare function xpc_dictionary_create_empty(): NSObject;

declare function xpc_dictionary_create_reply(original: NSObject): NSObject;

declare function xpc_dictionary_set_value(xdict: NSObject, key: string, value: NSObject): void;

declare function xpc_dictionary_get_value(xdict: NSObject, key: string): NSObject;

declare function xpc_dictionary_get_count(xdict: NSObject): number;

declare function xpc_dictionary_apply(xdict: NSObject, applier: (p1: string, p2: NSObject) => boolean): boolean;

declare function xpc_dictionary_get_remote_connection(xdict: NSObject): NSObject;

declare function xpc_dictionary_set_bool(xdict: NSObject, key: string, value: boolean): void;

declare function xpc_dictionary_set_int64(xdict: NSObject, key: string, value: number): void;

declare function xpc_dictionary_set_uint64(xdict: NSObject, key: string, value: number): void;

declare function xpc_dictionary_set_double(xdict: NSObject, key: string, value: number): void;

declare function xpc_dictionary_set_date(xdict: NSObject, key: string, value: number): void;

declare function xpc_dictionary_set_data(xdict: NSObject, key: string, bytes: interop.PointerConvertible, length: number): void;

declare function xpc_dictionary_set_string(xdict: NSObject, key: string, string: string): void;

declare function xpc_dictionary_set_uuid(xdict: NSObject, key: string, uuid: interop.PointerConvertible): void;

declare function xpc_dictionary_set_fd(xdict: NSObject, key: string, fd: number): void;

declare function xpc_dictionary_set_connection(xdict: NSObject, key: string, connection: NSObject): void;

declare function xpc_dictionary_set_mach_send(xdict: NSObject, key: string, p: number): void;

declare function xpc_dictionary_get_bool(xdict: NSObject, key: string): boolean;

declare function xpc_dictionary_get_int64(xdict: NSObject, key: string): number;

declare function xpc_dictionary_get_uint64(xdict: NSObject, key: string): number;

declare function xpc_dictionary_get_double(xdict: NSObject, key: string): number;

declare function xpc_dictionary_get_date(xdict: NSObject, key: string): number;

declare function xpc_dictionary_get_data(xdict: NSObject, key: string, length: interop.PointerConvertible): interop.Pointer;

declare function xpc_dictionary_get_string(xdict: NSObject, key: string): string;

declare function xpc_dictionary_get_uuid(xdict: NSObject, key: string): interop.Pointer;

declare function xpc_dictionary_dup_fd(xdict: NSObject, key: string): number;

declare function xpc_dictionary_create_connection(xdict: NSObject, key: string): NSObject;

declare function xpc_dictionary_get_dictionary(xdict: NSObject, key: string): NSObject;

declare function xpc_dictionary_get_array(xdict: NSObject, key: string): NSObject;

declare function xpc_dictionary_copy_mach_send(xdict: NSObject, key: string): number;

declare function xpc_main(handler: (p1: NSObject) => void): void;

declare function xpc_transaction_begin(): void;

declare function xpc_transaction_end(): void;

declare function xpc_set_event_stream_handler(stream: string, targetq: NSObject, handler: (p1: NSObject) => void): void;

declare function dispatch_introspection_hook_queue_create(queue: NSObject): void;

declare function dispatch_introspection_hook_queue_destroy(queue: NSObject): void;

declare function dispatch_introspection_hook_queue_item_enqueue(queue: NSObject, item: NSObject): void;

declare function dispatch_introspection_hook_queue_item_dequeue(queue: NSObject, item: NSObject): void;

declare function dispatch_introspection_hook_queue_item_complete(item: NSObject): void;

declare function dispatch_introspection_hook_queue_callout_begin(queue: NSObject, context: interop.PointerConvertible, function$: (p1: interop.PointerConvertible) => void): void;

declare function dispatch_introspection_hook_queue_callout_end(queue: NSObject, context: interop.PointerConvertible, function$: (p1: interop.PointerConvertible) => void): void;

declare function sys_cache_control(function$: number, start: interop.PointerConvertible, len: number): number;

declare function sys_icache_invalidate(start: interop.PointerConvertible, len: number): void;

declare function sys_dcache_flush(start: interop.PointerConvertible, len: number): void;

declare function OSReportWithBacktrace(str: string): void;

declare function OSBacktrace(bt: interop.PointerConvertible, maxAddrs: number): number;

declare function OSPrintBacktrace(): void;

declare function OSKernelStackRemaining(): number;

declare function macho_cpu_type_for_arch_name(archName: string, type: interop.PointerConvertible, subtype: interop.PointerConvertible): boolean;

declare function macho_arch_name_for_cpu_type(type: number, subtype: number): string;

declare function macho_arch_name_for_mach_header(mh: interop.PointerConvertible): string;

declare function macho_for_each_slice(path: string, callback: (p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible) => void): number;

declare function macho_for_each_slice_in_fd(fd: number, callback: (p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible) => void): number;

declare function macho_best_slice(path: string, bestSlice: (p1: interop.PointerConvertible, p2: number, p3: number) => void): number;

declare function macho_best_slice_in_fd(fd: number, bestSlice: (p1: interop.PointerConvertible, p2: number, p3: number) => void): number;

declare function getsectdata(segname: string, sectname: string, size: interop.PointerConvertible): string;

declare function getsectdatafromFramework(FrameworkName: string, segname: string, sectname: string, size: interop.PointerConvertible): string;

declare function get_end(): number;

declare function get_etext(): number;

declare function get_edata(): number;

declare function getsectbyname(segname: string, sectname: string): interop.Pointer;

declare function getsectiondata(mhp: interop.PointerConvertible, segname: string, sectname: string, size: interop.PointerConvertible): interop.Pointer;

declare function getsegbyname(segname: string): interop.Pointer;

declare function getsegmentdata(mhp: interop.PointerConvertible, segname: string, size: interop.PointerConvertible): interop.Pointer;

declare function getsectdatafromheader(mhp: interop.PointerConvertible, segname: string, sectname: string, size: interop.PointerConvertible): string;

declare function getsectbynamefromheader(mhp: interop.PointerConvertible, segname: string, sectname: string): interop.Pointer;

declare function getsectbynamefromheaderwithswap(mhp: interop.PointerConvertible, segname: string, sectname: string, fSwap: number): interop.Pointer;

declare function getsectdatafromheader_64(mhp: interop.PointerConvertible, segname: string, sectname: string, size: interop.PointerConvertible): string;

declare function getsectbynamefromheader_64(mhp: interop.PointerConvertible, segname: string, sectname: string): interop.Pointer;

declare function getsectbynamefromheaderwithswap_64(mhp: interop.PointerConvertible, segname: string, sectname: string, fSwap: number): interop.Pointer;

declare function swap_i386_thread_state(cpu: interop.PointerConvertible, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function nlist(filename: string, list: interop.PointerConvertible): number;

declare function swap_fat_header(fat_header: interop.PointerConvertible, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_fat_arch(fat_archs: interop.PointerConvertible, nfat_arch: number, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_fat_arch_64(fat_archs64: interop.PointerConvertible, nfat_arch: number, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_mach_header(mh: interop.PointerConvertible, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_mach_header_64(mh: interop.PointerConvertible, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_load_command(lc: interop.PointerConvertible, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_segment_command(sg: interop.PointerConvertible, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_segment_command_64(sg: interop.PointerConvertible, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_section(s: interop.PointerConvertible, nsects: number, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_section_64(s: interop.PointerConvertible, nsects: number, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_symtab_command(st: interop.PointerConvertible, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_dysymtab_command(dyst: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_symseg_command(ss: interop.PointerConvertible, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_fvmlib_command(fl: interop.PointerConvertible, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_dylib_command(dl: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_sub_framework_command(sub: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_sub_umbrella_command(usub: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_sub_library_command(lsub: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_sub_client_command(csub: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_prebound_dylib_command(pbdylib: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_dylinker_command(dyld: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_fvmfile_command(ff: interop.PointerConvertible, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_thread_command(ut: interop.PointerConvertible, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_ident_command(ident: interop.PointerConvertible, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_routines_command(r_cmd: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_routines_command_64(r_cmd: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_twolevel_hints_command(hints_cmd: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_prebind_cksum_command(cksum_cmd: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_uuid_command(uuid_cmd: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_linkedit_data_command(ld: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_version_min_command(ver_cmd: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_rpath_command(rpath_cmd: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_encryption_command(ec: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_encryption_command_64(ec: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_linker_option_command(lo: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_dyld_info_command(ed: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_entry_point_command(ep: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_source_version_command(sv: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_note_command(nc: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_build_version_command(bv: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_build_tool_version(bt: interop.PointerConvertible, ntools: number, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_prebind_cksum_command(cksum_cmd: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_uuid_command(uuid_cmd: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_twolevel_hint(hints: interop.PointerConvertible, nhints: number, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_fileset_entry_command(lc: interop.PointerConvertible, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_nlist(symbols: interop.PointerConvertible, nsymbols: number, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_nlist_64(symbols: interop.PointerConvertible, nsymbols: number, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_ranlib(ranlibs: interop.PointerConvertible, nranlibs: number, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_ranlib_64(ranlibs: interop.PointerConvertible, nranlibs: number, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_relocation_info(relocs: interop.PointerConvertible, nrelocs: number, target_byte_order: interop.Enum<typeof NXByteOrder>): void;

declare function swap_indirect_symbols(indirect_symbols: interop.PointerConvertible, nindirect_symbols: number, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_dylib_reference(refs: interop.PointerConvertible, nrefs: number, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_dylib_module(mods: interop.PointerConvertible, nmods: number, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_dylib_module_64(mods: interop.PointerConvertible, nmods: number, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function swap_dylib_table_of_contents(tocs: interop.PointerConvertible, ntocs: number, target_byte_sex: interop.Enum<typeof NXByteOrder>): void;

declare function _dyld_image_count(): number;

declare function _dyld_get_image_header(image_index: number): interop.Pointer;

declare function _dyld_get_image_vmaddr_slide(image_index: number): number;

declare function _dyld_get_image_name(image_index: number): string;

declare function _dyld_register_func_for_add_image(func: (p1: interop.PointerConvertible, p2: number) => void): void;

declare function _dyld_register_func_for_remove_image(func: (p1: interop.PointerConvertible, p2: number) => void): void;

declare function NSVersionOfRunTimeLibrary(libraryName: string): number;

declare function NSVersionOfLinkTimeLibrary(libraryName: string): number;

declare function _NSGetExecutablePath(buf: string, bufsize: interop.PointerConvertible): number;

declare function _tlv_atexit(termFunc: (p1: interop.PointerConvertible) => void, objAddr: interop.PointerConvertible): void;

declare function _tlv_bootstrap(): void;

declare function _dyld_shared_cache_contains_path(path: string): boolean;

declare function NSCreateObjectFileImageFromFile(pathName: string, objectFileImage: interop.PointerConvertible): interop.Enum<typeof NSObjectFileImageReturnCode>;

declare function NSCreateObjectFileImageFromMemory(address: interop.PointerConvertible, size: number, objectFileImage: interop.PointerConvertible): interop.Enum<typeof NSObjectFileImageReturnCode>;

declare function NSDestroyObjectFileImage(objectFileImage: interop.PointerConvertible): boolean;

declare function NSSymbolDefinitionCountInObjectFileImage(objectFileImage: interop.PointerConvertible): number;

declare function NSSymbolDefinitionNameInObjectFileImage(objectFileImage: interop.PointerConvertible, ordinal: number): string;

declare function NSSymbolReferenceCountInObjectFileImage(objectFileImage: interop.PointerConvertible): number;

declare function NSSymbolReferenceNameInObjectFileImage(objectFileImage: interop.PointerConvertible, ordinal: number, tentative_definition: interop.PointerConvertible): string;

declare function NSIsSymbolDefinedInObjectFileImage(objectFileImage: interop.PointerConvertible, symbolName: string): boolean;

declare function NSGetSectionDataInObjectFileImage(objectFileImage: interop.PointerConvertible, segmentName: string, sectionName: string, size: interop.PointerConvertible): interop.Pointer;

declare function NSNameOfModule(m: interop.PointerConvertible): string;

declare function NSLibraryNameForModule(m: interop.PointerConvertible): string;

declare function NSLinkModule(objectFileImage: interop.PointerConvertible, moduleName: string, options: number): interop.Pointer;

declare function NSUnLinkModule(module: interop.PointerConvertible, options: number): boolean;

declare function NSIsSymbolNameDefined(symbolName: string): boolean;

declare function NSIsSymbolNameDefinedWithHint(symbolName: string, libraryNameHint: string): boolean;

declare function NSIsSymbolNameDefinedInImage(image: interop.PointerConvertible, symbolName: string): boolean;

declare function NSLookupAndBindSymbol(symbolName: string): interop.Pointer;

declare function NSLookupAndBindSymbolWithHint(symbolName: string, libraryNameHint: string): interop.Pointer;

declare function NSLookupSymbolInModule(module: interop.PointerConvertible, symbolName: string): interop.Pointer;

declare function NSLookupSymbolInImage(image: interop.PointerConvertible, symbolName: string, options: number): interop.Pointer;

declare function NSNameOfSymbol(symbol: interop.PointerConvertible): string;

declare function NSAddressOfSymbol(symbol: interop.PointerConvertible): interop.Pointer;

declare function NSModuleForSymbol(symbol: interop.PointerConvertible): interop.Pointer;

declare function NSLinkEditError(c: interop.PointerConvertible, errorNumber: interop.PointerConvertible, fileName: interop.PointerConvertible, errorString: interop.PointerConvertible): void;

declare function NSInstallLinkEditErrorHandlers(handlers: interop.PointerConvertible): void;

declare function NSAddLibrary(pathName: string): boolean;

declare function NSAddLibraryWithSearching(pathName: string): boolean;

declare function NSAddImage(image_name: string, options: number): interop.Pointer;

declare function _dyld_present(): boolean;

declare function _dyld_launched_prebound(): boolean;

declare function _dyld_all_twolevel_modules_prebound(): boolean;

declare function _dyld_bind_fully_image_containing_address(address: interop.PointerConvertible): boolean;

declare function _dyld_image_containing_address(address: interop.PointerConvertible): boolean;

declare function _dyld_lookup_and_bind(symbol_name: string, address: interop.PointerConvertible, module: interop.PointerConvertible): void;

declare function _dyld_lookup_and_bind_with_hint(symbol_name: string, library_name_hint: string, address: interop.PointerConvertible, module: interop.PointerConvertible): void;

declare function _dyld_lookup_and_bind_fully(symbol_name: string, address: interop.PointerConvertible, module: interop.PointerConvertible): void;

declare function _dyld_get_image_header_containing_address(address: interop.PointerConvertible): interop.Pointer;

declare function NXGetAllArchInfos(): interop.Pointer;

declare function NXGetLocalArchInfo(): interop.Pointer;

declare function NXGetArchInfoFromName(name: string): interop.Pointer;

declare function NXGetArchInfoFromCpuType(cputype: number, cpusubtype: number): interop.Pointer;

declare function NXFreeArchInfo(x: interop.PointerConvertible): void;

declare function NXFindBestFatArch(cputype: number, cpusubtype: number, fat_archs: interop.PointerConvertible, nfat_archs: number): interop.Pointer;

declare function NXFindBestFatArch_64(cputype: number, cpusubtype: number, fat_archs64: interop.PointerConvertible, nfat_archs: number): interop.Pointer;

declare function NXCombineCpuSubtypes(cputype: number, cpusubtype1: number, cpusubtype2: number): number;

declare function nl_langinfo(p1: number): string;

declare function strfmon(p1: string, __maxsize: number, p3: string): number;

declare function regcomp(p1: interop.PointerConvertible, p2: string, p3: number): number;

declare function regerror(p1: number, p2: interop.PointerConvertible, p3: string, __errbuf_size: number): number;

declare function regexec(p1: interop.PointerConvertible, p2: string, __nmatch: number, __pmatch: interop.Pointer, p5: number): number;

declare function regfree(p1: interop.PointerConvertible): void;

declare function regncomp(p1: interop.PointerConvertible, p2: string, __len: number, p4: number): number;

declare function regnexec(p1: interop.PointerConvertible, p2: string, __len: number, __nmatch: number, __pmatch: interop.Pointer, p6: number): number;

declare function regwcomp(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function regwexec(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __nmatch: number, __pmatch: interop.Pointer, p5: number): number;

declare function regwncomp(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __len: number, p4: number): number;

declare function regwnexec(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __len: number, __nmatch: number, __pmatch: interop.Pointer, p6: number): number;

declare function ___mb_cur_max(): number;

declare function ___mb_cur_max_l(p1: interop.PointerConvertible): number;

declare function localeconv_l(p1: interop.PointerConvertible): interop.Pointer;

declare function querylocale(p1: number, p2: interop.PointerConvertible): string;

declare function ___runetype_l(p1: number, p2: interop.PointerConvertible): number;

declare function ___tolower_l(p1: number, p2: interop.PointerConvertible): number;

declare function ___toupper_l(p1: number, p2: interop.PointerConvertible): number;

declare function __maskrune_l(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function wctype_l(p1: string, p2: interop.PointerConvertible): number;

declare function strtoimax_l(nptr: string, endptr: interop.PointerConvertible, base: number, p4: interop.PointerConvertible): number;

declare function strtoumax_l(nptr: string, endptr: interop.PointerConvertible, base: number, p4: interop.PointerConvertible): number;

declare function wcstoimax_l(nptr: interop.PointerConvertible, endptr: interop.PointerConvertible, base: number, p4: interop.PointerConvertible): number;

declare function wcstoumax_l(nptr: interop.PointerConvertible, endptr: interop.PointerConvertible, base: number, p4: interop.PointerConvertible): number;

declare function nl_langinfo_l(p1: number, p2: interop.PointerConvertible): string;

declare function strfmon_l(p1: string, __maxsize: number, p3: interop.PointerConvertible, p4: string): number;

declare function regcomp_l(p1: interop.PointerConvertible, p2: string, p3: number, p4: interop.PointerConvertible): number;

declare function regncomp_l(p1: interop.PointerConvertible, p2: string, __len: number, p4: number, p5: interop.PointerConvertible): number;

declare function regwcomp_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible): number;

declare function regwnexec_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __len: number, __nmatch: number, __pmatch: interop.Pointer, p6: number, p7: interop.PointerConvertible): number;

declare function fprintf_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string): number;

declare function fscanf_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string): number;

declare function printf_l(p1: interop.PointerConvertible, p2: string): number;

declare function scanf_l(p1: interop.PointerConvertible, p2: string): number;

declare function sprintf_l(p1: string, p2: interop.PointerConvertible, p3: string): number;

declare function sscanf_l(p1: string, p2: interop.PointerConvertible, p3: string): number;

declare function vfprintf_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string, p4: string): number;

declare function vprintf_l(p1: interop.PointerConvertible, p2: string, p3: string): number;

declare function vsprintf_l(p1: string, p2: interop.PointerConvertible, p3: string, p4: string): number;

declare function snprintf_l(p1: string, __maxlen: number, p3: interop.PointerConvertible, p4: string): number;

declare function vfscanf_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string, p4: string): number;

declare function vscanf_l(p1: interop.PointerConvertible, p2: string, p3: string): number;

declare function vsnprintf_l(p1: string, __maxlen: number, p3: interop.PointerConvertible, p4: string, p5: string): number;

declare function vsscanf_l(p1: string, p2: interop.PointerConvertible, p3: string, p4: string): number;

declare function dprintf_l(p1: number, p2: interop.PointerConvertible, p3: string): number;

declare function vdprintf_l(p1: number, p2: interop.PointerConvertible, p3: string, p4: string): number;

declare function asprintf_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string): number;

declare function vasprintf_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string, p4: string): number;

declare function atof_l(p1: string, p2: interop.PointerConvertible): number;

declare function atoi_l(p1: string, p2: interop.PointerConvertible): number;

declare function atol_l(p1: string, p2: interop.PointerConvertible): number;

declare function atoll_l(p1: string, p2: interop.PointerConvertible): number;

declare function mblen_l(p1: string, __n: number, p3: interop.PointerConvertible): number;

declare function mbstowcs_l(p1: interop.PointerConvertible, p2: string, __n: number, p4: interop.PointerConvertible): number;

declare function mbtowc_l(p1: interop.PointerConvertible, p2: string, __n: number, p4: interop.PointerConvertible): number;

declare function strtod_l(p1: string, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function strtof_l(p1: string, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function strtol_l(p1: string, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible): number;

declare function strtold_l(p1: string, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function strtoll_l(p1: string, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible): number;

declare function strtoq_l(p1: string, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible): number;

declare function strtoul_l(p1: string, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible): number;

declare function strtoull_l(p1: string, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible): number;

declare function strtouq_l(p1: string, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible): number;

declare function wcstombs_l(__restric: string, p2: interop.PointerConvertible, __n: number, p4: interop.PointerConvertible): number;

declare function wctomb_l(p1: string, p2: number, p3: interop.PointerConvertible): number;

declare function strcoll_l(p1: string, p2: string, p3: interop.PointerConvertible): number;

declare function strxfrm_l(p1: string, p2: string, __n: number, p4: interop.PointerConvertible): number;

declare function strcasecmp_l(p1: string, p2: string, p3: interop.PointerConvertible): number;

declare function strcasestr_l(p1: string, p2: string, p3: interop.PointerConvertible): string;

declare function strncasecmp_l(p1: string, p2: string, p3: number, p4: interop.PointerConvertible): number;

declare function strftime_l(p1: string, __n: number, p3: string, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function strptime_l(p1: string, p2: string, p3: interop.PointerConvertible, p4: interop.PointerConvertible): string;

declare function btowc_l(p1: number, p2: interop.PointerConvertible): number;

declare function fgetwc_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function fgetws_l(p1: interop.PointerConvertible, __n: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible): interop.Pointer;

declare function fputwc_l(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function fputws_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function fwprintf_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function fwscanf_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function getwc_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function getwchar_l(p1: interop.PointerConvertible): number;

declare function mbrlen_l(p1: string, __n: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function mbrtowc_l(p1: interop.PointerConvertible, p2: string, __n: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function mbsinit_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function mbsrtowcs_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __len: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function putwc_l(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function putwchar_l(p1: number, p2: interop.PointerConvertible): number;

declare function swprintf_l(p1: interop.PointerConvertible, n: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function swscanf_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function ungetwc_l(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function vfwprintf_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: string): number;

declare function vswprintf_l(p1: interop.PointerConvertible, n: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: string): number;

declare function vwprintf_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string): number;

declare function wcrtomb_l(p1: string, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function wcscoll_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function wcsftime_l(p1: interop.PointerConvertible, __n: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function wcsrtombs_l(p1: string, p2: interop.PointerConvertible, __len: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function wcstod_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function wcstol_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible): number;

declare function wcstoul_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible): number;

declare function wcswidth_l(p1: interop.PointerConvertible, __n: number, p3: interop.PointerConvertible): number;

declare function wcsxfrm_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, __n: number, p4: interop.PointerConvertible): number;

declare function wctob_l(p1: number, p2: interop.PointerConvertible): number;

declare function wcwidth_l(p1: number, p2: interop.PointerConvertible): number;

declare function wprintf_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function wscanf_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function vfwscanf_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: string): number;

declare function vswscanf_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: string): number;

declare function vwscanf_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string): number;

declare function wcstof_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function wcstold_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function wcstoll_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible): number;

declare function wcstoull_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible): number;

declare function mbsnrtowcs_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, __len: number, p5: interop.PointerConvertible, p6: interop.PointerConvertible): number;

declare function wcscasecmp_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function wcsncasecmp_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, n: number, p4: interop.PointerConvertible): number;

declare function wcsnrtombs_l(p1: string, p2: interop.PointerConvertible, p3: number, p4: number, p5: interop.PointerConvertible, p6: interop.PointerConvertible): number;

declare function fgetwln_l(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): interop.Pointer;

declare function nextwctype_l(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function towctrans_l(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function wctrans_l(p1: string, p2: interop.PointerConvertible): number;

declare function _os_activity_create(dso: interop.PointerConvertible, description: string, activity: NSObject, flags: interop.Enum<typeof os_activity_flag_t>): NSObject;

declare function _os_activity_label_useraction(dso: interop.PointerConvertible, name: string): void;

declare function _os_activity_initiate(dso: interop.PointerConvertible, description: string, flags: interop.Enum<typeof os_activity_flag_t>, activity_block: () => void): void;

declare function _os_activity_initiate_f(dso: interop.PointerConvertible, description: string, flags: interop.Enum<typeof os_activity_flag_t>, context: interop.PointerConvertible, function$: (p1: interop.PointerConvertible) => void): void;

declare function os_activity_apply(activity: NSObject, block: () => void): void;

declare function os_activity_apply_f(activity: NSObject, context: interop.PointerConvertible, function$: (p1: interop.PointerConvertible) => void): void;

declare function os_activity_scope_enter(activity: NSObject, state: interop.PointerConvertible): void;

declare function os_activity_scope_leave(state: interop.PointerConvertible): void;

declare function os_activity_get_active(entries: interop.PointerConvertible, count: interop.PointerConvertible): number;

declare function os_activity_get_identifier(activity: NSObject, parent_id: interop.PointerConvertible): number;

declare function _os_activity_start(dso: interop.PointerConvertible, description: string, flags: interop.Enum<typeof os_activity_flag_t>): NSObject;

declare function os_activity_end(activity: NSObject): void;

declare function _os_activity_set_breadcrumb(dso: interop.PointerConvertible, name: string): void;

declare function os_trace_info_enabled(): boolean;

declare function os_trace_debug_enabled(): boolean;

declare function _os_trace_with_buffer(dso: interop.PointerConvertible, message: string, type: number, buffer: interop.PointerConvertible, buffer_size: number, payload: (p1: NSObject) => void): void;

declare function os_log_create(subsystem: string, category: string): NSObject;

declare function os_log_type_enabled(oslog: NSObject, type: interop.Enum<typeof os_log_type_t>): boolean;

declare function _os_log_impl(dso: interop.PointerConvertible, log: NSObject, type: interop.Enum<typeof os_log_type_t>, format: string, buf: interop.PointerConvertible, size: number): void;

declare function _os_log_debug_impl(dso: interop.PointerConvertible, log: NSObject, type: interop.Enum<typeof os_log_type_t>, format: string, buf: interop.PointerConvertible, size: number): void;

declare function _os_log_error_impl(dso: interop.PointerConvertible, log: NSObject, type: interop.Enum<typeof os_log_type_t>, format: string, buf: interop.PointerConvertible, size: number): void;

declare function _os_log_fault_impl(dso: interop.PointerConvertible, log: NSObject, type: interop.Enum<typeof os_log_type_t>, format: string, buf: interop.PointerConvertible, size: number): void;

declare function _os_log_internal(dso: interop.PointerConvertible, log: NSObject, type: interop.Enum<typeof os_log_type_t>, message: string): void;

declare function _os_log_create(dso: interop.PointerConvertible, subsystem: string, category: string): NSObject;

declare function os_log_is_enabled(log: NSObject): boolean;

declare function os_log_is_debug_enabled(log: NSObject): boolean;

declare function os_signpost_id_make_with_pointer(log: NSObject, ptr: interop.PointerConvertible): number;

declare function os_signpost_id_generate(log: NSObject): number;

declare function os_signpost_enabled(log: NSObject): boolean;

declare function _os_signpost_emit_with_name_impl(dso: interop.PointerConvertible, log: NSObject, type: interop.Enum<typeof os_signpost_type_t>, spid: number, name: string, format: string, buf: interop.PointerConvertible, size: number): void;

declare function os_unfair_lock_lock(lock: interop.PointerConvertible): void;

declare function os_unfair_lock_trylock(lock: interop.PointerConvertible): boolean;

declare function os_unfair_lock_unlock(lock: interop.PointerConvertible): void;

declare function os_unfair_lock_assert_owner(lock: interop.PointerConvertible): void;

declare function os_unfair_lock_assert_not_owner(lock: interop.PointerConvertible): void;

declare function os_unfair_lock_lock_with_flags(lock: interop.PointerConvertible, flags: interop.Enum<typeof os_unfair_lock_flags_t>): void;

declare function objc_exception_throw(exception: interop.Object): void;

declare function objc_exception_rethrow(): void;

declare function objc_begin_catch(exc_buf: interop.PointerConvertible): interop.Object;

declare function objc_end_catch(): void;

declare function objc_terminate(): void;

declare function objc_setExceptionPreprocessor(fn: (p1: interop.Object) => interop.Object): (p1: interop.Object) => interop.Object;

declare function objc_setExceptionMatcher(fn: (p1: interop.Object, p2: interop.Object) => number): (p1: interop.Object, p2: interop.Object) => number;

declare function objc_setUncaughtExceptionHandler(fn: (p1: interop.Object) => void): (p1: interop.Object) => void;

declare function objc_addExceptionHandler(fn: (p1: interop.Object, p2: interop.PointerConvertible) => void, context: interop.PointerConvertible): number;

declare function objc_removeExceptionHandler(token: number): void;

declare function objc_sync_enter(obj: interop.Object): number;

declare function objc_sync_exit(obj: interop.Object): number;

declare function NXCreateHashTableFromZone(prototype: NXHashTablePrototype, capacity: number, info: interop.PointerConvertible, zone: interop.PointerConvertible): interop.Pointer;

declare function NXCreateHashTable(prototype: NXHashTablePrototype, capacity: number, info: interop.PointerConvertible): interop.Pointer;

declare function NXFreeHashTable(table: interop.PointerConvertible): void;

declare function NXEmptyHashTable(table: interop.PointerConvertible): void;

declare function NXResetHashTable(table: interop.PointerConvertible): void;

declare function NXCompareHashTables(table1: interop.PointerConvertible, table2: interop.PointerConvertible): boolean;

declare function NXCopyHashTable(table: interop.PointerConvertible): interop.Pointer;

declare function NXCountHashTable(table: interop.PointerConvertible): number;

declare function NXHashMember(table: interop.PointerConvertible, data: interop.PointerConvertible): number;

declare function NXHashGet(table: interop.PointerConvertible, data: interop.PointerConvertible): interop.Pointer;

declare function NXHashInsert(table: interop.PointerConvertible, data: interop.PointerConvertible): interop.Pointer;

declare function NXHashInsertIfAbsent(table: interop.PointerConvertible, data: interop.PointerConvertible): interop.Pointer;

declare function NXHashRemove(table: interop.PointerConvertible, data: interop.PointerConvertible): interop.Pointer;

declare function NXInitHashState(table: interop.PointerConvertible): NXHashState;

declare function NXNextHashState(table: interop.PointerConvertible, state: interop.PointerConvertible, data: interop.PointerConvertible): number;

declare function NXPtrHash(info: interop.PointerConvertible, data: interop.PointerConvertible): number;

declare function NXStrHash(info: interop.PointerConvertible, data: interop.PointerConvertible): number;

declare function NXPtrIsEqual(info: interop.PointerConvertible, data1: interop.PointerConvertible, data2: interop.PointerConvertible): number;

declare function NXStrIsEqual(info: interop.PointerConvertible, data1: interop.PointerConvertible, data2: interop.PointerConvertible): number;

declare function NXNoEffectFree(info: interop.PointerConvertible, data: interop.PointerConvertible): void;

declare function NXReallyFree(info: interop.PointerConvertible, data: interop.PointerConvertible): void;

declare function object_copy(obj: interop.Object, size: number): interop.Object;

declare function object_dispose(obj: interop.Object): interop.Object;

declare function object_getClass(obj: interop.Object): interop.Object;

declare function object_setClass(obj: interop.Object, cls: interop.Object): interop.Object;

declare function object_isClass(obj: interop.Object): boolean;

declare function object_getIvar(obj: interop.Object, ivar: interop.PointerConvertible): interop.Object;

declare function object_setIvar(obj: interop.Object, ivar: interop.PointerConvertible, value: interop.Object): void;

declare function object_setIvarWithStrongDefault(obj: interop.Object, ivar: interop.PointerConvertible, value: interop.Object): void;

declare function object_setInstanceVariable(obj: interop.Object, name: string, value: interop.PointerConvertible): interop.Pointer;

declare function object_setInstanceVariableWithStrongDefault(obj: interop.Object, name: string, value: interop.PointerConvertible): interop.Pointer;

declare function object_getInstanceVariable(obj: interop.Object, name: string, outValue: interop.PointerConvertible): interop.Pointer;

declare function objc_getClass(name: string): interop.Object;

declare function objc_getMetaClass(name: string): interop.Object;

declare function objc_lookUpClass(name: string): interop.Object;

declare function objc_getRequiredClass(name: string): interop.Object;

declare function objc_getClassList(buffer: interop.PointerConvertible, bufferCount: number): number;

declare function objc_copyClassList(outCount: interop.PointerConvertible): interop.Pointer;

declare function objc_enumerateClasses(image: interop.PointerConvertible, namePrefix: string, conformingTo: interop.PointerConvertible, subclassing: interop.Object, block: (p1: interop.Object, p2: interop.PointerConvertible) => void): void;

declare function class_getName(cls: interop.Object): string;

declare function class_isMetaClass(cls: interop.Object): boolean;

declare function class_getSuperclass(cls: interop.Object): interop.Object;

declare function class_setSuperclass(cls: interop.Object, newSuper: interop.Object): interop.Object;

declare function class_getVersion(cls: interop.Object): number;

declare function class_setVersion(cls: interop.Object, version: number): void;

declare function class_getInstanceSize(cls: interop.Object): number;

declare function class_getInstanceVariable(cls: interop.Object, name: string): interop.Pointer;

declare function class_getClassVariable(cls: interop.Object, name: string): interop.Pointer;

declare function class_copyIvarList(cls: interop.Object, outCount: interop.PointerConvertible): interop.Pointer;

declare function class_getInstanceMethod(cls: interop.Object, name: string): interop.Pointer;

declare function class_getClassMethod(cls: interop.Object, name: string): interop.Pointer;

declare function class_getMethodImplementation(cls: interop.Object, name: string): () => void;

declare function class_respondsToSelector(cls: interop.Object, sel: string): boolean;

declare function class_copyMethodList(cls: interop.Object, outCount: interop.PointerConvertible): interop.Pointer;

declare function class_conformsToProtocol(cls: interop.Object, protocol: interop.PointerConvertible): boolean;

declare function class_copyProtocolList(cls: interop.Object, outCount: interop.PointerConvertible): interop.Pointer;

declare function class_getProperty(cls: interop.Object, name: string): interop.Pointer;

declare function class_copyPropertyList(cls: interop.Object, outCount: interop.PointerConvertible): interop.Pointer;

declare function class_getIvarLayout(cls: interop.Object): interop.Pointer;

declare function class_getWeakIvarLayout(cls: interop.Object): interop.Pointer;

declare function class_addMethod(cls: interop.Object, name: string, imp: () => void, types: string): boolean;

declare function class_replaceMethod(cls: interop.Object, name: string, imp: () => void, types: string): () => void;

declare function class_addIvar(cls: interop.Object, name: string, size: number, alignment: number, types: string): boolean;

declare function class_addProtocol(cls: interop.Object, protocol: interop.PointerConvertible): boolean;

declare function class_addProperty(cls: interop.Object, name: string, attributes: interop.PointerConvertible, attributeCount: number): boolean;

declare function class_replaceProperty(cls: interop.Object, name: string, attributes: interop.PointerConvertible, attributeCount: number): void;

declare function class_setIvarLayout(cls: interop.Object, layout: interop.PointerConvertible): void;

declare function class_setWeakIvarLayout(cls: interop.Object, layout: interop.PointerConvertible): void;

declare function objc_getFutureClass(name: string): interop.Object;

declare function class_createInstance(cls: interop.Object, extraBytes: number): interop.Object;

declare function objc_constructInstance(cls: interop.Object, bytes: interop.PointerConvertible): interop.Object;

declare function objc_destructInstance(obj: interop.Object): interop.Pointer;

declare function objc_allocateClassPair(superclass: interop.Object, name: string, extraBytes: number): interop.Object;

declare function objc_registerClassPair(cls: interop.Object): void;

declare function objc_duplicateClass(original: interop.Object, name: string, extraBytes: number): interop.Object;

declare function objc_disposeClassPair(cls: interop.Object): void;

declare function method_getName(m: interop.PointerConvertible): string;

declare function method_getImplementation(m: interop.PointerConvertible): () => void;

declare function method_getTypeEncoding(m: interop.PointerConvertible): string;

declare function method_getNumberOfArguments(m: interop.PointerConvertible): number;

declare function method_copyReturnType(m: interop.PointerConvertible): string;

declare function method_copyArgumentType(m: interop.PointerConvertible, index: number): string;

declare function method_getReturnType(m: interop.PointerConvertible, dst: string, dst_len: number): void;

declare function method_getArgumentType(m: interop.PointerConvertible, index: number, dst: string, dst_len: number): void;

declare function method_getDescription(m: interop.PointerConvertible): interop.Pointer;

declare function method_setImplementation(m: interop.PointerConvertible, imp: () => void): () => void;

declare function method_exchangeImplementations(m1: interop.PointerConvertible, m2: interop.PointerConvertible): void;

declare function ivar_getName(v: interop.PointerConvertible): string;

declare function ivar_getTypeEncoding(v: interop.PointerConvertible): string;

declare function ivar_getOffset(v: interop.PointerConvertible): number;

declare function property_getName(property: interop.PointerConvertible): string;

declare function property_getAttributes(property: interop.PointerConvertible): string;

declare function property_copyAttributeList(property: interop.PointerConvertible, outCount: interop.PointerConvertible): interop.Pointer;

declare function property_copyAttributeValue(property: interop.PointerConvertible, attributeName: string): string;

declare function objc_getProtocol(name: string): interop.Pointer;

declare function objc_copyProtocolList(outCount: interop.PointerConvertible): interop.Pointer;

declare function protocol_conformsToProtocol(proto: interop.PointerConvertible, other: interop.PointerConvertible): boolean;

declare function protocol_isEqual(proto: interop.PointerConvertible, other: interop.PointerConvertible): boolean;

declare function protocol_getName(proto: interop.PointerConvertible): string;

declare function protocol_getMethodDescription(proto: interop.PointerConvertible, aSel: string, isRequiredMethod: boolean, isInstanceMethod: boolean): objc_method_description;

declare function protocol_copyMethodDescriptionList(proto: interop.PointerConvertible, isRequiredMethod: boolean, isInstanceMethod: boolean, outCount: interop.PointerConvertible): interop.Pointer;

declare function protocol_getProperty(proto: interop.PointerConvertible, name: string, isRequiredProperty: boolean, isInstanceProperty: boolean): interop.Pointer;

declare function protocol_copyPropertyList(proto: interop.PointerConvertible, outCount: interop.PointerConvertible): interop.Pointer;

declare function protocol_copyPropertyList2(proto: interop.PointerConvertible, outCount: interop.PointerConvertible, isRequiredProperty: boolean, isInstanceProperty: boolean): interop.Pointer;

declare function protocol_copyProtocolList(proto: interop.PointerConvertible, outCount: interop.PointerConvertible): interop.Pointer;

declare function objc_allocateProtocol(name: string): interop.Pointer;

declare function objc_registerProtocol(proto: interop.PointerConvertible): void;

declare function protocol_addMethodDescription(proto: interop.PointerConvertible, name: string, types: string, isRequiredMethod: boolean, isInstanceMethod: boolean): void;

declare function protocol_addProtocol(proto: interop.PointerConvertible, addition: interop.PointerConvertible): void;

declare function protocol_addProperty(proto: interop.PointerConvertible, name: string, attributes: interop.PointerConvertible, attributeCount: number, isRequiredProperty: boolean, isInstanceProperty: boolean): void;

declare function objc_copyImageNames(outCount: interop.PointerConvertible): interop.Pointer;

declare function class_getImageName(cls: interop.Object): string;

declare function objc_copyClassNamesForImage(image: string, outCount: interop.PointerConvertible): interop.Pointer;

declare function sel_isEqual(lhs: string, rhs: string): boolean;

declare function objc_enumerationMutation(obj: interop.Object): void;

declare function objc_setEnumerationMutationHandler(handler: (p1: interop.Object) => void): void;

declare function objc_setForwardHandler(fwd: interop.PointerConvertible, fwd_stret: interop.PointerConvertible): void;

declare function imp_implementationWithBlock(block: interop.Object): () => void;

declare function imp_getBlock(anImp: () => void): interop.Object;

declare function imp_removeBlock(anImp: () => void): boolean;

declare function objc_loadWeak(location: interop.PointerConvertible): interop.Object;

declare function objc_storeWeak(location: interop.PointerConvertible, obj: interop.Object): interop.Object;

declare function objc_setAssociatedObject(object: interop.Object, key: interop.PointerConvertible, value: interop.Object, policy: interop.Enum<typeof objc_AssociationPolicy>): void;

declare function objc_getAssociatedObject(object: interop.Object, key: interop.PointerConvertible): interop.Object;

declare function objc_removeAssociatedObjects(object: interop.Object): void;

declare function objc_setHook_getImageName(newValue: (p1: interop.Object, p2: interop.PointerConvertible) => boolean, outOldValue: interop.PointerConvertible): void;

declare function objc_setHook_getClass(newValue: (p1: string, p2: interop.PointerConvertible) => boolean, outOldValue: interop.PointerConvertible): void;

declare function objc_addLoadImageFunc(func: (p1: interop.PointerConvertible) => void): void;

declare function objc_setHook_lazyClassNamer(newValue: (p1: interop.Object) => string, oldOutValue: interop.PointerConvertible): void;

declare function _objc_realizeClassFromSwift(cls: interop.Object, previously: interop.PointerConvertible): interop.Object;

declare function _objc_flush_caches(cls: interop.Object): void;

declare function class_lookupMethod(cls: interop.Object, sel: string): () => void;

declare function class_respondsToMethod(cls: interop.Object, sel: string): boolean;

declare function object_copyFromZone(anObject: interop.Object, nBytes: number, zone: interop.PointerConvertible): interop.Object;

declare function class_createInstanceFromZone(p1: interop.Object, idxIvars: number, zone: interop.PointerConvertible): interop.Object;

declare function objc_msgSend(): void;

declare function objc_msgSendSuper(): void;

declare function method_invoke(): void;

declare function _objc_msgForward(): void;

declare function OSAtomicAdd32(__theAmount: number, __theValue: interop.PointerConvertible): number;

declare function OSAtomicAdd32Barrier(__theAmount: number, __theValue: interop.PointerConvertible): number;

declare function OSAtomicIncrement32(__theValue: interop.PointerConvertible): number;

declare function OSAtomicIncrement32Barrier(__theValue: interop.PointerConvertible): number;

declare function OSAtomicDecrement32(__theValue: interop.PointerConvertible): number;

declare function OSAtomicDecrement32Barrier(__theValue: interop.PointerConvertible): number;

declare function OSAtomicAdd64(__theAmount: number, __theValue: interop.PointerConvertible): number;

declare function OSAtomicAdd64Barrier(__theAmount: number, __theValue: interop.PointerConvertible): number;

declare function OSAtomicIncrement64(__theValue: interop.PointerConvertible): number;

declare function OSAtomicIncrement64Barrier(__theValue: interop.PointerConvertible): number;

declare function OSAtomicDecrement64(__theValue: interop.PointerConvertible): number;

declare function OSAtomicDecrement64Barrier(__theValue: interop.PointerConvertible): number;

declare function OSAtomicOr32(__theMask: number, __theValue: interop.PointerConvertible): number;

declare function OSAtomicOr32Barrier(__theMask: number, __theValue: interop.PointerConvertible): number;

declare function OSAtomicOr32Orig(__theMask: number, __theValue: interop.PointerConvertible): number;

declare function OSAtomicOr32OrigBarrier(__theMask: number, __theValue: interop.PointerConvertible): number;

declare function OSAtomicAnd32(__theMask: number, __theValue: interop.PointerConvertible): number;

declare function OSAtomicAnd32Barrier(__theMask: number, __theValue: interop.PointerConvertible): number;

declare function OSAtomicAnd32Orig(__theMask: number, __theValue: interop.PointerConvertible): number;

declare function OSAtomicAnd32OrigBarrier(__theMask: number, __theValue: interop.PointerConvertible): number;

declare function OSAtomicXor32(__theMask: number, __theValue: interop.PointerConvertible): number;

declare function OSAtomicXor32Barrier(__theMask: number, __theValue: interop.PointerConvertible): number;

declare function OSAtomicXor32Orig(__theMask: number, __theValue: interop.PointerConvertible): number;

declare function OSAtomicXor32OrigBarrier(__theMask: number, __theValue: interop.PointerConvertible): number;

declare function OSAtomicCompareAndSwap32(__oldValue: number, __newValue: number, __theValue: interop.PointerConvertible): boolean;

declare function OSAtomicCompareAndSwap32Barrier(__oldValue: number, __newValue: number, __theValue: interop.PointerConvertible): boolean;

declare function OSAtomicCompareAndSwapPtr(__oldValue: interop.PointerConvertible, __newValue: interop.PointerConvertible, __theValue: interop.PointerConvertible): boolean;

declare function OSAtomicCompareAndSwapPtrBarrier(__oldValue: interop.PointerConvertible, __newValue: interop.PointerConvertible, __theValue: interop.PointerConvertible): boolean;

declare function OSAtomicCompareAndSwapInt(__oldValue: number, __newValue: number, __theValue: interop.PointerConvertible): boolean;

declare function OSAtomicCompareAndSwapIntBarrier(__oldValue: number, __newValue: number, __theValue: interop.PointerConvertible): boolean;

declare function OSAtomicCompareAndSwapLong(__oldValue: number, __newValue: number, __theValue: interop.PointerConvertible): boolean;

declare function OSAtomicCompareAndSwapLongBarrier(__oldValue: number, __newValue: number, __theValue: interop.PointerConvertible): boolean;

declare function OSAtomicCompareAndSwap64(__oldValue: number, __newValue: number, __theValue: interop.PointerConvertible): boolean;

declare function OSAtomicCompareAndSwap64Barrier(__oldValue: number, __newValue: number, __theValue: interop.PointerConvertible): boolean;

declare function OSAtomicTestAndSet(__n: number, __theAddress: interop.PointerConvertible): boolean;

declare function OSAtomicTestAndSetBarrier(__n: number, __theAddress: interop.PointerConvertible): boolean;

declare function OSAtomicTestAndClear(__n: number, __theAddress: interop.PointerConvertible): boolean;

declare function OSAtomicTestAndClearBarrier(__n: number, __theAddress: interop.PointerConvertible): boolean;

declare function OSMemoryBarrier(): void;

declare function OSAtomicFifoEnqueue(__list: interop.PointerConvertible, __new: interop.PointerConvertible, __offset: number): void;

declare function OSAtomicFifoDequeue(__list: interop.PointerConvertible, __offset: number): interop.Pointer;

declare function OSSpinLockTry(__lock: interop.PointerConvertible): boolean;

declare function OSSpinLockLock(__lock: interop.PointerConvertible): void;

declare function OSSpinLockUnlock(__lock: interop.PointerConvertible): void;

declare function OSAtomicEnqueue(__list: interop.PointerConvertible, __new: interop.PointerConvertible, __offset: number): void;

declare function OSAtomicDequeue(__list: interop.PointerConvertible, __offset: number): interop.Pointer;

declare function malloc_type_zone_malloc_with_options(zone: interop.PointerConvertible, alignment: number, size: number, type_id: number, opts: interop.Enum<typeof malloc_zone_malloc_options_t>): interop.Pointer;

declare function malloc_default_zone(): interop.Pointer;

declare function malloc_create_zone(start_size: number, flags: number): interop.Pointer;

declare function malloc_destroy_zone(zone: interop.PointerConvertible): void;

declare function malloc_zone_malloc(zone: interop.PointerConvertible, size: number): interop.Pointer;

declare function malloc_zone_malloc_with_options(zone: interop.PointerConvertible, align: number, size: number, opts: interop.Enum<typeof malloc_zone_malloc_options_t>): interop.Pointer;

declare function malloc_zone_calloc(zone: interop.PointerConvertible, num_items: number, size: number): interop.Pointer;

declare function malloc_zone_valloc(zone: interop.PointerConvertible, size: number): interop.Pointer;

declare function malloc_zone_free(zone: interop.PointerConvertible, ptr: interop.PointerConvertible): void;

declare function malloc_zone_realloc(zone: interop.PointerConvertible, ptr: interop.PointerConvertible, size: number): interop.Pointer;

declare function malloc_zone_from_ptr(ptr: interop.PointerConvertible): interop.Pointer;

declare function malloc_size(ptr: interop.PointerConvertible): number;

declare function malloc_good_size(size: number): number;

declare function malloc_zone_memalign(zone: interop.PointerConvertible, alignment: number, size: number): interop.Pointer;

declare function malloc_zone_batch_malloc(zone: interop.PointerConvertible, size: number, results: interop.PointerConvertible, num_requested: number): number;

declare function malloc_zone_batch_free(zone: interop.PointerConvertible, to_be_freed: interop.PointerConvertible, num: number): void;

declare function malloc_default_purgeable_zone(): interop.Pointer;

declare function malloc_make_purgeable(ptr: interop.PointerConvertible): void;

declare function malloc_make_nonpurgeable(ptr: interop.PointerConvertible): number;

declare function malloc_zone_register(zone: interop.PointerConvertible): void;

declare function malloc_zone_unregister(zone: interop.PointerConvertible): void;

declare function malloc_set_zone_name(zone: interop.PointerConvertible, name: string): void;

declare function malloc_get_zone_name(zone: interop.PointerConvertible): string;

declare function malloc_zone_pressure_relief(zone: interop.PointerConvertible, goal: number): number;

declare function malloc_printf(format: string): void;

declare function malloc_get_all_zones(task: number, reader: (p1: number, p2: number, p3: number, p4: interop.PointerConvertible) => number, addresses: interop.PointerConvertible, count: interop.PointerConvertible): number;

declare function malloc_zone_print_ptr_info(ptr: interop.PointerConvertible): void;

declare function malloc_zone_check(zone: interop.PointerConvertible): number;

declare function malloc_zone_print(zone: interop.PointerConvertible, verbose: number): void;

declare function malloc_zone_statistics(zone: interop.PointerConvertible, stats: interop.PointerConvertible): void;

declare function malloc_zone_log(zone: interop.PointerConvertible, address: interop.PointerConvertible): void;

declare function mstats(): mstats;

declare function malloc_zone_enable_discharge_checking(zone: interop.PointerConvertible): number;

declare function malloc_zone_disable_discharge_checking(zone: interop.PointerConvertible): void;

declare function malloc_zone_discharge(zone: interop.PointerConvertible, memory: interop.PointerConvertible): void;

declare function malloc_zone_enumerate_discharged_pointers(zone: interop.PointerConvertible, report_discharged: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void): void;

declare function class_createInstance(cls: interop.Object, extraBytes: number): interop.Object;

declare function copyfile(from: string, to: string, state: interop.PointerConvertible, flags: number): number;

declare function fcopyfile(from_fd: number, to_fd: number, p3: interop.PointerConvertible, flags: number): number;

declare function copyfile_state_free(p1: interop.PointerConvertible): number;

declare function copyfile_state_alloc(): interop.Pointer;

declare function copyfile_state_get(s: interop.PointerConvertible, flag: number, dst: interop.PointerConvertible): number;

declare function copyfile_state_set(s: interop.PointerConvertible, flag: number, src: interop.PointerConvertible): number;

declare function err(p1: number, p2: string): void;

declare function verr(p1: number, p2: string, p3: string): void;

declare function errc(p1: number, p2: number, p3: string): void;

declare function verrc(p1: number, p2: number, p3: string, p4: string): void;

declare function errx(p1: number, p2: string): void;

declare function verrx(p1: number, p2: string, p3: string): void;

declare function warn(p1: string): void;

declare function vwarn(p1: string, p2: string): void;

declare function warnc(p1: number, p2: string): void;

declare function vwarnc(p1: number, p2: string, p3: string): void;

declare function warnx(p1: string): void;

declare function vwarnx(p1: string, p2: string): void;

declare function err_set_file(p1: interop.PointerConvertible): void;

declare function err_set_exit(p1: (p1: number) => void): void;

declare function err_set_exit_b(p1: (p1: number) => void): void;

declare function readpassphrase(p1: string, p2: string, __bufsiz: number, p4: number): string;

declare function getpwuid(p1: number): interop.Pointer;

declare function getpwnam(p1: string): interop.Pointer;

declare function getpwuid_r(p1: number, p2: interop.PointerConvertible, p3: string, p4: number, p5: interop.PointerConvertible): number;

declare function getpwnam_r(p1: string, p2: interop.PointerConvertible, p3: string, p4: number, p5: interop.PointerConvertible): number;

declare function getpwent(): interop.Pointer;

declare function setpwent(): void;

declare function endpwent(): void;

declare function setpassent(p1: number): number;

declare function user_from_uid(p1: number, p2: number): string;

declare function getpwuuid(p1: unknown /* const array */): interop.Pointer;

declare function getpwuuid_r(p1: unknown /* const array */, p2: interop.PointerConvertible, p3: string, p4: number, p5: interop.PointerConvertible): number;

declare function cfgetispeed(p1: interop.PointerConvertible): number;

declare function cfgetospeed(p1: interop.PointerConvertible): number;

declare function cfsetispeed(p1: interop.PointerConvertible, p2: number): number;

declare function cfsetospeed(p1: interop.PointerConvertible, p2: number): number;

declare function tcgetattr(p1: number, p2: interop.PointerConvertible): number;

declare function tcsetattr(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function tcdrain(p1: number): number;

declare function tcflow(p1: number, p2: number): number;

declare function tcflush(p1: number, p2: number): number;

declare function tcsendbreak(p1: number, p2: number): number;

declare function cfmakeraw(p1: interop.PointerConvertible): void;

declare function cfsetspeed(p1: interop.PointerConvertible, p2: number): number;

declare function tcgetsid(p1: number): number;

declare function login(p1: interop.PointerConvertible): void;

declare function login_tty(p1: number): number;

declare function logout(p1: string): number;

declare function logwtmp(p1: string, p2: string, p3: string): void;

declare function opendev(p1: string, p2: number, p3: number, p4: interop.PointerConvertible): number;

declare function openpty(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: string, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function fparseln(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: unknown /* const array */, p5: number): string;

declare function forkpty(p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function pidlock(p1: string, p2: number, p3: interop.PointerConvertible, p4: string): number;

declare function ttylock(p1: string, p2: number, p3: interop.PointerConvertible): number;

declare function ttyunlock(p1: string): number;

declare function ttyaction(tty: string, act: string, user: string): number;

declare function ttymsg(p1: interop.PointerConvertible, p2: number, p3: string, p4: number): string;

declare function xattr_preserve_for_intent(p1: string, p2: number): number;

declare function xattr_name_with_flags(p1: string, p2: number): string;

declare function xattr_name_without_flags(p1: string): string;

declare function xattr_flags_from_name(p1: string): number;

declare function xattr_intent_with_flags(p1: number, p2: number): number;

declare function __error(): interop.Pointer;

declare function raise(p1: number): number;

declare function bsd_signal(p1: number, p2: (p1: number) => void): (p1: number) => void;

declare function kill(p1: number, p2: number): number;

declare function killpg(p1: number, p2: number): number;

declare function pthread_kill(p1: interop.PointerConvertible, p2: number): number;

declare function pthread_sigmask(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function sigaction(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function sigaddset(p1: interop.PointerConvertible, p2: number): number;

declare function sigaltstack(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function sigdelset(p1: interop.PointerConvertible, p2: number): number;

declare function sigemptyset(p1: interop.PointerConvertible): number;

declare function sigfillset(p1: interop.PointerConvertible): number;

declare function sighold(p1: number): number;

declare function sigignore(p1: number): number;

declare function siginterrupt(p1: number, p2: number): number;

declare function sigismember(p1: interop.PointerConvertible, p2: number): number;

declare function sigpause(p1: number): number;

declare function sigpending(p1: interop.PointerConvertible): number;

declare function sigprocmask(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function sigrelse(p1: number): number;

declare function sigset(p1: number, p2: (p1: number) => void): (p1: number) => void;

declare function sigsuspend(p1: interop.PointerConvertible): number;

declare function sigwait(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function psignal(p1: number, p2: string): void;

declare function sigblock(p1: number): number;

declare function sigsetmask(p1: number): number;

declare function sigvec(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function aio_cancel(fd: number, aiocbp: interop.PointerConvertible): number;

declare function aio_error(aiocbp: interop.PointerConvertible): number;

declare function aio_fsync(op: number, aiocbp: interop.PointerConvertible): number;

declare function aio_read(aiocbp: interop.PointerConvertible): number;

declare function aio_return(aiocbp: interop.PointerConvertible): number;

declare function aio_suspend(aiocblist: interop.Pointer, nent: number, timeoutp: interop.PointerConvertible): number;

declare function aio_write(aiocbp: interop.PointerConvertible): number;

declare function lio_listio(mode: number, aiocblist: interop.Pointer, nent: number, sigp: interop.PointerConvertible): number;

declare function closedir(p1: interop.PointerConvertible): number;

declare function opendir(p1: string): interop.Pointer;

declare function readdir(p1: interop.PointerConvertible): interop.Pointer;

declare function readdir_r(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function rewinddir(p1: interop.PointerConvertible): void;

declare function seekdir(p1: interop.PointerConvertible, p2: number): void;

declare function telldir(p1: interop.PointerConvertible): number;

declare function fdopendir(p1: number): interop.Pointer;

declare function alphasort(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function dirfd(dirp: interop.PointerConvertible): number;

declare function scandir(p1: string, p2: interop.PointerConvertible, p3: (p1: interop.PointerConvertible) => number, p4: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): number;

declare function scandir_b(p1: string, p2: interop.PointerConvertible, p3: (p1: interop.PointerConvertible) => number, p4: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): number;

declare function getdirentries(p1: number, p2: string, __nbytes: number, p4: interop.PointerConvertible): number;

declare function __opendir2(p1: string, p2: number): interop.Pointer;

declare function dladdr(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function dlclose(__handle: interop.PointerConvertible): number;

declare function dlerror(): string;

declare function dlopen(__path: string, __mode: number): interop.Pointer;

declare function dlsym(__handle: interop.PointerConvertible, __symbol: string): interop.Pointer;

declare function dlopen_preflight(__path: string): boolean;

declare function fmtmsg(p1: number, p2: string, p3: number, p4: string, p5: string, p6: string): number;

declare function fnmatch(p1: string, p2: string, p3: number): number;

declare function ftw(p1: string, p2: (p1: string, p2: interop.PointerConvertible, p3: number) => number, p3: number): number;

declare function nftw(p1: string, p2: (p1: string, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible) => number, p3: number, p4: number): number;

declare function glob(p1: string, p2: number, p3: (p1: string, p2: number) => number, p4: interop.PointerConvertible): number;

declare function glob_b(p1: string, p2: number, p3: (p1: string, p2: number) => number, p4: interop.PointerConvertible): number;

declare function globfree(p1: interop.PointerConvertible): void;

declare function getgrgid(p1: number): interop.Pointer;

declare function getgrnam(p1: string): interop.Pointer;

declare function getgrgid_r(p1: number, p2: interop.PointerConvertible, p3: string, p4: number, p5: interop.PointerConvertible): number;

declare function getgrnam_r(p1: string, p2: interop.PointerConvertible, p3: string, p4: number, p5: interop.PointerConvertible): number;

declare function getgrent(): interop.Pointer;

declare function setgrent(): void;

declare function endgrent(): void;

declare function group_from_gid(p1: number, p2: number): string;

declare function getgruuid(p1: unknown /* const array */): interop.Pointer;

declare function getgruuid_r(p1: unknown /* const array */, p2: interop.PointerConvertible, p3: string, p4: number, p5: interop.PointerConvertible): number;

declare function setgrfile(p1: string): void;

declare function setgroupent(p1: number): number;

declare function iconv_open(p1: string, p2: string): interop.Pointer;

declare function iconv(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function iconv_close(p1: interop.PointerConvertible): number;

declare function __iconv_get_list(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: boolean): number;

declare function __iconv_free_list(p1: interop.PointerConvertible, p2: number): void;

declare function __iconv(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: number, p7: interop.PointerConvertible): number;

declare function iconv_open_into(p1: string, p2: string, p3: interop.PointerConvertible): number;

declare function libiconv_set_relocation_prefix(p1: string, p2: string): void;

declare function iconvlist(do_one: (p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible) => number, p2: interop.PointerConvertible): void;

declare function iconv_canonicalize(p1: string): string;

declare function iconvctl(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible): number;

declare function getifaddrs(p1: interop.PointerConvertible): number;

declare function freeifaddrs(p1: interop.PointerConvertible): void;

declare function getifmaddrs(p1: interop.PointerConvertible): number;

declare function freeifmaddrs(p1: interop.PointerConvertible): void;

declare function basename(p1: string): string;

declare function dirname(p1: string): string;

declare function basename_r(p1: string, p2: string): string;

declare function dirname_r(p1: string, p2: string): string;

declare function dbm_clearerr(p1: interop.PointerConvertible): number;

declare function dbm_close(p1: interop.PointerConvertible): void;

declare function dbm_delete(p1: interop.PointerConvertible, p2: datum): number;

declare function dbm_dirfno(p1: interop.PointerConvertible): number;

declare function dbm_error(p1: interop.PointerConvertible): number;

declare function dbm_fetch(p1: interop.PointerConvertible, p2: datum): datum;

declare function dbm_firstkey(p1: interop.PointerConvertible): datum;

declare function dbm_forder(p1: interop.PointerConvertible, p2: datum): number;

declare function dbm_nextkey(p1: interop.PointerConvertible): datum;

declare function dbm_open(p1: string, p2: number, p3: number): interop.Pointer;

declare function dbm_store(p1: interop.PointerConvertible, p2: datum, p3: datum, p4: number): number;

declare function link_addr(p1: string, p2: interop.PointerConvertible): void;

declare function link_ntoa(p1: interop.PointerConvertible): string;

declare function ether_hostton(p1: string, p2: interop.PointerConvertible): number;

declare function ether_line(p1: string, p2: interop.PointerConvertible, p3: string): number;

declare function ether_ntoa(p1: interop.PointerConvertible): string;

declare function ether_aton(p1: string): interop.Pointer;

declare function ether_ntohost(p1: string, p2: interop.PointerConvertible): number;

declare function tracker_action(action: number, buffer: string, buffer_size: number): number;

declare function kqueue(): number;

declare function kevent(kq: number, changelist: interop.PointerConvertible, nchanges: number, eventlist: interop.PointerConvertible, nevents: number, timeout: interop.PointerConvertible): number;

declare function kevent64(kq: number, changelist: interop.PointerConvertible, nchanges: number, eventlist: interop.PointerConvertible, nevents: number, flags: number, timeout: interop.PointerConvertible): number;

declare function sysctl(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, oldlenp: interop.PointerConvertible, p5: interop.PointerConvertible, newlen: number): number;

declare function sysctlbyname(p1: string, p2: interop.PointerConvertible, oldlenp: interop.PointerConvertible, p4: interop.PointerConvertible, newlen: number): number;

declare function sysctlnametomib(p1: string, p2: interop.PointerConvertible, sizep: interop.PointerConvertible): number;

declare function poll(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function sched_yield(): number;

declare function sched_get_priority_min(p1: number): number;

declare function sched_get_priority_max(p1: number): number;

declare function pthread_attr_set_qos_class_np(__attr: interop.PointerConvertible, __qos_class: interop.Enum<typeof qos_class_t>, __relative_priority: number): number;

declare function pthread_attr_get_qos_class_np(__attr: interop.PointerConvertible, __qos_class: interop.PointerConvertible, __relative_priority: interop.PointerConvertible): number;

declare function pthread_set_qos_class_self_np(__qos_class: interop.Enum<typeof qos_class_t>, __relative_priority: number): number;

declare function pthread_get_qos_class_np(__pthread: interop.PointerConvertible, __qos_class: interop.PointerConvertible, __relative_priority: interop.PointerConvertible): number;

declare function pthread_override_qos_class_start_np(__pthread: interop.PointerConvertible, __qos_class: interop.Enum<typeof qos_class_t>, __relative_priority: number): interop.Pointer;

declare function pthread_override_qos_class_end_np(__override: interop.PointerConvertible): number;

declare function pthread_atfork(p1: () => void, p2: () => void, p3: () => void): number;

declare function pthread_attr_destroy(p1: interop.PointerConvertible): number;

declare function pthread_attr_getdetachstate(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_attr_getguardsize(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_attr_getinheritsched(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_attr_getschedparam(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_attr_getschedpolicy(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_attr_getscope(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_attr_getstack(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function pthread_attr_getstackaddr(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_attr_getstacksize(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_attr_init(p1: interop.PointerConvertible): number;

declare function pthread_attr_setdetachstate(p1: interop.PointerConvertible, p2: number): number;

declare function pthread_attr_setguardsize(p1: interop.PointerConvertible, p2: number): number;

declare function pthread_attr_setinheritsched(p1: interop.PointerConvertible, p2: number): number;

declare function pthread_attr_setschedparam(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_attr_setschedpolicy(p1: interop.PointerConvertible, p2: number): number;

declare function pthread_attr_setscope(p1: interop.PointerConvertible, p2: number): number;

declare function pthread_attr_setstack(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function pthread_attr_setstackaddr(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_attr_setstacksize(p1: interop.PointerConvertible, p2: number): number;

declare function pthread_cancel(p1: interop.PointerConvertible): number;

declare function pthread_cond_broadcast(p1: interop.PointerConvertible): number;

declare function pthread_cond_destroy(p1: interop.PointerConvertible): number;

declare function pthread_cond_init(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_cond_signal(p1: interop.PointerConvertible): number;

declare function pthread_cond_timedwait(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function pthread_cond_wait(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_condattr_destroy(p1: interop.PointerConvertible): number;

declare function pthread_condattr_init(p1: interop.PointerConvertible): number;

declare function pthread_condattr_getpshared(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_condattr_setpshared(p1: interop.PointerConvertible, p2: number): number;

declare function pthread_create(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: (p1: interop.PointerConvertible) => interop.Pointer, p4: interop.PointerConvertible): number;

declare function pthread_detach(p1: interop.PointerConvertible): number;

declare function pthread_equal(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_exit(p1: interop.PointerConvertible): void;

declare function pthread_getconcurrency(): number;

declare function pthread_getschedparam(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function pthread_getspecific(p1: number): interop.Pointer;

declare function pthread_join(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_key_create(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible) => void): number;

declare function pthread_key_delete(p1: number): number;

declare function pthread_mutex_destroy(p1: interop.PointerConvertible): number;

declare function pthread_mutex_getprioceiling(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_mutex_init(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_mutex_lock(p1: interop.PointerConvertible): number;

declare function pthread_mutex_setprioceiling(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible): number;

declare function pthread_mutex_trylock(p1: interop.PointerConvertible): number;

declare function pthread_mutex_unlock(p1: interop.PointerConvertible): number;

declare function pthread_mutexattr_destroy(p1: interop.PointerConvertible): number;

declare function pthread_mutexattr_getprioceiling(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_mutexattr_getprotocol(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_mutexattr_getpshared(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_mutexattr_gettype(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_mutexattr_getpolicy_np(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_mutexattr_init(p1: interop.PointerConvertible): number;

declare function pthread_mutexattr_setprioceiling(p1: interop.PointerConvertible, p2: number): number;

declare function pthread_mutexattr_setprotocol(p1: interop.PointerConvertible, p2: number): number;

declare function pthread_mutexattr_setpshared(p1: interop.PointerConvertible, p2: number): number;

declare function pthread_mutexattr_settype(p1: interop.PointerConvertible, p2: number): number;

declare function pthread_mutexattr_setpolicy_np(p1: interop.PointerConvertible, p2: number): number;

declare function pthread_once(p1: interop.PointerConvertible, p2: () => void): number;

declare function pthread_rwlock_destroy(p1: interop.PointerConvertible): number;

declare function pthread_rwlock_init(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_rwlock_rdlock(p1: interop.PointerConvertible): number;

declare function pthread_rwlock_tryrdlock(p1: interop.PointerConvertible): number;

declare function pthread_rwlock_trywrlock(p1: interop.PointerConvertible): number;

declare function pthread_rwlock_wrlock(p1: interop.PointerConvertible): number;

declare function pthread_rwlock_unlock(p1: interop.PointerConvertible): number;

declare function pthread_rwlockattr_destroy(p1: interop.PointerConvertible): number;

declare function pthread_rwlockattr_getpshared(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_rwlockattr_init(p1: interop.PointerConvertible): number;

declare function pthread_rwlockattr_setpshared(p1: interop.PointerConvertible, p2: number): number;

declare function pthread_self(): interop.Pointer;

declare function pthread_setcancelstate(p1: number, p2: interop.PointerConvertible): number;

declare function pthread_setcanceltype(p1: number, p2: interop.PointerConvertible): number;

declare function pthread_setconcurrency(p1: number): number;

declare function pthread_setschedparam(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible): number;

declare function pthread_setspecific(p1: number, p2: interop.PointerConvertible): number;

declare function pthread_testcancel(): void;

declare function pthread_is_threaded_np(): number;

declare function pthread_threadid_np(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_getname_np(p1: interop.PointerConvertible, p2: string, p3: number): number;

declare function pthread_setname_np(p1: string): number;

declare function pthread_main_np(): number;

declare function pthread_mach_thread_np(p1: interop.PointerConvertible): number;

declare function pthread_get_stacksize_np(p1: interop.PointerConvertible): number;

declare function pthread_get_stackaddr_np(p1: interop.PointerConvertible): interop.Pointer;

declare function pthread_cond_signal_thread_np(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pthread_cond_timedwait_relative_np(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function pthread_create_suspended_np(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: (p1: interop.PointerConvertible) => interop.Pointer, p4: interop.PointerConvertible): number;

declare function pthread_kill(p1: interop.PointerConvertible, p2: number): number;

declare function pthread_from_mach_thread_np(p1: number): interop.Pointer;

declare function pthread_sigmask(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function pthread_yield_np(): void;

declare function pthread_jit_write_protect_np(enabled: number): void;

declare function pthread_jit_write_protect_supported_np(): number;

declare function pthread_jit_write_with_callback_np(callback: (p1: interop.PointerConvertible) => number, ctx: interop.PointerConvertible): number;

declare function pthread_jit_write_freeze_callbacks_np(): void;

declare function pthread_cpu_number_np(cpu_number_out: interop.PointerConvertible): number;

declare function posix_spawn(p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: interop.PointerConvertible, __argv: interop.Pointer, __envp: interop.Pointer): number;

declare function posix_spawnp(p1: interop.PointerConvertible, p2: string, p3: interop.PointerConvertible, p4: interop.PointerConvertible, __argv: interop.Pointer, __envp: interop.Pointer): number;

declare function posix_spawn_file_actions_addchdir(p1: interop.PointerConvertible, p2: string): number;

declare function posix_spawn_file_actions_addfchdir(p1: interop.PointerConvertible, p2: number): number;

declare function posix_spawn_file_actions_addclose(p1: interop.PointerConvertible, p2: number): number;

declare function posix_spawn_file_actions_adddup2(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function posix_spawn_file_actions_addopen(p1: interop.PointerConvertible, p2: number, p3: string, p4: number, p5: number): number;

declare function posix_spawn_file_actions_destroy(p1: interop.PointerConvertible): number;

declare function posix_spawn_file_actions_init(p1: interop.PointerConvertible): number;

declare function posix_spawnattr_destroy(p1: interop.PointerConvertible): number;

declare function posix_spawnattr_getsigdefault(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function posix_spawnattr_getflags(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function posix_spawnattr_getpgroup(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function posix_spawnattr_getsigmask(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function posix_spawnattr_init(p1: interop.PointerConvertible): number;

declare function posix_spawnattr_setsigdefault(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function posix_spawnattr_setflags(p1: interop.PointerConvertible, p2: number): number;

declare function posix_spawnattr_setpgroup(p1: interop.PointerConvertible, p2: number): number;

declare function posix_spawnattr_setsigmask(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function posix_spawnattr_getbinpref_np(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function posix_spawnattr_getarchpref_np(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function posix_spawnattr_setauditsessionport_np(p1: interop.PointerConvertible, p2: number): number;

declare function posix_spawnattr_setbinpref_np(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function posix_spawnattr_setarchpref_np(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function posix_spawnattr_setexceptionports_np(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number): number;

declare function posix_spawnattr_setspecialport_np(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function posix_spawnattr_setnosmt_np(attr: interop.PointerConvertible): number;

declare function posix_spawnattr_set_csm_np(attr: interop.PointerConvertible, flags: number): number;

declare function posix_spawn_file_actions_addinherit_np(p1: interop.PointerConvertible, p2: number): number;

declare function posix_spawn_file_actions_addchdir_np(p1: interop.PointerConvertible, p2: string): number;

declare function posix_spawn_file_actions_addfchdir_np(p1: interop.PointerConvertible, p2: number): number;

declare function posix_spawnattr_set_qos_class_np(__attr: interop.PointerConvertible, __qos_class: interop.Enum<typeof qos_class_t>): number;

declare function posix_spawnattr_get_qos_class_np(__attr: interop.PointerConvertible, __qos_class: interop.PointerConvertible): number;

declare function _pthread_mutex_enable_legacy_mode(): void;

declare function pthread_create_from_mach_thread(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: (p1: interop.PointerConvertible) => interop.Pointer, p4: interop.PointerConvertible): number;

declare function hcreate(p1: number): number;

declare function hdestroy(): void;

declare function hsearch(p1: entry, p2: interop.Enum<typeof ACTION>): interop.Pointer;

declare function insque(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function lfind(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: number, p5: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): interop.Pointer;

declare function lsearch(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: number, p5: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): interop.Pointer;

declare function remque(p1: interop.PointerConvertible): void;

declare function tdelete(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): interop.Pointer;

declare function tfind(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): interop.Pointer;

declare function tsearch(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): interop.Pointer;

declare function twalk(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: interop.Enum<typeof VISIT>, p3: number) => void): void;

declare function sem_close(p1: interop.PointerConvertible): number;

declare function sem_destroy(p1: interop.PointerConvertible): number;

declare function sem_getvalue(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function sem_init(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function sem_open(p1: string, p2: number): interop.Pointer;

declare function sem_post(p1: interop.PointerConvertible): number;

declare function sem_trywait(p1: interop.PointerConvertible): number;

declare function sem_unlink(p1: string): number;

declare function sem_wait(p1: interop.PointerConvertible): number;

declare function ftok(p1: string, p2: number): number;

declare function msgsys(p1: number): number;

declare function msgctl(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function msgget(p1: number, p2: number): number;

declare function msgrcv(p1: number, p2: interop.PointerConvertible, p3: number, p4: number, p5: number): number;

declare function msgsnd(p1: number, p2: interop.PointerConvertible, p3: number, p4: number): number;

declare function semsys(p1: number): number;

declare function semctl(p1: number, p2: number, p3: number): number;

declare function semget(p1: number, p2: number, p3: number): number;

declare function semop(p1: number, p2: interop.PointerConvertible, p3: number): number;

declare function shmsys(p1: number): number;

declare function shmat(p1: number, p2: interop.PointerConvertible, p3: number): interop.Pointer;

declare function shmctl(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function shmdt(p1: interop.PointerConvertible): number;

declare function shmget(p1: number, p2: number, p3: number): number;

declare function fstatvfs(p1: number, p2: interop.PointerConvertible): number;

declare function statvfs(p1: string, p2: interop.PointerConvertible): number;

declare function times(p1: interop.PointerConvertible): number;

declare function readv(p1: number, p2: interop.PointerConvertible, p3: number): number;

declare function writev(p1: number, p2: interop.PointerConvertible, p3: number): number;

declare function preadv(p1: number, p2: interop.PointerConvertible, p3: number, p4: number): number;

declare function pwritev(p1: number, p2: interop.PointerConvertible, p3: number, p4: number): number;

declare function uname(p1: interop.PointerConvertible): number;

declare function getxattr(path: string, name: string, value: interop.PointerConvertible, size: number, position: number, options: number): number;

declare function fgetxattr(fd: number, name: string, value: interop.PointerConvertible, size: number, position: number, options: number): number;

declare function setxattr(path: string, name: string, value: interop.PointerConvertible, size: number, position: number, options: number): number;

declare function fsetxattr(fd: number, name: string, value: interop.PointerConvertible, size: number, position: number, options: number): number;

declare function removexattr(path: string, name: string, options: number): number;

declare function fremovexattr(fd: number, name: string, options: number): number;

declare function listxattr(path: string, namebuff: string, size: number, options: number): number;

declare function flistxattr(fd: number, namebuff: string, size: number, options: number): number;

declare function closelog(): void;

declare function openlog(p1: string, p2: number, p3: number): void;

declare function setlogmask(p1: number): number;

declare function syslog(p1: number, p2: string): void;

declare function vsyslog(p1: number, p2: string, p3: string): void;

declare function ulimit(p1: number): number;

declare function utime(p1: string, p2: interop.PointerConvertible): number;

declare function endutxent(): void;

declare function endutxent_wtmp(): void;

declare function getlastlogx(p1: number, p2: interop.PointerConvertible): interop.Pointer;

declare function getlastlogxbyname(p1: string, p2: interop.PointerConvertible): interop.Pointer;

declare function getutmp(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function getutmpx(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function getutxent(): interop.Pointer;

declare function getutxent_wtmp(): interop.Pointer;

declare function getutxid(p1: interop.PointerConvertible): interop.Pointer;

declare function getutxline(p1: interop.PointerConvertible): interop.Pointer;

declare function pututxline(p1: interop.PointerConvertible): interop.Pointer;

declare function setutxent(): void;

declare function setutxent_wtmp(p1: number): void;

declare function utmpxname(p1: string): number;

declare function wtmpxname(p1: string): number;

declare function wordexp(p1: string, p2: interop.PointerConvertible, p3: number): number;

declare function wordfree(p1: interop.PointerConvertible): void;

declare function catopen(p1: string, p2: number): interop.Pointer;

declare function catgets(p1: interop.PointerConvertible, p2: number, p3: number, p4: string): string;

declare function catclose(p1: interop.PointerConvertible): number;

declare function _NSGetArgv(): interop.Pointer;

declare function _NSGetArgc(): interop.Pointer;

declare function _NSGetEnviron(): interop.Pointer;

declare function _NSGetProgname(): interop.Pointer;

declare function _NSGetMachExecuteHeader(): interop.Pointer;

declare function fts_children(p1: interop.PointerConvertible, p2: number): interop.Pointer;

declare function fts_close(p1: interop.PointerConvertible): number;

declare function fts_open(p1: interop.PointerConvertible, p2: number, p3: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): interop.Pointer;

declare function fts_open_b(p1: interop.PointerConvertible, p2: number, p3: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number): interop.Pointer;

declare function fts_read(p1: interop.PointerConvertible): interop.Pointer;

declare function fts_set(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function getopt_long(__argc: number, p2: interop.PointerConvertible, p3: string, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function getopt_long_only(__argc: number, p2: interop.PointerConvertible, p3: string, p4: interop.PointerConvertible, p5: interop.PointerConvertible): number;

declare function getopt(__argc: number, p2: interop.Pointer, p3: string): number;

declare function clock_get_time(clock_serv: number, cur_time: interop.PointerConvertible): number;

declare function clock_get_attributes(clock_serv: number, flavor: number, clock_attr: interop.PointerConvertible, clock_attrCnt: interop.PointerConvertible): number;

declare function clock_alarm(clock_serv: number, alarm_type: number, alarm_time: mach_timespec, alarm_port: number): number;

declare function clock_alarm_reply(alarm_port: number, alarm_portPoly: number, alarm_code: number, alarm_type: number, alarm_time: mach_timespec): number;

declare function exception_raise(exception_port: number, thread: number, task: number, exception: number, code: interop.PointerConvertible, codeCnt: number): number;

declare function exception_raise_state(exception_port: number, exception: number, code: interop.PointerConvertible, codeCnt: number, flavor: interop.PointerConvertible, old_state: interop.PointerConvertible, old_stateCnt: number, new_state: interop.PointerConvertible, new_stateCnt: interop.PointerConvertible): number;

declare function exception_raise_state_identity(exception_port: number, thread: number, task: number, exception: number, code: interop.PointerConvertible, codeCnt: number, flavor: interop.PointerConvertible, old_state: interop.PointerConvertible, old_stateCnt: number, new_state: interop.PointerConvertible, new_stateCnt: interop.PointerConvertible): number;

declare function mach_timebase_info(info: interop.PointerConvertible): number;

declare function mach_wait_until(deadline: number): number;

declare function mach_absolute_time(): number;

declare function mach_approximate_time(): number;

declare function mach_continuous_time(): number;

declare function mach_continuous_approximate_time(): number;

declare function mach_vm_allocate(target: number, address: interop.PointerConvertible, size: number, flags: number): number;

declare function mach_vm_deallocate(target: number, address: number, size: number): number;

declare function mach_vm_protect(target_task: number, address: number, size: number, set_maximum: number, new_protection: number): number;

declare function mach_vm_inherit(target_task: number, address: number, size: number, new_inheritance: number): number;

declare function mach_vm_read(target_task: number, address: number, size: number, data: interop.PointerConvertible, dataCnt: interop.PointerConvertible): number;

declare function mach_vm_read_list(target_task: number, data_list: unknown /* const array */, count: number): number;

declare function mach_vm_write(target_task: number, address: number, data: number, dataCnt: number): number;

declare function mach_vm_copy(target_task: number, source_address: number, size: number, dest_address: number): number;

declare function mach_vm_read_overwrite(target_task: number, address: number, size: number, data: number, outsize: interop.PointerConvertible): number;

declare function mach_vm_msync(target_task: number, address: number, size: number, sync_flags: number): number;

declare function mach_vm_behavior_set(target_task: number, address: number, size: number, new_behavior: number): number;

declare function mach_vm_map(target_task: number, address: interop.PointerConvertible, size: number, mask: number, flags: number, object: number, offset: number, copy: number, cur_protection: number, max_protection: number, inheritance: number): number;

declare function mach_vm_machine_attribute(target_task: number, address: number, size: number, attribute: number, value: interop.PointerConvertible): number;

declare function mach_vm_remap(target_task: number, target_address: interop.PointerConvertible, size: number, mask: number, flags: number, src_task: number, src_address: number, copy: number, cur_protection: interop.PointerConvertible, max_protection: interop.PointerConvertible, inheritance: number): number;

declare function mach_vm_page_query(target_map: number, offset: number, disposition: interop.PointerConvertible, ref_count: interop.PointerConvertible): number;

declare function mach_vm_region_recurse(target_task: number, address: interop.PointerConvertible, size: interop.PointerConvertible, nesting_depth: interop.PointerConvertible, info: interop.PointerConvertible, infoCnt: interop.PointerConvertible): number;

declare function mach_vm_region(target_task: number, address: interop.PointerConvertible, size: interop.PointerConvertible, flavor: number, info: interop.PointerConvertible, infoCnt: interop.PointerConvertible, object_name: interop.PointerConvertible): number;

declare function _mach_make_memory_entry(target_task: number, size: interop.PointerConvertible, offset: number, permission: number, object_handle: interop.PointerConvertible, parent_handle: number): number;

declare function mach_vm_purgable_control(target_task: number, address: number, control: number, state: interop.PointerConvertible): number;

declare function mach_vm_page_info(target_task: number, address: number, flavor: number, info: interop.PointerConvertible, infoCnt: interop.PointerConvertible): number;

declare function mach_vm_page_range_query(target_map: number, address: number, size: number, dispositions: number, dispositions_count: interop.PointerConvertible): number;

declare function mach_vm_remap_new(target_task: number, target_address: interop.PointerConvertible, size: number, mask: number, flags: number, src_task: number, src_address: number, copy: number, cur_protection: interop.PointerConvertible, max_protection: interop.PointerConvertible, inheritance: number): number;

declare function mach_vm_range_create(target_task: number, flavor: interop.Enum<typeof mach_vm_range_flavor_t>, recipes: interop.PointerConvertible, recipesCnt: number): number;

declare function mach_vm_update_pointers_with_remote_tags(target: number, in_pointer_list: interop.PointerConvertible, in_pointer_listCnt: number, out_pointer_list: interop.PointerConvertible, out_pointer_listCnt: interop.PointerConvertible): number;

declare function mach_voucher_extract_attr_content(voucher: number, key: number, content: interop.PointerConvertible, contentCnt: interop.PointerConvertible): number;

declare function mach_voucher_extract_attr_recipe(voucher: number, key: number, recipe: interop.PointerConvertible, recipeCnt: interop.PointerConvertible): number;

declare function mach_voucher_extract_all_attr_recipes(voucher: number, recipes: interop.PointerConvertible, recipesCnt: interop.PointerConvertible): number;

declare function mach_voucher_attr_command(voucher: number, key: number, command: number, in_content: interop.PointerConvertible, in_contentCnt: number, out_content: interop.PointerConvertible, out_contentCnt: interop.PointerConvertible): number;

declare function mach_voucher_debug_info(task: number, voucher_name: number, recipes: interop.PointerConvertible, recipesCnt: interop.PointerConvertible): number;

declare function mach_memory_entry_purgable_control(mem_entry: number, control: number, state: interop.PointerConvertible): number;

declare function mach_memory_entry_access_tracking(mem_entry: number, access_tracking: interop.PointerConvertible, access_tracking_reads: interop.PointerConvertible, access_tracking_writes: interop.PointerConvertible): number;

declare function mach_memory_entry_ownership(mem_entry: number, owner: number, ledger_tag: number, ledger_flags: number): number;

declare function mach_memory_entry_get_page_counts(mem_entry: number, resident_cnt: interop.PointerConvertible, dirty_cnt: interop.PointerConvertible, swapped_cnt: interop.PointerConvertible): number;

declare function port_obj_init(p1: number): void;

declare function shared_region_check_np(startaddress: interop.PointerConvertible): number;

declare function shared_region_map_np(fd: number, mappingCount: number, mappings: interop.PointerConvertible): number;

declare function shared_region_slide_np(): number;

declare function thread_get_register_pointer_values(thread: number, sp: interop.PointerConvertible, length: interop.PointerConvertible, values: interop.PointerConvertible): number;

declare function fhopen(p1: interop.PointerConvertible, p2: number): number;

declare function fstatfs(p1: number, p2: interop.PointerConvertible): number;

declare function getfh(p1: string, p2: interop.PointerConvertible): number;

declare function getfsstat(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function getmntinfo(p1: interop.PointerConvertible, p2: number): number;

declare function getmntinfo_r_np(p1: interop.PointerConvertible, p2: number): number;

declare function mount(p1: string, p2: string, p3: number, p4: interop.PointerConvertible): number;

declare function fmount(p1: string, p2: number, p3: number, p4: interop.PointerConvertible): number;

declare function statfs(p1: string, p2: interop.PointerConvertible): number;

declare function unmount(p1: string, p2: number): number;

declare function funmount(p1: number, p2: number): number;

declare function getvfsbyname(p1: string, p2: interop.PointerConvertible): number;

declare function proc_listpidspath(type: number, typeinfo: number, path: string, pathflags: number, buffer: interop.PointerConvertible, buffersize: number): number;

declare function proc_listpids(type: number, typeinfo: number, buffer: interop.PointerConvertible, buffersize: number): number;

declare function proc_listallpids(buffer: interop.PointerConvertible, buffersize: number): number;

declare function proc_listpgrppids(pgrpid: number, buffer: interop.PointerConvertible, buffersize: number): number;

declare function proc_listchildpids(ppid: number, buffer: interop.PointerConvertible, buffersize: number): number;

declare function proc_pidinfo(pid: number, flavor: number, arg: number, buffer: interop.PointerConvertible, buffersize: number): number;

declare function proc_pidfdinfo(pid: number, fd: number, flavor: number, buffer: interop.PointerConvertible, buffersize: number): number;

declare function proc_pidfileportinfo(pid: number, fileport: number, flavor: number, buffer: interop.PointerConvertible, buffersize: number): number;

declare function proc_name(pid: number, buffer: interop.PointerConvertible, buffersize: number): number;

declare function proc_regionfilename(pid: number, address: number, buffer: interop.PointerConvertible, buffersize: number): number;

declare function proc_kmsgbuf(buffer: interop.PointerConvertible, buffersize: number): number;

declare function proc_pidpath(pid: number, buffer: interop.PointerConvertible, buffersize: number): number;

declare function proc_pidpath_audittoken(audittoken: interop.PointerConvertible, buffer: interop.PointerConvertible, buffersize: number): number;

declare function proc_libversion(major: interop.PointerConvertible, minor: interop.PointerConvertible): number;

declare function proc_pid_rusage(pid: number, flavor: number, buffer: interop.PointerConvertible): number;

declare function proc_setpcontrol(control: number): number;

declare function proc_setpcontrol(control: number): number;

declare function proc_track_dirty(pid: number, flags: number): number;

declare function proc_set_dirty(pid: number, dirty: boolean): number;

declare function proc_get_dirty(pid: number, flags: interop.PointerConvertible): number;

declare function proc_clear_dirty(pid: number, flags: number): number;

declare function proc_terminate(pid: number, sig: interop.PointerConvertible): number;

declare function proc_terminate_all_rsr(sig: number): number;

declare function proc_signal_with_audittoken(audittoken: interop.PointerConvertible, sig: number): number;

declare function proc_terminate_with_audittoken(audittoken: interop.PointerConvertible, sig: interop.PointerConvertible): number;

declare function proc_signal_delegate(instigator: audit_token_t, target: audit_token_t, sig: number): number;

declare function proc_terminate_delegate(instigator: audit_token_t, target: audit_token_t, sig: interop.PointerConvertible): number;

declare function proc_set_no_smt(): number;

declare function proc_setthread_no_smt(): number;

declare function proc_set_csm(flags: number): number;

declare function proc_setthread_csm(flags: number): number;

declare function proc_udata_info(pid: number, flavor: number, buffer: interop.PointerConvertible, buffersize: number): number;

declare function alias_setent(): void;

declare function alias_getent(): interop.Pointer;

declare function alias_endent(): void;

declare function alias_getbyname(p1: string): interop.Pointer;

declare function bootparams_endent(): void;

declare function bootparams_getbyname(p1: string): interop.Pointer;

declare function bootparams_getent(): interop.Pointer;

declare function bootparams_setent(): void;

declare function au_open(): number;

declare function au_write(d: number, m: interop.PointerConvertible): number;

declare function au_close(d: number, keep: number, event: number): number;

declare function au_close_buffer(d: number, event: number, buffer: interop.PointerConvertible, buflen: interop.PointerConvertible): number;

declare function au_close_token(tok: interop.PointerConvertible, buffer: interop.PointerConvertible, buflen: interop.PointerConvertible): number;

declare function au_to_file(file: string, tm: timeval): interop.Pointer;

declare function au_to_header32_tm(rec_size: number, e_type: number, e_mod: number, tm: timeval): interop.Pointer;

declare function au_to_header32_ex_tm(rec_size: number, e_type: number, e_mod: number, tm: timeval, aia: interop.PointerConvertible): interop.Pointer;

declare function au_to_header64_tm(rec_size: number, e_type: number, e_mod: number, tm: timeval): interop.Pointer;

declare function au_to_header(rec_size: number, e_type: number, e_mod: number): interop.Pointer;

declare function au_to_header_ex(rec_size: number, e_type: number, e_mod: number): interop.Pointer;

declare function au_to_header32(rec_size: number, e_type: number, e_mod: number): interop.Pointer;

declare function au_to_header64(rec_size: number, e_type: number, e_mod: number): interop.Pointer;

declare function au_to_header32_ex(rec_size: number, e_type: number, e_mod: number): interop.Pointer;

declare function au_to_me(): interop.Pointer;

declare function au_to_arg(n: number, text: string, v: number): interop.Pointer;

declare function au_to_arg32(n: number, text: string, v: number): interop.Pointer;

declare function au_to_arg64(n: number, text: string, v: number): interop.Pointer;

declare function au_to_data(unit_print: number, unit_type: number, unit_count: number, p: string): interop.Pointer;

declare function au_to_exit(retval: number, err: number): interop.Pointer;

declare function au_to_groups(groups: interop.PointerConvertible): interop.Pointer;

declare function au_to_newgroups(n: number, groups: interop.PointerConvertible): interop.Pointer;

declare function au_to_in_addr(internet_addr: interop.PointerConvertible): interop.Pointer;

declare function au_to_in_addr_ex(internet_addr: interop.PointerConvertible): interop.Pointer;

declare function au_to_ip(ip: interop.PointerConvertible): interop.Pointer;

declare function au_to_ipc(type: number, id: number): interop.Pointer;

declare function au_to_ipc_perm(perm: interop.PointerConvertible): interop.Pointer;

declare function au_to_iport(iport: number): interop.Pointer;

declare function au_to_opaque(data: string, bytes: number): interop.Pointer;

declare function au_to_path(path: string): interop.Pointer;

declare function au_to_process(auid: number, euid: number, egid: number, ruid: number, rgid: number, pid: number, sid: number, tid: interop.PointerConvertible): interop.Pointer;

declare function au_to_process32(auid: number, euid: number, egid: number, ruid: number, rgid: number, pid: number, sid: number, tid: interop.PointerConvertible): interop.Pointer;

declare function au_to_process64(auid: number, euid: number, egid: number, ruid: number, rgid: number, pid: number, sid: number, tid: interop.PointerConvertible): interop.Pointer;

declare function au_to_process_ex(auid: number, euid: number, egid: number, ruid: number, rgid: number, pid: number, sid: number, tid: interop.PointerConvertible): interop.Pointer;

declare function au_to_process32_ex(auid: number, euid: number, egid: number, ruid: number, rgid: number, pid: number, sid: number, tid: interop.PointerConvertible): interop.Pointer;

declare function au_to_process64_ex(auid: number, euid: number, egid: number, ruid: number, rgid: number, pid: number, sid: number, tid: interop.PointerConvertible): interop.Pointer;

declare function au_to_return(status: number, ret: number): interop.Pointer;

declare function au_to_return32(status: number, ret: number): interop.Pointer;

declare function au_to_return64(status: number, ret: number): interop.Pointer;

declare function au_to_seq(audit_count: number): interop.Pointer;

declare function au_to_socket_ex(so_domain: number, so_type: number, sa_local: interop.PointerConvertible, sa_remote: interop.PointerConvertible): interop.Pointer;

declare function au_to_sock_inet(so: interop.PointerConvertible): interop.Pointer;

declare function au_to_sock_inet32(so: interop.PointerConvertible): interop.Pointer;

declare function au_to_sock_inet128(so: interop.PointerConvertible): interop.Pointer;

declare function au_to_sock_unix(so: interop.PointerConvertible): interop.Pointer;

declare function au_to_subject(auid: number, euid: number, egid: number, ruid: number, rgid: number, pid: number, sid: number, tid: interop.PointerConvertible): interop.Pointer;

declare function au_to_subject32(auid: number, euid: number, egid: number, ruid: number, rgid: number, pid: number, sid: number, tid: interop.PointerConvertible): interop.Pointer;

declare function au_to_subject64(auid: number, euid: number, egid: number, ruid: number, rgid: number, pid: number, sid: number, tid: interop.PointerConvertible): interop.Pointer;

declare function au_to_subject_ex(auid: number, euid: number, egid: number, ruid: number, rgid: number, pid: number, sid: number, tid: interop.PointerConvertible): interop.Pointer;

declare function au_to_subject32_ex(auid: number, euid: number, egid: number, ruid: number, rgid: number, pid: number, sid: number, tid: interop.PointerConvertible): interop.Pointer;

declare function au_to_subject64_ex(auid: number, euid: number, egid: number, ruid: number, rgid: number, pid: number, sid: number, tid: interop.PointerConvertible): interop.Pointer;

declare function au_to_exec_args(argv: interop.PointerConvertible): interop.Pointer;

declare function au_to_exec_env(envp: interop.PointerConvertible): interop.Pointer;

declare function au_to_certificate_hash(hash: interop.PointerConvertible): interop.Pointer;

declare function au_to_krb5_principal(principal: interop.PointerConvertible): interop.Pointer;

declare function au_to_text(text: string): interop.Pointer;

declare function au_to_kevent(kev: interop.PointerConvertible): interop.Pointer;

declare function au_to_trailer(rec_size: number): interop.Pointer;

declare function au_to_zonename(zonename: string): interop.Pointer;

declare function au_to_identity(signer_type: number, signing_id: string, signing_id_trunc: number, team_id: string, team_id_trunc: number, cdhash: interop.PointerConvertible, cdhash_len: number): interop.Pointer;

declare function au_bsm_to_domain(bsm_domain: number, local_domainp: interop.PointerConvertible): number;

declare function au_bsm_to_errno(bsm_error: number, errorp: interop.PointerConvertible): number;

declare function au_bsm_to_fcntl_cmd(bsm_fcntl_cmd: number, local_fcntl_cmdp: interop.PointerConvertible): number;

declare function au_bsm_to_socket_type(bsm_socket_type: number, local_socket_typep: interop.PointerConvertible): number;

declare function au_domain_to_bsm(local_domain: number): number;

declare function au_errno_to_bsm(local_errno: number): number;

declare function au_fcntl_cmd_to_bsm(local_fcntl_command: number): number;

declare function au_socket_type_to_bsm(local_socket_type: number): number;

declare function audit_submit(au_event: number, auid: number, status: number, reterr: number, fmt: string): number;

declare function setauclass(): void;

declare function endauclass(): void;

declare function getauclassent(): interop.Pointer;

declare function getauclassent_r(class_int: interop.PointerConvertible): interop.Pointer;

declare function getauclassnam(name: string): interop.Pointer;

declare function getauclassnam_r(class_int: interop.PointerConvertible, name: string): interop.Pointer;

declare function getauclassnum(class_number: number): interop.Pointer;

declare function getauclassnum_r(class_int: interop.PointerConvertible, class_number: number): interop.Pointer;

declare function setac(): void;

declare function endac(): void;

declare function getacdir(name: string, len: number): number;

declare function getacmin(min_val: interop.PointerConvertible): number;

declare function getacfilesz(size_val: interop.PointerConvertible): number;

declare function getacflg(auditstr: string, len: number): number;

declare function getacna(auditstr: string, len: number): number;

declare function getacpol(auditstr: string, len: number): number;

declare function getacsflagsmask(which: string, auditstr: string, len: number): number;

declare function getachost(auditstr: string, len: number): number;

declare function getacexpire(andflg: interop.PointerConvertible, age: interop.PointerConvertible, size: interop.PointerConvertible): number;

declare function getauditflagsbin(auditstr: string, masks: interop.PointerConvertible): number;

declare function getauditflagschar(auditstr: string, masks: interop.PointerConvertible, verbose: number): number;

declare function au_preselect(event: number, mask_p: interop.PointerConvertible, sorf: number, flag: number): number;

declare function au_poltostr(policy: number, maxsize: number, buf: string): number;

declare function au_strtopol(polstr: string, policy: interop.PointerConvertible): number;

declare function au_sflagstostr(flags: number, maxsize: number, buf: string): number;

declare function au_strtosflags(sflagsstr: string, flags: interop.PointerConvertible): number;

declare function setauevent(): void;

declare function endauevent(): void;

declare function getauevent(): interop.Pointer;

declare function getauevent_r(e: interop.PointerConvertible): interop.Pointer;

declare function getauevnam(name: string): interop.Pointer;

declare function getauevnam_r(e: interop.PointerConvertible, name: string): interop.Pointer;

declare function getauevnum(event_number: number): interop.Pointer;

declare function getauevnum_r(e: interop.PointerConvertible, event_number: number): interop.Pointer;

declare function getauevnonam(event_name: string): interop.Pointer;

declare function getauevnonam_r(ev: interop.PointerConvertible, event_name: string): interop.Pointer;

declare function setauuser(): void;

declare function endauuser(): void;

declare function getauuserent(): interop.Pointer;

declare function getauuserent_r(u: interop.PointerConvertible): interop.Pointer;

declare function getauusernam(name: string): interop.Pointer;

declare function getauusernam_r(u: interop.PointerConvertible, name: string): interop.Pointer;

declare function au_user_mask(username: string, mask_p: interop.PointerConvertible): number;

declare function getfauditflags(usremask: interop.PointerConvertible, usrdmask: interop.PointerConvertible, lastmask: interop.PointerConvertible): number;

declare function au_read_rec(fp: interop.PointerConvertible, buf: interop.PointerConvertible): number;

declare function au_fetch_tok(tok: interop.PointerConvertible, buf: interop.PointerConvertible, len: number): number;

declare function au_print_tok(outfp: interop.PointerConvertible, tok: interop.PointerConvertible, del: string, raw: number, sfrm: number): void;

declare function au_print_flags_tok(outfp: interop.PointerConvertible, tok: interop.PointerConvertible, del: string, oflags: number): void;

declare function au_print_tok_xml(outfp: interop.PointerConvertible, tok: interop.PointerConvertible, del: string, raw: number, sfrm: number): void;

declare function au_print_xml_header(outfp: interop.PointerConvertible): void;

declare function au_print_xml_footer(outfp: interop.PointerConvertible): void;

declare function au_strerror(bsm_error: number): string;

declare function au_free_token(tok: interop.PointerConvertible): void;

declare function au_get_state(): number;

declare function au_notify_initialize(): number;

declare function au_notify_terminate(): number;

declare function cannot_audit(p1: number): number;

declare function audit_set_terminal_id_ex(tid: interop.PointerConvertible): number;

declare function audit_set_terminal_id(tid: interop.PointerConvertible): number;

declare function audit_write(event_code: number, subject: interop.PointerConvertible, misctok: interop.PointerConvertible, retval: number, errcode: number): number;

declare function audit_write_success_ex(event_code: number, misctok: interop.PointerConvertible, auid: number, euid: number, egid: number, ruid: number, rgid: number, pid: number, sid: number, tid: interop.PointerConvertible): number;

declare function audit_write_success(event_code: number, misctok: interop.PointerConvertible, auid: number, euid: number, egid: number, ruid: number, rgid: number, pid: number, sid: number, tid: interop.PointerConvertible): number;

declare function audit_write_success_self(event_code: number, misctok: interop.PointerConvertible): number;

declare function audit_write_failure_ex(event_code: number, errmsg: string, errret: number, auid: number, euid: number, egid: number, ruid: number, rgid: number, pid: number, sid: number, tid: interop.PointerConvertible): number;

declare function audit_write_failure(event_code: number, errmsg: string, errret: number, auid: number, euid: number, egid: number, ruid: number, rgid: number, pid: number, sid: number, tid: interop.PointerConvertible): number;

declare function audit_write_failure_self(event_code: number, errmsg: string, errret: number): number;

declare function audit_write_failure_na_ex(event_code: number, errmsg: string, errret: number, euid: number, egid: number, pid: number, tid: interop.PointerConvertible): number;

declare function audit_write_failure_na(event_code: number, errmsg: string, errret: number, euid: number, egid: number, pid: number, tid: interop.PointerConvertible): number;

declare function audit_token_to_au32(atoken: audit_token_t, auidp: interop.PointerConvertible, euidp: interop.PointerConvertible, egidp: interop.PointerConvertible, ruidp: interop.PointerConvertible, rgidp: interop.PointerConvertible, pidp: interop.PointerConvertible, asidp: interop.PointerConvertible, tidp: interop.PointerConvertible): void;

declare function audit_token_to_auid(atoken: audit_token_t): number;

declare function audit_token_to_euid(atoken: audit_token_t): number;

declare function audit_token_to_egid(atoken: audit_token_t): number;

declare function audit_token_to_ruid(atoken: audit_token_t): number;

declare function audit_token_to_rgid(atoken: audit_token_t): number;

declare function audit_token_to_pid(atoken: audit_token_t): number;

declare function audit_token_to_asid(atoken: audit_token_t): number;

declare function audit_token_to_pidversion(atoken: audit_token_t): number;

declare function audit_get_car(path: string, sz: number): number;

declare function audit_get_class(evc_map: interop.PointerConvertible, sz: number): number;

declare function audit_set_class(evc_map: interop.PointerConvertible, sz: number): number;

declare function audit_get_cond(cond: interop.PointerConvertible): number;

declare function audit_set_cond(cond: interop.PointerConvertible): number;

declare function audit_get_cwd(path: string, sz: number): number;

declare function audit_get_fsize(fstat: interop.PointerConvertible, sz: number): number;

declare function audit_set_fsize(fstat: interop.PointerConvertible, sz: number): number;

declare function audit_get_kmask(kmask: interop.PointerConvertible, sz: number): number;

declare function audit_set_kmask(kmask: interop.PointerConvertible, sz: number): number;

declare function audit_get_kaudit(aia: interop.PointerConvertible, sz: number): number;

declare function audit_set_kaudit(aia: interop.PointerConvertible, sz: number): number;

declare function audit_set_pmask(api: interop.PointerConvertible, sz: number): number;

declare function audit_get_pinfo(api: interop.PointerConvertible, sz: number): number;

declare function audit_get_pinfo_addr(apia: interop.PointerConvertible, sz: number): number;

declare function audit_get_policy(policy: interop.PointerConvertible): number;

declare function audit_set_policy(policy: interop.PointerConvertible): number;

declare function audit_get_qctrl(qctrl: interop.PointerConvertible, sz: number): number;

declare function audit_set_qctrl(qctrl: interop.PointerConvertible, sz: number): number;

declare function audit_get_sflags(flags: interop.PointerConvertible): number;

declare function audit_set_sflags(flags: number): number;

declare function audit_get_sflags_mask(which: string, mask: interop.PointerConvertible): number;

declare function audit_set_sflags_mask(which: string, mask: number): number;

declare function audit_get_sinfo_addr(aia: interop.PointerConvertible, sz: number): number;

declare function audit_get_stat(stats: interop.PointerConvertible, sz: number): number;

declare function audit_set_stat(stats: interop.PointerConvertible, sz: number): number;

declare function audit_send_trigger(trigger: interop.PointerConvertible): number;

declare function audit_get_ctlmode(mode: interop.PointerConvertible, sz: number): number;

declare function audit_get_expire_after(expire: interop.PointerConvertible, sz: number): number;

declare function au_sdev_open(flags: number): interop.Pointer;

declare function au_sdev_close(ash: interop.PointerConvertible): number;

declare function au_sdev_fd(ash: interop.PointerConvertible): number;

declare function au_sdev_read_aia(ash: interop.PointerConvertible, event: interop.PointerConvertible, aia_p: interop.PointerConvertible): number;

declare function backtrace(p1: interop.PointerConvertible, __size: number): number;

declare function backtrace_from_fp(startfp: interop.PointerConvertible, array: interop.PointerConvertible, size: number): number;

declare function backtrace_symbols(p1: interop.PointerConvertible, __size: number): interop.Pointer;

declare function backtrace_symbols_fd(p1: interop.PointerConvertible, __size: number, p3: number): void;

declare function backtrace_image_offsets(array: interop.PointerConvertible, image_offsets: interop.PointerConvertible, size: number): void;

declare function backtrace_async(array: interop.PointerConvertible, length: number, task_id: interop.PointerConvertible): number;

declare function getfsent(): interop.Pointer;

declare function getfsspec(p1: string): interop.Pointer;

declare function getfsfile(p1: string): interop.Pointer;

declare function setfsent(): number;

declare function endfsent(): void;

declare function mbr_uid_to_uuid(uid: number, uu: unknown /* const array */): number;

declare function mbr_gid_to_uuid(gid: number, uu: unknown /* const array */): number;

declare function mbr_sid_to_uuid(sid: interop.PointerConvertible, uu: unknown /* const array */): number;

declare function mbr_identifier_to_uuid(id_type: number, identifier: interop.PointerConvertible, identifier_size: number, uu: unknown /* const array */): number;

declare function mbr_uuid_to_id(uu: unknown /* const array */, uid_or_gid: interop.PointerConvertible, id_type: interop.PointerConvertible): number;

declare function mbr_uuid_to_sid(uu: unknown /* const array */, sid: interop.PointerConvertible): number;

declare function mbr_sid_to_string(sid: interop.PointerConvertible, string: string): number;

declare function mbr_string_to_sid(string: string, sid: interop.PointerConvertible): number;

declare function mbr_check_membership(user: unknown /* const array */, group: unknown /* const array */, ismember: interop.PointerConvertible): number;

declare function mbr_check_service_membership(user: unknown /* const array */, servicename: string, ismember: interop.PointerConvertible): number;

declare function addch(p1: number): number;

declare function addchnstr(p1: interop.PointerConvertible, p2: number): number;

declare function addchstr(p1: interop.PointerConvertible): number;

declare function addnstr(p1: string, p2: number): number;

declare function addstr(p1: string): number;

declare function attroff(p1: number): number;

declare function attron(p1: number): number;

declare function attrset(p1: number): number;

declare function attr_get(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function attr_off(p1: number, p2: interop.PointerConvertible): number;

declare function attr_on(p1: number, p2: interop.PointerConvertible): number;

declare function attr_set(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function baudrate(): number;

declare function beep(): number;

declare function bkgd(p1: number): number;

declare function bkgdset(p1: number): void;

declare function border(p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): number;

declare function box(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function can_change_color(): boolean;

declare function cbreak(): number;

declare function chgat(p1: number, p2: number, p3: number, p4: interop.PointerConvertible): number;

declare function clear(): number;

declare function clearok(p1: interop.PointerConvertible, p2: boolean): number;

declare function clrtobot(): number;

declare function clrtoeol(): number;

declare function color_content(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function color_set(p1: number, p2: interop.PointerConvertible): number;

declare function COLOR_PAIR(p1: number): number;

declare function copywin(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): number;

declare function curs_set(p1: number): number;

declare function def_prog_mode(): number;

declare function def_shell_mode(): number;

declare function delay_output(p1: number): number;

declare function delch(): number;

declare function delscreen(p1: interop.PointerConvertible): void;

declare function delwin(p1: interop.PointerConvertible): number;

declare function deleteln(): number;

declare function derwin(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number): interop.Pointer;

declare function doupdate(): number;

declare function dupwin(p1: interop.PointerConvertible): interop.Pointer;

declare function echo(): number;

declare function echochar(p1: number): number;

declare function erase(): number;

declare function endwin(): number;

declare function erasechar(): number;

declare function filter(): void;

declare function flash(): number;

declare function flushinp(): number;

declare function getbkgd(p1: interop.PointerConvertible): number;

declare function getch(): number;

declare function getnstr(p1: string, p2: number): number;

declare function getstr(p1: string): number;

declare function getwin(p1: interop.PointerConvertible): interop.Pointer;

declare function halfdelay(p1: number): number;

declare function has_colors(): boolean;

declare function has_ic(): boolean;

declare function has_il(): boolean;

declare function hline(p1: number, p2: number): number;

declare function idcok(p1: interop.PointerConvertible, p2: boolean): void;

declare function idlok(p1: interop.PointerConvertible, p2: boolean): number;

declare function immedok(p1: interop.PointerConvertible, p2: boolean): void;

declare function inch(): number;

declare function inchnstr(p1: interop.PointerConvertible, p2: number): number;

declare function inchstr(p1: interop.PointerConvertible): number;

declare function initscr(): interop.Pointer;

declare function init_color(p1: number, p2: number, p3: number, p4: number): number;

declare function init_pair(p1: number, p2: number, p3: number): number;

declare function innstr(p1: string, p2: number): number;

declare function insch(p1: number): number;

declare function insdelln(p1: number): number;

declare function insertln(): number;

declare function insnstr(p1: string, p2: number): number;

declare function insstr(p1: string): number;

declare function instr(p1: string): number;

declare function intrflush(p1: interop.PointerConvertible, p2: boolean): number;

declare function isendwin(): boolean;

declare function is_linetouched(p1: interop.PointerConvertible, p2: number): boolean;

declare function is_wintouched(p1: interop.PointerConvertible): boolean;

declare function keyname(p1: number): string;

declare function keypad(p1: interop.PointerConvertible, p2: boolean): number;

declare function killchar(): number;

declare function leaveok(p1: interop.PointerConvertible, p2: boolean): number;

declare function longname(): string;

declare function meta(p1: interop.PointerConvertible, p2: boolean): number;

declare function move(p1: number, p2: number): number;

declare function mvaddch(p1: number, p2: number, p3: number): number;

declare function mvaddchnstr(p1: number, p2: number, p3: interop.PointerConvertible, p4: number): number;

declare function mvaddchstr(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function mvaddnstr(p1: number, p2: number, p3: string, p4: number): number;

declare function mvaddstr(p1: number, p2: number, p3: string): number;

declare function mvchgat(p1: number, p2: number, p3: number, p4: number, p5: number, p6: interop.PointerConvertible): number;

declare function mvcur(p1: number, p2: number, p3: number, p4: number): number;

declare function mvdelch(p1: number, p2: number): number;

declare function mvderwin(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function mvgetch(p1: number, p2: number): number;

declare function mvgetnstr(p1: number, p2: number, p3: string, p4: number): number;

declare function mvgetstr(p1: number, p2: number, p3: string): number;

declare function mvhline(p1: number, p2: number, p3: number, p4: number): number;

declare function mvinch(p1: number, p2: number): number;

declare function mvinchnstr(p1: number, p2: number, p3: interop.PointerConvertible, p4: number): number;

declare function mvinchstr(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function mvinnstr(p1: number, p2: number, p3: string, p4: number): number;

declare function mvinsch(p1: number, p2: number, p3: number): number;

declare function mvinsnstr(p1: number, p2: number, p3: string, p4: number): number;

declare function mvinsstr(p1: number, p2: number, p3: string): number;

declare function mvinstr(p1: number, p2: number, p3: string): number;

declare function mvprintw(p1: number, p2: number, p3: string): number;

declare function mvscanw(p1: number, p2: number, p3: string): number;

declare function mvvline(p1: number, p2: number, p3: number, p4: number): number;

declare function mvwaddch(p1: interop.PointerConvertible, p2: number, p3: number, p4: number): number;

declare function mvwaddchnstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible, p5: number): number;

declare function mvwaddchstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible): number;

declare function mvwaddnstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: string, p5: number): number;

declare function mvwaddstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: string): number;

declare function mvwchgat(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number, p6: number, p7: interop.PointerConvertible): number;

declare function mvwdelch(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function mvwgetch(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function mvwgetnstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: string, p5: number): number;

declare function mvwgetstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: string): number;

declare function mvwhline(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number): number;

declare function mvwin(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function mvwinch(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function mvwinchnstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible, p5: number): number;

declare function mvwinchstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible): number;

declare function mvwinnstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: string, p5: number): number;

declare function mvwinsch(p1: interop.PointerConvertible, p2: number, p3: number, p4: number): number;

declare function mvwinsnstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: string, p5: number): number;

declare function mvwinsstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: string): number;

declare function mvwinstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: string): number;

declare function mvwprintw(p1: interop.PointerConvertible, p2: number, p3: number, p4: string): number;

declare function mvwscanw(p1: interop.PointerConvertible, p2: number, p3: number, p4: string): number;

declare function mvwvline(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number): number;

declare function napms(p1: number): number;

declare function newpad(p1: number, p2: number): interop.Pointer;

declare function newterm(p1: string, p2: interop.PointerConvertible, p3: interop.PointerConvertible): interop.Pointer;

declare function newwin(p1: number, p2: number, p3: number, p4: number): interop.Pointer;

declare function nl(): number;

declare function nocbreak(): number;

declare function nodelay(p1: interop.PointerConvertible, p2: boolean): number;

declare function noecho(): number;

declare function nonl(): number;

declare function noqiflush(): void;

declare function noraw(): number;

declare function notimeout(p1: interop.PointerConvertible, p2: boolean): number;

declare function overlay(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function overwrite(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pair_content(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function PAIR_NUMBER(p1: number): number;

declare function pechochar(p1: interop.PointerConvertible, p2: number): number;

declare function pnoutrefresh(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): number;

declare function prefresh(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): number;

declare function printw(p1: string): number;

declare function putwin(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function qiflush(): void;

declare function raw(): number;

declare function redrawwin(p1: interop.PointerConvertible): number;

declare function refresh(): number;

declare function resetty(): number;

declare function reset_prog_mode(): number;

declare function reset_shell_mode(): number;

declare function ripoffline(p1: number, p2: (p1: interop.PointerConvertible, p2: number) => number): number;

declare function savetty(): number;

declare function scanw(p1: string): number;

declare function scr_dump(p1: string): number;

declare function scr_init(p1: string): number;

declare function scrl(p1: number): number;

declare function scroll(p1: interop.PointerConvertible): number;

declare function scrollok(p1: interop.PointerConvertible, p2: boolean): number;

declare function scr_restore(p1: string): number;

declare function scr_set(p1: string): number;

declare function setscrreg(p1: number, p2: number): number;

declare function set_term(p1: interop.PointerConvertible): interop.Pointer;

declare function slk_attroff(p1: number): number;

declare function slk_attr_off(p1: number, p2: interop.PointerConvertible): number;

declare function slk_attron(p1: number): number;

declare function slk_attr_on(p1: number, p2: interop.PointerConvertible): number;

declare function slk_attrset(p1: number): number;

declare function slk_attr(): number;

declare function slk_attr_set(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function slk_clear(): number;

declare function slk_color(p1: number): number;

declare function slk_init(p1: number): number;

declare function slk_label(p1: number): string;

declare function slk_noutrefresh(): number;

declare function slk_refresh(): number;

declare function slk_restore(): number;

declare function slk_set(p1: number, p2: string, p3: number): number;

declare function slk_touch(): number;

declare function standout(): number;

declare function standend(): number;

declare function start_color(): number;

declare function subpad(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number): interop.Pointer;

declare function subwin(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number): interop.Pointer;

declare function syncok(p1: interop.PointerConvertible, p2: boolean): number;

declare function termattrs(): number;

declare function termname(): string;

declare function timeout(p1: number): void;

declare function touchline(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function touchwin(p1: interop.PointerConvertible): number;

declare function typeahead(p1: number): number;

declare function ungetch(p1: number): number;

declare function untouchwin(p1: interop.PointerConvertible): number;

declare function use_env(p1: boolean): void;

declare function use_tioctl(p1: boolean): void;

declare function vidattr(p1: number): number;

declare function vidputs(p1: number, p2: (p1: number) => number): number;

declare function vline(p1: number, p2: number): number;

declare function vwprintw(p1: interop.PointerConvertible, p2: string, p3: string): number;

declare function vw_printw(p1: interop.PointerConvertible, p2: string, p3: string): number;

declare function vwscanw(p1: interop.PointerConvertible, p2: string, p3: string): number;

declare function vw_scanw(p1: interop.PointerConvertible, p2: string, p3: string): number;

declare function waddch(p1: interop.PointerConvertible, p2: number): number;

declare function waddchnstr(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function waddchstr(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function waddnstr(p1: interop.PointerConvertible, p2: string, p3: number): number;

declare function waddstr(p1: interop.PointerConvertible, p2: string): number;

declare function wattron(p1: interop.PointerConvertible, p2: number): number;

declare function wattroff(p1: interop.PointerConvertible, p2: number): number;

declare function wattrset(p1: interop.PointerConvertible, p2: number): number;

declare function wattr_get(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function wattr_on(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible): number;

declare function wattr_off(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible): number;

declare function wattr_set(p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible): number;

declare function wbkgd(p1: interop.PointerConvertible, p2: number): number;

declare function wbkgdset(p1: interop.PointerConvertible, p2: number): void;

declare function wborder(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): number;

declare function wchgat(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: interop.PointerConvertible): number;

declare function wclear(p1: interop.PointerConvertible): number;

declare function wclrtobot(p1: interop.PointerConvertible): number;

declare function wclrtoeol(p1: interop.PointerConvertible): number;

declare function wcolor_set(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible): number;

declare function wcursyncup(p1: interop.PointerConvertible): void;

declare function wdelch(p1: interop.PointerConvertible): number;

declare function wdeleteln(p1: interop.PointerConvertible): number;

declare function wechochar(p1: interop.PointerConvertible, p2: number): number;

declare function werase(p1: interop.PointerConvertible): number;

declare function wgetch(p1: interop.PointerConvertible): number;

declare function wgetnstr(p1: interop.PointerConvertible, p2: string, p3: number): number;

declare function wgetstr(p1: interop.PointerConvertible, p2: string): number;

declare function whline(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function winch(p1: interop.PointerConvertible): number;

declare function winchnstr(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function winchstr(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function winnstr(p1: interop.PointerConvertible, p2: string, p3: number): number;

declare function winsch(p1: interop.PointerConvertible, p2: number): number;

declare function winsdelln(p1: interop.PointerConvertible, p2: number): number;

declare function winsertln(p1: interop.PointerConvertible): number;

declare function winsnstr(p1: interop.PointerConvertible, p2: string, p3: number): number;

declare function winsstr(p1: interop.PointerConvertible, p2: string): number;

declare function winstr(p1: interop.PointerConvertible, p2: string): number;

declare function wmove(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function wnoutrefresh(p1: interop.PointerConvertible): number;

declare function wprintw(p1: interop.PointerConvertible, p2: string): number;

declare function wredrawln(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function wrefresh(p1: interop.PointerConvertible): number;

declare function wscanw(p1: interop.PointerConvertible, p2: string): number;

declare function wscrl(p1: interop.PointerConvertible, p2: number): number;

declare function wsetscrreg(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function wstandout(p1: interop.PointerConvertible): number;

declare function wstandend(p1: interop.PointerConvertible): number;

declare function wsyncdown(p1: interop.PointerConvertible): void;

declare function wsyncup(p1: interop.PointerConvertible): void;

declare function wtimeout(p1: interop.PointerConvertible, p2: number): void;

declare function wtouchln(p1: interop.PointerConvertible, p2: number, p3: number, p4: number): number;

declare function wvline(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function _nc_tiparm(p1: number, p2: string): string;

declare function tigetflag(p1: string): number;

declare function tigetnum(p1: string): number;

declare function tigetstr(p1: string): string;

declare function putp(p1: string): number;

declare function tparm(p1: string): string;

declare function tiparm(p1: string): string;

declare function tiparm_s(p1: number, p2: number, p3: string): string;

declare function getattrs(p1: interop.PointerConvertible): number;

declare function getcurx(p1: interop.PointerConvertible): number;

declare function getcury(p1: interop.PointerConvertible): number;

declare function getbegx(p1: interop.PointerConvertible): number;

declare function getbegy(p1: interop.PointerConvertible): number;

declare function getmaxx(p1: interop.PointerConvertible): number;

declare function getmaxy(p1: interop.PointerConvertible): number;

declare function getparx(p1: interop.PointerConvertible): number;

declare function getpary(p1: interop.PointerConvertible): number;

declare function is_term_resized(p1: number, p2: number): boolean;

declare function keybound(p1: number, p2: number): string;

declare function curses_version(): string;

declare function assume_default_colors(p1: number, p2: number): number;

declare function define_key(p1: string, p2: number): number;

declare function get_escdelay(): number;

declare function key_defined(p1: string): number;

declare function keyok(p1: number, p2: boolean): number;

declare function resize_term(p1: number, p2: number): number;

declare function resizeterm(p1: number, p2: number): number;

declare function set_escdelay(p1: number): number;

declare function set_tabsize(p1: number): number;

declare function use_default_colors(): number;

declare function use_extended_names(p1: boolean): number;

declare function use_legacy_coding(p1: number): number;

declare function use_screen(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number, p3: interop.PointerConvertible): number;

declare function use_window(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number, p3: interop.PointerConvertible): number;

declare function wresize(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function nofilter(): void;

declare function wgetparent(p1: interop.PointerConvertible): interop.Pointer;

declare function is_cleared(p1: interop.PointerConvertible): boolean;

declare function is_idcok(p1: interop.PointerConvertible): boolean;

declare function is_idlok(p1: interop.PointerConvertible): boolean;

declare function is_immedok(p1: interop.PointerConvertible): boolean;

declare function is_keypad(p1: interop.PointerConvertible): boolean;

declare function is_leaveok(p1: interop.PointerConvertible): boolean;

declare function is_nodelay(p1: interop.PointerConvertible): boolean;

declare function is_notimeout(p1: interop.PointerConvertible): boolean;

declare function is_pad(p1: interop.PointerConvertible): boolean;

declare function is_scrollok(p1: interop.PointerConvertible): boolean;

declare function is_subwin(p1: interop.PointerConvertible): boolean;

declare function is_syncok(p1: interop.PointerConvertible): boolean;

declare function wgetdelay(p1: interop.PointerConvertible): number;

declare function wgetscrreg(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function addch(p1: number): number;

declare function addchnstr(p1: interop.PointerConvertible, p2: number): number;

declare function addchstr(p1: interop.PointerConvertible): number;

declare function addnstr(p1: string, p2: number): number;

declare function addstr(p1: string): number;

declare function attroff(p1: number): number;

declare function attron(p1: number): number;

declare function attrset(p1: number): number;

declare function attr_get(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function attr_off(p1: number, p2: interop.PointerConvertible): number;

declare function attr_on(p1: number, p2: interop.PointerConvertible): number;

declare function attr_set(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function bkgd(p1: number): number;

declare function bkgdset(p1: number): void;

declare function border(p1: number, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number): number;

declare function box(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function chgat(p1: number, p2: number, p3: number, p4: interop.PointerConvertible): number;

declare function color_content(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function color_set(p1: number, p2: interop.PointerConvertible): number;

declare function copywin(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): number;

declare function delay_output(p1: number): number;

declare function deleteln(): number;

declare function derwin(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number): interop.Pointer;

declare function doupdate(): number;

declare function dupwin(p1: interop.PointerConvertible): interop.Pointer;

declare function echochar(p1: number): number;

declare function endwin(): number;

declare function flushinp(): number;

declare function getbkgd(p1: interop.PointerConvertible): number;

declare function getch(): number;

declare function getnstr(p1: string, p2: number): number;

declare function getstr(p1: string): number;

declare function getwin(p1: interop.PointerConvertible): interop.Pointer;

declare function hline(p1: number, p2: number): number;

declare function inch(): number;

declare function inchnstr(p1: interop.PointerConvertible, p2: number): number;

declare function inchstr(p1: interop.PointerConvertible): number;

declare function initscr(): interop.Pointer;

declare function init_color(p1: number, p2: number, p3: number, p4: number): number;

declare function init_pair(p1: number, p2: number, p3: number): number;

declare function innstr(p1: string, p2: number): number;

declare function insch(p1: number): number;

declare function insdelln(p1: number): number;

declare function insertln(): number;

declare function insnstr(p1: string, p2: number): number;

declare function insstr(p1: string): number;

declare function instr(p1: string): number;

declare function intrflush(p1: interop.PointerConvertible, p2: boolean): number;

declare function keypad(p1: interop.PointerConvertible, p2: boolean): number;

declare function mvaddch(p1: number, p2: number, p3: number): number;

declare function mvaddchnstr(p1: number, p2: number, p3: interop.PointerConvertible, p4: number): number;

declare function mvaddchstr(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function mvaddnstr(p1: number, p2: number, p3: string, p4: number): number;

declare function mvaddstr(p1: number, p2: number, p3: string): number;

declare function mvchgat(p1: number, p2: number, p3: number, p4: number, p5: number, p6: interop.PointerConvertible): number;

declare function mvcur(p1: number, p2: number, p3: number, p4: number): number;

declare function mvderwin(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function mvgetch(p1: number, p2: number): number;

declare function mvgetnstr(p1: number, p2: number, p3: string, p4: number): number;

declare function mvgetstr(p1: number, p2: number, p3: string): number;

declare function mvhline(p1: number, p2: number, p3: number, p4: number): number;

declare function mvinch(p1: number, p2: number): number;

declare function mvinchnstr(p1: number, p2: number, p3: interop.PointerConvertible, p4: number): number;

declare function mvinchstr(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function mvinnstr(p1: number, p2: number, p3: string, p4: number): number;

declare function mvinsch(p1: number, p2: number, p3: number): number;

declare function mvinsnstr(p1: number, p2: number, p3: string, p4: number): number;

declare function mvinsstr(p1: number, p2: number, p3: string): number;

declare function mvinstr(p1: number, p2: number, p3: string): number;

declare function mvprintw(p1: number, p2: number, p3: string): number;

declare function mvscanw(p1: number, p2: number, p3: string): number;

declare function mvvline(p1: number, p2: number, p3: number, p4: number): number;

declare function mvwaddch(p1: interop.PointerConvertible, p2: number, p3: number, p4: number): number;

declare function mvwaddchnstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible, p5: number): number;

declare function mvwaddchstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible): number;

declare function mvwaddnstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: string, p5: number): number;

declare function mvwaddstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: string): number;

declare function mvwchgat(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number, p6: number, p7: interop.PointerConvertible): number;

declare function mvwgetch(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function mvwgetnstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: string, p5: number): number;

declare function mvwgetstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: string): number;

declare function mvwhline(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number): number;

declare function mvwin(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function mvwinch(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function mvwinchnstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible, p5: number): number;

declare function mvwinchstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible): number;

declare function mvwinnstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: string, p5: number): number;

declare function mvwinsch(p1: interop.PointerConvertible, p2: number, p3: number, p4: number): number;

declare function mvwinsnstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: string, p5: number): number;

declare function mvwinsstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: string): number;

declare function mvwinstr(p1: interop.PointerConvertible, p2: number, p3: number, p4: string): number;

declare function mvwprintw(p1: interop.PointerConvertible, p2: number, p3: number, p4: string): number;

declare function mvwscanw(p1: interop.PointerConvertible, p2: number, p3: number, p4: string): number;

declare function mvwvline(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number): number;

declare function newpad(p1: number, p2: number): interop.Pointer;

declare function newterm(p1: string, p2: interop.PointerConvertible, p3: interop.PointerConvertible): interop.Pointer;

declare function newwin(p1: number, p2: number, p3: number, p4: number): interop.Pointer;

declare function overlay(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function overwrite(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function pair_content(p1: number, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function pechochar(p1: interop.PointerConvertible, p2: number): number;

declare function pnoutrefresh(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): number;

declare function prefresh(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number): number;

declare function printw(p1: string): number;

declare function putwin(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function redrawwin(p1: interop.PointerConvertible): number;

declare function refresh(): number;

declare function scanw(p1: string): number;

declare function scr_dump(p1: string): number;

declare function scr_init(p1: string): number;

declare function scrl(p1: number): number;

declare function scroll(p1: interop.PointerConvertible): number;

declare function scrollok(p1: interop.PointerConvertible, p2: boolean): number;

declare function scr_restore(p1: string): number;

declare function scr_set(p1: string): number;

declare function set_term(p1: interop.PointerConvertible): interop.Pointer;

declare function slk_attroff(p1: number): number;

declare function slk_attr_off(p1: number, p2: interop.PointerConvertible): number;

declare function slk_attron(p1: number): number;

declare function slk_attr_on(p1: number, p2: interop.PointerConvertible): number;

declare function slk_attrset(p1: number): number;

declare function slk_attr(): number;

declare function slk_attr_set(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function slk_clear(): number;

declare function slk_color(p1: number): number;

declare function slk_init(p1: number): number;

declare function slk_label(p1: number): string;

declare function slk_noutrefresh(): number;

declare function slk_refresh(): number;

declare function slk_restore(): number;

declare function slk_set(p1: number, p2: string, p3: number): number;

declare function slk_touch(): number;

declare function standout(): number;

declare function standend(): number;

declare function start_color(): number;

declare function subpad(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number): interop.Pointer;

declare function subwin(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number): interop.Pointer;

declare function ungetch(p1: number): number;

declare function vidattr(p1: number): number;

declare function vidputs(p1: number, p2: (p1: number) => number): number;

declare function vline(p1: number, p2: number): number;

declare function vwprintw(p1: interop.PointerConvertible, p2: string, p3: string): number;

declare function vw_printw(p1: interop.PointerConvertible, p2: string, p3: string): number;

declare function vwscanw(p1: interop.PointerConvertible, p2: string, p3: string): number;

declare function vw_scanw(p1: interop.PointerConvertible, p2: string, p3: string): number;

declare function waddch(p1: interop.PointerConvertible, p2: number): number;

declare function waddchnstr(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function waddchstr(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function waddnstr(p1: interop.PointerConvertible, p2: string, p3: number): number;

declare function waddstr(p1: interop.PointerConvertible, p2: string): number;

declare function wattron(p1: interop.PointerConvertible, p2: number): number;

declare function wattroff(p1: interop.PointerConvertible, p2: number): number;

declare function wattrset(p1: interop.PointerConvertible, p2: number): number;

declare function wattr_get(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function wattr_on(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible): number;

declare function wattr_off(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible): number;

declare function wattr_set(p1: interop.PointerConvertible, p2: number, p3: number, p4: interop.PointerConvertible): number;

declare function wbkgd(p1: interop.PointerConvertible, p2: number): number;

declare function wbkgdset(p1: interop.PointerConvertible, p2: number): void;

declare function wborder(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: number, p6: number, p7: number, p8: number, p9: number): number;

declare function wchgat(p1: interop.PointerConvertible, p2: number, p3: number, p4: number, p5: interop.PointerConvertible): number;

declare function wclear(p1: interop.PointerConvertible): number;

declare function wcolor_set(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible): number;

declare function wdeleteln(p1: interop.PointerConvertible): number;

declare function wechochar(p1: interop.PointerConvertible, p2: number): number;

declare function wgetch(p1: interop.PointerConvertible): number;

declare function wgetnstr(p1: interop.PointerConvertible, p2: string, p3: number): number;

declare function wgetstr(p1: interop.PointerConvertible, p2: string): number;

declare function whline(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function winch(p1: interop.PointerConvertible): number;

declare function winchnstr(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): number;

declare function winchstr(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function winnstr(p1: interop.PointerConvertible, p2: string, p3: number): number;

declare function winsch(p1: interop.PointerConvertible, p2: number): number;

declare function winsdelln(p1: interop.PointerConvertible, p2: number): number;

declare function winsertln(p1: interop.PointerConvertible): number;

declare function winsnstr(p1: interop.PointerConvertible, p2: string, p3: number): number;

declare function winsstr(p1: interop.PointerConvertible, p2: string): number;

declare function winstr(p1: interop.PointerConvertible, p2: string): number;

declare function wnoutrefresh(p1: interop.PointerConvertible): number;

declare function wprintw(p1: interop.PointerConvertible, p2: string): number;

declare function wredrawln(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function wrefresh(p1: interop.PointerConvertible): number;

declare function wscanw(p1: interop.PointerConvertible, p2: string): number;

declare function wscrl(p1: interop.PointerConvertible, p2: number): number;

declare function wstandout(p1: interop.PointerConvertible): number;

declare function wstandend(p1: interop.PointerConvertible): number;

declare function wvline(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function putp(p1: string): number;

declare function is_term_resized(p1: number, p2: number): boolean;

declare function assume_default_colors(p1: number, p2: number): number;

declare function resize_term(p1: number, p2: number): number;

declare function resizeterm(p1: number, p2: number): number;

declare function use_default_colors(): number;

declare function use_screen(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number, p3: interop.PointerConvertible): number;

declare function use_window(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number, p3: interop.PointerConvertible): number;

declare function wresize(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function wgetparent(p1: interop.PointerConvertible): interop.Pointer;

declare function is_cleared(p1: interop.PointerConvertible): boolean;

declare function is_idcok(p1: interop.PointerConvertible): boolean;

declare function is_idlok(p1: interop.PointerConvertible): boolean;

declare function is_immedok(p1: interop.PointerConvertible): boolean;

declare function is_keypad(p1: interop.PointerConvertible): boolean;

declare function is_leaveok(p1: interop.PointerConvertible): boolean;

declare function is_nodelay(p1: interop.PointerConvertible): boolean;

declare function is_notimeout(p1: interop.PointerConvertible): boolean;

declare function is_pad(p1: interop.PointerConvertible): boolean;

declare function is_scrollok(p1: interop.PointerConvertible): boolean;

declare function is_subwin(p1: interop.PointerConvertible): boolean;

declare function is_syncok(p1: interop.PointerConvertible): boolean;

declare function wgetdelay(p1: interop.PointerConvertible): number;

declare function wgetscrreg(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function has_mouse(): boolean;

declare function getmouse(p1: interop.PointerConvertible): number;

declare function ungetmouse(p1: interop.PointerConvertible): number;

declare function mousemask(p1: number, p2: interop.PointerConvertible): number;

declare function wenclose(p1: interop.PointerConvertible, p2: number, p3: number): boolean;

declare function mouseinterval(p1: number): number;

declare function wmouse_trafo(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: boolean): boolean;

declare function mouse_trafo(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: boolean): boolean;

declare function mcprint(p1: string, p2: number): number;

declare function has_key(p1: number): number;

declare function unctrl(p1: number): string;

declare function new_fieldtype(field_check: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => boolean, char_check: (p1: number, p2: interop.PointerConvertible) => boolean): interop.Pointer;

declare function link_fieldtype(p1: interop.PointerConvertible, p2: interop.PointerConvertible): interop.Pointer;

declare function free_fieldtype(p1: interop.PointerConvertible): number;

declare function set_fieldtype_arg(p1: interop.PointerConvertible, make_arg: (p1: interop.PointerConvertible) => interop.Pointer, copy_arg: (p1: interop.PointerConvertible) => interop.Pointer, free_arg: (p1: interop.PointerConvertible) => void): number;

declare function set_fieldtype_choice(p1: interop.PointerConvertible, next_choice: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => boolean, prev_choice: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => boolean): number;

declare function new_field(p1: number, p2: number, p3: number, p4: number, p5: number, p6: number): interop.Pointer;

declare function dup_field(p1: interop.PointerConvertible, p2: number, p3: number): interop.Pointer;

declare function link_field(p1: interop.PointerConvertible, p2: number, p3: number): interop.Pointer;

declare function free_field(p1: interop.PointerConvertible): number;

declare function field_info(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible, p7: interop.PointerConvertible): number;

declare function dynamic_field_info(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function set_max_field(p1: interop.PointerConvertible, p2: number): number;

declare function move_field(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function set_field_type(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function set_new_page(p1: interop.PointerConvertible, p2: boolean): number;

declare function set_field_just(p1: interop.PointerConvertible, p2: number): number;

declare function field_just(p1: interop.PointerConvertible): number;

declare function set_field_fore(p1: interop.PointerConvertible, p2: number): number;

declare function set_field_back(p1: interop.PointerConvertible, p2: number): number;

declare function set_field_pad(p1: interop.PointerConvertible, p2: number): number;

declare function field_pad(p1: interop.PointerConvertible): number;

declare function set_field_buffer(p1: interop.PointerConvertible, p2: number, p3: string): number;

declare function set_field_status(p1: interop.PointerConvertible, p2: boolean): number;

declare function set_field_userptr(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function set_field_opts(p1: interop.PointerConvertible, p2: number): number;

declare function field_opts_on(p1: interop.PointerConvertible, p2: number): number;

declare function field_opts_off(p1: interop.PointerConvertible, p2: number): number;

declare function field_fore(p1: interop.PointerConvertible): number;

declare function field_back(p1: interop.PointerConvertible): number;

declare function new_page(p1: interop.PointerConvertible): boolean;

declare function field_status(p1: interop.PointerConvertible): boolean;

declare function field_arg(p1: interop.PointerConvertible): interop.Pointer;

declare function field_userptr(p1: interop.PointerConvertible): interop.Pointer;

declare function field_type(p1: interop.PointerConvertible): interop.Pointer;

declare function field_buffer(p1: interop.PointerConvertible, p2: number): string;

declare function field_opts(p1: interop.PointerConvertible): number;

declare function new_form(p1: interop.PointerConvertible): interop.Pointer;

declare function form_fields(p1: interop.PointerConvertible): interop.Pointer;

declare function current_field(p1: interop.PointerConvertible): interop.Pointer;

declare function form_win(p1: interop.PointerConvertible): interop.Pointer;

declare function form_sub(p1: interop.PointerConvertible): interop.Pointer;

declare function form_init(p1: interop.PointerConvertible): (p1: interop.PointerConvertible) => void;

declare function form_term(p1: interop.PointerConvertible): (p1: interop.PointerConvertible) => void;

declare function field_init(p1: interop.PointerConvertible): (p1: interop.PointerConvertible) => void;

declare function field_term(p1: interop.PointerConvertible): (p1: interop.PointerConvertible) => void;

declare function free_form(p1: interop.PointerConvertible): number;

declare function set_form_fields(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function field_count(p1: interop.PointerConvertible): number;

declare function set_form_win(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function set_form_sub(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function set_current_field(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function field_index(p1: interop.PointerConvertible): number;

declare function set_form_page(p1: interop.PointerConvertible, p2: number): number;

declare function form_page(p1: interop.PointerConvertible): number;

declare function scale_form(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function set_form_init(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible) => void): number;

declare function set_form_term(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible) => void): number;

declare function set_field_init(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible) => void): number;

declare function set_field_term(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible) => void): number;

declare function post_form(p1: interop.PointerConvertible): number;

declare function unpost_form(p1: interop.PointerConvertible): number;

declare function pos_form_cursor(p1: interop.PointerConvertible): number;

declare function form_driver(p1: interop.PointerConvertible, p2: number): number;

declare function set_form_userptr(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function set_form_opts(p1: interop.PointerConvertible, p2: number): number;

declare function form_opts_on(p1: interop.PointerConvertible, p2: number): number;

declare function form_opts_off(p1: interop.PointerConvertible, p2: number): number;

declare function form_request_by_name(p1: string): number;

declare function form_request_name(p1: number): string;

declare function form_userptr(p1: interop.PointerConvertible): interop.Pointer;

declare function form_opts(p1: interop.PointerConvertible): number;

declare function data_ahead(p1: interop.PointerConvertible): boolean;

declare function data_behind(p1: interop.PointerConvertible): boolean;

declare function menu_items(p1: interop.PointerConvertible): interop.Pointer;

declare function current_item(p1: interop.PointerConvertible): interop.Pointer;

declare function new_item(p1: string, p2: string): interop.Pointer;

declare function new_menu(p1: interop.PointerConvertible): interop.Pointer;

declare function item_opts(p1: interop.PointerConvertible): number;

declare function menu_opts(p1: interop.PointerConvertible): number;

declare function item_init(p1: interop.PointerConvertible): (p1: interop.PointerConvertible) => void;

declare function item_term(p1: interop.PointerConvertible): (p1: interop.PointerConvertible) => void;

declare function menu_init(p1: interop.PointerConvertible): (p1: interop.PointerConvertible) => void;

declare function menu_term(p1: interop.PointerConvertible): (p1: interop.PointerConvertible) => void;

declare function menu_sub(p1: interop.PointerConvertible): interop.Pointer;

declare function menu_win(p1: interop.PointerConvertible): interop.Pointer;

declare function item_description(p1: interop.PointerConvertible): string;

declare function item_name(p1: interop.PointerConvertible): string;

declare function menu_mark(p1: interop.PointerConvertible): string;

declare function menu_request_name(p1: number): string;

declare function menu_pattern(p1: interop.PointerConvertible): string;

declare function menu_userptr(p1: interop.PointerConvertible): interop.Pointer;

declare function item_userptr(p1: interop.PointerConvertible): interop.Pointer;

declare function menu_back(p1: interop.PointerConvertible): number;

declare function menu_fore(p1: interop.PointerConvertible): number;

declare function menu_grey(p1: interop.PointerConvertible): number;

declare function free_item(p1: interop.PointerConvertible): number;

declare function free_menu(p1: interop.PointerConvertible): number;

declare function item_count(p1: interop.PointerConvertible): number;

declare function item_index(p1: interop.PointerConvertible): number;

declare function item_opts_off(p1: interop.PointerConvertible, p2: number): number;

declare function item_opts_on(p1: interop.PointerConvertible, p2: number): number;

declare function menu_driver(p1: interop.PointerConvertible, p2: number): number;

declare function menu_opts_off(p1: interop.PointerConvertible, p2: number): number;

declare function menu_opts_on(p1: interop.PointerConvertible, p2: number): number;

declare function menu_pad(p1: interop.PointerConvertible): number;

declare function pos_menu_cursor(p1: interop.PointerConvertible): number;

declare function post_menu(p1: interop.PointerConvertible): number;

declare function scale_menu(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): number;

declare function set_current_item(menu: interop.PointerConvertible, item: interop.PointerConvertible): number;

declare function set_item_init(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible) => void): number;

declare function set_item_opts(p1: interop.PointerConvertible, p2: number): number;

declare function set_item_term(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible) => void): number;

declare function set_item_userptr(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function set_item_value(p1: interop.PointerConvertible, p2: boolean): number;

declare function set_menu_back(p1: interop.PointerConvertible, p2: number): number;

declare function set_menu_fore(p1: interop.PointerConvertible, p2: number): number;

declare function set_menu_format(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function set_menu_grey(p1: interop.PointerConvertible, p2: number): number;

declare function set_menu_init(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible) => void): number;

declare function set_menu_items(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function set_menu_mark(p1: interop.PointerConvertible, p2: string): number;

declare function set_menu_opts(p1: interop.PointerConvertible, p2: number): number;

declare function set_menu_pad(p1: interop.PointerConvertible, p2: number): number;

declare function set_menu_pattern(p1: interop.PointerConvertible, p2: string): number;

declare function set_menu_sub(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function set_menu_term(p1: interop.PointerConvertible, p2: (p1: interop.PointerConvertible) => void): number;

declare function set_menu_userptr(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function set_menu_win(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function set_top_row(p1: interop.PointerConvertible, p2: number): number;

declare function top_row(p1: interop.PointerConvertible): number;

declare function unpost_menu(p1: interop.PointerConvertible): number;

declare function menu_request_by_name(p1: string): number;

declare function set_menu_spacing(p1: interop.PointerConvertible, p2: number, p3: number, p4: number): number;

declare function menu_spacing(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible, p4: interop.PointerConvertible): number;

declare function item_value(p1: interop.PointerConvertible): boolean;

declare function item_visible(p1: interop.PointerConvertible): boolean;

declare function menu_format(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: interop.PointerConvertible): void;

declare function panel_window(p1: interop.PointerConvertible): interop.Pointer;

declare function update_panels(): void;

declare function hide_panel(p1: interop.PointerConvertible): number;

declare function show_panel(p1: interop.PointerConvertible): number;

declare function del_panel(p1: interop.PointerConvertible): number;

declare function top_panel(p1: interop.PointerConvertible): number;

declare function bottom_panel(p1: interop.PointerConvertible): number;

declare function new_panel(p1: interop.PointerConvertible): interop.Pointer;

declare function panel_above(p1: interop.PointerConvertible): interop.Pointer;

declare function panel_below(p1: interop.PointerConvertible): interop.Pointer;

declare function set_panel_userptr(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function panel_userptr(p1: interop.PointerConvertible): interop.Pointer;

declare function move_panel(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function replace_panel(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function panel_hidden(p1: interop.PointerConvertible): number;

declare function ipsec_set_policy(p1: string, p2: number): string;

declare function ipsec_get_policylen(p1: string): number;

declare function ipsec_dump_policy(p1: string, p2: string): string;

declare function ipsec_strerror(): string;

declare function prdb_set(p1: string): void;

declare function prdb_get(): interop.Pointer;

declare function prdb_getbyname(p1: string): interop.Pointer;

declare function prdb_end(): void;

declare function acl_dup(acl: interop.PointerConvertible): interop.Pointer;

declare function acl_free(obj_p: interop.PointerConvertible): number;

declare function acl_init(count: number): interop.Pointer;

declare function acl_copy_entry(dest_d: interop.PointerConvertible, src_d: interop.PointerConvertible): number;

declare function acl_create_entry(acl_p: interop.PointerConvertible, entry_p: interop.PointerConvertible): number;

declare function acl_create_entry_np(acl_p: interop.PointerConvertible, entry_p: interop.PointerConvertible, entry_index: number): number;

declare function acl_delete_entry(acl: interop.PointerConvertible, entry_d: interop.PointerConvertible): number;

declare function acl_get_entry(acl: interop.PointerConvertible, entry_id: number, entry_p: interop.PointerConvertible): number;

declare function acl_valid(acl: interop.PointerConvertible): number;

declare function acl_valid_fd_np(fd: number, type: interop.Enum<typeof acl_type_t>, acl: interop.PointerConvertible): number;

declare function acl_valid_file_np(path: string, type: interop.Enum<typeof acl_type_t>, acl: interop.PointerConvertible): number;

declare function acl_valid_link_np(path: string, type: interop.Enum<typeof acl_type_t>, acl: interop.PointerConvertible): number;

declare function acl_add_perm(permset_d: interop.PointerConvertible, perm: interop.Enum<typeof acl_perm_t>): number;

declare function acl_calc_mask(acl_p: interop.PointerConvertible): number;

declare function acl_clear_perms(permset_d: interop.PointerConvertible): number;

declare function acl_delete_perm(permset_d: interop.PointerConvertible, perm: interop.Enum<typeof acl_perm_t>): number;

declare function acl_get_perm_np(permset_d: interop.PointerConvertible, perm: interop.Enum<typeof acl_perm_t>): number;

declare function acl_get_permset(entry_d: interop.PointerConvertible, permset_p: interop.PointerConvertible): number;

declare function acl_set_permset(entry_d: interop.PointerConvertible, permset_d: interop.PointerConvertible): number;

declare function acl_maximal_permset_mask_np(mask_p: interop.PointerConvertible): number;

declare function acl_get_permset_mask_np(entry_d: interop.PointerConvertible, mask_p: interop.PointerConvertible): number;

declare function acl_set_permset_mask_np(entry_d: interop.PointerConvertible, mask: number): number;

declare function acl_add_flag_np(flagset_d: interop.PointerConvertible, flag: interop.Enum<typeof acl_flag_t>): number;

declare function acl_clear_flags_np(flagset_d: interop.PointerConvertible): number;

declare function acl_delete_flag_np(flagset_d: interop.PointerConvertible, flag: interop.Enum<typeof acl_flag_t>): number;

declare function acl_get_flag_np(flagset_d: interop.PointerConvertible, flag: interop.Enum<typeof acl_flag_t>): number;

declare function acl_get_flagset_np(obj_p: interop.PointerConvertible, flagset_p: interop.PointerConvertible): number;

declare function acl_set_flagset_np(obj_p: interop.PointerConvertible, flagset_d: interop.PointerConvertible): number;

declare function acl_get_qualifier(entry_d: interop.PointerConvertible): interop.Pointer;

declare function acl_get_tag_type(entry_d: interop.PointerConvertible, tag_type_p: interop.PointerConvertible): number;

declare function acl_set_qualifier(entry_d: interop.PointerConvertible, tag_qualifier_p: interop.PointerConvertible): number;

declare function acl_set_tag_type(entry_d: interop.PointerConvertible, tag_type: interop.Enum<typeof acl_tag_t>): number;

declare function acl_delete_def_file(path_p: string): number;

declare function acl_get_fd(fd: number): interop.Pointer;

declare function acl_get_fd_np(fd: number, type: interop.Enum<typeof acl_type_t>): interop.Pointer;

declare function acl_get_file(path_p: string, type: interop.Enum<typeof acl_type_t>): interop.Pointer;

declare function acl_get_link_np(path_p: string, type: interop.Enum<typeof acl_type_t>): interop.Pointer;

declare function acl_set_fd(fd: number, acl: interop.PointerConvertible): number;

declare function acl_set_fd_np(fd: number, acl: interop.PointerConvertible, acl_type: interop.Enum<typeof acl_type_t>): number;

declare function acl_set_file(path_p: string, type: interop.Enum<typeof acl_type_t>, acl: interop.PointerConvertible): number;

declare function acl_set_link_np(path_p: string, type: interop.Enum<typeof acl_type_t>, acl: interop.PointerConvertible): number;

declare function acl_copy_ext(buf_p: interop.PointerConvertible, acl: interop.PointerConvertible, size: number): number;

declare function acl_copy_ext_native(buf_p: interop.PointerConvertible, acl: interop.PointerConvertible, size: number): number;

declare function acl_copy_int(buf_p: interop.PointerConvertible): interop.Pointer;

declare function acl_copy_int_native(buf_p: interop.PointerConvertible): interop.Pointer;

declare function acl_from_text(buf_p: string): interop.Pointer;

declare function acl_size(acl: interop.PointerConvertible): number;

declare function acl_to_text(acl: interop.PointerConvertible, len_p: interop.PointerConvertible): string;

declare function buf_markaged(bp: interop.PointerConvertible): void;

declare function buf_markinvalid(bp: interop.PointerConvertible): void;

declare function buf_markdelayed(bp: interop.PointerConvertible): void;

declare function buf_markclean(p1: interop.PointerConvertible): void;

declare function buf_markeintr(bp: interop.PointerConvertible): void;

declare function buf_markfua(bp: interop.PointerConvertible): void;

declare function buf_fua(bp: interop.PointerConvertible): number;

declare function buf_valid(bp: interop.PointerConvertible): number;

declare function buf_fromcache(bp: interop.PointerConvertible): number;

declare function buf_upl(bp: interop.PointerConvertible): interop.Pointer;

declare function buf_uploffset(bp: interop.PointerConvertible): number;

declare function buf_rcred(bp: interop.PointerConvertible): interop.Pointer;

declare function buf_wcred(bp: interop.PointerConvertible): interop.Pointer;

declare function buf_proc(bp: interop.PointerConvertible): interop.Pointer;

declare function buf_dirtyoff(bp: interop.PointerConvertible): number;

declare function buf_dirtyend(bp: interop.PointerConvertible): number;

declare function buf_setdirtyoff(bp: interop.PointerConvertible, p2: number): void;

declare function buf_setdirtyend(bp: interop.PointerConvertible, p2: number): void;

declare function buf_error(bp: interop.PointerConvertible): number;

declare function buf_seterror(bp: interop.PointerConvertible, p2: number): void;

declare function buf_setflags(bp: interop.PointerConvertible, flags: number): void;

declare function buf_clearflags(bp: interop.PointerConvertible, flags: number): void;

declare function buf_flags(bp: interop.PointerConvertible): number;

declare function buf_reset(bp: interop.PointerConvertible, flags: number): void;

declare function buf_map(bp: interop.PointerConvertible, io_addr: interop.PointerConvertible): number;

declare function buf_map_range(bp: interop.PointerConvertible, io_addr: interop.PointerConvertible): number;

declare function buf_map_range_with_prot(bp: interop.PointerConvertible, io_addr: interop.PointerConvertible, prot: number): number;

declare function buf_unmap(bp: interop.PointerConvertible): number;

declare function buf_unmap_range(bp: interop.PointerConvertible): number;

declare function buf_setdrvdata(bp: interop.PointerConvertible, drvdata: interop.PointerConvertible): void;

declare function buf_drvdata(bp: interop.PointerConvertible): interop.Pointer;

declare function buf_setfsprivate(bp: interop.PointerConvertible, fsprivate: interop.PointerConvertible): void;

declare function buf_fsprivate(bp: interop.PointerConvertible): interop.Pointer;

declare function buf_blkno(bp: interop.PointerConvertible): number;

declare function buf_lblkno(bp: interop.PointerConvertible): number;

declare function buf_lblksize(bp: interop.PointerConvertible): number;

declare function buf_setblkno(bp: interop.PointerConvertible, blkno: number): void;

declare function buf_setlblkno(bp: interop.PointerConvertible, lblkno: number): void;

declare function buf_setlblksize(bp: interop.PointerConvertible, lblksize: number): void;

declare function buf_count(bp: interop.PointerConvertible): number;

declare function buf_size(bp: interop.PointerConvertible): number;

declare function buf_resid(bp: interop.PointerConvertible): number;

declare function buf_setcount(bp: interop.PointerConvertible, bcount: number): void;

declare function buf_setsize(bp: interop.PointerConvertible, p2: number): void;

declare function buf_setresid(bp: interop.PointerConvertible, resid: number): void;

declare function buf_setdataptr(bp: interop.PointerConvertible, data: number): void;

declare function buf_dataptr(bp: interop.PointerConvertible): number;

declare function buf_vnode(bp: interop.PointerConvertible): interop.Pointer;

declare function buf_setvnode(bp: interop.PointerConvertible, vp: interop.PointerConvertible): void;

declare function buf_device(bp: interop.PointerConvertible): number;

declare function buf_setdevice(bp: interop.PointerConvertible, vp: interop.PointerConvertible): number;

declare function buf_strategy(devvp: interop.PointerConvertible, ap: interop.PointerConvertible): number;

declare function buf_invalblkno(vp: interop.PointerConvertible, lblkno: number, flags: number): number;

declare function buf_callback(bp: interop.PointerConvertible): interop.Pointer;

declare function buf_setcallback(bp: interop.PointerConvertible, callback: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void, transaction: interop.PointerConvertible): number;

declare function buf_setupl(bp: interop.PointerConvertible, upl: number, offset: number): number;

declare function buf_clone(bp: interop.PointerConvertible, io_offset: number, io_size: number, iodone: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void, arg: interop.PointerConvertible): interop.Pointer;

declare function buf_create_shadow(bp: interop.PointerConvertible, force_copy: number, external_storage: number, iodone: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => void, arg: interop.PointerConvertible): interop.Pointer;

declare function buf_shadow(bp: interop.PointerConvertible): number;

declare function buf_alloc(vp: interop.PointerConvertible): interop.Pointer;

declare function buf_free(bp: interop.PointerConvertible): void;

declare function buf_invalidateblks(vp: interop.PointerConvertible, flags: number, slpflag: number, slptimeo: number): number;

declare function buf_flushdirtyblks(vp: interop.PointerConvertible, wait: number, flags: number, msg: string): void;

declare function buf_iterate(vp: interop.PointerConvertible, callout: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => number, flags: number, arg: interop.PointerConvertible): void;

declare function buf_clear(bp: interop.PointerConvertible): void;

declare function buf_bawrite(bp: interop.PointerConvertible): number;

declare function buf_bdwrite(bp: interop.PointerConvertible): number;

declare function buf_bwrite(bp: interop.PointerConvertible): number;

declare function buf_biodone(bp: interop.PointerConvertible): void;

declare function buf_biowait(bp: interop.PointerConvertible): number;

declare function buf_brelse(bp: interop.PointerConvertible): void;

declare function buf_bread(vp: interop.PointerConvertible, blkno: number, size: number, cred: interop.PointerConvertible, bpp: interop.PointerConvertible): number;

declare function buf_breadn(vp: interop.PointerConvertible, blkno: number, size: number, rablks: interop.PointerConvertible, rasizes: interop.PointerConvertible, nrablks: number, cred: interop.PointerConvertible, bpp: interop.PointerConvertible): number;

declare function buf_meta_bread(vp: interop.PointerConvertible, blkno: number, size: number, cred: interop.PointerConvertible, bpp: interop.PointerConvertible): number;

declare function buf_meta_breadn(vp: interop.PointerConvertible, blkno: number, size: number, rablks: interop.PointerConvertible, rasizes: interop.PointerConvertible, nrablks: number, cred: interop.PointerConvertible, bpp: interop.PointerConvertible): number;

declare function minphys(bp: interop.PointerConvertible): number;

declare function physio(f_strategy: (p1: interop.PointerConvertible) => void, bp: interop.PointerConvertible, dev: number, flags: number, f_minphys: (p1: interop.PointerConvertible) => number, uio: interop.PointerConvertible, blocksize: number): number;

declare function buf_getblk(vp: interop.PointerConvertible, blkno: number, size: number, slpflag: number, slptimeo: number, operation: number): interop.Pointer;

declare function buf_geteblk(size: number): interop.Pointer;

declare function buf_clear_redundancy_flags(bp: interop.PointerConvertible, flags: number): void;

declare function buf_redundancy_flags(bp: interop.PointerConvertible): number;

declare function buf_set_redundancy_flags(bp: interop.PointerConvertible, flags: number): void;

declare function buf_attr(bp: interop.PointerConvertible): interop.Pointer;

declare function buf_markstatic(bp: interop.PointerConvertible): void;

declare function buf_static(bp: interop.PointerConvertible): number;

declare function buf_verify_enable(bp: interop.PointerConvertible, verify_kind: interop.Enum<typeof vnode_verify_kind_t>): number;

declare function buf_verifyptr(bp: interop.PointerConvertible, len: interop.PointerConvertible): interop.Pointer;

declare function bufattr_markioscheduled(bap: interop.PointerConvertible): void;

declare function bufattr_ioscheduled(bap: interop.PointerConvertible): number;

declare function bufattr_markexpeditedmeta(bap: interop.PointerConvertible): void;

declare function bufattr_expeditedmeta(bap: interop.PointerConvertible): number;

declare function clonefileat(p1: number, p2: string, p3: number, p4: string, p5: number): number;

declare function fclonefileat(p1: number, p2: number, p3: string, p4: number): number;

declare function clonefile(p1: string, p2: string, p3: number): number;

declare function modwatch(p1: interop.PointerConvertible, p2: number): number;

declare function watchevent(p1: interop.PointerConvertible, p2: number): number;

declare function waitevent(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function fileport_makeport(p1: number, p2: interop.PointerConvertible): number;

declare function fileport_makefd(p1: number): number;

declare function fsgetpath(p1: string, p2: number, p3: interop.PointerConvertible, p4: number): number;

declare function kdebug_signpost(code: number, arg1: number, arg2: number, arg3: number, arg4: number): number;

declare function kdebug_signpost_start(code: number, arg1: number, arg2: number, arg3: number, arg4: number): number;

declare function kdebug_signpost_end(code: number, arg1: number, arg2: number, arg3: number, arg4: number): number;

declare function quotactl(p1: string, p2: number, p3: number, p4: string): number;

declare function rb_tree_init(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function rb_tree_insert_node(p1: interop.PointerConvertible, p2: interop.PointerConvertible): interop.Pointer;

declare function rb_tree_find_node(p1: interop.PointerConvertible, p2: interop.PointerConvertible): interop.Pointer;

declare function rb_tree_find_node_geq(p1: interop.PointerConvertible, p2: interop.PointerConvertible): interop.Pointer;

declare function rb_tree_find_node_leq(p1: interop.PointerConvertible, p2: interop.PointerConvertible): interop.Pointer;

declare function rb_tree_remove_node(p1: interop.PointerConvertible, p2: interop.PointerConvertible): void;

declare function rb_tree_iterate(p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number): interop.Pointer;

declare function rb_tree_count(p1: interop.PointerConvertible): number;

declare function usrctl(flags: number): number;

declare function reboot(howto: number): number;

declare function reboot_np(howto: number, message: string): number;

declare function panic_with_data(uuid: unknown /* const array */, addr: interop.PointerConvertible, len: number, flags: number, msg: string): number;

declare function ftime(p1: interop.PointerConvertible): number;

declare function sysdir_start_search_path_enumeration(dir: interop.Enum<typeof sysdir_search_path_directory_t>, domainMask: interop.Enum<typeof sysdir_search_path_domain_mask_t>): number;

declare function sysdir_get_next_search_path_enumeration(state: number, path: string): number;

declare function map_fd(fd: number, offset: number, addr: interop.PointerConvertible, find_space: number, numbytes: number): number;

declare function unw_getcontext(p1: interop.PointerConvertible): number;

declare function unw_init_local(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function unw_step(p1: interop.PointerConvertible): number;

declare function unw_get_reg(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible): number;

declare function unw_get_fpreg(p1: interop.PointerConvertible, p2: number, p3: interop.PointerConvertible): number;

declare function unw_set_reg(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function unw_set_fpreg(p1: interop.PointerConvertible, p2: number, p3: number): number;

declare function unw_resume(p1: interop.PointerConvertible): number;

declare function unw_regname(p1: interop.PointerConvertible, p2: number): string;

declare function unw_get_proc_info(p1: interop.PointerConvertible, p2: interop.PointerConvertible): number;

declare function unw_is_fpreg(p1: interop.PointerConvertible, p2: number): number;

declare function unw_is_signal_frame(p1: interop.PointerConvertible): number;

declare function unw_get_proc_name(p1: interop.PointerConvertible, p2: string, p3: number, p4: interop.PointerConvertible): number;

declare function _Unwind_RaiseException(exception_object: interop.PointerConvertible): interop.Enum<typeof _Unwind_Reason_Code>;

declare function _Unwind_Resume(exception_object: interop.PointerConvertible): void;

declare function _Unwind_DeleteException(exception_object: interop.PointerConvertible): void;

declare function _Unwind_GetGR(context: interop.PointerConvertible, index: number): number;

declare function _Unwind_SetGR(context: interop.PointerConvertible, index: number, new_value: number): void;

declare function _Unwind_GetIP(context: interop.PointerConvertible): number;

declare function _Unwind_SetIP(p1: interop.PointerConvertible, new_value: number): void;

declare function _Unwind_GetRegionStart(context: interop.PointerConvertible): number;

declare function _Unwind_GetLanguageSpecificData(context: interop.PointerConvertible): number;

declare function _Unwind_ForcedUnwind(exception_object: interop.PointerConvertible, stop: (p1: number, p2: interop.Enum<typeof _Unwind_Action>, p3: number, p4: interop.PointerConvertible, p5: interop.PointerConvertible, p6: interop.PointerConvertible) => interop.Enum<typeof _Unwind_Reason_Code>, stop_parameter: interop.PointerConvertible): interop.Enum<typeof _Unwind_Reason_Code>;

declare function _Unwind_Resume_or_Rethrow(exception_object: interop.PointerConvertible): interop.Enum<typeof _Unwind_Reason_Code>;

declare function _Unwind_Backtrace(p1: (p1: interop.PointerConvertible, p2: interop.PointerConvertible) => interop.Enum<typeof _Unwind_Reason_Code>, p2: interop.PointerConvertible): interop.Enum<typeof _Unwind_Reason_Code>;

declare function _Unwind_GetCFA(p1: interop.PointerConvertible): number;

declare function _Unwind_GetIPInfo(context: interop.PointerConvertible, ipBefore: interop.PointerConvertible): number;

declare function __register_frame(fde: interop.PointerConvertible): void;

declare function __deregister_frame(fde: interop.PointerConvertible): void;

declare function _Unwind_Find_FDE(pc: interop.PointerConvertible, p2: interop.PointerConvertible): interop.Pointer;

declare function _Unwind_FindEnclosingFunction(pc: interop.PointerConvertible): interop.Pointer;

declare function _Unwind_RaiseException(exception_object: interop.PointerConvertible): interop.Enum<typeof _Unwind_Reason_Code>;

declare function _Unwind_Resume(exception_object: interop.PointerConvertible): void;

declare function _Unwind_DeleteException(exception_object: interop.PointerConvertible): void;

declare function _Unwind_Complete(exception_object: interop.PointerConvertible): void;

declare function _Unwind_VRS_Get(context: interop.PointerConvertible, regclass: interop.Enum<typeof _Unwind_VRS_RegClass>, regno: number, representation: interop.Enum<typeof _Unwind_VRS_DataRepresentation>, valuep: interop.PointerConvertible): interop.Enum<typeof _Unwind_VRS_Result>;

declare function _Unwind_VRS_Set(context: interop.PointerConvertible, regclass: interop.Enum<typeof _Unwind_VRS_RegClass>, regno: number, representation: interop.Enum<typeof _Unwind_VRS_DataRepresentation>, valuep: interop.PointerConvertible): interop.Enum<typeof _Unwind_VRS_Result>;

declare function _Unwind_VRS_Pop(context: interop.PointerConvertible, regclass: interop.Enum<typeof _Unwind_VRS_RegClass>, discriminator: number, representation: interop.Enum<typeof _Unwind_VRS_DataRepresentation>): interop.Enum<typeof _Unwind_VRS_Result>;

declare function __assert_rtn(p1: string, p2: string, p3: number, p4: string): void;

declare function cacosf(p1: unknown /* complex */): unknown /* complex */;

declare function cacos(p1: unknown /* complex */): unknown /* complex */;

declare function cacosl(p1: unknown /* complex */): unknown /* complex */;

declare function casinf(p1: unknown /* complex */): unknown /* complex */;

declare function casin(p1: unknown /* complex */): unknown /* complex */;

declare function casinl(p1: unknown /* complex */): unknown /* complex */;

declare function catanf(p1: unknown /* complex */): unknown /* complex */;

declare function catan(p1: unknown /* complex */): unknown /* complex */;

declare function catanl(p1: unknown /* complex */): unknown /* complex */;

declare function ccosf(p1: unknown /* complex */): unknown /* complex */;

declare function ccos(p1: unknown /* complex */): unknown /* complex */;

declare function ccosl(p1: unknown /* complex */): unknown /* complex */;

declare function csinf(p1: unknown /* complex */): unknown /* complex */;

declare function csin(p1: unknown /* complex */): unknown /* complex */;

declare function csinl(p1: unknown /* complex */): unknown /* complex */;

declare function ctanf(p1: unknown /* complex */): unknown /* complex */;

declare function ctan(p1: unknown /* complex */): unknown /* complex */;

declare function ctanl(p1: unknown /* complex */): unknown /* complex */;

declare function cacoshf(p1: unknown /* complex */): unknown /* complex */;

declare function cacosh(p1: unknown /* complex */): unknown /* complex */;

declare function cacoshl(p1: unknown /* complex */): unknown /* complex */;

declare function casinhf(p1: unknown /* complex */): unknown /* complex */;

declare function casinh(p1: unknown /* complex */): unknown /* complex */;

declare function casinhl(p1: unknown /* complex */): unknown /* complex */;

declare function catanhf(p1: unknown /* complex */): unknown /* complex */;

declare function catanh(p1: unknown /* complex */): unknown /* complex */;

declare function catanhl(p1: unknown /* complex */): unknown /* complex */;

declare function ccoshf(p1: unknown /* complex */): unknown /* complex */;

declare function ccosh(p1: unknown /* complex */): unknown /* complex */;

declare function ccoshl(p1: unknown /* complex */): unknown /* complex */;

declare function csinhf(p1: unknown /* complex */): unknown /* complex */;

declare function csinh(p1: unknown /* complex */): unknown /* complex */;

declare function csinhl(p1: unknown /* complex */): unknown /* complex */;

declare function ctanhf(p1: unknown /* complex */): unknown /* complex */;

declare function ctanh(p1: unknown /* complex */): unknown /* complex */;

declare function ctanhl(p1: unknown /* complex */): unknown /* complex */;

declare function cexpf(p1: unknown /* complex */): unknown /* complex */;

declare function cexp(p1: unknown /* complex */): unknown /* complex */;

declare function cexpl(p1: unknown /* complex */): unknown /* complex */;

declare function clogf(p1: unknown /* complex */): unknown /* complex */;

declare function clog(p1: unknown /* complex */): unknown /* complex */;

declare function clogl(p1: unknown /* complex */): unknown /* complex */;

declare function cabsf(p1: unknown /* complex */): number;

declare function cabs(p1: unknown /* complex */): number;

declare function cabsl(p1: unknown /* complex */): number;

declare function cpowf(p1: unknown /* complex */, p2: unknown /* complex */): unknown /* complex */;

declare function cpow(p1: unknown /* complex */, p2: unknown /* complex */): unknown /* complex */;

declare function cpowl(p1: unknown /* complex */, p2: unknown /* complex */): unknown /* complex */;

declare function csqrtf(p1: unknown /* complex */): unknown /* complex */;

declare function csqrt(p1: unknown /* complex */): unknown /* complex */;

declare function csqrtl(p1: unknown /* complex */): unknown /* complex */;

declare function cargf(p1: unknown /* complex */): number;

declare function carg(p1: unknown /* complex */): number;

declare function cargl(p1: unknown /* complex */): number;

declare function cimagf(p1: unknown /* complex */): number;

declare function cimag(p1: unknown /* complex */): number;

declare function cimagl(p1: unknown /* complex */): number;

declare function conjf(p1: unknown /* complex */): unknown /* complex */;

declare function conj(p1: unknown /* complex */): unknown /* complex */;

declare function conjl(p1: unknown /* complex */): unknown /* complex */;

declare function cprojf(p1: unknown /* complex */): unknown /* complex */;

declare function cproj(p1: unknown /* complex */): unknown /* complex */;

declare function cprojl(p1: unknown /* complex */): unknown /* complex */;

declare function crealf(p1: unknown /* complex */): number;

declare function creal(p1: unknown /* complex */): number;

declare function creall(p1: unknown /* complex */): number;

declare function feclearexcept(p1: number): number;

declare function fegetexceptflag(p1: interop.PointerConvertible, p2: number): number;

declare function feraiseexcept(p1: number): number;

declare function fesetexceptflag(p1: interop.PointerConvertible, p2: number): number;

declare function fetestexcept(p1: number): number;

declare function fegetround(): number;

declare function fesetround(p1: number): number;

declare function fegetenv(p1: interop.PointerConvertible): number;

declare function feholdexcept(p1: interop.PointerConvertible): number;

declare function fesetenv(p1: interop.PointerConvertible): number;

declare function feupdateenv(p1: interop.PointerConvertible): number;

declare function __math_errhandling(): number;

declare function __fpclassifyf(p1: number): number;

declare function __fpclassifyd(p1: number): number;

declare function __fpclassifyl(p1: number): number;

declare function acosf(p1: number): number;

declare function acos(p1: number): number;

declare function acosl(p1: number): number;

declare function asinf(p1: number): number;

declare function asin(p1: number): number;

declare function asinl(p1: number): number;

declare function atanf(p1: number): number;

declare function atan(p1: number): number;

declare function atanl(p1: number): number;

declare function atan2f(p1: number, p2: number): number;

declare function atan2(p1: number, p2: number): number;

declare function atan2l(p1: number, p2: number): number;

declare function cosf(p1: number): number;

declare function cos(p1: number): number;

declare function cosl(p1: number): number;

declare function sinf(p1: number): number;

declare function sin(p1: number): number;

declare function sinl(p1: number): number;

declare function tanf(p1: number): number;

declare function tan(p1: number): number;

declare function tanl(p1: number): number;

declare function acoshf(p1: number): number;

declare function acosh(p1: number): number;

declare function acoshl(p1: number): number;

declare function asinhf(p1: number): number;

declare function asinh(p1: number): number;

declare function asinhl(p1: number): number;

declare function atanhf(p1: number): number;

declare function atanh(p1: number): number;

declare function atanhl(p1: number): number;

declare function coshf(p1: number): number;

declare function cosh(p1: number): number;

declare function coshl(p1: number): number;

declare function sinhf(p1: number): number;

declare function sinh(p1: number): number;

declare function sinhl(p1: number): number;

declare function tanhf(p1: number): number;

declare function tanh(p1: number): number;

declare function tanhl(p1: number): number;

declare function expf(p1: number): number;

declare function exp(p1: number): number;

declare function expl(p1: number): number;

declare function exp2f(p1: number): number;

declare function exp2(p1: number): number;

declare function exp2l(p1: number): number;

declare function expm1f(p1: number): number;

declare function expm1(p1: number): number;

declare function expm1l(p1: number): number;

declare function logf(p1: number): number;

declare function log(p1: number): number;

declare function logl(p1: number): number;

declare function log10f(p1: number): number;

declare function log10(p1: number): number;

declare function log10l(p1: number): number;

declare function log2f(p1: number): number;

declare function log2(p1: number): number;

declare function log2l(p1: number): number;

declare function log1pf(p1: number): number;

declare function log1p(p1: number): number;

declare function log1pl(p1: number): number;

declare function logbf(p1: number): number;

declare function logb(p1: number): number;

declare function logbl(p1: number): number;

declare function modff(p1: number, p2: interop.PointerConvertible): number;

declare function modf(p1: number, p2: interop.PointerConvertible): number;

declare function modfl(p1: number, p2: interop.PointerConvertible): number;

declare function ldexpf(p1: number, p2: number): number;

declare function ldexp(p1: number, p2: number): number;

declare function ldexpl(p1: number, p2: number): number;

declare function frexpf(p1: number, p2: interop.PointerConvertible): number;

declare function frexp(p1: number, p2: interop.PointerConvertible): number;

declare function frexpl(p1: number, p2: interop.PointerConvertible): number;

declare function ilogbf(p1: number): number;

declare function ilogb(p1: number): number;

declare function ilogbl(p1: number): number;

declare function scalbnf(p1: number, p2: number): number;

declare function scalbn(p1: number, p2: number): number;

declare function scalbnl(p1: number, p2: number): number;

declare function scalblnf(p1: number, p2: number): number;

declare function scalbln(p1: number, p2: number): number;

declare function scalblnl(p1: number, p2: number): number;

declare function fabsf(p1: number): number;

declare function fabs(p1: number): number;

declare function fabsl(p1: number): number;

declare function cbrtf(p1: number): number;

declare function cbrt(p1: number): number;

declare function cbrtl(p1: number): number;

declare function hypotf(p1: number, p2: number): number;

declare function hypot(p1: number, p2: number): number;

declare function hypotl(p1: number, p2: number): number;

declare function powf(p1: number, p2: number): number;

declare function pow(p1: number, p2: number): number;

declare function powl(p1: number, p2: number): number;

declare function sqrtf(p1: number): number;

declare function sqrt(p1: number): number;

declare function sqrtl(p1: number): number;

declare function erff(p1: number): number;

declare function erf(p1: number): number;

declare function erfl(p1: number): number;

declare function erfcf(p1: number): number;

declare function erfc(p1: number): number;

declare function erfcl(p1: number): number;

declare function lgammaf(p1: number): number;

declare function lgamma(p1: number): number;

declare function lgammal(p1: number): number;

declare function tgammaf(p1: number): number;

declare function tgamma(p1: number): number;

declare function tgammal(p1: number): number;

declare function ceilf(p1: number): number;

declare function ceil(p1: number): number;

declare function ceill(p1: number): number;

declare function floorf(p1: number): number;

declare function floor(p1: number): number;

declare function floorl(p1: number): number;

declare function nearbyintf(p1: number): number;

declare function nearbyint(p1: number): number;

declare function nearbyintl(p1: number): number;

declare function rintf(p1: number): number;

declare function rint(p1: number): number;

declare function rintl(p1: number): number;

declare function lrintf(p1: number): number;

declare function lrint(p1: number): number;

declare function lrintl(p1: number): number;

declare function roundf(p1: number): number;

declare function round(p1: number): number;

declare function roundl(p1: number): number;

declare function lroundf(p1: number): number;

declare function lround(p1: number): number;

declare function lroundl(p1: number): number;

declare function llrintf(p1: number): number;

declare function llrint(p1: number): number;

declare function llrintl(p1: number): number;

declare function llroundf(p1: number): number;

declare function llround(p1: number): number;

declare function llroundl(p1: number): number;

declare function truncf(p1: number): number;

declare function trunc(p1: number): number;

declare function truncl(p1: number): number;

declare function fmodf(p1: number, p2: number): number;

declare function fmod(p1: number, p2: number): number;

declare function fmodl(p1: number, p2: number): number;

declare function remainderf(p1: number, p2: number): number;

declare function remainder(p1: number, p2: number): number;

declare function remainderl(p1: number, p2: number): number;

declare function remquof(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function remquo(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function remquol(p1: number, p2: number, p3: interop.PointerConvertible): number;

declare function copysignf(p1: number, p2: number): number;

declare function copysign(p1: number, p2: number): number;

declare function copysignl(p1: number, p2: number): number;

declare function nanf(p1: string): number;

declare function nan(p1: string): number;

declare function nanl(p1: string): number;

declare function nextafterf(p1: number, p2: number): number;

declare function nextafter(p1: number, p2: number): number;

declare function nextafterl(p1: number, p2: number): number;

declare function nexttoward(p1: number, p2: number): number;

declare function nexttowardf(p1: number, p2: number): number;

declare function nexttowardl(p1: number, p2: number): number;

declare function fdimf(p1: number, p2: number): number;

declare function fdim(p1: number, p2: number): number;

declare function fdiml(p1: number, p2: number): number;

declare function fmaxf(p1: number, p2: number): number;

declare function fmax(p1: number, p2: number): number;

declare function fmaxl(p1: number, p2: number): number;

declare function fminf(p1: number, p2: number): number;

declare function fmin(p1: number, p2: number): number;

declare function fminl(p1: number, p2: number): number;

declare function fmaf(p1: number, p2: number, p3: number): number;

declare function fma(p1: number, p2: number, p3: number): number;

declare function fmal(p1: number, p2: number, p3: number): number;

declare function __exp10f(p1: number): number;

declare function __exp10(p1: number): number;

declare function __cospif(p1: number): number;

declare function __cospi(p1: number): number;

declare function __sinpif(p1: number): number;

declare function __sinpi(p1: number): number;

declare function __tanpif(p1: number): number;

declare function __tanpi(p1: number): number;

declare function __fabsf16(p1: number): number;

declare function __hypotf16(p1: number, p2: number): number;

declare function __sqrtf16(p1: number): number;

declare function __ceilf16(p1: number): number;

declare function __floorf16(p1: number): number;

declare function __rintf16(p1: number): number;

declare function __roundf16(p1: number): number;

declare function __truncf16(p1: number): number;

declare function __copysignf16(p1: number, p2: number): number;

declare function __nextafterf16(p1: number, p2: number): number;

declare function __fmaxf16(p1: number, p2: number): number;

declare function __fminf16(p1: number, p2: number): number;

declare function __fmaf16(p1: number, p2: number, p3: number): number;

declare function __sincosf_stret(p1: number): __float2;

declare function __sincos_stret(p1: number): __double2;

declare function __sincospif_stret(p1: number): __float2;

declare function __sincospi_stret(p1: number): __double2;

declare function j0(p1: number): number;

declare function j1(p1: number): number;

declare function jn(p1: number, p2: number): number;

declare function y0(p1: number): number;

declare function y1(p1: number): number;

declare function yn(p1: number, p2: number): number;

declare function scalb(p1: number, p2: number): number;

declare function setjmp(p1: unknown /* const array */): number;

declare function longjmp(p1: unknown /* const array */, p2: number): void;

declare function _setjmp(p1: unknown /* const array */): number;

declare function _longjmp(p1: unknown /* const array */, p2: number): void;

declare function sigsetjmp(p1: unknown /* const array */, p2: number): number;

declare function siglongjmp(p1: unknown /* const array */, p2: number): void;

declare function longjmperror(): void;

declare function __tg_promote(p1: number): number;

declare function __tg_promote(p1: number): number;

declare function __tg_promote(p1: number): number;

declare function __tg_promote(p1: number): number;

declare function __tg_promote(p1: number): number;

declare function __tg_promote(p1: number): number;

declare function __tg_promote(p1: number): number;

declare function __tg_promote(p1: number): number;

declare function __tg_promote(p1: number): number;

declare function __tg_promote(p1: number): number;

declare function __tg_promote(p1: unknown /* complex */): unknown /* complex */;

declare function __tg_promote(p1: unknown /* complex */): unknown /* complex */;

declare function __tg_promote(p1: unknown /* complex */): unknown /* complex */;

declare function __tg_acos(__x: number): number;

declare function __tg_acos(__x: number): number;

declare function __tg_acos(__x: number): number;

declare function __tg_acos(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_acos(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_acos(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_asin(__x: number): number;

declare function __tg_asin(__x: number): number;

declare function __tg_asin(__x: number): number;

declare function __tg_asin(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_asin(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_asin(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_atan(__x: number): number;

declare function __tg_atan(__x: number): number;

declare function __tg_atan(__x: number): number;

declare function __tg_atan(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_atan(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_atan(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_acosh(__x: number): number;

declare function __tg_acosh(__x: number): number;

declare function __tg_acosh(__x: number): number;

declare function __tg_acosh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_acosh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_acosh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_asinh(__x: number): number;

declare function __tg_asinh(__x: number): number;

declare function __tg_asinh(__x: number): number;

declare function __tg_asinh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_asinh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_asinh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_atanh(__x: number): number;

declare function __tg_atanh(__x: number): number;

declare function __tg_atanh(__x: number): number;

declare function __tg_atanh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_atanh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_atanh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_cos(__x: number): number;

declare function __tg_cos(__x: number): number;

declare function __tg_cos(__x: number): number;

declare function __tg_cos(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_cos(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_cos(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_sin(__x: number): number;

declare function __tg_sin(__x: number): number;

declare function __tg_sin(__x: number): number;

declare function __tg_sin(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_sin(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_sin(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_tan(__x: number): number;

declare function __tg_tan(__x: number): number;

declare function __tg_tan(__x: number): number;

declare function __tg_tan(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_tan(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_tan(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_cosh(__x: number): number;

declare function __tg_cosh(__x: number): number;

declare function __tg_cosh(__x: number): number;

declare function __tg_cosh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_cosh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_cosh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_sinh(__x: number): number;

declare function __tg_sinh(__x: number): number;

declare function __tg_sinh(__x: number): number;

declare function __tg_sinh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_sinh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_sinh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_tanh(__x: number): number;

declare function __tg_tanh(__x: number): number;

declare function __tg_tanh(__x: number): number;

declare function __tg_tanh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_tanh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_tanh(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_exp(__x: number): number;

declare function __tg_exp(__x: number): number;

declare function __tg_exp(__x: number): number;

declare function __tg_exp(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_exp(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_exp(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_log(__x: number): number;

declare function __tg_log(__x: number): number;

declare function __tg_log(__x: number): number;

declare function __tg_log(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_log(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_log(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_pow(__x: number, __y: number): number;

declare function __tg_pow(__x: number, __y: number): number;

declare function __tg_pow(__x: number, __y: number): number;

declare function __tg_pow(__x: unknown /* complex */, __y: unknown /* complex */): unknown /* complex */;

declare function __tg_pow(__x: unknown /* complex */, __y: unknown /* complex */): unknown /* complex */;

declare function __tg_pow(__x: unknown /* complex */, __y: unknown /* complex */): unknown /* complex */;

declare function __tg_sqrt(__x: number): number;

declare function __tg_sqrt(__x: number): number;

declare function __tg_sqrt(__x: number): number;

declare function __tg_sqrt(__x: number): number;

declare function __tg_sqrt(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_sqrt(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_sqrt(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_fabs(__x: number): number;

declare function __tg_fabs(__x: number): number;

declare function __tg_fabs(__x: number): number;

declare function __tg_fabs(__x: number): number;

declare function __tg_fabs(__x: unknown /* complex */): number;

declare function __tg_fabs(__x: unknown /* complex */): number;

declare function __tg_fabs(__x: unknown /* complex */): number;

declare function __tg_atan2(__x: number, __y: number): number;

declare function __tg_atan2(__x: number, __y: number): number;

declare function __tg_atan2(__x: number, __y: number): number;

declare function __tg_cbrt(__x: number): number;

declare function __tg_cbrt(__x: number): number;

declare function __tg_cbrt(__x: number): number;

declare function __tg_ceil(__x: number): number;

declare function __tg_ceil(__x: number): number;

declare function __tg_ceil(__x: number): number;

declare function __tg_ceil(__x: number): number;

declare function __tg_copysign(__x: number, __y: number): number;

declare function __tg_copysign(__x: number, __y: number): number;

declare function __tg_copysign(__x: number, __y: number): number;

declare function __tg_copysign(__x: number, __y: number): number;

declare function __tg_erf(__x: number): number;

declare function __tg_erf(__x: number): number;

declare function __tg_erf(__x: number): number;

declare function __tg_erfc(__x: number): number;

declare function __tg_erfc(__x: number): number;

declare function __tg_erfc(__x: number): number;

declare function __tg_exp2(__x: number): number;

declare function __tg_exp2(__x: number): number;

declare function __tg_exp2(__x: number): number;

declare function __tg_expm1(__x: number): number;

declare function __tg_expm1(__x: number): number;

declare function __tg_expm1(__x: number): number;

declare function __tg_fdim(__x: number, __y: number): number;

declare function __tg_fdim(__x: number, __y: number): number;

declare function __tg_fdim(__x: number, __y: number): number;

declare function __tg_floor(__x: number): number;

declare function __tg_floor(__x: number): number;

declare function __tg_floor(__x: number): number;

declare function __tg_floor(__x: number): number;

declare function __tg_fma(__x: number, __y: number, __z: number): number;

declare function __tg_fma(__x: number, __y: number, __z: number): number;

declare function __tg_fma(__x: number, __y: number, __z: number): number;

declare function __tg_fma(__x: number, __y: number, __z: number): number;

declare function __tg_fmax(__x: number, __y: number): number;

declare function __tg_fmax(__x: number, __y: number): number;

declare function __tg_fmax(__x: number, __y: number): number;

declare function __tg_fmax(__x: number, __y: number): number;

declare function __tg_fmin(__x: number, __y: number): number;

declare function __tg_fmin(__x: number, __y: number): number;

declare function __tg_fmin(__x: number, __y: number): number;

declare function __tg_fmin(__x: number, __y: number): number;

declare function __tg_fmod(__x: number, __y: number): number;

declare function __tg_fmod(__x: number, __y: number): number;

declare function __tg_fmod(__x: number, __y: number): number;

declare function __tg_frexp(__x: number, __y: interop.PointerConvertible): number;

declare function __tg_frexp(__x: number, __y: interop.PointerConvertible): number;

declare function __tg_frexp(__x: number, __y: interop.PointerConvertible): number;

declare function __tg_hypot(__x: number, __y: number): number;

declare function __tg_hypot(__x: number, __y: number): number;

declare function __tg_hypot(__x: number, __y: number): number;

declare function __tg_hypot(__x: number, __y: number): number;

declare function __tg_ilogb(__x: number): number;

declare function __tg_ilogb(__x: number): number;

declare function __tg_ilogb(__x: number): number;

declare function __tg_ldexp(__x: number, __y: number): number;

declare function __tg_ldexp(__x: number, __y: number): number;

declare function __tg_ldexp(__x: number, __y: number): number;

declare function __tg_lgamma(__x: number): number;

declare function __tg_lgamma(__x: number): number;

declare function __tg_lgamma(__x: number): number;

declare function __tg_llrint(__x: number): number;

declare function __tg_llrint(__x: number): number;

declare function __tg_llrint(__x: number): number;

declare function __tg_llround(__x: number): number;

declare function __tg_llround(__x: number): number;

declare function __tg_llround(__x: number): number;

declare function __tg_log10(__x: number): number;

declare function __tg_log10(__x: number): number;

declare function __tg_log10(__x: number): number;

declare function __tg_log1p(__x: number): number;

declare function __tg_log1p(__x: number): number;

declare function __tg_log1p(__x: number): number;

declare function __tg_log2(__x: number): number;

declare function __tg_log2(__x: number): number;

declare function __tg_log2(__x: number): number;

declare function __tg_logb(__x: number): number;

declare function __tg_logb(__x: number): number;

declare function __tg_logb(__x: number): number;

declare function __tg_lrint(__x: number): number;

declare function __tg_lrint(__x: number): number;

declare function __tg_lrint(__x: number): number;

declare function __tg_lround(__x: number): number;

declare function __tg_lround(__x: number): number;

declare function __tg_lround(__x: number): number;

declare function __tg_nearbyint(__x: number): number;

declare function __tg_nearbyint(__x: number): number;

declare function __tg_nearbyint(__x: number): number;

declare function __tg_nextafter(__x: number, __y: number): number;

declare function __tg_nextafter(__x: number, __y: number): number;

declare function __tg_nextafter(__x: number, __y: number): number;

declare function __tg_nextafter(__x: number, __y: number): number;

declare function __tg_nexttoward(__x: number, __y: number): number;

declare function __tg_nexttoward(__x: number, __y: number): number;

declare function __tg_nexttoward(__x: number, __y: number): number;

declare function __tg_remainder(__x: number, __y: number): number;

declare function __tg_remainder(__x: number, __y: number): number;

declare function __tg_remainder(__x: number, __y: number): number;

declare function __tg_remquo(__x: number, __y: number, __z: interop.PointerConvertible): number;

declare function __tg_remquo(__x: number, __y: number, __z: interop.PointerConvertible): number;

declare function __tg_remquo(__x: number, __y: number, __z: interop.PointerConvertible): number;

declare function __tg_rint(__x: number): number;

declare function __tg_rint(__x: number): number;

declare function __tg_rint(__x: number): number;

declare function __tg_rint(__x: number): number;

declare function __tg_round(__x: number): number;

declare function __tg_round(__x: number): number;

declare function __tg_round(__x: number): number;

declare function __tg_round(__x: number): number;

declare function __tg_scalbn(__x: number, __y: number): number;

declare function __tg_scalbn(__x: number, __y: number): number;

declare function __tg_scalbn(__x: number, __y: number): number;

declare function __tg_scalbln(__x: number, __y: number): number;

declare function __tg_scalbln(__x: number, __y: number): number;

declare function __tg_scalbln(__x: number, __y: number): number;

declare function __tg_tgamma(__x: number): number;

declare function __tg_tgamma(__x: number): number;

declare function __tg_tgamma(__x: number): number;

declare function __tg_trunc(__x: number): number;

declare function __tg_trunc(__x: number): number;

declare function __tg_trunc(__x: number): number;

declare function __tg_trunc(__x: number): number;

declare function __tg_carg(__x: number): number;

declare function __tg_carg(__x: number): number;

declare function __tg_carg(__x: number): number;

declare function __tg_carg(__x: unknown /* complex */): number;

declare function __tg_carg(__x: unknown /* complex */): number;

declare function __tg_carg(__x: unknown /* complex */): number;

declare function __tg_cimag(__x: number): number;

declare function __tg_cimag(__x: number): number;

declare function __tg_cimag(__x: number): number;

declare function __tg_cimag(__x: unknown /* complex */): number;

declare function __tg_cimag(__x: unknown /* complex */): number;

declare function __tg_cimag(__x: unknown /* complex */): number;

declare function __tg_conj(__x: number): unknown /* complex */;

declare function __tg_conj(__x: number): unknown /* complex */;

declare function __tg_conj(__x: number): unknown /* complex */;

declare function __tg_conj(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_conj(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_conj(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_cproj(__x: number): unknown /* complex */;

declare function __tg_cproj(__x: number): unknown /* complex */;

declare function __tg_cproj(__x: number): unknown /* complex */;

declare function __tg_cproj(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_cproj(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_cproj(__x: unknown /* complex */): unknown /* complex */;

declare function __tg_creal(__x: number): number;

declare function __tg_creal(__x: number): number;

declare function __tg_creal(__x: number): number;

declare function __tg_creal(__x: unknown /* complex */): number;

declare function __tg_creal(__x: unknown /* complex */): number;

declare function __tg_creal(__x: unknown /* complex */): number;

declare function __tg_promote(p1: unknown /* ext vector */): unknown /* ext vector */;

declare function __tg_promote(p1: unknown /* ext vector */): unknown /* ext vector */;

declare function __tg_promote(p1: unknown /* ext vector */): unknown /* ext vector */;

declare function __tg_promote(p1: unknown /* ext vector */): unknown /* ext vector */;

declare function __tg_promote(p1: unknown /* ext vector */): unknown /* ext vector */;

declare function __tg_promote(p1: unknown /* ext vector */): unknown /* ext vector */;

declare function __tg_promote(p1: unknown /* ext vector */): unknown /* ext vector */;

declare function __tg_promote(p1: unknown /* ext vector */): unknown /* ext vector */;

declare function __tg_promote(p1: unknown /* ext vector */): unknown /* ext vector */;

declare function __tg_promote(p1: unknown /* ext vector */): unknown /* ext vector */;

declare function __tg_promote(p1: unknown /* ext vector */): unknown /* ext vector */;

declare function __tg_promote(p1: unknown /* ext vector */): unknown /* ext vector */;

declare function __tg_promote(p1: unknown /* ext vector */): unknown /* ext vector */;

declare function __tg_promote(p1: unknown /* ext vector */): unknown /* ext vector */;

declare function __tg_promote(p1: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_sin_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_sin_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_cos_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_cos_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_acos_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_acos_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_asin_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_asin_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_atan_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_atan_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_tan_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_tan_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_cospi_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_cospi_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_sinpi_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_sinpi_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_tanpi_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_tanpi_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_acosh_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_acosh_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_asinh_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_asinh_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_atanh_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_atanh_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_cosh_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_cosh_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_sinh_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_sinh_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_tanh_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_tanh_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_exp_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_exp_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_exp2_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_exp2_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_exp10_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_exp10_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_expm1_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_expm1_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_log_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_log_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_log2_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_log2_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_log10_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_log10_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_log1p_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_log1p_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_cbrt_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_cbrt_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_erf_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_erf_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_erfc_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_erfc_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_tgamma_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_tgamma_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_round_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_round_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_atan2_f4(y: unknown /* ext vector */, x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_atan2_d2(y: unknown /* ext vector */, x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_hypot_f4(x: unknown /* ext vector */, y: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_hypot_d2(x: unknown /* ext vector */, y: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_pow_f4(x: unknown /* ext vector */, y: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_pow_d2(x: unknown /* ext vector */, y: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_fmod_f4(x: unknown /* ext vector */, y: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_fmod_d2(x: unknown /* ext vector */, y: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_remainder_f4(x: unknown /* ext vector */, y: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_remainder_d2(x: unknown /* ext vector */, y: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_nextafter_f4(x: unknown /* ext vector */, y: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_nextafter_d2(x: unknown /* ext vector */, y: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_sincos_f4(x: unknown /* ext vector */, sinp: interop.PointerConvertible, cosp: interop.PointerConvertible): void;

declare function _simd_sincos_d2(x: unknown /* ext vector */, sinp: interop.PointerConvertible, cosp: interop.PointerConvertible): void;

declare function _simd_sincospi_f4(x: unknown /* ext vector */, sinp: interop.PointerConvertible, cosp: interop.PointerConvertible): void;

declare function _simd_sincospi_d2(x: unknown /* ext vector */, sinp: interop.PointerConvertible, cosp: interop.PointerConvertible): void;

declare function _simd_lgamma_f4(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_lgamma_d2(x: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_fma_f4(x: unknown /* ext vector */, y: unknown /* ext vector */, z: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_fma_d2(x: unknown /* ext vector */, y: unknown /* ext vector */, z: unknown /* ext vector */): unknown /* ext vector */;

declare function _simd_orient_vf2(p1: unknown /* ext vector */, p2: unknown /* ext vector */): number;

declare function _simd_orient_pf2(p1: unknown /* ext vector */, p2: unknown /* ext vector */, p3: unknown /* ext vector */): number;

declare function _simd_incircle_pf2(p1: unknown /* ext vector */, p2: unknown /* ext vector */, p3: unknown /* ext vector */, p4: unknown /* ext vector */): number;

declare function _simd_orient_vf3(p1: unknown /* ext vector */, p2: unknown /* ext vector */, p3: unknown /* ext vector */): number;

declare function _simd_orient_pf3(p1: unknown /* ext vector */, p2: unknown /* ext vector */, p3: unknown /* ext vector */, p4: unknown /* ext vector */): number;

declare function _simd_insphere_pf3(p1: unknown /* ext vector */, p2: unknown /* ext vector */, p3: unknown /* ext vector */, p4: unknown /* ext vector */, p5: unknown /* ext vector */): number;

declare function _simd_orient_vd2(p1: unknown /* ext vector */, p2: unknown /* ext vector */): number;

declare function _simd_orient_pd2(p1: unknown /* ext vector */, p2: unknown /* ext vector */, p3: unknown /* ext vector */): number;

declare function _simd_incircle_pd2(p1: unknown /* ext vector */, p2: unknown /* ext vector */, p3: unknown /* ext vector */, p4: unknown /* ext vector */): number;

declare function _simd_orient_vd3(p1: interop.PointerConvertible): number;

declare function _simd_orient_pd3(p1: interop.PointerConvertible): number;

declare function _simd_insphere_pd3(p1: interop.PointerConvertible): number;

declare function _simd_orient_vh2(p1: unknown /* ext vector */, p2: unknown /* ext vector */): number;

declare function _simd_orient_ph2(p1: unknown /* ext vector */, p2: unknown /* ext vector */, p3: unknown /* ext vector */): number;

declare function _simd_incircle_ph2(p1: unknown /* ext vector */, p2: unknown /* ext vector */, p3: unknown /* ext vector */, p4: unknown /* ext vector */): number;

declare function _simd_orient_vh3(p1: unknown /* ext vector */, p2: unknown /* ext vector */, p3: unknown /* ext vector */): number;

declare function _simd_orient_ph3(p1: unknown /* ext vector */, p2: unknown /* ext vector */, p3: unknown /* ext vector */, p4: unknown /* ext vector */): number;

declare function _simd_insphere_ph3(p1: unknown /* ext vector */, p2: unknown /* ext vector */, p3: unknown /* ext vector */, p4: unknown /* ext vector */, p5: unknown /* ext vector */): number;

declare function __invert_f2(p1: simd_float2x2): simd_float2x2;

declare function __invert_d2(p1: simd_double2x2): simd_double2x2;

declare function __invert_f3(p1: simd_float3x3): simd_float3x3;

declare function __invert_d3(p1: simd_double3x3): simd_double3x3;

declare function __invert_f4(p1: simd_float4x4): simd_float4x4;

declare function __invert_d4(p1: simd_double4x4): simd_double4x4;

declare function __invert_h2(p1: simd_half2x2): simd_half2x2;

declare function __invert_h3(p1: simd_half3x3): simd_half3x3;

declare function __invert_h4(p1: simd_half4x4): simd_half4x4;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_cross(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_cross(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_cross(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_cross(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_cross(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_cross(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_orient(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_orient(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_orient(__x: unknown /* ext vector */, __y: unknown /* ext vector */, __z: unknown /* ext vector */): number;

declare function simd_orient(__x: unknown /* ext vector */, __y: unknown /* ext vector */, __z: unknown /* ext vector */): number;

declare function simd_orient(__a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */): number;

declare function simd_orient(__a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */): number;

declare function simd_orient(__a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */, __d: unknown /* ext vector */): number;

declare function simd_orient(__a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */, __d: unknown /* ext vector */): number;

declare function simd_incircle(__x: unknown /* ext vector */, __a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */): number;

declare function simd_incircle(__x: unknown /* ext vector */, __a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */): number;

declare function simd_insphere(__x: unknown /* ext vector */, __a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */, __d: unknown /* ext vector */): number;

declare function simd_insphere(__x: unknown /* ext vector */, __a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */, __d: unknown /* ext vector */): number;

declare function simd_orient(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_orient(__x: unknown /* ext vector */, __y: unknown /* ext vector */, __z: unknown /* ext vector */): number;

declare function simd_orient(__a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */): number;

declare function simd_orient(__a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */, __d: unknown /* ext vector */): number;

declare function simd_incircle(__x: unknown /* ext vector */, __a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */): number;

declare function simd_insphere(__x: unknown /* ext vector */, __a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */, __d: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_dot(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_project(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_precise_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_fast_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_length_squared(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_one(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_norm_inf(__x: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_fast_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_distance_squared(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_precise_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_fast_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_normalize(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_cross(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_cross(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_cross(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_cross(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_cross(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_cross(__x: unknown /* ext vector */, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_reflect(__x: unknown /* ext vector */, __n: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_refract(__x: unknown /* ext vector */, __n: unknown /* ext vector */, __eta: number): unknown /* ext vector */;

declare function simd_orient(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_orient(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_orient(__x: unknown /* ext vector */, __y: unknown /* ext vector */, __z: unknown /* ext vector */): number;

declare function simd_orient(__x: unknown /* ext vector */, __y: unknown /* ext vector */, __z: unknown /* ext vector */): number;

declare function simd_orient(__a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */): number;

declare function simd_orient(__a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */): number;

declare function simd_orient(__a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */, __d: unknown /* ext vector */): number;

declare function simd_orient(__a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */, __d: unknown /* ext vector */): number;

declare function simd_incircle(__x: unknown /* ext vector */, __a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */): number;

declare function simd_incircle(__x: unknown /* ext vector */, __a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */): number;

declare function simd_insphere(__x: unknown /* ext vector */, __a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */, __d: unknown /* ext vector */): number;

declare function simd_insphere(__x: unknown /* ext vector */, __a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */, __d: unknown /* ext vector */): number;

declare function simd_orient(__x: unknown /* ext vector */, __y: unknown /* ext vector */): number;

declare function simd_orient(__x: unknown /* ext vector */, __y: unknown /* ext vector */, __z: unknown /* ext vector */): number;

declare function simd_orient(__a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */): number;

declare function simd_orient(__a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */, __d: unknown /* ext vector */): number;

declare function simd_incircle(__x: unknown /* ext vector */, __a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */): number;

declare function simd_insphere(__x: unknown /* ext vector */, __a: unknown /* ext vector */, __b: unknown /* ext vector */, __c: unknown /* ext vector */, __d: unknown /* ext vector */): number;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function vector2(__x: number, __y: number): unknown /* ext vector */;

declare function vector2(__x: number, __y: number): unknown /* ext vector */;

declare function vector2(__x: number, __y: number): unknown /* ext vector */;

declare function vector2(__x: number, __y: number): unknown /* ext vector */;

declare function vector2(__x: number, __y: number): unknown /* ext vector */;

declare function vector2(__x: number, __y: number): unknown /* ext vector */;

declare function vector2(__x: number, __y: number): unknown /* ext vector */;

declare function vector2(__x: number, __y: number): unknown /* ext vector */;

declare function vector2(__x: number, __y: number): unknown /* ext vector */;

declare function vector2(__x: number, __y: number): unknown /* ext vector */;

declare function vector2(__x: number, __y: number): unknown /* ext vector */;

declare function vector3(__x: number, __y: number, __z: number): unknown /* ext vector */;

declare function vector3(__x: number, __y: number, __z: number): unknown /* ext vector */;

declare function vector3(__x: number, __y: number, __z: number): unknown /* ext vector */;

declare function vector3(__x: number, __y: number, __z: number): unknown /* ext vector */;

declare function vector3(__x: number, __y: number, __z: number): unknown /* ext vector */;

declare function vector3(__x: number, __y: number, __z: number): unknown /* ext vector */;

declare function vector3(__x: number, __y: number, __z: number): unknown /* ext vector */;

declare function vector3(__x: number, __y: number, __z: number): unknown /* ext vector */;

declare function vector3(__x: number, __y: number, __z: number): unknown /* ext vector */;

declare function vector3(__x: number, __y: number, __z: number): unknown /* ext vector */;

declare function vector3(__x: number, __y: number, __z: number): unknown /* ext vector */;

declare function vector3(__xy: unknown /* ext vector */, __z: number): unknown /* ext vector */;

declare function vector3(__xy: unknown /* ext vector */, __z: number): unknown /* ext vector */;

declare function vector3(__xy: unknown /* ext vector */, __z: number): unknown /* ext vector */;

declare function vector3(__xy: unknown /* ext vector */, __z: number): unknown /* ext vector */;

declare function vector3(__xy: unknown /* ext vector */, __z: number): unknown /* ext vector */;

declare function vector3(__xy: unknown /* ext vector */, __z: number): unknown /* ext vector */;

declare function vector3(__xy: unknown /* ext vector */, __z: number): unknown /* ext vector */;

declare function vector3(__xy: unknown /* ext vector */, __z: number): unknown /* ext vector */;

declare function vector3(__xy: unknown /* ext vector */, __z: number): unknown /* ext vector */;

declare function vector3(__xy: unknown /* ext vector */, __z: number): unknown /* ext vector */;

declare function vector3(__xy: unknown /* ext vector */, __z: number): unknown /* ext vector */;

declare function vector4(__x: number, __y: number, __z: number, __w: number): unknown /* ext vector */;

declare function vector4(__x: number, __y: number, __z: number, __w: number): unknown /* ext vector */;

declare function vector4(__x: number, __y: number, __z: number, __w: number): unknown /* ext vector */;

declare function vector4(__x: number, __y: number, __z: number, __w: number): unknown /* ext vector */;

declare function vector4(__x: number, __y: number, __z: number, __w: number): unknown /* ext vector */;

declare function vector4(__x: number, __y: number, __z: number, __w: number): unknown /* ext vector */;

declare function vector4(__x: number, __y: number, __z: number, __w: number): unknown /* ext vector */;

declare function vector4(__x: number, __y: number, __z: number, __w: number): unknown /* ext vector */;

declare function vector4(__x: number, __y: number, __z: number, __w: number): unknown /* ext vector */;

declare function vector4(__x: number, __y: number, __z: number, __w: number): unknown /* ext vector */;

declare function vector4(__x: number, __y: number, __z: number, __w: number): unknown /* ext vector */;

declare function vector4(__xy: unknown /* ext vector */, __zw: unknown /* ext vector */): unknown /* ext vector */;

declare function vector4(__xy: unknown /* ext vector */, __zw: unknown /* ext vector */): unknown /* ext vector */;

declare function vector4(__xy: unknown /* ext vector */, __zw: unknown /* ext vector */): unknown /* ext vector */;

declare function vector4(__xy: unknown /* ext vector */, __zw: unknown /* ext vector */): unknown /* ext vector */;

declare function vector4(__xy: unknown /* ext vector */, __zw: unknown /* ext vector */): unknown /* ext vector */;

declare function vector4(__xy: unknown /* ext vector */, __zw: unknown /* ext vector */): unknown /* ext vector */;

declare function vector4(__xy: unknown /* ext vector */, __zw: unknown /* ext vector */): unknown /* ext vector */;

declare function vector4(__xy: unknown /* ext vector */, __zw: unknown /* ext vector */): unknown /* ext vector */;

declare function vector4(__xy: unknown /* ext vector */, __zw: unknown /* ext vector */): unknown /* ext vector */;

declare function vector4(__xy: unknown /* ext vector */, __zw: unknown /* ext vector */): unknown /* ext vector */;

declare function vector4(__xy: unknown /* ext vector */, __zw: unknown /* ext vector */): unknown /* ext vector */;

declare function vector4(__xyz: unknown /* ext vector */, __w: number): unknown /* ext vector */;

declare function vector4(__xyz: unknown /* ext vector */, __w: number): unknown /* ext vector */;

declare function vector4(__xyz: unknown /* ext vector */, __w: number): unknown /* ext vector */;

declare function vector4(__xyz: unknown /* ext vector */, __w: number): unknown /* ext vector */;

declare function vector4(__xyz: unknown /* ext vector */, __w: number): unknown /* ext vector */;

declare function vector4(__xyz: unknown /* ext vector */, __w: number): unknown /* ext vector */;

declare function vector4(__xyz: unknown /* ext vector */, __w: number): unknown /* ext vector */;

declare function vector4(__xyz: unknown /* ext vector */, __w: number): unknown /* ext vector */;

declare function vector4(__xyz: unknown /* ext vector */, __w: number): unknown /* ext vector */;

declare function vector4(__xyz: unknown /* ext vector */, __w: number): unknown /* ext vector */;

declare function vector4(__xyz: unknown /* ext vector */, __w: number): unknown /* ext vector */;

declare function vector8(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector8(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector8(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector8(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector8(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector8(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector8(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector8(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector8(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector8(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector8(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector16(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector16(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector16(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector16(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector16(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector16(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector16(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector16(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector32(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector32(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector32(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector32(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function vector32(__lo: unknown /* ext vector */, __hi: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_char_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uchar_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_short_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ushort_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_half(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_int_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_uint_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_float(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_long_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_sat(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_ulong_rte(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_double(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_half2x2;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_half3x3;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_half4x4;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_float2x2;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_float3x3;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_float4x4;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_double2x2;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_double3x3;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_double4x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_half2x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_half3x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_half4x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_half2x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_half3x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_half4x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_half2x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_half3x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_half4x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_float2x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_float3x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_float4x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_float2x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_float3x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_float4x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_float2x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_float3x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_float4x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_double2x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_double3x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_double4x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_double2x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_double3x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_double4x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_double2x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_double3x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_double4x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_half2x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_half2x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_half2x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_half3x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_half3x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_half3x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_half4x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_half4x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_half4x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_float2x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_float2x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_float2x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_float3x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_float3x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_float3x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_float4x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_float4x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_float4x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_double2x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_double2x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_double2x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_double3x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_double3x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_double3x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_double4x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_double4x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_double4x4;

declare function simd_matrix3x3(q: simd_quath): simd_half3x3;

declare function simd_matrix4x4(q: simd_quath): simd_half4x4;

declare function simd_matrix3x3(q: simd_quatf): simd_float3x3;

declare function simd_matrix4x4(q: simd_quatf): simd_float4x4;

declare function simd_matrix3x3(q: simd_quatd): simd_double3x3;

declare function simd_matrix4x4(q: simd_quatd): simd_double4x4;

declare function simd_mul(__a: number, __x: simd_half2x2): simd_half2x2;

declare function simd_mul(__a: number, __x: simd_half3x2): simd_half3x2;

declare function simd_mul(__a: number, __x: simd_half4x2): simd_half4x2;

declare function simd_mul(__a: number, __x: simd_half2x3): simd_half2x3;

declare function simd_mul(__a: number, __x: simd_half3x3): simd_half3x3;

declare function simd_mul(__a: number, __x: simd_half4x3): simd_half4x3;

declare function simd_mul(__a: number, __x: simd_half2x4): simd_half2x4;

declare function simd_mul(__a: number, __x: simd_half3x4): simd_half3x4;

declare function simd_mul(__a: number, __x: simd_half4x4): simd_half4x4;

declare function simd_mul(__a: number, __x: simd_float2x2): simd_float2x2;

declare function simd_mul(__a: number, __x: simd_float3x2): simd_float3x2;

declare function simd_mul(__a: number, __x: simd_float4x2): simd_float4x2;

declare function simd_mul(__a: number, __x: simd_float2x3): simd_float2x3;

declare function simd_mul(__a: number, __x: simd_float3x3): simd_float3x3;

declare function simd_mul(__a: number, __x: simd_float4x3): simd_float4x3;

declare function simd_mul(__a: number, __x: simd_float2x4): simd_float2x4;

declare function simd_mul(__a: number, __x: simd_float3x4): simd_float3x4;

declare function simd_mul(__a: number, __x: simd_float4x4): simd_float4x4;

declare function simd_mul(__a: number, __x: simd_double2x2): simd_double2x2;

declare function simd_mul(__a: number, __x: simd_double3x2): simd_double3x2;

declare function simd_mul(__a: number, __x: simd_double4x2): simd_double4x2;

declare function simd_mul(__a: number, __x: simd_double2x3): simd_double2x3;

declare function simd_mul(__a: number, __x: simd_double3x3): simd_double3x3;

declare function simd_mul(__a: number, __x: simd_double4x3): simd_double4x3;

declare function simd_mul(__a: number, __x: simd_double2x4): simd_double2x4;

declare function simd_mul(__a: number, __x: simd_double3x4): simd_double3x4;

declare function simd_mul(__a: number, __x: simd_double4x4): simd_double4x4;

declare function simd_linear_combination(__a: number, __x: simd_half2x2, __b: number, __y: simd_half2x2): simd_half2x2;

declare function simd_linear_combination(__a: number, __x: simd_half3x2, __b: number, __y: simd_half3x2): simd_half3x2;

declare function simd_linear_combination(__a: number, __x: simd_half4x2, __b: number, __y: simd_half4x2): simd_half4x2;

declare function simd_linear_combination(__a: number, __x: simd_half2x3, __b: number, __y: simd_half2x3): simd_half2x3;

declare function simd_linear_combination(__a: number, __x: simd_half3x3, __b: number, __y: simd_half3x3): simd_half3x3;

declare function simd_linear_combination(__a: number, __x: simd_half4x3, __b: number, __y: simd_half4x3): simd_half4x3;

declare function simd_linear_combination(__a: number, __x: simd_half2x4, __b: number, __y: simd_half2x4): simd_half2x4;

declare function simd_linear_combination(__a: number, __x: simd_half3x4, __b: number, __y: simd_half3x4): simd_half3x4;

declare function simd_linear_combination(__a: number, __x: simd_half4x4, __b: number, __y: simd_half4x4): simd_half4x4;

declare function simd_linear_combination(__a: number, __x: simd_float2x2, __b: number, __y: simd_float2x2): simd_float2x2;

declare function simd_linear_combination(__a: number, __x: simd_float3x2, __b: number, __y: simd_float3x2): simd_float3x2;

declare function simd_linear_combination(__a: number, __x: simd_float4x2, __b: number, __y: simd_float4x2): simd_float4x2;

declare function simd_linear_combination(__a: number, __x: simd_float2x3, __b: number, __y: simd_float2x3): simd_float2x3;

declare function simd_linear_combination(__a: number, __x: simd_float3x3, __b: number, __y: simd_float3x3): simd_float3x3;

declare function simd_linear_combination(__a: number, __x: simd_float4x3, __b: number, __y: simd_float4x3): simd_float4x3;

declare function simd_linear_combination(__a: number, __x: simd_float2x4, __b: number, __y: simd_float2x4): simd_float2x4;

declare function simd_linear_combination(__a: number, __x: simd_float3x4, __b: number, __y: simd_float3x4): simd_float3x4;

declare function simd_linear_combination(__a: number, __x: simd_float4x4, __b: number, __y: simd_float4x4): simd_float4x4;

declare function simd_linear_combination(__a: number, __x: simd_double2x2, __b: number, __y: simd_double2x2): simd_double2x2;

declare function simd_linear_combination(__a: number, __x: simd_double3x2, __b: number, __y: simd_double3x2): simd_double3x2;

declare function simd_linear_combination(__a: number, __x: simd_double4x2, __b: number, __y: simd_double4x2): simd_double4x2;

declare function simd_linear_combination(__a: number, __x: simd_double2x3, __b: number, __y: simd_double2x3): simd_double2x3;

declare function simd_linear_combination(__a: number, __x: simd_double3x3, __b: number, __y: simd_double3x3): simd_double3x3;

declare function simd_linear_combination(__a: number, __x: simd_double4x3, __b: number, __y: simd_double4x3): simd_double4x3;

declare function simd_linear_combination(__a: number, __x: simd_double2x4, __b: number, __y: simd_double2x4): simd_double2x4;

declare function simd_linear_combination(__a: number, __x: simd_double3x4, __b: number, __y: simd_double3x4): simd_double3x4;

declare function simd_linear_combination(__a: number, __x: simd_double4x4, __b: number, __y: simd_double4x4): simd_double4x4;

declare function simd_add(__x: simd_half2x2, __y: simd_half2x2): simd_half2x2;

declare function simd_add(__x: simd_half3x2, __y: simd_half3x2): simd_half3x2;

declare function simd_add(__x: simd_half4x2, __y: simd_half4x2): simd_half4x2;

declare function simd_add(__x: simd_half2x3, __y: simd_half2x3): simd_half2x3;

declare function simd_add(__x: simd_half3x3, __y: simd_half3x3): simd_half3x3;

declare function simd_add(__x: simd_half4x3, __y: simd_half4x3): simd_half4x3;

declare function simd_add(__x: simd_half2x4, __y: simd_half2x4): simd_half2x4;

declare function simd_add(__x: simd_half3x4, __y: simd_half3x4): simd_half3x4;

declare function simd_add(__x: simd_half4x4, __y: simd_half4x4): simd_half4x4;

declare function simd_add(__x: simd_float2x2, __y: simd_float2x2): simd_float2x2;

declare function simd_add(__x: simd_float3x2, __y: simd_float3x2): simd_float3x2;

declare function simd_add(__x: simd_float4x2, __y: simd_float4x2): simd_float4x2;

declare function simd_add(__x: simd_float2x3, __y: simd_float2x3): simd_float2x3;

declare function simd_add(__x: simd_float3x3, __y: simd_float3x3): simd_float3x3;

declare function simd_add(__x: simd_float4x3, __y: simd_float4x3): simd_float4x3;

declare function simd_add(__x: simd_float2x4, __y: simd_float2x4): simd_float2x4;

declare function simd_add(__x: simd_float3x4, __y: simd_float3x4): simd_float3x4;

declare function simd_add(__x: simd_float4x4, __y: simd_float4x4): simd_float4x4;

declare function simd_add(__x: simd_double2x2, __y: simd_double2x2): simd_double2x2;

declare function simd_add(__x: simd_double3x2, __y: simd_double3x2): simd_double3x2;

declare function simd_add(__x: simd_double4x2, __y: simd_double4x2): simd_double4x2;

declare function simd_add(__x: simd_double2x3, __y: simd_double2x3): simd_double2x3;

declare function simd_add(__x: simd_double3x3, __y: simd_double3x3): simd_double3x3;

declare function simd_add(__x: simd_double4x3, __y: simd_double4x3): simd_double4x3;

declare function simd_add(__x: simd_double2x4, __y: simd_double2x4): simd_double2x4;

declare function simd_add(__x: simd_double3x4, __y: simd_double3x4): simd_double3x4;

declare function simd_add(__x: simd_double4x4, __y: simd_double4x4): simd_double4x4;

declare function simd_sub(__x: simd_half2x2, __y: simd_half2x2): simd_half2x2;

declare function simd_sub(__x: simd_half3x2, __y: simd_half3x2): simd_half3x2;

declare function simd_sub(__x: simd_half4x2, __y: simd_half4x2): simd_half4x2;

declare function simd_sub(__x: simd_half2x3, __y: simd_half2x3): simd_half2x3;

declare function simd_sub(__x: simd_half3x3, __y: simd_half3x3): simd_half3x3;

declare function simd_sub(__x: simd_half4x3, __y: simd_half4x3): simd_half4x3;

declare function simd_sub(__x: simd_half2x4, __y: simd_half2x4): simd_half2x4;

declare function simd_sub(__x: simd_half3x4, __y: simd_half3x4): simd_half3x4;

declare function simd_sub(__x: simd_half4x4, __y: simd_half4x4): simd_half4x4;

declare function simd_sub(__x: simd_float2x2, __y: simd_float2x2): simd_float2x2;

declare function simd_sub(__x: simd_float3x2, __y: simd_float3x2): simd_float3x2;

declare function simd_sub(__x: simd_float4x2, __y: simd_float4x2): simd_float4x2;

declare function simd_sub(__x: simd_float2x3, __y: simd_float2x3): simd_float2x3;

declare function simd_sub(__x: simd_float3x3, __y: simd_float3x3): simd_float3x3;

declare function simd_sub(__x: simd_float4x3, __y: simd_float4x3): simd_float4x3;

declare function simd_sub(__x: simd_float2x4, __y: simd_float2x4): simd_float2x4;

declare function simd_sub(__x: simd_float3x4, __y: simd_float3x4): simd_float3x4;

declare function simd_sub(__x: simd_float4x4, __y: simd_float4x4): simd_float4x4;

declare function simd_sub(__x: simd_double2x2, __y: simd_double2x2): simd_double2x2;

declare function simd_sub(__x: simd_double3x2, __y: simd_double3x2): simd_double3x2;

declare function simd_sub(__x: simd_double4x2, __y: simd_double4x2): simd_double4x2;

declare function simd_sub(__x: simd_double2x3, __y: simd_double2x3): simd_double2x3;

declare function simd_sub(__x: simd_double3x3, __y: simd_double3x3): simd_double3x3;

declare function simd_sub(__x: simd_double4x3, __y: simd_double4x3): simd_double4x3;

declare function simd_sub(__x: simd_double2x4, __y: simd_double2x4): simd_double2x4;

declare function simd_sub(__x: simd_double3x4, __y: simd_double3x4): simd_double3x4;

declare function simd_sub(__x: simd_double4x4, __y: simd_double4x4): simd_double4x4;

declare function simd_transpose(__x: simd_half2x2): simd_half2x2;

declare function simd_transpose(__x: simd_half3x2): simd_half2x3;

declare function simd_transpose(__x: simd_half4x2): simd_half2x4;

declare function simd_transpose(__x: simd_half2x3): simd_half3x2;

declare function simd_transpose(__x: simd_half3x3): simd_half3x3;

declare function simd_transpose(__x: simd_half4x3): simd_half3x4;

declare function simd_transpose(__x: simd_half2x4): simd_half4x2;

declare function simd_transpose(__x: simd_half3x4): simd_half4x3;

declare function simd_transpose(__x: simd_half4x4): simd_half4x4;

declare function simd_transpose(__x: simd_float2x2): simd_float2x2;

declare function simd_transpose(__x: simd_float3x2): simd_float2x3;

declare function simd_transpose(__x: simd_float4x2): simd_float2x4;

declare function simd_transpose(__x: simd_float2x3): simd_float3x2;

declare function simd_transpose(__x: simd_float3x3): simd_float3x3;

declare function simd_transpose(__x: simd_float4x3): simd_float3x4;

declare function simd_transpose(__x: simd_float2x4): simd_float4x2;

declare function simd_transpose(__x: simd_float3x4): simd_float4x3;

declare function simd_transpose(__x: simd_float4x4): simd_float4x4;

declare function simd_transpose(__x: simd_double2x2): simd_double2x2;

declare function simd_transpose(__x: simd_double3x2): simd_double2x3;

declare function simd_transpose(__x: simd_double4x2): simd_double2x4;

declare function simd_transpose(__x: simd_double2x3): simd_double3x2;

declare function simd_transpose(__x: simd_double3x3): simd_double3x3;

declare function simd_transpose(__x: simd_double4x3): simd_double3x4;

declare function simd_transpose(__x: simd_double2x4): simd_double4x2;

declare function simd_transpose(__x: simd_double3x4): simd_double4x3;

declare function simd_transpose(__x: simd_double4x4): simd_double4x4;

declare function simd_trace(__x: simd_half2x2): number;

declare function simd_trace(__x: simd_half3x3): number;

declare function simd_trace(__x: simd_half4x4): number;

declare function simd_trace(__x: simd_float2x2): number;

declare function simd_trace(__x: simd_float3x3): number;

declare function simd_trace(__x: simd_float4x4): number;

declare function simd_trace(__x: simd_double2x2): number;

declare function simd_trace(__x: simd_double3x3): number;

declare function simd_trace(__x: simd_double4x4): number;

declare function simd_determinant(__x: simd_half2x2): number;

declare function simd_determinant(__x: simd_half3x3): number;

declare function simd_determinant(__x: simd_half4x4): number;

declare function simd_determinant(__x: simd_float2x2): number;

declare function simd_determinant(__x: simd_float3x3): number;

declare function simd_determinant(__x: simd_float4x4): number;

declare function simd_determinant(__x: simd_double2x2): number;

declare function simd_determinant(__x: simd_double3x3): number;

declare function simd_determinant(__x: simd_double4x4): number;

declare function simd_inverse(__x: simd_half2x2): simd_half2x2;

declare function simd_inverse(__x: simd_half3x3): simd_half3x3;

declare function simd_inverse(__x: simd_half4x4): simd_half4x4;

declare function simd_inverse(__x: simd_float2x2): simd_float2x2;

declare function simd_inverse(__x: simd_float3x3): simd_float3x3;

declare function simd_inverse(__x: simd_float4x4): simd_float4x4;

declare function simd_inverse(__x: simd_double2x2): simd_double2x2;

declare function simd_inverse(__x: simd_double3x3): simd_double3x3;

declare function simd_inverse(__x: simd_double4x4): simd_double4x4;

declare function simd_mul(__x: simd_half2x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_half3x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_half4x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_half2x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_half3x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_half4x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_half2x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_half3x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_half4x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float2x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float3x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float4x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float2x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float3x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float4x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float2x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float3x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float4x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double2x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double3x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double4x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double2x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double3x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double4x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double2x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double3x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double4x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half2x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half3x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half4x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half2x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half3x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half4x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half2x4): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half3x4): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half4x4): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float2x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float3x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float4x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float2x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float3x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float4x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float2x4): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float3x4): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float4x4): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double2x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double3x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double4x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double2x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double3x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double4x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double2x4): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double3x4): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double4x4): unknown /* ext vector */;

declare function simd_mul(__x: simd_half2x2, __y: simd_half2x2): simd_half2x2;

declare function simd_mul(__x: simd_half2x2, __y: simd_half3x2): simd_half3x2;

declare function simd_mul(__x: simd_half2x2, __y: simd_half4x2): simd_half4x2;

declare function simd_mul(__x: simd_half2x3, __y: simd_half2x2): simd_half2x3;

declare function simd_mul(__x: simd_half2x3, __y: simd_half3x2): simd_half3x3;

declare function simd_mul(__x: simd_half2x3, __y: simd_half4x2): simd_half4x3;

declare function simd_mul(__x: simd_half2x4, __y: simd_half2x2): simd_half2x4;

declare function simd_mul(__x: simd_half2x4, __y: simd_half3x2): simd_half3x4;

declare function simd_mul(__x: simd_half2x4, __y: simd_half4x2): simd_half4x4;

declare function simd_mul(__x: simd_float2x2, __y: simd_float2x2): simd_float2x2;

declare function simd_mul(__x: simd_float2x2, __y: simd_float3x2): simd_float3x2;

declare function simd_mul(__x: simd_float2x2, __y: simd_float4x2): simd_float4x2;

declare function simd_mul(__x: simd_float2x3, __y: simd_float2x2): simd_float2x3;

declare function simd_mul(__x: simd_float2x3, __y: simd_float3x2): simd_float3x3;

declare function simd_mul(__x: simd_float2x3, __y: simd_float4x2): simd_float4x3;

declare function simd_mul(__x: simd_float2x4, __y: simd_float2x2): simd_float2x4;

declare function simd_mul(__x: simd_float2x4, __y: simd_float3x2): simd_float3x4;

declare function simd_mul(__x: simd_float2x4, __y: simd_float4x2): simd_float4x4;

declare function simd_mul(__x: simd_double2x2, __y: simd_double2x2): simd_double2x2;

declare function simd_mul(__x: simd_double2x2, __y: simd_double3x2): simd_double3x2;

declare function simd_mul(__x: simd_double2x2, __y: simd_double4x2): simd_double4x2;

declare function simd_mul(__x: simd_double2x3, __y: simd_double2x2): simd_double2x3;

declare function simd_mul(__x: simd_double2x3, __y: simd_double3x2): simd_double3x3;

declare function simd_mul(__x: simd_double2x3, __y: simd_double4x2): simd_double4x3;

declare function simd_mul(__x: simd_double2x4, __y: simd_double2x2): simd_double2x4;

declare function simd_mul(__x: simd_double2x4, __y: simd_double3x2): simd_double3x4;

declare function simd_mul(__x: simd_double2x4, __y: simd_double4x2): simd_double4x4;

declare function simd_mul(__x: simd_half3x2, __y: simd_half2x3): simd_half2x2;

declare function simd_mul(__x: simd_half3x2, __y: simd_half3x3): simd_half3x2;

declare function simd_mul(__x: simd_half3x2, __y: simd_half4x3): simd_half4x2;

declare function simd_mul(__x: simd_half3x3, __y: simd_half2x3): simd_half2x3;

declare function simd_mul(__x: simd_half3x3, __y: simd_half3x3): simd_half3x3;

declare function simd_mul(__x: simd_half3x3, __y: simd_half4x3): simd_half4x3;

declare function simd_mul(__x: simd_half3x4, __y: simd_half2x3): simd_half2x4;

declare function simd_mul(__x: simd_half3x4, __y: simd_half3x3): simd_half3x4;

declare function simd_mul(__x: simd_half3x4, __y: simd_half4x3): simd_half4x4;

declare function simd_mul(__x: simd_float3x2, __y: simd_float2x3): simd_float2x2;

declare function simd_mul(__x: simd_float3x2, __y: simd_float3x3): simd_float3x2;

declare function simd_mul(__x: simd_float3x2, __y: simd_float4x3): simd_float4x2;

declare function simd_mul(__x: simd_float3x3, __y: simd_float2x3): simd_float2x3;

declare function simd_mul(__x: simd_float3x3, __y: simd_float3x3): simd_float3x3;

declare function simd_mul(__x: simd_float3x3, __y: simd_float4x3): simd_float4x3;

declare function simd_mul(__x: simd_float3x4, __y: simd_float2x3): simd_float2x4;

declare function simd_mul(__x: simd_float3x4, __y: simd_float3x3): simd_float3x4;

declare function simd_mul(__x: simd_float3x4, __y: simd_float4x3): simd_float4x4;

declare function simd_mul(__x: simd_double3x2, __y: simd_double2x3): simd_double2x2;

declare function simd_mul(__x: simd_double3x2, __y: simd_double3x3): simd_double3x2;

declare function simd_mul(__x: simd_double3x2, __y: simd_double4x3): simd_double4x2;

declare function simd_mul(__x: simd_double3x3, __y: simd_double2x3): simd_double2x3;

declare function simd_mul(__x: simd_double3x3, __y: simd_double3x3): simd_double3x3;

declare function simd_mul(__x: simd_double3x3, __y: simd_double4x3): simd_double4x3;

declare function simd_mul(__x: simd_double3x4, __y: simd_double2x3): simd_double2x4;

declare function simd_mul(__x: simd_double3x4, __y: simd_double3x3): simd_double3x4;

declare function simd_mul(__x: simd_double3x4, __y: simd_double4x3): simd_double4x4;

declare function simd_mul(__x: simd_half4x2, __y: simd_half2x4): simd_half2x2;

declare function simd_mul(__x: simd_half4x2, __y: simd_half3x4): simd_half3x2;

declare function simd_mul(__x: simd_half4x2, __y: simd_half4x4): simd_half4x2;

declare function simd_mul(__x: simd_half4x3, __y: simd_half2x4): simd_half2x3;

declare function simd_mul(__x: simd_half4x3, __y: simd_half3x4): simd_half3x3;

declare function simd_mul(__x: simd_half4x3, __y: simd_half4x4): simd_half4x3;

declare function simd_mul(__x: simd_half4x4, __y: simd_half2x4): simd_half2x4;

declare function simd_mul(__x: simd_half4x4, __y: simd_half3x4): simd_half3x4;

declare function simd_mul(__x: simd_half4x4, __y: simd_half4x4): simd_half4x4;

declare function simd_mul(__x: simd_float4x2, __y: simd_float2x4): simd_float2x2;

declare function simd_mul(__x: simd_float4x2, __y: simd_float3x4): simd_float3x2;

declare function simd_mul(__x: simd_float4x2, __y: simd_float4x4): simd_float4x2;

declare function simd_mul(__x: simd_float4x3, __y: simd_float2x4): simd_float2x3;

declare function simd_mul(__x: simd_float4x3, __y: simd_float3x4): simd_float3x3;

declare function simd_mul(__x: simd_float4x3, __y: simd_float4x4): simd_float4x3;

declare function simd_mul(__x: simd_float4x4, __y: simd_float2x4): simd_float2x4;

declare function simd_mul(__x: simd_float4x4, __y: simd_float3x4): simd_float3x4;

declare function simd_mul(__x: simd_float4x4, __y: simd_float4x4): simd_float4x4;

declare function simd_mul(__x: simd_double4x2, __y: simd_double2x4): simd_double2x2;

declare function simd_mul(__x: simd_double4x2, __y: simd_double3x4): simd_double3x2;

declare function simd_mul(__x: simd_double4x2, __y: simd_double4x4): simd_double4x2;

declare function simd_mul(__x: simd_double4x3, __y: simd_double2x4): simd_double2x3;

declare function simd_mul(__x: simd_double4x3, __y: simd_double3x4): simd_double3x3;

declare function simd_mul(__x: simd_double4x3, __y: simd_double4x4): simd_double4x3;

declare function simd_mul(__x: simd_double4x4, __y: simd_double2x4): simd_double2x4;

declare function simd_mul(__x: simd_double4x4, __y: simd_double3x4): simd_double3x4;

declare function simd_mul(__x: simd_double4x4, __y: simd_double4x4): simd_double4x4;

declare function simd_equal(__x: simd_half2x2, __y: simd_half2x2): boolean;

declare function simd_equal(__x: simd_half2x3, __y: simd_half2x3): boolean;

declare function simd_equal(__x: simd_half2x4, __y: simd_half2x4): boolean;

declare function simd_equal(__x: simd_half3x2, __y: simd_half3x2): boolean;

declare function simd_equal(__x: simd_half3x3, __y: simd_half3x3): boolean;

declare function simd_equal(__x: simd_half3x4, __y: simd_half3x4): boolean;

declare function simd_equal(__x: simd_half4x2, __y: simd_half4x2): boolean;

declare function simd_equal(__x: simd_half4x3, __y: simd_half4x3): boolean;

declare function simd_equal(__x: simd_half4x4, __y: simd_half4x4): boolean;

declare function simd_equal(__x: simd_float2x2, __y: simd_float2x2): boolean;

declare function simd_equal(__x: simd_float2x3, __y: simd_float2x3): boolean;

declare function simd_equal(__x: simd_float2x4, __y: simd_float2x4): boolean;

declare function simd_equal(__x: simd_float3x2, __y: simd_float3x2): boolean;

declare function simd_equal(__x: simd_float3x3, __y: simd_float3x3): boolean;

declare function simd_equal(__x: simd_float3x4, __y: simd_float3x4): boolean;

declare function simd_equal(__x: simd_float4x2, __y: simd_float4x2): boolean;

declare function simd_equal(__x: simd_float4x3, __y: simd_float4x3): boolean;

declare function simd_equal(__x: simd_float4x4, __y: simd_float4x4): boolean;

declare function simd_equal(__x: simd_double2x2, __y: simd_double2x2): boolean;

declare function simd_equal(__x: simd_double2x3, __y: simd_double2x3): boolean;

declare function simd_equal(__x: simd_double2x4, __y: simd_double2x4): boolean;

declare function simd_equal(__x: simd_double3x2, __y: simd_double3x2): boolean;

declare function simd_equal(__x: simd_double3x3, __y: simd_double3x3): boolean;

declare function simd_equal(__x: simd_double3x4, __y: simd_double3x4): boolean;

declare function simd_equal(__x: simd_double4x2, __y: simd_double4x2): boolean;

declare function simd_equal(__x: simd_double4x3, __y: simd_double4x3): boolean;

declare function simd_equal(__x: simd_double4x4, __y: simd_double4x4): boolean;

declare function simd_almost_equal_elements(__x: simd_half2x2, __y: simd_half2x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_half2x3, __y: simd_half2x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_half2x4, __y: simd_half2x4, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_half3x2, __y: simd_half3x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_half3x3, __y: simd_half3x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_half3x4, __y: simd_half3x4, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_half4x2, __y: simd_half4x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_half4x3, __y: simd_half4x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_half4x4, __y: simd_half4x4, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float2x2, __y: simd_float2x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float2x3, __y: simd_float2x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float2x4, __y: simd_float2x4, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float3x2, __y: simd_float3x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float3x3, __y: simd_float3x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float3x4, __y: simd_float3x4, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float4x2, __y: simd_float4x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float4x3, __y: simd_float4x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float4x4, __y: simd_float4x4, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double2x2, __y: simd_double2x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double2x3, __y: simd_double2x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double2x4, __y: simd_double2x4, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double3x2, __y: simd_double3x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double3x3, __y: simd_double3x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double3x4, __y: simd_double3x4, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double4x2, __y: simd_double4x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double4x3, __y: simd_double4x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double4x4, __y: simd_double4x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half2x2, __y: simd_half2x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half2x3, __y: simd_half2x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half2x4, __y: simd_half2x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half3x2, __y: simd_half3x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half3x3, __y: simd_half3x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half3x4, __y: simd_half3x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half4x2, __y: simd_half4x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half4x3, __y: simd_half4x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half4x4, __y: simd_half4x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float2x2, __y: simd_float2x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float2x3, __y: simd_float2x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float2x4, __y: simd_float2x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float3x2, __y: simd_float3x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float3x3, __y: simd_float3x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float3x4, __y: simd_float3x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float4x2, __y: simd_float4x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float4x3, __y: simd_float4x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float4x4, __y: simd_float4x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double2x2, __y: simd_double2x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double2x3, __y: simd_double2x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double2x4, __y: simd_double2x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double3x2, __y: simd_double3x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double3x3, __y: simd_double3x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double3x4, __y: simd_double3x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double4x2, __y: simd_double4x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double4x3, __y: simd_double4x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double4x4, __y: simd_double4x4, __tol: number): boolean;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_half2x2;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_float2x2;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_double2x2;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_half3x3;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_float3x3;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_double3x3;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_half4x4;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_float4x4;

declare function simd_diagonal_matrix(__x: unknown /* ext vector */): simd_double4x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_half2x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_half2x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_half2x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_float2x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_float2x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_float2x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_double2x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_double2x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */): simd_double2x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_half3x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_half3x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_half3x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_float3x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_float3x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_float3x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_double3x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_double3x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */): simd_double3x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_half4x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_half4x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_half4x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_float4x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_float4x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_float4x4;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_double4x2;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_double4x3;

declare function simd_matrix(col0: unknown /* ext vector */, col1: unknown /* ext vector */, col2: unknown /* ext vector */, col3: unknown /* ext vector */): simd_double4x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_half2x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_half3x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_half4x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_float2x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_float3x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_float4x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_double2x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_double3x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */): simd_double4x2;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_half2x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_half3x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_half4x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_float2x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_float3x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_float4x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_double2x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_double3x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */): simd_double4x3;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_half2x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_half3x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_half4x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_float2x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_float3x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_float4x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_double2x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_double3x4;

declare function simd_matrix_from_rows(row0: unknown /* ext vector */, row1: unknown /* ext vector */, row2: unknown /* ext vector */, row3: unknown /* ext vector */): simd_double4x4;

declare function simd_matrix3x3(q: simd_quath): simd_half3x3;

declare function simd_matrix4x4(q: simd_quath): simd_half4x4;

declare function simd_matrix3x3(q: simd_quatf): simd_float3x3;

declare function simd_matrix4x4(q: simd_quatf): simd_float4x4;

declare function simd_matrix3x3(q: simd_quatd): simd_double3x3;

declare function simd_matrix4x4(q: simd_quatd): simd_double4x4;

declare function matrix_scale(__a: number, __x: simd_half2x2): simd_half2x2;

declare function matrix_scale(__a: number, __x: simd_half3x2): simd_half3x2;

declare function matrix_scale(__a: number, __x: simd_half4x2): simd_half4x2;

declare function matrix_scale(__a: number, __x: simd_half2x3): simd_half2x3;

declare function matrix_scale(__a: number, __x: simd_half3x3): simd_half3x3;

declare function matrix_scale(__a: number, __x: simd_half4x3): simd_half4x3;

declare function matrix_scale(__a: number, __x: simd_half2x4): simd_half2x4;

declare function matrix_scale(__a: number, __x: simd_half3x4): simd_half3x4;

declare function matrix_scale(__a: number, __x: simd_half4x4): simd_half4x4;

declare function matrix_scale(__a: number, __x: simd_float2x2): simd_float2x2;

declare function matrix_scale(__a: number, __x: simd_float3x2): simd_float3x2;

declare function matrix_scale(__a: number, __x: simd_float4x2): simd_float4x2;

declare function matrix_scale(__a: number, __x: simd_float2x3): simd_float2x3;

declare function matrix_scale(__a: number, __x: simd_float3x3): simd_float3x3;

declare function matrix_scale(__a: number, __x: simd_float4x3): simd_float4x3;

declare function matrix_scale(__a: number, __x: simd_float2x4): simd_float2x4;

declare function matrix_scale(__a: number, __x: simd_float3x4): simd_float3x4;

declare function matrix_scale(__a: number, __x: simd_float4x4): simd_float4x4;

declare function matrix_scale(__a: number, __x: simd_double2x2): simd_double2x2;

declare function matrix_scale(__a: number, __x: simd_double3x2): simd_double3x2;

declare function matrix_scale(__a: number, __x: simd_double4x2): simd_double4x2;

declare function matrix_scale(__a: number, __x: simd_double2x3): simd_double2x3;

declare function matrix_scale(__a: number, __x: simd_double3x3): simd_double3x3;

declare function matrix_scale(__a: number, __x: simd_double4x3): simd_double4x3;

declare function matrix_scale(__a: number, __x: simd_double2x4): simd_double2x4;

declare function matrix_scale(__a: number, __x: simd_double3x4): simd_double3x4;

declare function matrix_scale(__a: number, __x: simd_double4x4): simd_double4x4;

declare function simd_mul(__a: number, __x: simd_half2x2): simd_half2x2;

declare function simd_mul(__a: number, __x: simd_half3x2): simd_half3x2;

declare function simd_mul(__a: number, __x: simd_half4x2): simd_half4x2;

declare function simd_mul(__a: number, __x: simd_half2x3): simd_half2x3;

declare function simd_mul(__a: number, __x: simd_half3x3): simd_half3x3;

declare function simd_mul(__a: number, __x: simd_half4x3): simd_half4x3;

declare function simd_mul(__a: number, __x: simd_half2x4): simd_half2x4;

declare function simd_mul(__a: number, __x: simd_half3x4): simd_half3x4;

declare function simd_mul(__a: number, __x: simd_half4x4): simd_half4x4;

declare function simd_mul(__a: number, __x: simd_float2x2): simd_float2x2;

declare function simd_mul(__a: number, __x: simd_float3x2): simd_float3x2;

declare function simd_mul(__a: number, __x: simd_float4x2): simd_float4x2;

declare function simd_mul(__a: number, __x: simd_float2x3): simd_float2x3;

declare function simd_mul(__a: number, __x: simd_float3x3): simd_float3x3;

declare function simd_mul(__a: number, __x: simd_float4x3): simd_float4x3;

declare function simd_mul(__a: number, __x: simd_float2x4): simd_float2x4;

declare function simd_mul(__a: number, __x: simd_float3x4): simd_float3x4;

declare function simd_mul(__a: number, __x: simd_float4x4): simd_float4x4;

declare function simd_mul(__a: number, __x: simd_double2x2): simd_double2x2;

declare function simd_mul(__a: number, __x: simd_double3x2): simd_double3x2;

declare function simd_mul(__a: number, __x: simd_double4x2): simd_double4x2;

declare function simd_mul(__a: number, __x: simd_double2x3): simd_double2x3;

declare function simd_mul(__a: number, __x: simd_double3x3): simd_double3x3;

declare function simd_mul(__a: number, __x: simd_double4x3): simd_double4x3;

declare function simd_mul(__a: number, __x: simd_double2x4): simd_double2x4;

declare function simd_mul(__a: number, __x: simd_double3x4): simd_double3x4;

declare function simd_mul(__a: number, __x: simd_double4x4): simd_double4x4;

declare function simd_linear_combination(__a: number, __x: simd_half2x2, __b: number, __y: simd_half2x2): simd_half2x2;

declare function simd_linear_combination(__a: number, __x: simd_half3x2, __b: number, __y: simd_half3x2): simd_half3x2;

declare function simd_linear_combination(__a: number, __x: simd_half4x2, __b: number, __y: simd_half4x2): simd_half4x2;

declare function simd_linear_combination(__a: number, __x: simd_half2x3, __b: number, __y: simd_half2x3): simd_half2x3;

declare function simd_linear_combination(__a: number, __x: simd_half3x3, __b: number, __y: simd_half3x3): simd_half3x3;

declare function simd_linear_combination(__a: number, __x: simd_half4x3, __b: number, __y: simd_half4x3): simd_half4x3;

declare function simd_linear_combination(__a: number, __x: simd_half2x4, __b: number, __y: simd_half2x4): simd_half2x4;

declare function simd_linear_combination(__a: number, __x: simd_half3x4, __b: number, __y: simd_half3x4): simd_half3x4;

declare function simd_linear_combination(__a: number, __x: simd_half4x4, __b: number, __y: simd_half4x4): simd_half4x4;

declare function simd_linear_combination(__a: number, __x: simd_float2x2, __b: number, __y: simd_float2x2): simd_float2x2;

declare function simd_linear_combination(__a: number, __x: simd_float3x2, __b: number, __y: simd_float3x2): simd_float3x2;

declare function simd_linear_combination(__a: number, __x: simd_float4x2, __b: number, __y: simd_float4x2): simd_float4x2;

declare function simd_linear_combination(__a: number, __x: simd_float2x3, __b: number, __y: simd_float2x3): simd_float2x3;

declare function simd_linear_combination(__a: number, __x: simd_float3x3, __b: number, __y: simd_float3x3): simd_float3x3;

declare function simd_linear_combination(__a: number, __x: simd_float4x3, __b: number, __y: simd_float4x3): simd_float4x3;

declare function simd_linear_combination(__a: number, __x: simd_float2x4, __b: number, __y: simd_float2x4): simd_float2x4;

declare function simd_linear_combination(__a: number, __x: simd_float3x4, __b: number, __y: simd_float3x4): simd_float3x4;

declare function simd_linear_combination(__a: number, __x: simd_float4x4, __b: number, __y: simd_float4x4): simd_float4x4;

declare function simd_linear_combination(__a: number, __x: simd_double2x2, __b: number, __y: simd_double2x2): simd_double2x2;

declare function simd_linear_combination(__a: number, __x: simd_double3x2, __b: number, __y: simd_double3x2): simd_double3x2;

declare function simd_linear_combination(__a: number, __x: simd_double4x2, __b: number, __y: simd_double4x2): simd_double4x2;

declare function simd_linear_combination(__a: number, __x: simd_double2x3, __b: number, __y: simd_double2x3): simd_double2x3;

declare function simd_linear_combination(__a: number, __x: simd_double3x3, __b: number, __y: simd_double3x3): simd_double3x3;

declare function simd_linear_combination(__a: number, __x: simd_double4x3, __b: number, __y: simd_double4x3): simd_double4x3;

declare function simd_linear_combination(__a: number, __x: simd_double2x4, __b: number, __y: simd_double2x4): simd_double2x4;

declare function simd_linear_combination(__a: number, __x: simd_double3x4, __b: number, __y: simd_double3x4): simd_double3x4;

declare function simd_linear_combination(__a: number, __x: simd_double4x4, __b: number, __y: simd_double4x4): simd_double4x4;

declare function simd_add(__x: simd_half2x2, __y: simd_half2x2): simd_half2x2;

declare function simd_add(__x: simd_half3x2, __y: simd_half3x2): simd_half3x2;

declare function simd_add(__x: simd_half4x2, __y: simd_half4x2): simd_half4x2;

declare function simd_add(__x: simd_half2x3, __y: simd_half2x3): simd_half2x3;

declare function simd_add(__x: simd_half3x3, __y: simd_half3x3): simd_half3x3;

declare function simd_add(__x: simd_half4x3, __y: simd_half4x3): simd_half4x3;

declare function simd_add(__x: simd_half2x4, __y: simd_half2x4): simd_half2x4;

declare function simd_add(__x: simd_half3x4, __y: simd_half3x4): simd_half3x4;

declare function simd_add(__x: simd_half4x4, __y: simd_half4x4): simd_half4x4;

declare function simd_add(__x: simd_float2x2, __y: simd_float2x2): simd_float2x2;

declare function simd_add(__x: simd_float3x2, __y: simd_float3x2): simd_float3x2;

declare function simd_add(__x: simd_float4x2, __y: simd_float4x2): simd_float4x2;

declare function simd_add(__x: simd_float2x3, __y: simd_float2x3): simd_float2x3;

declare function simd_add(__x: simd_float3x3, __y: simd_float3x3): simd_float3x3;

declare function simd_add(__x: simd_float4x3, __y: simd_float4x3): simd_float4x3;

declare function simd_add(__x: simd_float2x4, __y: simd_float2x4): simd_float2x4;

declare function simd_add(__x: simd_float3x4, __y: simd_float3x4): simd_float3x4;

declare function simd_add(__x: simd_float4x4, __y: simd_float4x4): simd_float4x4;

declare function simd_add(__x: simd_double2x2, __y: simd_double2x2): simd_double2x2;

declare function simd_add(__x: simd_double3x2, __y: simd_double3x2): simd_double3x2;

declare function simd_add(__x: simd_double4x2, __y: simd_double4x2): simd_double4x2;

declare function simd_add(__x: simd_double2x3, __y: simd_double2x3): simd_double2x3;

declare function simd_add(__x: simd_double3x3, __y: simd_double3x3): simd_double3x3;

declare function simd_add(__x: simd_double4x3, __y: simd_double4x3): simd_double4x3;

declare function simd_add(__x: simd_double2x4, __y: simd_double2x4): simd_double2x4;

declare function simd_add(__x: simd_double3x4, __y: simd_double3x4): simd_double3x4;

declare function simd_add(__x: simd_double4x4, __y: simd_double4x4): simd_double4x4;

declare function simd_sub(__x: simd_half2x2, __y: simd_half2x2): simd_half2x2;

declare function simd_sub(__x: simd_half3x2, __y: simd_half3x2): simd_half3x2;

declare function simd_sub(__x: simd_half4x2, __y: simd_half4x2): simd_half4x2;

declare function simd_sub(__x: simd_half2x3, __y: simd_half2x3): simd_half2x3;

declare function simd_sub(__x: simd_half3x3, __y: simd_half3x3): simd_half3x3;

declare function simd_sub(__x: simd_half4x3, __y: simd_half4x3): simd_half4x3;

declare function simd_sub(__x: simd_half2x4, __y: simd_half2x4): simd_half2x4;

declare function simd_sub(__x: simd_half3x4, __y: simd_half3x4): simd_half3x4;

declare function simd_sub(__x: simd_half4x4, __y: simd_half4x4): simd_half4x4;

declare function simd_sub(__x: simd_float2x2, __y: simd_float2x2): simd_float2x2;

declare function simd_sub(__x: simd_float3x2, __y: simd_float3x2): simd_float3x2;

declare function simd_sub(__x: simd_float4x2, __y: simd_float4x2): simd_float4x2;

declare function simd_sub(__x: simd_float2x3, __y: simd_float2x3): simd_float2x3;

declare function simd_sub(__x: simd_float3x3, __y: simd_float3x3): simd_float3x3;

declare function simd_sub(__x: simd_float4x3, __y: simd_float4x3): simd_float4x3;

declare function simd_sub(__x: simd_float2x4, __y: simd_float2x4): simd_float2x4;

declare function simd_sub(__x: simd_float3x4, __y: simd_float3x4): simd_float3x4;

declare function simd_sub(__x: simd_float4x4, __y: simd_float4x4): simd_float4x4;

declare function simd_sub(__x: simd_double2x2, __y: simd_double2x2): simd_double2x2;

declare function simd_sub(__x: simd_double3x2, __y: simd_double3x2): simd_double3x2;

declare function simd_sub(__x: simd_double4x2, __y: simd_double4x2): simd_double4x2;

declare function simd_sub(__x: simd_double2x3, __y: simd_double2x3): simd_double2x3;

declare function simd_sub(__x: simd_double3x3, __y: simd_double3x3): simd_double3x3;

declare function simd_sub(__x: simd_double4x3, __y: simd_double4x3): simd_double4x3;

declare function simd_sub(__x: simd_double2x4, __y: simd_double2x4): simd_double2x4;

declare function simd_sub(__x: simd_double3x4, __y: simd_double3x4): simd_double3x4;

declare function simd_sub(__x: simd_double4x4, __y: simd_double4x4): simd_double4x4;

declare function simd_transpose(__x: simd_half2x2): simd_half2x2;

declare function simd_transpose(__x: simd_half2x3): simd_half3x2;

declare function simd_transpose(__x: simd_half2x4): simd_half4x2;

declare function simd_transpose(__x: simd_half3x2): simd_half2x3;

declare function simd_transpose(__x: simd_half3x3): simd_half3x3;

declare function simd_transpose(__x: simd_half3x4): simd_half4x3;

declare function simd_transpose(__x: simd_half4x2): simd_half2x4;

declare function simd_transpose(__x: simd_half4x3): simd_half3x4;

declare function simd_transpose(__x: simd_half4x4): simd_half4x4;

declare function simd_transpose(__x: simd_float2x2): simd_float2x2;

declare function simd_transpose(__x: simd_float2x3): simd_float3x2;

declare function simd_transpose(__x: simd_float2x4): simd_float4x2;

declare function simd_transpose(__x: simd_float3x2): simd_float2x3;

declare function simd_transpose(__x: simd_float3x3): simd_float3x3;

declare function simd_transpose(__x: simd_float3x4): simd_float4x3;

declare function simd_transpose(__x: simd_float4x2): simd_float2x4;

declare function simd_transpose(__x: simd_float4x3): simd_float3x4;

declare function simd_transpose(__x: simd_float4x4): simd_float4x4;

declare function simd_transpose(__x: simd_double2x2): simd_double2x2;

declare function simd_transpose(__x: simd_double2x3): simd_double3x2;

declare function simd_transpose(__x: simd_double2x4): simd_double4x2;

declare function simd_transpose(__x: simd_double3x2): simd_double2x3;

declare function simd_transpose(__x: simd_double3x3): simd_double3x3;

declare function simd_transpose(__x: simd_double3x4): simd_double4x3;

declare function simd_transpose(__x: simd_double4x2): simd_double2x4;

declare function simd_transpose(__x: simd_double4x3): simd_double3x4;

declare function simd_transpose(__x: simd_double4x4): simd_double4x4;

declare function __rotate1(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function __rotate2(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function __rotate1(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function __rotate2(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function __rotate3(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function __rotate1(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function __rotate2(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function __rotate1(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function __rotate2(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function __rotate3(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function __rotate1(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function __rotate2(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function __rotate1(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function __rotate2(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function __rotate3(__x: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_trace(__x: simd_half2x2): number;

declare function simd_trace(__x: simd_float2x2): number;

declare function simd_trace(__x: simd_double2x2): number;

declare function simd_trace(__x: simd_half3x3): number;

declare function simd_trace(__x: simd_float3x3): number;

declare function simd_trace(__x: simd_double3x3): number;

declare function simd_trace(__x: simd_half4x4): number;

declare function simd_trace(__x: simd_float4x4): number;

declare function simd_trace(__x: simd_double4x4): number;

declare function simd_determinant(__x: simd_half2x2): number;

declare function simd_determinant(__x: simd_float2x2): number;

declare function simd_determinant(__x: simd_double2x2): number;

declare function simd_determinant(__x: simd_half3x3): number;

declare function simd_determinant(__x: simd_float3x3): number;

declare function simd_determinant(__x: simd_double3x3): number;

declare function simd_determinant(__x: simd_half4x4): number;

declare function simd_determinant(__x: simd_float4x4): number;

declare function simd_determinant(__x: simd_double4x4): number;

declare function simd_inverse(__x: simd_half2x2): simd_half2x2;

declare function simd_inverse(__x: simd_half3x3): simd_half3x3;

declare function simd_inverse(__x: simd_half4x4): simd_half4x4;

declare function simd_inverse(__x: simd_float2x2): simd_float2x2;

declare function simd_inverse(__x: simd_float3x3): simd_float3x3;

declare function simd_inverse(__x: simd_float4x4): simd_float4x4;

declare function simd_inverse(__x: simd_double2x2): simd_double2x2;

declare function simd_inverse(__x: simd_double3x3): simd_double3x3;

declare function simd_inverse(__x: simd_double4x4): simd_double4x4;

declare function simd_mul(__x: simd_half2x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_half2x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_half2x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_half3x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_half3x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_half3x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_half4x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_half4x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_half4x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float2x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float2x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float2x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float3x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float3x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float3x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float4x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float4x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_float4x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double2x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double2x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double2x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double3x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double3x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double3x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double4x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double4x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: simd_double4x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half2x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half3x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half4x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half2x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half3x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half4x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half2x4): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half3x4): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_half4x4): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float2x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float3x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float4x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float2x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float3x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float4x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float2x4): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float3x4): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_float4x4): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double2x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double3x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double4x2): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double2x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double3x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double4x3): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double2x4): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double3x4): unknown /* ext vector */;

declare function simd_mul(__x: unknown /* ext vector */, __y: simd_double4x4): unknown /* ext vector */;

declare function simd_mul(__x: simd_half2x2, __y: simd_half2x2): simd_half2x2;

declare function simd_mul(__x: simd_float2x2, __y: simd_float2x2): simd_float2x2;

declare function simd_mul(__x: simd_double2x2, __y: simd_double2x2): simd_double2x2;

declare function simd_mul(__x: simd_half2x3, __y: simd_half2x2): simd_half2x3;

declare function simd_mul(__x: simd_float2x3, __y: simd_float2x2): simd_float2x3;

declare function simd_mul(__x: simd_double2x3, __y: simd_double2x2): simd_double2x3;

declare function simd_mul(__x: simd_half2x4, __y: simd_half2x2): simd_half2x4;

declare function simd_mul(__x: simd_float2x4, __y: simd_float2x2): simd_float2x4;

declare function simd_mul(__x: simd_double2x4, __y: simd_double2x2): simd_double2x4;

declare function simd_mul(__x: simd_half3x2, __y: simd_half2x3): simd_half2x2;

declare function simd_mul(__x: simd_float3x2, __y: simd_float2x3): simd_float2x2;

declare function simd_mul(__x: simd_double3x2, __y: simd_double2x3): simd_double2x2;

declare function simd_mul(__x: simd_half3x3, __y: simd_half2x3): simd_half2x3;

declare function simd_mul(__x: simd_float3x3, __y: simd_float2x3): simd_float2x3;

declare function simd_mul(__x: simd_double3x3, __y: simd_double2x3): simd_double2x3;

declare function simd_mul(__x: simd_half3x4, __y: simd_half2x3): simd_half2x4;

declare function simd_mul(__x: simd_float3x4, __y: simd_float2x3): simd_float2x4;

declare function simd_mul(__x: simd_double3x4, __y: simd_double2x3): simd_double2x4;

declare function simd_mul(__x: simd_half4x2, __y: simd_half2x4): simd_half2x2;

declare function simd_mul(__x: simd_float4x2, __y: simd_float2x4): simd_float2x2;

declare function simd_mul(__x: simd_double4x2, __y: simd_double2x4): simd_double2x2;

declare function simd_mul(__x: simd_half4x3, __y: simd_half2x4): simd_half2x3;

declare function simd_mul(__x: simd_float4x3, __y: simd_float2x4): simd_float2x3;

declare function simd_mul(__x: simd_double4x3, __y: simd_double2x4): simd_double2x3;

declare function simd_mul(__x: simd_half4x4, __y: simd_half2x4): simd_half2x4;

declare function simd_mul(__x: simd_float4x4, __y: simd_float2x4): simd_float2x4;

declare function simd_mul(__x: simd_double4x4, __y: simd_double2x4): simd_double2x4;

declare function simd_mul(__x: simd_half2x2, __y: simd_half3x2): simd_half3x2;

declare function simd_mul(__x: simd_float2x2, __y: simd_float3x2): simd_float3x2;

declare function simd_mul(__x: simd_double2x2, __y: simd_double3x2): simd_double3x2;

declare function simd_mul(__x: simd_half2x3, __y: simd_half3x2): simd_half3x3;

declare function simd_mul(__x: simd_float2x3, __y: simd_float3x2): simd_float3x3;

declare function simd_mul(__x: simd_double2x3, __y: simd_double3x2): simd_double3x3;

declare function simd_mul(__x: simd_half2x4, __y: simd_half3x2): simd_half3x4;

declare function simd_mul(__x: simd_float2x4, __y: simd_float3x2): simd_float3x4;

declare function simd_mul(__x: simd_double2x4, __y: simd_double3x2): simd_double3x4;

declare function simd_mul(__x: simd_half3x2, __y: simd_half3x3): simd_half3x2;

declare function simd_mul(__x: simd_float3x2, __y: simd_float3x3): simd_float3x2;

declare function simd_mul(__x: simd_double3x2, __y: simd_double3x3): simd_double3x2;

declare function simd_mul(__x: simd_half3x3, __y: simd_half3x3): simd_half3x3;

declare function simd_mul(__x: simd_float3x3, __y: simd_float3x3): simd_float3x3;

declare function simd_mul(__x: simd_double3x3, __y: simd_double3x3): simd_double3x3;

declare function simd_mul(__x: simd_half3x4, __y: simd_half3x3): simd_half3x4;

declare function simd_mul(__x: simd_float3x4, __y: simd_float3x3): simd_float3x4;

declare function simd_mul(__x: simd_double3x4, __y: simd_double3x3): simd_double3x4;

declare function simd_mul(__x: simd_half4x2, __y: simd_half3x4): simd_half3x2;

declare function simd_mul(__x: simd_float4x2, __y: simd_float3x4): simd_float3x2;

declare function simd_mul(__x: simd_double4x2, __y: simd_double3x4): simd_double3x2;

declare function simd_mul(__x: simd_half4x3, __y: simd_half3x4): simd_half3x3;

declare function simd_mul(__x: simd_float4x3, __y: simd_float3x4): simd_float3x3;

declare function simd_mul(__x: simd_double4x3, __y: simd_double3x4): simd_double3x3;

declare function simd_mul(__x: simd_half4x4, __y: simd_half3x4): simd_half3x4;

declare function simd_mul(__x: simd_float4x4, __y: simd_float3x4): simd_float3x4;

declare function simd_mul(__x: simd_double4x4, __y: simd_double3x4): simd_double3x4;

declare function simd_mul(__x: simd_half2x2, __y: simd_half4x2): simd_half4x2;

declare function simd_mul(__x: simd_float2x2, __y: simd_float4x2): simd_float4x2;

declare function simd_mul(__x: simd_double2x2, __y: simd_double4x2): simd_double4x2;

declare function simd_mul(__x: simd_half2x3, __y: simd_half4x2): simd_half4x3;

declare function simd_mul(__x: simd_float2x3, __y: simd_float4x2): simd_float4x3;

declare function simd_mul(__x: simd_double2x3, __y: simd_double4x2): simd_double4x3;

declare function simd_mul(__x: simd_half2x4, __y: simd_half4x2): simd_half4x4;

declare function simd_mul(__x: simd_float2x4, __y: simd_float4x2): simd_float4x4;

declare function simd_mul(__x: simd_double2x4, __y: simd_double4x2): simd_double4x4;

declare function simd_mul(__x: simd_half3x2, __y: simd_half4x3): simd_half4x2;

declare function simd_mul(__x: simd_float3x2, __y: simd_float4x3): simd_float4x2;

declare function simd_mul(__x: simd_double3x2, __y: simd_double4x3): simd_double4x2;

declare function simd_mul(__x: simd_half3x3, __y: simd_half4x3): simd_half4x3;

declare function simd_mul(__x: simd_float3x3, __y: simd_float4x3): simd_float4x3;

declare function simd_mul(__x: simd_double3x3, __y: simd_double4x3): simd_double4x3;

declare function simd_mul(__x: simd_half3x4, __y: simd_half4x3): simd_half4x4;

declare function simd_mul(__x: simd_float3x4, __y: simd_float4x3): simd_float4x4;

declare function simd_mul(__x: simd_double3x4, __y: simd_double4x3): simd_double4x4;

declare function simd_mul(__x: simd_half4x2, __y: simd_half4x4): simd_half4x2;

declare function simd_mul(__x: simd_float4x2, __y: simd_float4x4): simd_float4x2;

declare function simd_mul(__x: simd_double4x2, __y: simd_double4x4): simd_double4x2;

declare function simd_mul(__x: simd_half4x3, __y: simd_half4x4): simd_half4x3;

declare function simd_mul(__x: simd_float4x3, __y: simd_float4x4): simd_float4x3;

declare function simd_mul(__x: simd_double4x3, __y: simd_double4x4): simd_double4x3;

declare function simd_mul(__x: simd_half4x4, __y: simd_half4x4): simd_half4x4;

declare function simd_mul(__x: simd_float4x4, __y: simd_float4x4): simd_float4x4;

declare function simd_mul(__x: simd_double4x4, __y: simd_double4x4): simd_double4x4;

declare function matrix_multiply(__x: simd_half2x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_half2x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_half2x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_half3x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_half3x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_half3x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_half4x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_half4x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_half4x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_float2x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_float2x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_float2x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_float3x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_float3x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_float3x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_float4x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_float4x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_float4x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_double2x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_double2x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_double2x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_double3x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_double3x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_double3x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_double4x2, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_double4x3, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_double4x4, __y: unknown /* ext vector */): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_half2x2): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_half3x2): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_half4x2): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_half2x3): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_half3x3): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_half4x3): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_half2x4): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_half3x4): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_half4x4): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_float2x2): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_float3x2): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_float4x2): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_float2x3): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_float3x3): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_float4x3): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_float2x4): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_float3x4): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_float4x4): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_double2x2): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_double3x2): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_double4x2): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_double2x3): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_double3x3): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_double4x3): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_double2x4): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_double3x4): unknown /* ext vector */;

declare function matrix_multiply(__x: unknown /* ext vector */, __y: simd_double4x4): unknown /* ext vector */;

declare function matrix_multiply(__x: simd_half2x2, __y: simd_half2x2): simd_half2x2;

declare function matrix_multiply(__x: simd_float2x2, __y: simd_float2x2): simd_float2x2;

declare function matrix_multiply(__x: simd_double2x2, __y: simd_double2x2): simd_double2x2;

declare function matrix_multiply(__x: simd_half2x3, __y: simd_half2x2): simd_half2x3;

declare function matrix_multiply(__x: simd_float2x3, __y: simd_float2x2): simd_float2x3;

declare function matrix_multiply(__x: simd_double2x3, __y: simd_double2x2): simd_double2x3;

declare function matrix_multiply(__x: simd_half2x4, __y: simd_half2x2): simd_half2x4;

declare function matrix_multiply(__x: simd_float2x4, __y: simd_float2x2): simd_float2x4;

declare function matrix_multiply(__x: simd_double2x4, __y: simd_double2x2): simd_double2x4;

declare function matrix_multiply(__x: simd_half3x2, __y: simd_half2x3): simd_half2x2;

declare function matrix_multiply(__x: simd_float3x2, __y: simd_float2x3): simd_float2x2;

declare function matrix_multiply(__x: simd_double3x2, __y: simd_double2x3): simd_double2x2;

declare function matrix_multiply(__x: simd_half3x3, __y: simd_half2x3): simd_half2x3;

declare function matrix_multiply(__x: simd_float3x3, __y: simd_float2x3): simd_float2x3;

declare function matrix_multiply(__x: simd_double3x3, __y: simd_double2x3): simd_double2x3;

declare function matrix_multiply(__x: simd_half3x4, __y: simd_half2x3): simd_half2x4;

declare function matrix_multiply(__x: simd_float3x4, __y: simd_float2x3): simd_float2x4;

declare function matrix_multiply(__x: simd_double3x4, __y: simd_double2x3): simd_double2x4;

declare function matrix_multiply(__x: simd_half4x2, __y: simd_half2x4): simd_half2x2;

declare function matrix_multiply(__x: simd_float4x2, __y: simd_float2x4): simd_float2x2;

declare function matrix_multiply(__x: simd_double4x2, __y: simd_double2x4): simd_double2x2;

declare function matrix_multiply(__x: simd_half4x3, __y: simd_half2x4): simd_half2x3;

declare function matrix_multiply(__x: simd_float4x3, __y: simd_float2x4): simd_float2x3;

declare function matrix_multiply(__x: simd_double4x3, __y: simd_double2x4): simd_double2x3;

declare function matrix_multiply(__x: simd_half4x4, __y: simd_half2x4): simd_half2x4;

declare function matrix_multiply(__x: simd_float4x4, __y: simd_float2x4): simd_float2x4;

declare function matrix_multiply(__x: simd_double4x4, __y: simd_double2x4): simd_double2x4;

declare function matrix_multiply(__x: simd_half2x2, __y: simd_half3x2): simd_half3x2;

declare function matrix_multiply(__x: simd_float2x2, __y: simd_float3x2): simd_float3x2;

declare function matrix_multiply(__x: simd_double2x2, __y: simd_double3x2): simd_double3x2;

declare function matrix_multiply(__x: simd_half2x3, __y: simd_half3x2): simd_half3x3;

declare function matrix_multiply(__x: simd_float2x3, __y: simd_float3x2): simd_float3x3;

declare function matrix_multiply(__x: simd_double2x3, __y: simd_double3x2): simd_double3x3;

declare function matrix_multiply(__x: simd_half2x4, __y: simd_half3x2): simd_half3x4;

declare function matrix_multiply(__x: simd_float2x4, __y: simd_float3x2): simd_float3x4;

declare function matrix_multiply(__x: simd_double2x4, __y: simd_double3x2): simd_double3x4;

declare function matrix_multiply(__x: simd_half3x2, __y: simd_half3x3): simd_half3x2;

declare function matrix_multiply(__x: simd_float3x2, __y: simd_float3x3): simd_float3x2;

declare function matrix_multiply(__x: simd_double3x2, __y: simd_double3x3): simd_double3x2;

declare function matrix_multiply(__x: simd_half3x3, __y: simd_half3x3): simd_half3x3;

declare function matrix_multiply(__x: simd_float3x3, __y: simd_float3x3): simd_float3x3;

declare function matrix_multiply(__x: simd_double3x3, __y: simd_double3x3): simd_double3x3;

declare function matrix_multiply(__x: simd_half3x4, __y: simd_half3x3): simd_half3x4;

declare function matrix_multiply(__x: simd_float3x4, __y: simd_float3x3): simd_float3x4;

declare function matrix_multiply(__x: simd_double3x4, __y: simd_double3x3): simd_double3x4;

declare function matrix_multiply(__x: simd_half4x2, __y: simd_half3x4): simd_half3x2;

declare function matrix_multiply(__x: simd_float4x2, __y: simd_float3x4): simd_float3x2;

declare function matrix_multiply(__x: simd_double4x2, __y: simd_double3x4): simd_double3x2;

declare function matrix_multiply(__x: simd_half4x3, __y: simd_half3x4): simd_half3x3;

declare function matrix_multiply(__x: simd_float4x3, __y: simd_float3x4): simd_float3x3;

declare function matrix_multiply(__x: simd_double4x3, __y: simd_double3x4): simd_double3x3;

declare function matrix_multiply(__x: simd_half4x4, __y: simd_half3x4): simd_half3x4;

declare function matrix_multiply(__x: simd_float4x4, __y: simd_float3x4): simd_float3x4;

declare function matrix_multiply(__x: simd_double4x4, __y: simd_double3x4): simd_double3x4;

declare function matrix_multiply(__x: simd_half2x2, __y: simd_half4x2): simd_half4x2;

declare function matrix_multiply(__x: simd_float2x2, __y: simd_float4x2): simd_float4x2;

declare function matrix_multiply(__x: simd_double2x2, __y: simd_double4x2): simd_double4x2;

declare function matrix_multiply(__x: simd_half2x3, __y: simd_half4x2): simd_half4x3;

declare function matrix_multiply(__x: simd_float2x3, __y: simd_float4x2): simd_float4x3;

declare function matrix_multiply(__x: simd_double2x3, __y: simd_double4x2): simd_double4x3;

declare function matrix_multiply(__x: simd_half2x4, __y: simd_half4x2): simd_half4x4;

declare function matrix_multiply(__x: simd_float2x4, __y: simd_float4x2): simd_float4x4;

declare function matrix_multiply(__x: simd_double2x4, __y: simd_double4x2): simd_double4x4;

declare function matrix_multiply(__x: simd_half3x2, __y: simd_half4x3): simd_half4x2;

declare function matrix_multiply(__x: simd_float3x2, __y: simd_float4x3): simd_float4x2;

declare function matrix_multiply(__x: simd_double3x2, __y: simd_double4x3): simd_double4x2;

declare function matrix_multiply(__x: simd_half3x3, __y: simd_half4x3): simd_half4x3;

declare function matrix_multiply(__x: simd_float3x3, __y: simd_float4x3): simd_float4x3;

declare function matrix_multiply(__x: simd_double3x3, __y: simd_double4x3): simd_double4x3;

declare function matrix_multiply(__x: simd_half3x4, __y: simd_half4x3): simd_half4x4;

declare function matrix_multiply(__x: simd_float3x4, __y: simd_float4x3): simd_float4x4;

declare function matrix_multiply(__x: simd_double3x4, __y: simd_double4x3): simd_double4x4;

declare function matrix_multiply(__x: simd_half4x2, __y: simd_half4x4): simd_half4x2;

declare function matrix_multiply(__x: simd_float4x2, __y: simd_float4x4): simd_float4x2;

declare function matrix_multiply(__x: simd_double4x2, __y: simd_double4x4): simd_double4x2;

declare function matrix_multiply(__x: simd_half4x3, __y: simd_half4x4): simd_half4x3;

declare function matrix_multiply(__x: simd_float4x3, __y: simd_float4x4): simd_float4x3;

declare function matrix_multiply(__x: simd_double4x3, __y: simd_double4x4): simd_double4x3;

declare function matrix_multiply(__x: simd_half4x4, __y: simd_half4x4): simd_half4x4;

declare function matrix_multiply(__x: simd_float4x4, __y: simd_float4x4): simd_float4x4;

declare function matrix_multiply(__x: simd_double4x4, __y: simd_double4x4): simd_double4x4;

declare function simd_equal(__x: simd_half2x2, __y: simd_half2x2): boolean;

declare function simd_equal(__x: simd_half2x3, __y: simd_half2x3): boolean;

declare function simd_equal(__x: simd_half2x4, __y: simd_half2x4): boolean;

declare function simd_equal(__x: simd_half3x2, __y: simd_half3x2): boolean;

declare function simd_equal(__x: simd_half3x3, __y: simd_half3x3): boolean;

declare function simd_equal(__x: simd_half3x4, __y: simd_half3x4): boolean;

declare function simd_equal(__x: simd_half4x2, __y: simd_half4x2): boolean;

declare function simd_equal(__x: simd_half4x3, __y: simd_half4x3): boolean;

declare function simd_equal(__x: simd_half4x4, __y: simd_half4x4): boolean;

declare function simd_equal(__x: simd_float2x2, __y: simd_float2x2): boolean;

declare function simd_equal(__x: simd_float2x3, __y: simd_float2x3): boolean;

declare function simd_equal(__x: simd_float2x4, __y: simd_float2x4): boolean;

declare function simd_equal(__x: simd_float3x2, __y: simd_float3x2): boolean;

declare function simd_equal(__x: simd_float3x3, __y: simd_float3x3): boolean;

declare function simd_equal(__x: simd_float3x4, __y: simd_float3x4): boolean;

declare function simd_equal(__x: simd_float4x2, __y: simd_float4x2): boolean;

declare function simd_equal(__x: simd_float4x3, __y: simd_float4x3): boolean;

declare function simd_equal(__x: simd_float4x4, __y: simd_float4x4): boolean;

declare function simd_equal(__x: simd_double2x2, __y: simd_double2x2): boolean;

declare function simd_equal(__x: simd_double2x3, __y: simd_double2x3): boolean;

declare function simd_equal(__x: simd_double2x4, __y: simd_double2x4): boolean;

declare function simd_equal(__x: simd_double3x2, __y: simd_double3x2): boolean;

declare function simd_equal(__x: simd_double3x3, __y: simd_double3x3): boolean;

declare function simd_equal(__x: simd_double3x4, __y: simd_double3x4): boolean;

declare function simd_equal(__x: simd_double4x2, __y: simd_double4x2): boolean;

declare function simd_equal(__x: simd_double4x3, __y: simd_double4x3): boolean;

declare function simd_equal(__x: simd_double4x4, __y: simd_double4x4): boolean;

declare function simd_almost_equal_elements(__x: simd_half2x2, __y: simd_half2x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_half2x3, __y: simd_half2x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_half2x4, __y: simd_half2x4, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_half3x2, __y: simd_half3x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_half3x3, __y: simd_half3x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_half3x4, __y: simd_half3x4, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_half4x2, __y: simd_half4x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_half4x3, __y: simd_half4x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_half4x4, __y: simd_half4x4, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float2x2, __y: simd_float2x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float2x3, __y: simd_float2x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float2x4, __y: simd_float2x4, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float3x2, __y: simd_float3x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float3x3, __y: simd_float3x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float3x4, __y: simd_float3x4, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float4x2, __y: simd_float4x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float4x3, __y: simd_float4x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_float4x4, __y: simd_float4x4, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double2x2, __y: simd_double2x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double2x3, __y: simd_double2x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double2x4, __y: simd_double2x4, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double3x2, __y: simd_double3x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double3x3, __y: simd_double3x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double3x4, __y: simd_double3x4, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double4x2, __y: simd_double4x2, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double4x3, __y: simd_double4x3, __tol: number): boolean;

declare function simd_almost_equal_elements(__x: simd_double4x4, __y: simd_double4x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half2x2, __y: simd_half2x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half2x3, __y: simd_half2x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half2x4, __y: simd_half2x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half3x2, __y: simd_half3x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half3x3, __y: simd_half3x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half3x4, __y: simd_half3x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half4x2, __y: simd_half4x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half4x3, __y: simd_half4x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_half4x4, __y: simd_half4x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float2x2, __y: simd_float2x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float2x3, __y: simd_float2x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float2x4, __y: simd_float2x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float3x2, __y: simd_float3x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float3x3, __y: simd_float3x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float3x4, __y: simd_float3x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float4x2, __y: simd_float4x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float4x3, __y: simd_float4x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_float4x4, __y: simd_float4x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double2x2, __y: simd_double2x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double2x3, __y: simd_double2x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double2x4, __y: simd_double2x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double3x2, __y: simd_double3x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double3x3, __y: simd_double3x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double3x4, __y: simd_double3x4, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double4x2, __y: simd_double4x2, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double4x3, __y: simd_double4x3, __tol: number): boolean;

declare function simd_almost_equal_elements_relative(__x: simd_double4x4, __y: simd_double4x4, __tol: number): boolean;

declare function simd_quaternion(from: unknown /* ext vector */, to: unknown /* ext vector */): simd_quath;

declare function simd_quaternion(matrix: simd_half3x3): simd_quath;

declare function simd_quaternion(matrix: simd_half4x4): simd_quath;

declare function __tg_log(q: simd_quath): simd_quath;

declare function __tg_exp(q: simd_quath): simd_quath;

declare function simd_slerp(q0: simd_quath, q1: simd_quath, t: number): simd_quath;

declare function simd_slerp_longest(q0: simd_quath, q1: simd_quath, t: number): simd_quath;

declare function simd_spline(q0: simd_quath, q1: simd_quath, q2: simd_quath, q3: simd_quath, t: number): simd_quath;

declare function simd_bezier(q0: simd_quath, q1: simd_quath, q2: simd_quath, q3: simd_quath, t: number): simd_quath;

declare function __tg_promote(p1: simd_quath): simd_quath;

declare function __tg_log(q: simd_quath): simd_quath;

declare function __tg_exp(q: simd_quath): simd_quath;

declare function simd_quaternion(from: unknown /* ext vector */, to: unknown /* ext vector */): simd_quath;

declare function simd_quaternion(matrix: simd_half3x3): simd_quath;

declare function simd_quaternion(matrix: simd_half4x4): simd_quath;

declare function _simd_angle(p: simd_quath, q: simd_quath): number;

declare function _simd_sinc(x: number): number;

declare function _simd_slerp_internal(q0: simd_quath, q1: simd_quath, t: number): simd_quath;

declare function simd_slerp(q0: simd_quath, q1: simd_quath, t: number): simd_quath;

declare function simd_slerp_longest(q0: simd_quath, q1: simd_quath, t: number): simd_quath;

declare function _simd_intermediate(q0: simd_quath, q1: simd_quath, q2: simd_quath): simd_quath;

declare function _simd_squad(q0: simd_quath, qa: simd_quath, qb: simd_quath, q1: simd_quath, t: number): simd_quath;

declare function simd_spline(q0: simd_quath, q1: simd_quath, q2: simd_quath, q3: simd_quath, t: number): simd_quath;

declare function simd_bezier(q0: simd_quath, q1: simd_quath, q2: simd_quath, q3: simd_quath, t: number): simd_quath;

declare function simd_quaternion(from: unknown /* ext vector */, to: unknown /* ext vector */): simd_quatf;

declare function simd_quaternion(matrix: simd_float3x3): simd_quatf;

declare function simd_quaternion(matrix: simd_float4x4): simd_quatf;

declare function __tg_log(q: simd_quatf): simd_quatf;

declare function __tg_exp(q: simd_quatf): simd_quatf;

declare function simd_slerp(q0: simd_quatf, q1: simd_quatf, t: number): simd_quatf;

declare function simd_slerp_longest(q0: simd_quatf, q1: simd_quatf, t: number): simd_quatf;

declare function simd_spline(q0: simd_quatf, q1: simd_quatf, q2: simd_quatf, q3: simd_quatf, t: number): simd_quatf;

declare function simd_bezier(q0: simd_quatf, q1: simd_quatf, q2: simd_quatf, q3: simd_quatf, t: number): simd_quatf;

declare function __tg_promote(p1: simd_quatf): simd_quatf;

declare function __tg_log(q: simd_quatf): simd_quatf;

declare function __tg_exp(q: simd_quatf): simd_quatf;

declare function simd_quaternion(from: unknown /* ext vector */, to: unknown /* ext vector */): simd_quatf;

declare function simd_quaternion(matrix: simd_float3x3): simd_quatf;

declare function simd_quaternion(matrix: simd_float4x4): simd_quatf;

declare function _simd_angle(p: simd_quatf, q: simd_quatf): number;

declare function _simd_sinc(x: number): number;

declare function _simd_slerp_internal(q0: simd_quatf, q1: simd_quatf, t: number): simd_quatf;

declare function simd_slerp(q0: simd_quatf, q1: simd_quatf, t: number): simd_quatf;

declare function simd_slerp_longest(q0: simd_quatf, q1: simd_quatf, t: number): simd_quatf;

declare function _simd_intermediate(q0: simd_quatf, q1: simd_quatf, q2: simd_quatf): simd_quatf;

declare function _simd_squad(q0: simd_quatf, qa: simd_quatf, qb: simd_quatf, q1: simd_quatf, t: number): simd_quatf;

declare function simd_spline(q0: simd_quatf, q1: simd_quatf, q2: simd_quatf, q3: simd_quatf, t: number): simd_quatf;

declare function simd_bezier(q0: simd_quatf, q1: simd_quatf, q2: simd_quatf, q3: simd_quatf, t: number): simd_quatf;

declare function simd_quaternion(from: unknown /* ext vector */, to: unknown /* ext vector */): simd_quatd;

declare function simd_quaternion(matrix: simd_double3x3): simd_quatd;

declare function simd_quaternion(matrix: simd_double4x4): simd_quatd;

declare function __tg_log(q: simd_quatd): simd_quatd;

declare function __tg_exp(q: simd_quatd): simd_quatd;

declare function simd_slerp(q0: simd_quatd, q1: simd_quatd, t: number): simd_quatd;

declare function simd_slerp_longest(q0: simd_quatd, q1: simd_quatd, t: number): simd_quatd;

declare function simd_spline(q0: simd_quatd, q1: simd_quatd, q2: simd_quatd, q3: simd_quatd, t: number): simd_quatd;

declare function simd_bezier(q0: simd_quatd, q1: simd_quatd, q2: simd_quatd, q3: simd_quatd, t: number): simd_quatd;

declare function __tg_promote(p1: simd_quatd): simd_quatd;

declare function __tg_log(q: simd_quatd): simd_quatd;

declare function __tg_exp(q: simd_quatd): simd_quatd;

declare function simd_quaternion(from: unknown /* ext vector */, to: unknown /* ext vector */): simd_quatd;

declare function simd_quaternion(matrix: simd_double3x3): simd_quatd;

declare function simd_quaternion(matrix: simd_double4x4): simd_quatd;

declare function _simd_angle(p: simd_quatd, q: simd_quatd): number;

declare function _simd_sinc(x: number): number;

declare function _simd_slerp_internal(q0: simd_quatd, q1: simd_quatd, t: number): simd_quatd;

declare function simd_slerp(q0: simd_quatd, q1: simd_quatd, t: number): simd_quatd;

declare function simd_slerp_longest(q0: simd_quatd, q1: simd_quatd, t: number): simd_quatd;

declare function _simd_intermediate(q0: simd_quatd, q1: simd_quatd, q2: simd_quatd): simd_quatd;

declare function _simd_squad(q0: simd_quatd, qa: simd_quatd, qb: simd_quatd, q1: simd_quatd, t: number): simd_quatd;

declare function simd_spline(q0: simd_quatd, q1: simd_quatd, q2: simd_quatd, q3: simd_quatd, t: number): simd_quatd;

declare function simd_bezier(q0: simd_quatd, q1: simd_quatd, q2: simd_quatd, q3: simd_quatd, t: number): simd_quatd;

declare function lpss_uart_enable(on_off: number): void;

declare function PE_enter_debugger(cause: string): void;

declare function PE_init_platform(vm_initialized: number, args: interop.PointerConvertible): void;

declare function PE_get_random_seed(dst_random_seed: interop.PointerConvertible, request_size: number): number;

declare function PE_i_can_has_debugger(p1: interop.PointerConvertible): number;

declare function PE_stub_poll_input(options: number, c: string): number;

declare function PE_panic_debugging_enabled(): number;

declare function PE_mark_hwaccess(thread: number): void;

declare function PE_mark_hwaccess_data(type: number, size: number, paddr: number): void;

declare function PE_get_offset_into_panic_region(location: string): number;

declare function PE_init_panicheader(): void;

declare function PE_update_panicheader_nestedpanic(): void;

declare function PE_handle_platform_error(far: number): boolean;

declare function PE_init_taproot(taddr: interop.PointerConvertible): number;

declare function PE_init_printf(vm_initialized: number): void;

declare function PE_init_iokit(): void;

declare function PE_lockdown_iokit(): void;

declare function PE_register_timebase_callback(callback: (p1: interop.PointerConvertible) => void): void;

declare function PE_call_timebase_callback(): void;

declare function kprintf(fmt: string): void;

declare function init_display_putc(baseaddr: interop.PointerConvertible, rowbytes: number, height: number): void;

declare function display_putc(c: number): void;

declare function initialize_screen(p1: interop.PointerConvertible, p2: number): void;

declare function dim_screen(): void;

declare function PE_current_console(info: interop.PointerConvertible): number;

declare function PE_create_console(): void;

declare function PE_initialize_console(newInfo: interop.PointerConvertible, op: number): number;

declare function PE_display_icon(flags: number, name: string): void;

declare function PE_boot_args(): string;

declare function PE_parse_boot_argn(arg_string: string, arg_ptr: interop.PointerConvertible, max_arg: number): number;

declare function PE_boot_arg_uint64_eq(arg_string: string, value: number): number;

declare function PE_parse_boot_arg_str(arg_string: string, arg_ptr: string, size: number): number;

declare function PE_get_default(property_name: string, property_ptr: interop.PointerConvertible, max_property: number): number;

declare function PE_get_hotkey(key: number): number;

declare function PE_cpu_start(target: interop.PointerConvertible, start_paddr: number, arg_paddr: number): number;

declare function PE_cpu_halt(target: interop.PointerConvertible): void;

declare function PE_cpu_down(target: interop.PointerConvertible): boolean;

declare function PE_cpu_signal(source: interop.PointerConvertible, target: interop.PointerConvertible): void;

declare function PE_cpu_signal_deferred(source: interop.PointerConvertible, target: interop.PointerConvertible): void;

declare function PE_cpu_signal_cancel(source: interop.PointerConvertible, target: interop.PointerConvertible): void;

declare function PE_cpu_machine_init(target: interop.PointerConvertible, bootb: number): void;

declare function PE_cpu_machine_quiesce(target: interop.PointerConvertible): void;

declare function pe_init_debug(): void;

declare function PE_imgsrc_mount_supported(): number;

declare function PE_panic_hook(str: string): void;

declare function PE_init_cpu(): void;

declare function PE_handle_ext_interrupt(): void;

declare function PE_cpu_power_enable(cpu_id: number): void;

declare function PE_cpu_power_disable(cpu_id: number): void;

declare function PE_cpu_power_check_kdp(cpu_id: number): boolean;

declare function PE_singlestep_hook(): void;

declare function PE_cpu_perfmon_interrupt_install_handler(handler: (p1: interop.PointerConvertible) => void): number;

declare function PE_cpu_perfmon_interrupt_enable(target: interop.PointerConvertible, enable: number): void;

declare function PE_get_kc_header(type: interop.Enum<typeof kc_kind>): interop.Pointer;

declare function PE_get_kc_baseaddress(type: interop.Enum<typeof kc_kind>): interop.Pointer;

declare function PE_get_kc_base_pointers(): interop.Pointer;

declare function PE_get_kc_slide(type: interop.Enum<typeof kc_kind>): number;

declare function PE_get_primary_kc_format(type: interop.PointerConvertible): boolean;

declare function PE_get_kc_format(type: interop.Enum<typeof kc_kind>, format: interop.PointerConvertible): boolean;

declare function PE_set_kc_vp(type: interop.Enum<typeof kc_kind>, vp: interop.PointerConvertible): void;

declare function PE_get_kc_vp(type: interop.Enum<typeof kc_kind>): interop.Pointer;

declare function PE_reset_all_kc_vp(): void;

declare function PE_init_socd_client(): number;

declare function PE_read_socd_client_buffer(offset: number, out_buff: interop.PointerConvertible, size: number): void;

declare function PE_write_socd_client_buffer(offset: number, in_buff: interop.PointerConvertible, size: number): void;

declare function __map_with_linking_np(regions: interop.Pointer, regionCount: number, blob: interop.PointerConvertible, blobSize: number): number;

declare function TclBN_epoch(): number;

declare function TclBN_revision(): number;

declare function TclBN_mp_add(a: interop.PointerConvertible, b: interop.PointerConvertible, c: interop.PointerConvertible): number;

declare function TclBN_mp_add_d(a: interop.PointerConvertible, b: number, c: interop.PointerConvertible): number;

declare function TclBN_mp_and(a: interop.PointerConvertible, b: interop.PointerConvertible, c: interop.PointerConvertible): number;

declare function TclBN_mp_clamp(a: interop.PointerConvertible): void;

declare function TclBN_mp_clear(a: interop.PointerConvertible): void;

declare function TclBN_mp_clear_multi(a: interop.PointerConvertible): void;

declare function TclBN_mp_cmp(a: interop.PointerConvertible, b: interop.PointerConvertible): number;

declare function TclBN_mp_cmp_d(a: interop.PointerConvertible, b: number): number;

declare function TclBN_mp_cmp_mag(a: interop.PointerConvertible, b: interop.PointerConvertible): number;

declare function TclBN_mp_copy(a: interop.PointerConvertible, b: interop.PointerConvertible): number;

declare function TclBN_mp_count_bits(a: interop.PointerConvertible): number;

declare function TclBN_mp_div(a: interop.PointerConvertible, b: interop.PointerConvertible, q: interop.PointerConvertible, r: interop.PointerConvertible): number;

declare function TclBN_mp_div_d(a: interop.PointerConvertible, b: number, q: interop.PointerConvertible, r: interop.PointerConvertible): number;

declare function TclBN_mp_div_2(a: interop.PointerConvertible, q: interop.PointerConvertible): number;

declare function TclBN_mp_div_2d(a: interop.PointerConvertible, b: number, q: interop.PointerConvertible, r: interop.PointerConvertible): number;

declare function TclBN_mp_div_3(a: interop.PointerConvertible, q: interop.PointerConvertible, r: interop.PointerConvertible): number;

declare function TclBN_mp_exch(a: interop.PointerConvertible, b: interop.PointerConvertible): void;

declare function TclBN_mp_expt_d(a: interop.PointerConvertible, b: number, c: interop.PointerConvertible): number;

declare function TclBN_mp_grow(a: interop.PointerConvertible, size: number): number;

declare function TclBN_mp_init(a: interop.PointerConvertible): number;

declare function TclBN_mp_init_copy(a: interop.PointerConvertible, b: interop.PointerConvertible): number;

declare function TclBN_mp_init_multi(a: interop.PointerConvertible): number;

declare function TclBN_mp_init_set(a: interop.PointerConvertible, b: number): number;

declare function TclBN_mp_init_size(a: interop.PointerConvertible, size: number): number;

declare function TclBN_mp_lshd(a: interop.PointerConvertible, shift: number): number;

declare function TclBN_mp_mod(a: interop.PointerConvertible, b: interop.PointerConvertible, r: interop.PointerConvertible): number;

declare function TclBN_mp_mod_2d(a: interop.PointerConvertible, b: number, r: interop.PointerConvertible): number;

declare function TclBN_mp_mul(a: interop.PointerConvertible, b: interop.PointerConvertible, p: interop.PointerConvertible): number;

declare function TclBN_mp_mul_d(a: interop.PointerConvertible, b: number, p: interop.PointerConvertible): number;

declare function TclBN_mp_mul_2(a: interop.PointerConvertible, p: interop.PointerConvertible): number;

declare function TclBN_mp_mul_2d(a: interop.PointerConvertible, d: number, p: interop.PointerConvertible): number;

declare function TclBN_mp_neg(a: interop.PointerConvertible, b: interop.PointerConvertible): number;

declare function TclBN_mp_or(a: interop.PointerConvertible, b: interop.PointerConvertible, c: interop.PointerConvertible): number;

declare function TclBN_mp_radix_size(a: interop.PointerConvertible, radix: number, size: interop.PointerConvertible): number;

declare function TclBN_mp_read_radix(a: interop.PointerConvertible, str: string, radix: number): number;

declare function TclBN_mp_rshd(a: interop.PointerConvertible, shift: number): void;

declare function TclBN_mp_shrink(a: interop.PointerConvertible): number;

declare function TclBN_mp_set(a: interop.PointerConvertible, b: number): void;

declare function TclBN_mp_sqr(a: interop.PointerConvertible, b: interop.PointerConvertible): number;

declare function TclBN_mp_sqrt(a: interop.PointerConvertible, b: interop.PointerConvertible): number;

declare function TclBN_mp_sub(a: interop.PointerConvertible, b: interop.PointerConvertible, c: interop.PointerConvertible): number;

declare function TclBN_mp_sub_d(a: interop.PointerConvertible, b: number, c: interop.PointerConvertible): number;

declare function TclBN_mp_to_unsigned_bin(a: interop.PointerConvertible, b: interop.PointerConvertible): number;

declare function TclBN_mp_to_unsigned_bin_n(a: interop.PointerConvertible, b: interop.PointerConvertible, outlen: interop.PointerConvertible): number;

declare function TclBN_mp_toradix_n(a: interop.PointerConvertible, str: string, radix: number, maxlen: number): number;

declare function TclBN_mp_unsigned_bin_size(a: interop.PointerConvertible): number;

declare function TclBN_mp_xor(a: interop.PointerConvertible, b: interop.PointerConvertible, c: interop.PointerConvertible): number;

declare function TclBN_mp_zero(a: interop.PointerConvertible): void;

declare function TclBN_reverse(s: interop.PointerConvertible, len: number): void;

declare function TclBN_fast_s_mp_mul_digs(a: interop.PointerConvertible, b: interop.PointerConvertible, c: interop.PointerConvertible, digs: number): number;

declare function TclBN_fast_s_mp_sqr(a: interop.PointerConvertible, b: interop.PointerConvertible): number;

declare function TclBN_mp_karatsuba_mul(a: interop.PointerConvertible, b: interop.PointerConvertible, c: interop.PointerConvertible): number;

declare function TclBN_mp_karatsuba_sqr(a: interop.PointerConvertible, b: interop.PointerConvertible): number;

declare function TclBN_mp_toom_mul(a: interop.PointerConvertible, b: interop.PointerConvertible, c: interop.PointerConvertible): number;

declare function TclBN_mp_toom_sqr(a: interop.PointerConvertible, b: interop.PointerConvertible): number;

declare function TclBN_s_mp_add(a: interop.PointerConvertible, b: interop.PointerConvertible, c: interop.PointerConvertible): number;

declare function TclBN_s_mp_mul_digs(a: interop.PointerConvertible, b: interop.PointerConvertible, c: interop.PointerConvertible, digs: number): number;

declare function TclBN_s_mp_sqr(a: interop.PointerConvertible, b: interop.PointerConvertible): number;

declare function TclBN_s_mp_sub(a: interop.PointerConvertible, b: interop.PointerConvertible, c: interop.PointerConvertible): number;

declare interface OS_os_workgroup_intervalProtocol {
}

declare class OS_os_workgroup_intervalProtocol extends NativeObject implements OS_os_workgroup_intervalProtocol {
}

declare interface OS_dispatch_queue extends OS_dispatch_object {
}

declare class OS_dispatch_queue extends NativeObject implements OS_dispatch_queue {
}

declare interface OS_dispatch_semaphore extends OS_dispatch_object {
}

declare class OS_dispatch_semaphore extends NativeObject implements OS_dispatch_semaphore {
}

declare interface OS_dispatch_queue_concurrent extends OS_dispatch_queue {
}

declare class OS_dispatch_queue_concurrent extends NativeObject implements OS_dispatch_queue_concurrent {
}

declare interface OS_os_workgroup_parallelProtocol {
}

declare class OS_os_workgroup_parallelProtocol extends NativeObject implements OS_os_workgroup_parallelProtocol {
}

declare interface OS_os_log extends NSObjectProtocol {
}

declare class OS_os_log extends NativeObject implements OS_os_log {
}

declare interface OS_dispatch_queue_serial_executor extends OS_dispatch_queue {
}

declare class OS_dispatch_queue_serial_executor extends NativeObject implements OS_dispatch_queue_serial_executor {
}

declare interface OS_dispatch_workloop extends OS_dispatch_queue {
}

declare class OS_dispatch_workloop extends NativeObject implements OS_dispatch_workloop {
}

declare interface OS_dispatch_queue_global extends OS_dispatch_queue {
}

declare class OS_dispatch_queue_global extends NativeObject implements OS_dispatch_queue_global {
}

declare interface OS_dispatch_queue_serial extends OS_dispatch_queue {
}

declare class OS_dispatch_queue_serial extends NativeObject implements OS_dispatch_queue_serial {
}

declare interface OS_dispatch_queue_attr extends OS_dispatch_object {
}

declare class OS_dispatch_queue_attr extends NativeObject implements OS_dispatch_queue_attr {
}

declare interface OS_xpc_session extends NSObjectProtocol {
}

declare class OS_xpc_session extends NativeObject implements OS_xpc_session {
}

declare interface OS_dispatch_object extends NSObjectProtocol {
}

declare class OS_dispatch_object extends NativeObject implements OS_dispatch_object {
}

declare interface OS_dispatch_group extends OS_dispatch_object {
}

declare class OS_dispatch_group extends NativeObject implements OS_dispatch_group {
}

declare interface OS_at_encoder extends NSObjectProtocol {
}

declare class OS_at_encoder extends NativeObject implements OS_at_encoder {
}

declare interface OS_dispatch_io extends OS_dispatch_object {
}

declare class OS_dispatch_io extends NativeObject implements OS_dispatch_io {
}

declare interface OS_xpc_object extends NSObjectProtocol {
}

declare class OS_xpc_object extends NativeObject implements OS_xpc_object {
}

declare interface NSObjectProtocol {
  isEqual(object: interop.Object): boolean;

  readonly hash: number;

  readonly superclass: interop.Object;

  class(): interop.Object;

  self(): this;

  performSelector(aSelector: string): interop.Object;

  performSelectorWithObject(aSelector: string, object: interop.Object): interop.Object;

  performSelectorWithObjectWithObject(aSelector: string, object1: interop.Object, object2: interop.Object): interop.Object;

  readonly isProxy: boolean;

  isKindOfClass(aClass: interop.Object): boolean;

  isMemberOfClass(aClass: interop.Object): boolean;

  conformsToProtocol(aProtocol: interop.PointerConvertible): boolean;

  respondsToSelector(aSelector: string): boolean;

  retain(): this;

  release(): void;

  autorelease(): this;

  retainCount(): number;

  readonly zone: interop.Pointer;

  readonly description: string;

  readonly debugDescription?: string;
}

declare class NSObjectProtocol extends NativeObject implements NSObjectProtocol {
}

declare interface OS_os_activity extends NSObjectProtocol {
}

declare class OS_os_activity extends NativeObject implements OS_os_activity {
}

declare interface OS_dispatch_source extends OS_dispatch_object {
}

declare class OS_dispatch_source extends NativeObject implements OS_dispatch_source {
}

declare interface OS_xpc_peer_requirement extends NSObjectProtocol {
}

declare class OS_xpc_peer_requirement extends NativeObject implements OS_xpc_peer_requirement {
}

declare interface OS_xpc_listener extends NSObjectProtocol {
}

declare class OS_xpc_listener extends NativeObject implements OS_xpc_listener {
}

declare interface OS_dispatch_queue_main extends OS_dispatch_queue_serial {
}

declare class OS_dispatch_queue_main extends NativeObject implements OS_dispatch_queue_main {
}

declare interface OS_dispatch_data extends OS_dispatch_object {
}

declare class OS_dispatch_data extends NativeObject implements OS_dispatch_data {
}

declare class OS_os_workgroup extends OS_object {
  init(): this;
}

declare class OS_object extends NSObject {
  init(): this;
}

declare class Protocol extends NSObject {
}

declare class OS_os_workgroup_interval extends OS_os_workgroup implements OS_os_workgroup_intervalProtocol {
  init(): this;
}

declare class NSObject extends NativeObject implements NSObjectProtocol {
  static load(): void;

  static initialize(): void;

  init(): this;

  static new<This extends abstract new (...args: any) => any>(this: This): InstanceType<This>;

  static allocWithZone<This extends abstract new (...args: any) => any>(this: This, zone: interop.PointerConvertible): InstanceType<This>;

  static alloc<This extends abstract new (...args: any) => any>(this: This): InstanceType<This>;

  dealloc(): void;

  finalize(): void;

  copy(): interop.Object;

  mutableCopy(): interop.Object;

  static copyWithZone(zone: interop.PointerConvertible): interop.Object;

  static mutableCopyWithZone(zone: interop.PointerConvertible): interop.Object;

  static instancesRespondToSelector(aSelector: string): boolean;

  static conformsToProtocol(protocol: interop.PointerConvertible): boolean;

  methodForSelector(aSelector: string): () => void;

  static instanceMethodForSelector(aSelector: string): () => void;

  doesNotRecognizeSelector(aSelector: string): void;

  forwardingTargetForSelector(aSelector: string): interop.Object;

  forwardInvocation(anInvocation: NSInvocation): void;

  methodSignatureForSelector(aSelector: string): NSMethodSignature;

  static instanceMethodSignatureForSelector(aSelector: string): NSMethodSignature;

  static isSubclassOfClass(aClass: interop.Object): boolean;

  static resolveClassMethod(sel: string): boolean;

  static resolveInstanceMethod(sel: string): boolean;

  static hash(): number;

  static superclass(): interop.Object;

  static class(): interop.Object;

  static description(): string;

  static debugDescription(): string;

  static version(): number;

  static setVersion(aVersion: number): void;

  readonly classForCoder: interop.Object;

  replacementObjectForCoder(coder: NSCoder): interop.Object;

  awakeAfterUsingCoder(coder: NSCoder): interop.Object;

  readonly autoContentAccessingProxy: interop.Object;

  attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(error: NSError, recoveryOptionIndex: number, delegate: interop.Object | null, didRecoverSelector: string | null, contextInfo: interop.PointerConvertible): void;

  attemptRecoveryFromErrorOptionIndex(error: NSError, recoveryOptionIndex: number): boolean;

  performSelectorWithObjectAfterDelayInModes(aSelector: string, anArgument: interop.Object | null, delay: number, modes: NSArray<interop.Object> | Array<interop.Object>): void;

  performSelectorWithObjectAfterDelay(aSelector: string, anArgument: interop.Object | null, delay: number): void;

  static cancelPreviousPerformRequestsWithTargetSelectorObject(aTarget: interop.Object, aSelector: string, anArgument: interop.Object | null): void;

  static cancelPreviousPerformRequestsWithTarget(aTarget: interop.Object): void;

  URLResourceDataDidBecomeAvailable(sender: NSURL, newBytes: NSData): void;

  URLResourceDidFinishLoading(sender: NSURL): void;

  URLResourceDidCancelLoading(sender: NSURL): void;

  URLResourceDidFailLoadingWithReason(sender: NSURL, reason: string): void;

  fileManagerShouldProceedAfterError(fm: NSFileManager, errorInfo: NSDictionary<interop.Object, interop.Object> | Record<interop.Object, interop.Object>): boolean;

  fileManagerWillProcessPath(fm: NSFileManager, path: string): void;

  static readonly accessInstanceVariablesDirectly: boolean;

  valueForKey(key: string): interop.Object;

  setValueForKey(value: interop.Object | null, key: string): void;

  validateValueForKeyError(ioValue: interop.PointerConvertible, inKey: string, outError: interop.PointerConvertible): boolean;

  mutableArrayValueForKey(key: string): NSMutableArray;

  mutableOrderedSetValueForKey(key: string): NSMutableOrderedSet;

  mutableSetValueForKey(key: string): NSMutableSet;

  valueForKeyPath(keyPath: string): interop.Object;

  setValueForKeyPath(value: interop.Object | null, keyPath: string): void;

  validateValueForKeyPathError(ioValue: interop.PointerConvertible, inKeyPath: string, outError: interop.PointerConvertible): boolean;

  mutableArrayValueForKeyPath(keyPath: string): NSMutableArray;

  mutableOrderedSetValueForKeyPath(keyPath: string): NSMutableOrderedSet;

  mutableSetValueForKeyPath(keyPath: string): NSMutableSet;

  valueForUndefinedKey(key: string): interop.Object;

  setValueForUndefinedKey(value: interop.Object | null, key: string): void;

  setNilValueForKey(key: string): void;

  dictionaryWithValuesForKeys(keys: NSArray<interop.Object> | Array<interop.Object>): NSDictionary;

  setValuesForKeysWithDictionary(keyedValues: NSDictionary<interop.Object, interop.Object> | Record<interop.Object, interop.Object>): void;

  static useStoredAccessor(): boolean;

  storedValueForKey(key: string): interop.Object;

  takeStoredValueForKey(value: interop.Object | null, key: string): void;

  takeValueForKey(value: interop.Object | null, key: string): void;

  takeValueForKeyPath(value: interop.Object | null, keyPath: string): void;

  handleQueryWithUnboundKey(key: string): interop.Object;

  handleTakeValueForUnboundKey(value: interop.Object | null, key: string): void;

  unableToSetNilForKey(key: string): void;

  valuesForKeys(keys: NSArray<interop.Object> | Array<interop.Object>): NSDictionary;

  takeValuesFromDictionary(properties: NSDictionary<interop.Object, interop.Object> | Record<interop.Object, interop.Object>): void;

  observeValueForKeyPathOfObjectChangeContext(keyPath: string | null, object: interop.Object | null, change: NSDictionary<interop.Object, interop.Object> | Record<interop.Object, interop.Object> | null, context: interop.PointerConvertible): void;

  addObserverForKeyPathOptionsContext(observer: NSObject, keyPath: string, options: interop.Enum<typeof NSKeyValueObservingOptions>, context: interop.PointerConvertible): void;

  removeObserverForKeyPathContext(observer: NSObject, keyPath: string, context: interop.PointerConvertible): void;

  removeObserverForKeyPath(observer: NSObject, keyPath: string): void;

  willChangeValueForKey(key: string): void;

  didChangeValueForKey(key: string): void;

  willChangeValuesAtIndexesForKey(changeKind: interop.Enum<typeof NSKeyValueChange>, indexes: NSIndexSet, key: string): void;

  didChangeValuesAtIndexesForKey(changeKind: interop.Enum<typeof NSKeyValueChange>, indexes: NSIndexSet, key: string): void;

  willChangeValueForKeyWithSetMutationUsingObjects(key: string, mutationKind: interop.Enum<typeof NSKeyValueSetMutationKind>, objects: NSSet): void;

  didChangeValueForKeyWithSetMutationUsingObjects(key: string, mutationKind: interop.Enum<typeof NSKeyValueSetMutationKind>, objects: NSSet): void;

  static keyPathsForValuesAffectingValueForKey(key: string): NSSet;

  static automaticallyNotifiesObserversForKey(key: string): boolean;

  get observationInfo(): interop.Pointer;
  set observationInfo(value: interop.PointerConvertible);

  setObservationInfo(observationInfo: interop.PointerConvertible): void;

  static setKeysTriggerChangeNotificationsForDependentKey(keys: NSArray<interop.Object> | Array<interop.Object>, dependentKey: string): void;

  setSharedObservers(sharedObservers: NSKeyValueSharedObserversSnapshot | null): void;

  readonly classForKeyedArchiver: interop.Object;

  replacementObjectForKeyedArchiver(archiver: NSKeyedArchiver): interop.Object;

  static classFallbacksForKeyedArchiver(): NSArray;

  static classForKeyedUnarchiver(): interop.Object;

  performSelectorOnMainThreadWithObjectWaitUntilDoneModes(aSelector: string, arg: interop.Object | null, wait: boolean, array: NSArray<interop.Object> | Array<interop.Object> | null): void;

  performSelectorOnMainThreadWithObjectWaitUntilDone(aSelector: string, arg: interop.Object | null, wait: boolean): void;

  performSelectorOnThreadWithObjectWaitUntilDoneModes(aSelector: string, thr: NSThread, arg: interop.Object | null, wait: boolean, array: NSArray<interop.Object> | Array<interop.Object> | null): void;

  performSelectorOnThreadWithObjectWaitUntilDone(aSelector: string, thr: NSThread, arg: interop.Object | null, wait: boolean): void;

  performSelectorInBackgroundWithObject(aSelector: string, arg: interop.Object | null): void;

  readonly classForArchiver: interop.Object;

  replacementObjectForArchiver(archiver: NSArchiver): interop.Object;

  readonly classForPortCoder: interop.Object;

  replacementObjectForPortCoder(coder: NSPortCoder): interop.Object;

  readonly classDescription: NSClassDescription;

  readonly attributeKeys: NSArray;

  readonly toOneRelationshipKeys: NSArray;

  readonly toManyRelationshipKeys: NSArray;

  inverseForRelationshipKey(relationshipKey: string): string;

  scriptingValueForSpecifier(objectSpecifier: NSScriptObjectSpecifier): interop.Object;

  get scriptingProperties(): NSDictionary;
  set scriptingProperties(value: NSDictionary<interop.Object, interop.Object> | Record<interop.Object, interop.Object>);

  copyScriptingValueForKeyWithProperties(value: interop.Object, key: string, properties: NSDictionary<interop.Object, interop.Object> | Record<interop.Object, interop.Object>): interop.Object;

  newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(objectClass: interop.Object, key: string, contentsValue: interop.Object | null, properties: NSDictionary<interop.Object, interop.Object> | Record<interop.Object, interop.Object>): interop.Object;

  setScriptingProperties(scriptingProperties: NSDictionary<interop.Object, interop.Object> | Record<interop.Object, interop.Object> | null): void;

  readonly classCode: number;

  readonly className: string;

  valueAtIndexInPropertyWithKey(index: number, key: string): interop.Object;

  valueWithNameInPropertyWithKey(name: string, key: string): interop.Object;

  valueWithUniqueIDInPropertyWithKey(uniqueID: interop.Object, key: string): interop.Object;

  insertValueAtIndexInPropertyWithKey(value: interop.Object, index: number, key: string): void;

  removeValueAtIndexFromPropertyWithKey(index: number, key: string): void;

  replaceValueAtIndexInPropertyWithKeyWithValue(index: number, key: string, value: interop.Object): void;

  insertValueInPropertyWithKey(value: interop.Object, key: string): void;

  coerceValueForKey(value: interop.Object | null, key: string): interop.Object;

  readonly objectSpecifier: NSScriptObjectSpecifier;

  indicesOfObjectsByEvaluatingObjectSpecifier(specifier: NSScriptObjectSpecifier): NSArray;

  isEqualTo(object: interop.Object | null): boolean;

  isLessThanOrEqualTo(object: interop.Object | null): boolean;

  isLessThan(object: interop.Object | null): boolean;

  isGreaterThanOrEqualTo(object: interop.Object | null): boolean;

  isGreaterThan(object: interop.Object | null): boolean;

  isNotEqualTo(object: interop.Object | null): boolean;

  doesContain(object: interop.Object): boolean;

  isLike(object: string): boolean;

  isCaseInsensitiveLike(object: string): boolean;

  scriptingIsEqualTo(object: interop.Object): boolean;

  scriptingIsLessThanOrEqualTo(object: interop.Object): boolean;

  scriptingIsLessThan(object: interop.Object): boolean;

  scriptingIsGreaterThanOrEqualTo(object: interop.Object): boolean;

  scriptingIsGreaterThan(object: interop.Object): boolean;

  scriptingBeginsWith(object: interop.Object): boolean;

  scriptingEndsWith(object: interop.Object): boolean;

  scriptingContains(object: interop.Object): boolean;

  accessibilityAttributeNames(): NSArray;

  accessibilityAttributeValue(attribute: string): interop.Object;

  accessibilityIsAttributeSettable(attribute: string): boolean;

  accessibilitySetValueForAttribute(value: interop.Object | null, attribute: string): void;

  accessibilityParameterizedAttributeNames(): NSArray;

  accessibilityAttributeValueForParameter(attribute: string, parameter: interop.Object | null): interop.Object;

  accessibilityActionNames(): NSArray;

  accessibilityActionDescription(action: string): string;

  accessibilityPerformAction(action: string): void;

  accessibilityIsIgnored(): boolean;

  accessibilityHitTest(point: CGPoint): interop.Object;

  readonly accessibilityFocusedUIElement: interop.Object;

  accessibilityIndexOfChild(child: interop.Object): number;

  accessibilityArrayAttributeCount(attribute: string): number;

  accessibilityArrayAttributeValuesIndexMaxCount(attribute: string, index: number, maxCount: number): NSArray;

  readonly accessibilityNotifiesWhenDestroyed: boolean;

  accessibilitySetOverrideValueForAttribute(value: interop.Object | null, attribute: string): boolean;

  pasteboardProvideDataForType(sender: NSPasteboard, type: string): void;

  pasteboardChangedOwner(sender: NSPasteboard): void;

  namesOfPromisedFilesDroppedAtDestination(dropDestination: NSURL): NSArray;

  draggingSourceOperationMaskForLocal(flag: boolean): interop.Enum<typeof NSDragOperation>;

  draggedImageBeganAt(image: NSImage, screenPoint: CGPoint): void;

  draggedImageEndedAtOperation(image: NSImage, screenPoint: CGPoint, operation: interop.Enum<typeof NSDragOperation>): void;

  draggedImageMovedTo(image: NSImage, screenPoint: CGPoint): void;

  ignoreModifierKeysWhileDragging(): boolean;

  draggedImageEndedAtDeposited(image: NSImage, screenPoint: CGPoint, flag: boolean): void;

  layerShouldInheritContentsScaleFromWindow(layer: CALayer, newScale: number, window: NSWindow): boolean;

  viewStringForToolTipPointUserData(view: NSView, tag: number, point: CGPoint, data: interop.PointerConvertible): string;

  validateMenuItem(menuItem: NSMenuItem): boolean;

  static exposeBinding(binding: string): void;

  readonly exposedBindings: NSArray;

  valueClassForBinding(binding: string): interop.Object;

  bindToObjectWithKeyPathOptions(binding: string, observable: interop.Object, keyPath: string, options: NSDictionary<interop.Object, interop.Object> | Record<interop.Object, interop.Object> | null): void;

  unbind(binding: string): void;

  infoForBinding(binding: string): NSDictionary;

  optionDescriptionsForBinding(binding: string): NSArray;

  static setDefaultPlaceholderForMarkerWithBinding(placeholder: interop.Object | null, marker: interop.Object | null, binding: string): void;

  static defaultPlaceholderForMarkerWithBinding(marker: interop.Object | null, binding: string): interop.Object;

  discardEditing(): void;

  commitEditing(): boolean;

  commitEditingWithDelegateDidCommitSelectorContextInfo(delegate: interop.Object | null, didCommitSelector: string | null, contextInfo: interop.PointerConvertible): void;

  commitEditingAndReturnError(error: interop.PointerConvertible): boolean;

  objectDidBeginEditing(editor: NSEditor): void;

  objectDidEndEditing(editor: NSEditor): void;

  controlTextDidBeginEditing(obj: NSNotification): void;

  controlTextDidEndEditing(obj: NSNotification): void;

  controlTextDidChange(obj: NSNotification): void;

  fontManagerWillIncludeFont(sender: interop.Object, fontName: string): boolean;

  changeFont(sender: interop.Object | null): void;

  validModesForFontPanel(fontPanel: NSFontPanel): interop.Enum<typeof NSFontPanelModeMask>;

  changeColor(sender: interop.Object | null): void;

  awakeFromNib(): void;

  prepareForInterfaceBuilder(): void;

  panelIsValidFilename(sender: interop.Object, filename: string): boolean;

  panelDirectoryDidChange(sender: interop.Object, path: string): void;

  panelCompareFilenameWithCaseSensitive(sender: interop.Object, name1: string, name2: string, caseSensitive: boolean): interop.Enum<typeof NSComparisonResult>;

  panelShouldShowFilename(sender: interop.Object, filename: string): boolean;

  textStorageWillProcessEditing(notification: NSNotification): void;

  textStorageDidProcessEditing(notification: NSNotification): void;

  validateToolbarItem(item: NSToolbarItem): boolean;

  tableViewWriteRowsToPasteboard(tableView: NSTableView, rows: NSArray<interop.Object> | Array<interop.Object>, pboard: NSPasteboard): boolean;

  applicationDelegateHandlesKey(sender: NSApplication, key: string): boolean;

  provideImageDataBytesPerRowOriginSizeUserInfo(data: interop.PointerConvertible, rowbytes: number, originx: number, originy: number, width: number, height: number, info: interop.Object | null): void;

  provideImageToMTLTextureCommandBufferOriginxOriginyWidthHeightUserInfo(texture: MTLTexture, commandBuffer: MTLCommandBuffer, originx: number, originy: number, width: number, height: number, info: interop.Object | null): void;

  chooseIdentityPanelShowHelp(sender: SFChooseIdentityPanel): boolean;

  authorizationViewDidAuthorize(view: SFAuthorizationView): void;

  authorizationViewDidDeauthorize(view: SFAuthorizationView): void;

  authorizationViewShouldDeauthorize(view: SFAuthorizationView): boolean;

  authorizationViewCreatedAuthorization(view: SFAuthorizationView): void;

  authorizationViewReleasedAuthorization(view: SFAuthorizationView): void;

  authorizationViewDidHide(view: SFAuthorizationView): void;

  certificatePanelShowHelp(sender: SFCertificatePanel): boolean;

  workflowControllerWillRun(controller: AMWorkflowController): void;

  workflowControllerWillStop(controller: AMWorkflowController): void;

  workflowControllerDidRun(controller: AMWorkflowController): void;

  workflowControllerDidStop(controller: AMWorkflowController): void;

  workflowControllerWillRunAction(controller: AMWorkflowController, action: AMAction): void;

  workflowControllerDidRunAction(controller: AMWorkflowController, action: AMAction): void;

  workflowControllerDidError(controller: AMWorkflowController, error: NSError): void;

  exceptionHandlerShouldLogExceptionMask(sender: NSExceptionHandler, exception: NSException, aMask: number): boolean;

  exceptionHandlerShouldHandleExceptionMask(sender: NSExceptionHandler, exception: NSException, aMask: number): boolean;

  readRSSIForDeviceCompleteDeviceInfoError(controller: interop.Object, device: IOBluetoothDevice, info: interop.PointerConvertible, error: number): void;

  readLinkQualityForDeviceCompleteDeviceInfoError(controller: interop.Object, device: IOBluetoothDevice, info: interop.PointerConvertible, error: number): void;

  registerIncomingDataListenerRefCon(listener: (p1: interop.PointerConvertible, p2: interop.PointerConvertible, p3: number, p4: interop.PointerConvertible) => void, refCon: interop.PointerConvertible): number;

  writeLength(data: interop.PointerConvertible, length: number): number;

  static withL2CAPChannelRef(l2capChannelRef: interop.Object): IOBluetoothL2CAPChannel;

  getL2CAPChannelRef(): interop.Object;

  fileTransferServicesConnectionCompleteError(inServices: OBEXFileTransferServices, inError: number): void;

  fileTransferServicesDisconnectionCompleteError(inServices: OBEXFileTransferServices, inError: number): void;

  fileTransferServicesAbortCompleteError(inServices: OBEXFileTransferServices, inError: number): void;

  fileTransferServicesRemoveItemCompleteErrorRemovedItem(inServices: OBEXFileTransferServices, inError: number, inItemName: string): void;

  fileTransferServicesCreateFolderCompleteErrorFolder(inServices: OBEXFileTransferServices, inError: number, inFolderName: string): void;

  fileTransferServicesPathChangeCompleteErrorFinalPath(inServices: OBEXFileTransferServices, inError: number, inPath: string): void;

  fileTransferServicesRetrieveFolderListingCompleteErrorListing(inServices: OBEXFileTransferServices, inError: number, inListing: NSArray<interop.Object> | Array<interop.Object>): void;

  fileTransferServicesFilePreparationCompleteError(inServices: OBEXFileTransferServices, inError: number): void;

  fileTransferServicesSendFileProgressTransferProgress(inServices: OBEXFileTransferServices, inProgressDescription: NSDictionary<interop.Object, interop.Object> | Record<interop.Object, interop.Object>): void;

  fileTransferServicesSendFileCompleteError(inServices: OBEXFileTransferServices, inError: number): void;

  fileTransferServicesCopyRemoteFileProgressTransferProgress(inServices: OBEXFileTransferServices, inProgressDescription: NSDictionary<interop.Object, interop.Object> | Record<interop.Object, interop.Object>): void;

  fileTransferServicesCopyRemoteFileCompleteError(inServices: OBEXFileTransferServices, inError: number): void;

  compositionParameterViewShouldDisplayParameterWithKeyAttributes(parameterView: QCCompositionParameterView, portKey: string, portAttributes: NSDictionary<interop.Object, interop.Object> | Record<interop.Object, interop.Object>): boolean;

  compositionParameterViewDidChangeParameterWithKey(parameterView: QCCompositionParameterView, portKey: string): void;

  compositionPickerViewDidSelectComposition(pickerView: QCCompositionPickerView, composition: QCComposition): void;

  compositionPickerViewDidStartAnimating(pickerView: QCCompositionPickerView): void;

  compositionPickerViewWillStopAnimating(pickerView: QCCompositionPickerView): void;

  quartzFilterManagerDidAddFilter(sender: QuartzFilterManager, filter: QuartzFilter): void;

  quartzFilterManagerDidRemoveFilter(sender: QuartzFilterManager, filter: QuartzFilter): void;

  quartzFilterManagerDidModifyFilter(sender: QuartzFilterManager, filter: QuartzFilter): void;

  quartzFilterManagerDidSelectFilter(sender: QuartzFilterManager, filter: QuartzFilter): void;

  numberOfItemsInImageBrowser(aBrowser: IKImageBrowserView): number;

  imageBrowserItemAtIndex(aBrowser: IKImageBrowserView, index: number): interop.Object;

  imageBrowserRemoveItemsAtIndexes(aBrowser: IKImageBrowserView, indexes: NSIndexSet): void;

  imageBrowserMoveItemsAtIndexesToIndex(aBrowser: IKImageBrowserView, indexes: NSIndexSet, destinationIndex: number): boolean;

  imageBrowserWriteItemsAtIndexesToPasteboard(aBrowser: IKImageBrowserView, itemIndexes: NSIndexSet, pasteboard: NSPasteboard): number;

  numberOfGroupsInImageBrowser(aBrowser: IKImageBrowserView): number;

  imageBrowserGroupAtIndex(aBrowser: IKImageBrowserView, index: number): NSDictionary;

  imageUID(): string;

  imageRepresentationType(): string;

  imageRepresentation(): interop.Object;

  imageVersion(): number;

  imageTitle(): string;

  imageSubtitle(): string;

  readonly selectable: boolean;

  isSelectable(): boolean;

  imageBrowserSelectionDidChange(aBrowser: IKImageBrowserView): void;

  imageBrowserCellWasDoubleClickedAtIndex(aBrowser: IKImageBrowserView, index: number): void;

  imageBrowserCellWasRightClickedAtIndexWithEvent(aBrowser: IKImageBrowserView, index: number, event: NSEvent): void;

  imageBrowserBackgroundWasRightClickedWithEvent(aBrowser: IKImageBrowserView, event: NSEvent): void;

  saveOptionsShouldShowUTType(saveOptions: IKSaveOptions, utType: string): boolean;

  acceptsPreviewPanelControl(panel: QLPreviewPanel): boolean;

  beginPreviewPanelControl(panel: QLPreviewPanel): void;

  endPreviewPanelControl(panel: QLPreviewPanel): void;

  sessionDriverDidRegisterClientAndReturnError(sender: ISyncSessionDriver, outError: interop.PointerConvertible): boolean;

  sessionDriverWillNegotiateAndReturnError(sender: ISyncSessionDriver, outError: interop.PointerConvertible): boolean;

  sessionDriverDidNegotiateAndReturnError(sender: ISyncSessionDriver, outError: interop.PointerConvertible): boolean;

  sessionDriverWillPushAndReturnError(sender: ISyncSessionDriver, outError: interop.PointerConvertible): boolean;

  sessionDriverDidPushAndReturnError(sender: ISyncSessionDriver, outError: interop.PointerConvertible): boolean;

  sessionDriverWillPullAndReturnError(sender: ISyncSessionDriver, outError: interop.PointerConvertible): boolean;

  sessionDriverDidPullAndReturnError(sender: ISyncSessionDriver, outError: interop.PointerConvertible): boolean;

  sessionDriverWillFinishSessionAndReturnError(sender: ISyncSessionDriver, outError: interop.PointerConvertible): boolean;

  sessionDriverDidFinishSession(sender: ISyncSessionDriver): void;

  sessionDriverWillCancelSession(sender: ISyncSessionDriver): void;

  sessionDriverDidCancelSession(sender: ISyncSessionDriver): void;

  sessionDriverDidReceiveSyncAlertAndReturnError(sender: ISyncSessionDriver, outError: interop.PointerConvertible): boolean;

  setupPanelDeviceCouldBeTarget(aPanel: DRSetupPanel, device: DRDevice): boolean;

  setupPanelDetermineBestDeviceOfAOrB(aPanel: DRSetupPanel, deviceA: DRDevice, device: DRDevice): DRDevice;

  setupPanelDeviceSelectionChanged(aNotification: NSNotification): void;

  setupPanelShouldHandleMediaReservations(aPanel: DRSetupPanel): boolean;

  setupPanelDeviceContainsSuitableMediaPromptString(aPanel: DRSetupPanel, device: DRDevice, prompt: interop.PointerConvertible): boolean;

  burnProgressPanelWillBegin(aNotification: NSNotification): void;

  burnProgressPanelDidFinish(aNotification: NSNotification): void;

  burnProgressPanelBurnDidFinish(theBurnPanel: DRBurnProgressPanel, burn: DRBurn): boolean;

  eraseProgressPanelWillBegin(aNotification: NSNotification): void;

  eraseProgressPanelDidFinish(aNotification: NSNotification): void;

  eraseProgressPanelEraseDidFinish(theErasePanel: DREraseProgressPanel, erase: DRErase): boolean;

  static webScriptNameForSelector(selector: string): string;

  static isSelectorExcludedFromWebScript(selector: string): boolean;

  static webScriptNameForKey(name: string): string;

  static isKeyExcludedFromWebScript(name: string): boolean;

  invokeUndefinedMethodFromWebScriptWithArguments(name: string, arguments$: NSArray<interop.Object> | Array<interop.Object>): interop.Object;

  invokeDefaultMethodWithArguments(arguments$: NSArray<interop.Object> | Array<interop.Object>): interop.Object;

  finalizeForWebScript(): void;

  webPlugInInitialize(): void;

  webPlugInStart(): void;

  webPlugInStop(): void;

  webPlugInDestroy(): void;

  webPlugInSetIsSelected(isSelected: boolean): void;

  readonly objectForWebScript: interop.Object;

  webPlugInMainResourceDidReceiveResponse(response: NSURLResponse): void;

  webPlugInMainResourceDidReceiveData(data: NSData): void;

  webPlugInMainResourceDidFailWithError(error: NSError): void;

  webPlugInMainResourceDidFinishLoading(): void;

  webPlugInContainerLoadRequestInFrame(request: NSURLRequest, target: string): void;

  webPlugInContainerShowStatus(message: string): void;

  readonly webPlugInContainerSelectionColor: NSColor;

  readonly webFrame: WebFrame;

  actionProperty(): string;

  titleForPersonIdentifier(person: ABPerson, identifier: string): string;

  performActionForPersonIdentifier(person: ABPerson, identifier: string): void;

  shouldEnableActionForPersonIdentifier(person: ABPerson, identifier: string): boolean;

  browserAccessibilityCurrentStatus: string;

  browserAccessibilitySortDirection: string;

  browserAccessibilityRoleDescription: string;

  browserAccessibilityIsRequired: boolean;

  browserAccessibilityPressedState: interop.Enum<typeof BEAccessibilityPressedState>;

  browserAccessibilityHasDOMFocus: boolean;

  browserAccessibilityContainerType: interop.Enum<typeof BEAccessibilityContainerType>;

  browserAccessibilitySelectedTextRange(): _NSRange;

  browserAccessibilitySetSelectedTextRange(range: _NSRange): void;

  browserAccessibilityValueInRange(range: _NSRange): string;

  browserAccessibilityAttributedValueInRange(range: _NSRange): NSAttributedString;

  browserAccessibilityInsertTextAtCursor(text: string): void;

  browserAccessibilityDeleteTextAtCursor(numberOfCharacters: number): void;

  accessibilityLineEndPositionFromCurrentSelection(): number;

  accessibilityLineStartPositionFromCurrentSelection(): number;

  accessibilityLineRangeForPosition(position: number): _NSRange;

  setBrowserAccessibilityCurrentStatus(browserAccessibilityCurrentStatus: string | null): void;

  setBrowserAccessibilitySortDirection(browserAccessibilitySortDirection: string | null): void;

  setBrowserAccessibilityRoleDescription(browserAccessibilityRoleDescription: string | null): void;

  setBrowserAccessibilityIsRequired(browserAccessibilityIsRequired: boolean): void;

  setBrowserAccessibilityPressedState(browserAccessibilityPressedState: interop.Enum<typeof BEAccessibilityPressedState>): void;

  setBrowserAccessibilityHasDOMFocus(browserAccessibilityHasDOMFocus: boolean): void;

  setBrowserAccessibilityContainerType(browserAccessibilityContainerType: interop.Enum<typeof BEAccessibilityContainerType>): void;

  getPixelBufferPixelFormat(pixelFormatOut: interop.PointerConvertible): void;

  renderIntoPixelBufferForTime(buffer: interop.Object, timeStamp: interop.PointerConvertible): boolean;

  getOpenGLBufferContextPixelFormat(contextOut: interop.PointerConvertible, pixelFormatOut: interop.PointerConvertible): void;

  renderIntoOpenGLBufferOnScreenForTime(buffer: interop.Object, screenInOut: interop.PointerConvertible, timeStamp: interop.PointerConvertible): boolean;

  inputTextKeyModifiersClient(string: string, keyCode: number, flags: number, sender: interop.Object): boolean;

  inputTextClient(string: string, sender: interop.Object): boolean;

  handleEventClient(event: NSEvent, sender: interop.Object): boolean;

  didCommandBySelectorClient(aSelector: string, sender: interop.Object): boolean;

  composedString(sender: interop.Object): interop.Object;

  originalString(sender: interop.Object): NSAttributedString;

  commitComposition(sender: interop.Object): void;

  readonly candidates: NSArray;

  isEqual(object: interop.Object): boolean;

  readonly hash: number;

  readonly superclass: interop.Object;

  class(): interop.Object;

  self(): this;

  performSelector(aSelector: string): interop.Object;

  performSelectorWithObject(aSelector: string, object: interop.Object): interop.Object;

  performSelectorWithObjectWithObject(aSelector: string, object1: interop.Object, object2: interop.Object): interop.Object;

  readonly isProxy: boolean;

  isKindOfClass(aClass: interop.Object): boolean;

  isMemberOfClass(aClass: interop.Object): boolean;

  conformsToProtocol(aProtocol: interop.PointerConvertible): boolean;

  respondsToSelector(aSelector: string): boolean;

  retain(): this;

  release(): void;

  autorelease(): this;

  retainCount(): number;

  readonly zone: interop.Pointer;

  readonly description: string;

  readonly debugDescription: string;
}

declare class OS_os_workgroup_parallel extends OS_os_workgroup implements OS_os_workgroup_parallelProtocol {
  init(): this;
}

